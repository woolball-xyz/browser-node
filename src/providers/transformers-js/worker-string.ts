const workerCode = "\"use strict\";\n(() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n  var __require = /* @__PURE__ */ ((x) => typeof require !== \"undefined\" ? require : typeof Proxy !== \"undefined\" ? new Proxy(x, {\n    get: (a, b) => (typeof require !== \"undefined\" ? require : a)[b]\n  }) : x)(function(x) {\n    if (typeof require !== \"undefined\") return require.apply(this, arguments);\n    throw Error('Dynamic require of \"' + x + '\" is not supported');\n  });\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  // node_modules/onnxruntime-common/dist/esm/backend-impl.js\n  var backends, backendsSortedByPriority, registerBackend, tryResolveAndInitializeBackend, resolveBackendAndExecutionProviders;\n  var init_backend_impl = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/backend-impl.js\"() {\n      backends = /* @__PURE__ */ new Map();\n      backendsSortedByPriority = [];\n      registerBackend = (name, backend, priority) => {\n        if (backend && typeof backend.init === \"function\" && typeof backend.createInferenceSessionHandler === \"function\") {\n          const currentBackend = backends.get(name);\n          if (currentBackend === void 0) {\n            backends.set(name, { backend, priority });\n          } else if (currentBackend.priority > priority) {\n            return;\n          } else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n              throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n          }\n          if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n              backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i2 = 0; i2 < backendsSortedByPriority.length; i2++) {\n              if (backends.get(backendsSortedByPriority[i2]).priority <= priority) {\n                backendsSortedByPriority.splice(i2, 0, name);\n                return;\n              }\n            }\n            backendsSortedByPriority.push(name);\n          }\n          return;\n        }\n        throw new TypeError(\"not a valid backend\");\n      };\n      tryResolveAndInitializeBackend = async (backendName) => {\n        const backendInfo = backends.get(backendName);\n        if (!backendInfo) {\n          return \"backend not found.\";\n        }\n        if (backendInfo.initialized) {\n          return backendInfo.backend;\n        } else if (backendInfo.aborted) {\n          return backendInfo.error;\n        } else {\n          const isInitializing = !!backendInfo.initPromise;\n          try {\n            if (!isInitializing) {\n              backendInfo.initPromise = backendInfo.backend.init(backendName);\n            }\n            await backendInfo.initPromise;\n            backendInfo.initialized = true;\n            return backendInfo.backend;\n          } catch (e) {\n            if (!isInitializing) {\n              backendInfo.error = `${e}`;\n              backendInfo.aborted = true;\n            }\n            return backendInfo.error;\n          } finally {\n            delete backendInfo.initPromise;\n          }\n        }\n      };\n      resolveBackendAndExecutionProviders = async (options) => {\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map((i) => typeof i === \"string\" ? i : i.name);\n        const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n        let backend;\n        const errors = [];\n        const availableBackendNames = /* @__PURE__ */ new Set();\n        for (const backendName of backendNames) {\n          const resolveResult = await tryResolveAndInitializeBackend(backendName);\n          if (typeof resolveResult === \"string\") {\n            errors.push({ name: backendName, err: resolveResult });\n          } else {\n            if (!backend) {\n              backend = resolveResult;\n            }\n            if (backend === resolveResult) {\n              availableBackendNames.add(backendName);\n            }\n          }\n        }\n        if (!backend) {\n          throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(\", \")}`);\n        }\n        for (const { name, err } of errors) {\n          if (backendHints.includes(name)) {\n            console.warn(`removing requested execution provider \"${name}\" from session options because it is not available: ${err}`);\n          }\n        }\n        const filteredEps = eps.filter((i) => availableBackendNames.has(typeof i === \"string\" ? i : i.name));\n        return [\n          backend,\n          new Proxy(options, {\n            get: (target, prop) => {\n              if (prop === \"executionProviders\") {\n                return filteredEps;\n              }\n              return Reflect.get(target, prop);\n            }\n          })\n        ];\n      };\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/backend.js\n  var init_backend = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/backend.js\"() {\n      init_backend_impl();\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/version.js\n  var version;\n  var init_version = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/version.js\"() {\n      version = \"1.21.0\";\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/env-impl.js\n  var logLevelValue, env;\n  var init_env_impl = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/env-impl.js\"() {\n      init_version();\n      logLevelValue = \"warning\";\n      env = {\n        wasm: {},\n        webgl: {},\n        webgpu: {},\n        versions: { common: version },\n        set logLevel(value) {\n          if (value === void 0) {\n            return;\n          }\n          if (typeof value !== \"string\" || [\"verbose\", \"info\", \"warning\", \"error\", \"fatal\"].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n          }\n          logLevelValue = value;\n        },\n        get logLevel() {\n          return logLevelValue;\n        }\n      };\n      Object.defineProperty(env, \"logLevel\", { enumerable: true });\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/env.js\n  var env2;\n  var init_env = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/env.js\"() {\n      init_env_impl();\n      env2 = env;\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js\n  var tensorToDataURL, tensorToImageData;\n  var init_tensor_conversion_impl = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js\"() {\n      tensorToDataURL = (tensor, options) => {\n        const canvas = typeof document !== \"undefined\" ? document.createElement(\"canvas\") : new OffscreenCanvas(1, 1);\n        canvas.width = tensor.dims[3];\n        canvas.height = tensor.dims[2];\n        const pixels2DContext = canvas.getContext(\"2d\");\n        if (pixels2DContext != null) {\n          let width;\n          let height;\n          if (options?.tensorLayout !== void 0 && options.tensorLayout === \"NHWC\") {\n            width = tensor.dims[2];\n            height = tensor.dims[3];\n          } else {\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n          }\n          const inputformat = options?.format !== void 0 ? options.format : \"RGB\";\n          const norm = options?.norm;\n          let normMean;\n          let normBias;\n          if (norm === void 0 || norm.mean === void 0) {\n            normMean = [255, 255, 255, 255];\n          } else {\n            if (typeof norm.mean === \"number\") {\n              normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            } else {\n              normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n              if (norm.mean[3] !== void 0) {\n                normMean[3] = norm.mean[3];\n              }\n            }\n          }\n          if (norm === void 0 || norm.bias === void 0) {\n            normBias = [0, 0, 0, 0];\n          } else {\n            if (typeof norm.bias === \"number\") {\n              normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            } else {\n              normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n              if (norm.bias[3] !== void 0) {\n                normBias[3] = norm.bias[3];\n              }\n            }\n          }\n          const stride = height * width;\n          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n          if (inputformat === \"RGBA\") {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n          } else if (inputformat === \"RGB\") {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n          } else if (inputformat === \"RBG\") {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n          }\n          for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n              const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];\n              const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];\n              const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];\n              const A = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];\n              pixels2DContext.fillStyle = \"rgba(\" + R + \",\" + G + \",\" + B + \",\" + A + \")\";\n              pixels2DContext.fillRect(j, i, 1, 1);\n            }\n          }\n          if (\"toDataURL\" in canvas) {\n            return canvas.toDataURL();\n          } else {\n            throw new Error(\"toDataURL is not supported\");\n          }\n        } else {\n          throw new Error(\"Can not access image data\");\n        }\n      };\n      tensorToImageData = (tensor, options) => {\n        const pixels2DContext = typeof document !== \"undefined\" ? document.createElement(\"canvas\").getContext(\"2d\") : new OffscreenCanvas(1, 1).getContext(\"2d\");\n        let image;\n        if (pixels2DContext != null) {\n          let width;\n          let height;\n          let channels;\n          if (options?.tensorLayout !== void 0 && options.tensorLayout === \"NHWC\") {\n            width = tensor.dims[2];\n            height = tensor.dims[1];\n            channels = tensor.dims[3];\n          } else {\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n            channels = tensor.dims[1];\n          }\n          const inputformat = options !== void 0 ? options.format !== void 0 ? options.format : \"RGB\" : \"RGB\";\n          const norm = options?.norm;\n          let normMean;\n          let normBias;\n          if (norm === void 0 || norm.mean === void 0) {\n            normMean = [255, 255, 255, 255];\n          } else {\n            if (typeof norm.mean === \"number\") {\n              normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            } else {\n              normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n              if (norm.mean[3] !== void 0) {\n                normMean[3] = norm.mean[3];\n              }\n            }\n          }\n          if (norm === void 0 || norm.bias === void 0) {\n            normBias = [0, 0, 0, 0];\n          } else {\n            if (typeof norm.bias === \"number\") {\n              normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            } else {\n              normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n              if (norm.bias[3] !== void 0) {\n                normBias[3] = norm.bias[3];\n              }\n            }\n          }\n          const stride = height * width;\n          if (options !== void 0) {\n            if (options.format !== void 0 && channels === 4 && options.format !== \"RGBA\" || channels === 3 && options.format !== \"RGB\" && options.format !== \"BGR\") {\n              throw new Error(\"Tensor format doesn't match input tensor dims\");\n            }\n          }\n          const step = 4;\n          let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n          if (inputformat === \"RGBA\") {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n          } else if (inputformat === \"RGB\") {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n          } else if (inputformat === \"RBG\") {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n          }\n          image = pixels2DContext.createImageData(width, height);\n          for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];\n            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];\n            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];\n            image.data[aImagePointer] = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];\n          }\n        } else {\n          throw new Error(\"Can not access image data\");\n        }\n        return image;\n      };\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js\n  var bufferToTensor, tensorFromImage, tensorFromTexture, tensorFromGpuBuffer, tensorFromMLTensor, tensorFromPinnedBuffer;\n  var init_tensor_factory_impl = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js\"() {\n      init_tensor_impl();\n      bufferToTensor = (buffer, options) => {\n        if (buffer === void 0) {\n          throw new Error(\"Image buffer must be defined\");\n        }\n        if (options.height === void 0 || options.width === void 0) {\n          throw new Error(\"Image height and width must be defined\");\n        }\n        if (options.tensorLayout === \"NHWC\") {\n          throw new Error(\"NHWC Tensor layout is not supported yet\");\n        }\n        const { height, width } = options;\n        const norm = options.norm ?? { mean: 255, bias: 0 };\n        let normMean;\n        let normBias;\n        if (typeof norm.mean === \"number\") {\n          normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n        } else {\n          normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];\n        }\n        if (typeof norm.bias === \"number\") {\n          normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n        } else {\n          normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];\n        }\n        const inputformat = options.format !== void 0 ? options.format : \"RGBA\";\n        const outputformat = options.tensorFormat !== void 0 ? options.tensorFormat !== void 0 ? options.tensorFormat : \"RGB\" : \"RGB\";\n        const stride = height * width;\n        const float32Data = outputformat === \"RGBA\" ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        if (inputformat === \"RGB\") {\n          step = 3;\n          rImagePointer = 0;\n          gImagePointer = 1;\n          bImagePointer = 2;\n          aImagePointer = -1;\n        }\n        if (outputformat === \"RGBA\") {\n          aTensorPointer = stride * 3;\n        } else if (outputformat === \"RBG\") {\n          rTensorPointer = 0;\n          bTensorPointer = stride;\n          gTensorPointer = stride * 2;\n        } else if (outputformat === \"BGR\") {\n          bTensorPointer = 0;\n          gTensorPointer = stride;\n          rTensorPointer = stride * 2;\n        }\n        for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n          float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n          float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n          float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n          if (aTensorPointer !== -1 && aImagePointer !== -1) {\n            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n          }\n        }\n        const outputTensor = outputformat === \"RGBA\" ? new Tensor(\"float32\", float32Data, [1, 4, height, width]) : new Tensor(\"float32\", float32Data, [1, 3, height, width]);\n        return outputTensor;\n      };\n      tensorFromImage = async (image, options) => {\n        const isHTMLImageEle = typeof HTMLImageElement !== \"undefined\" && image instanceof HTMLImageElement;\n        const isImageDataEle = typeof ImageData !== \"undefined\" && image instanceof ImageData;\n        const isImageBitmap = typeof ImageBitmap !== \"undefined\" && image instanceof ImageBitmap;\n        const isString = typeof image === \"string\";\n        let data;\n        let bufferToTensorOptions = options ?? {};\n        const createCanvas = () => {\n          if (typeof document !== \"undefined\") {\n            return document.createElement(\"canvas\");\n          } else if (typeof OffscreenCanvas !== \"undefined\") {\n            return new OffscreenCanvas(1, 1);\n          } else {\n            throw new Error(\"Canvas is not supported\");\n          }\n        };\n        const createCanvasContext = (canvas) => {\n          if (typeof HTMLCanvasElement !== \"undefined\" && canvas instanceof HTMLCanvasElement) {\n            return canvas.getContext(\"2d\");\n          } else if (canvas instanceof OffscreenCanvas) {\n            return canvas.getContext(\"2d\");\n          } else {\n            return null;\n          }\n        };\n        if (isHTMLImageEle) {\n          const canvas = createCanvas();\n          canvas.width = image.width;\n          canvas.height = image.height;\n          const pixels2DContext = createCanvasContext(canvas);\n          if (pixels2DContext != null) {\n            let height = image.height;\n            let width = image.width;\n            if (options !== void 0 && options.resizedHeight !== void 0 && options.resizedWidth !== void 0) {\n              height = options.resizedHeight;\n              width = options.resizedWidth;\n            }\n            if (options !== void 0) {\n              bufferToTensorOptions = options;\n              if (options.tensorFormat !== void 0) {\n                throw new Error(\"Image input config format must be RGBA for HTMLImageElement\");\n              } else {\n                bufferToTensorOptions.tensorFormat = \"RGBA\";\n              }\n              bufferToTensorOptions.height = height;\n              bufferToTensorOptions.width = width;\n            } else {\n              bufferToTensorOptions.tensorFormat = \"RGBA\";\n              bufferToTensorOptions.height = height;\n              bufferToTensorOptions.width = width;\n            }\n            pixels2DContext.drawImage(image, 0, 0);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n          } else {\n            throw new Error(\"Can not access image data\");\n          }\n        } else if (isImageDataEle) {\n          let height;\n          let width;\n          if (options !== void 0 && options.resizedWidth !== void 0 && options.resizedHeight !== void 0) {\n            height = options.resizedHeight;\n            width = options.resizedWidth;\n          } else {\n            height = image.height;\n            width = image.width;\n          }\n          if (options !== void 0) {\n            bufferToTensorOptions = options;\n          }\n          bufferToTensorOptions.format = \"RGBA\";\n          bufferToTensorOptions.height = height;\n          bufferToTensorOptions.width = width;\n          if (options !== void 0) {\n            const tempCanvas = createCanvas();\n            tempCanvas.width = width;\n            tempCanvas.height = height;\n            const pixels2DContext = createCanvasContext(tempCanvas);\n            if (pixels2DContext != null) {\n              pixels2DContext.putImageData(image, 0, 0);\n              data = pixels2DContext.getImageData(0, 0, width, height).data;\n            } else {\n              throw new Error(\"Can not access image data\");\n            }\n          } else {\n            data = image.data;\n          }\n        } else if (isImageBitmap) {\n          if (options === void 0) {\n            throw new Error(\"Please provide image config with format for Imagebitmap\");\n          }\n          const canvas = createCanvas();\n          canvas.width = image.width;\n          canvas.height = image.height;\n          const pixels2DContext = createCanvasContext(canvas);\n          if (pixels2DContext != null) {\n            const height = image.height;\n            const width = image.width;\n            pixels2DContext.drawImage(image, 0, 0, width, height);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n            bufferToTensorOptions.height = height;\n            bufferToTensorOptions.width = width;\n            return bufferToTensor(data, bufferToTensorOptions);\n          } else {\n            throw new Error(\"Can not access image data\");\n          }\n        } else if (isString) {\n          return new Promise((resolve, reject) => {\n            const canvas = createCanvas();\n            const context = createCanvasContext(canvas);\n            if (!image || !context) {\n              return reject();\n            }\n            const newImage = new Image();\n            newImage.crossOrigin = \"Anonymous\";\n            newImage.src = image;\n            newImage.onload = () => {\n              canvas.width = newImage.width;\n              canvas.height = newImage.height;\n              context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n              const img = context.getImageData(0, 0, canvas.width, canvas.height);\n              bufferToTensorOptions.height = canvas.height;\n              bufferToTensorOptions.width = canvas.width;\n              resolve(bufferToTensor(img.data, bufferToTensorOptions));\n            };\n          });\n        } else {\n          throw new Error(\"Input data provided is not supported - aborted tensor creation\");\n        }\n        if (data !== void 0) {\n          return bufferToTensor(data, bufferToTensorOptions);\n        } else {\n          throw new Error(\"Input data provided is not supported - aborted tensor creation\");\n        }\n      };\n      tensorFromTexture = (texture, options) => {\n        const { width, height, download, dispose } = options;\n        const dims = [1, height, width, 4];\n        return new Tensor({ location: \"texture\", type: \"float32\", texture, dims, download, dispose });\n      };\n      tensorFromGpuBuffer = (gpuBuffer, options) => {\n        const { dataType, dims, download, dispose } = options;\n        return new Tensor({ location: \"gpu-buffer\", type: dataType ?? \"float32\", gpuBuffer, dims, download, dispose });\n      };\n      tensorFromMLTensor = (mlTensor, options) => {\n        const { dataType, dims, download, dispose } = options;\n        return new Tensor({ location: \"ml-tensor\", type: dataType ?? \"float32\", mlTensor, dims, download, dispose });\n      };\n      tensorFromPinnedBuffer = (type, buffer, dims) => new Tensor({ location: \"cpu-pinned\", type, data: buffer, dims: dims ?? [buffer.length] });\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js\n  var NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, isTypedArrayChecked, checkTypedArray;\n  var init_tensor_impl_type_mapping = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js\"() {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = /* @__PURE__ */ new Map([\n        [\"float32\", Float32Array],\n        [\"uint8\", Uint8Array],\n        [\"int8\", Int8Array],\n        [\"uint16\", Uint16Array],\n        [\"int16\", Int16Array],\n        [\"int32\", Int32Array],\n        [\"bool\", Uint8Array],\n        [\"float64\", Float64Array],\n        [\"uint32\", Uint32Array],\n        [\"int4\", Uint8Array],\n        [\"uint4\", Uint8Array]\n      ]);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = /* @__PURE__ */ new Map([\n        [Float32Array, \"float32\"],\n        [Uint8Array, \"uint8\"],\n        [Int8Array, \"int8\"],\n        [Uint16Array, \"uint16\"],\n        [Int16Array, \"int16\"],\n        [Int32Array, \"int32\"],\n        [Float64Array, \"float64\"],\n        [Uint32Array, \"uint32\"]\n      ]);\n      isTypedArrayChecked = false;\n      checkTypedArray = () => {\n        if (!isTypedArrayChecked) {\n          isTypedArrayChecked = true;\n          const isBigInt64ArrayAvailable = typeof BigInt64Array !== \"undefined\" && BigInt64Array.from;\n          const isBigUint64ArrayAvailable = typeof BigUint64Array !== \"undefined\" && BigUint64Array.from;\n          const Float16Array2 = globalThis.Float16Array;\n          const isFloat16ArrayAvailable = typeof Float16Array2 !== \"undefined\" && Float16Array2.from;\n          if (isBigInt64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set(\"int64\", BigInt64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, \"int64\");\n          }\n          if (isBigUint64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set(\"uint64\", BigUint64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, \"uint64\");\n          }\n          if (isFloat16ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set(\"float16\", Float16Array2);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(Float16Array2, \"float16\");\n          } else {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set(\"float16\", Uint16Array);\n          }\n        }\n      };\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js\n  var calculateSize, tensorReshape;\n  var init_tensor_utils_impl = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js\"() {\n      init_tensor_impl();\n      calculateSize = (dims) => {\n        let size = 1;\n        for (let i = 0; i < dims.length; i++) {\n          const dim = dims[i];\n          if (typeof dim !== \"number\" || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n          }\n          if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n          }\n          size *= dim;\n        }\n        return size;\n      };\n      tensorReshape = (tensor, dims) => {\n        switch (tensor.location) {\n          case \"cpu\":\n            return new Tensor(tensor.type, tensor.data, dims);\n          case \"cpu-pinned\":\n            return new Tensor({\n              location: \"cpu-pinned\",\n              data: tensor.data,\n              type: tensor.type,\n              dims\n            });\n          case \"texture\":\n            return new Tensor({\n              location: \"texture\",\n              texture: tensor.texture,\n              type: tensor.type,\n              dims\n            });\n          case \"gpu-buffer\":\n            return new Tensor({\n              location: \"gpu-buffer\",\n              gpuBuffer: tensor.gpuBuffer,\n              type: tensor.type,\n              dims\n            });\n          case \"ml-tensor\":\n            return new Tensor({\n              location: \"ml-tensor\",\n              mlTensor: tensor.mlTensor,\n              type: tensor.type,\n              dims\n            });\n          default:\n            throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);\n        }\n      };\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/tensor-impl.js\n  var Tensor;\n  var init_tensor_impl = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/tensor-impl.js\"() {\n      init_tensor_conversion_impl();\n      init_tensor_factory_impl();\n      init_tensor_impl_type_mapping();\n      init_tensor_utils_impl();\n      Tensor = class {\n        /**\n         * implementation.\n         */\n        constructor(arg0, arg1, arg2) {\n          checkTypedArray();\n          let type;\n          let dims;\n          if (typeof arg0 === \"object\" && \"location\" in arg0) {\n            this.dataLocation = arg0.location;\n            type = arg0.type;\n            dims = arg0.dims;\n            switch (arg0.location) {\n              case \"cpu-pinned\": {\n                const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);\n                if (!expectedTypedArrayConstructor) {\n                  throw new TypeError(`unsupported type \"${type}\" to create tensor from pinned buffer`);\n                }\n                if (!(arg0.data instanceof expectedTypedArrayConstructor)) {\n                  throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);\n                }\n                this.cpuData = arg0.data;\n                break;\n              }\n              case \"texture\": {\n                if (type !== \"float32\") {\n                  throw new TypeError(`unsupported type \"${type}\" to create tensor from texture`);\n                }\n                this.gpuTextureData = arg0.texture;\n                this.downloader = arg0.download;\n                this.disposer = arg0.dispose;\n                break;\n              }\n              case \"gpu-buffer\": {\n                if (type !== \"float32\" && type !== \"float16\" && type !== \"int32\" && type !== \"int64\" && type !== \"uint32\" && type !== \"uint8\" && type !== \"bool\" && type !== \"uint4\" && type !== \"int4\") {\n                  throw new TypeError(`unsupported type \"${type}\" to create tensor from gpu buffer`);\n                }\n                this.gpuBufferData = arg0.gpuBuffer;\n                this.downloader = arg0.download;\n                this.disposer = arg0.dispose;\n                break;\n              }\n              case \"ml-tensor\": {\n                if (type !== \"float32\" && type !== \"float16\" && type !== \"int32\" && type !== \"int64\" && type !== \"uint32\" && type !== \"uint64\" && type !== \"int8\" && type !== \"uint8\" && type !== \"bool\" && type !== \"uint4\" && type !== \"int4\") {\n                  throw new TypeError(`unsupported type \"${type}\" to create tensor from MLTensor`);\n                }\n                this.mlTensorData = arg0.mlTensor;\n                this.downloader = arg0.download;\n                this.disposer = arg0.dispose;\n                break;\n              }\n              default:\n                throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);\n            }\n          } else {\n            let data;\n            let maybeDims;\n            if (typeof arg0 === \"string\") {\n              type = arg0;\n              maybeDims = arg2;\n              if (arg0 === \"string\") {\n                if (!Array.isArray(arg1)) {\n                  throw new TypeError(\"A string tensor's data must be a string array.\");\n                }\n                data = arg1;\n              } else {\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === void 0) {\n                  throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                  if (arg0 === \"float16\" && typedArrayConstructor === Uint16Array || arg0 === \"uint4\" || arg0 === \"int4\") {\n                    throw new TypeError(`Creating a ${arg0} tensor from number array is not supported. Please use ${typedArrayConstructor.name} as data.`);\n                  } else if (arg0 === \"uint64\" || arg0 === \"int64\") {\n                    data = typedArrayConstructor.from(arg1, BigInt);\n                  } else {\n                    data = typedArrayConstructor.from(arg1);\n                  }\n                } else if (arg1 instanceof typedArrayConstructor) {\n                  data = arg1;\n                } else if (arg1 instanceof Uint8ClampedArray) {\n                  if (arg0 === \"uint8\") {\n                    data = Uint8Array.from(arg1);\n                  } else {\n                    throw new TypeError(`A Uint8ClampedArray tensor's data must be type of uint8`);\n                  }\n                } else if (arg0 === \"float16\" && arg1 instanceof Uint16Array && typedArrayConstructor !== Uint16Array) {\n                  data = new globalThis.Float16Array(arg1.buffer, arg1.byteOffset, arg1.length);\n                } else {\n                  throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n              }\n            } else {\n              maybeDims = arg1;\n              if (Array.isArray(arg0)) {\n                if (arg0.length === 0) {\n                  throw new TypeError(\"Tensor type cannot be inferred from an empty array.\");\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === \"string\") {\n                  type = \"string\";\n                  data = arg0;\n                } else if (firstElementType === \"boolean\") {\n                  type = \"bool\";\n                  data = Uint8Array.from(arg0);\n                } else {\n                  throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n              } else if (arg0 instanceof Uint8ClampedArray) {\n                type = \"uint8\";\n                data = Uint8Array.from(arg0);\n              } else {\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === void 0) {\n                  throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n              }\n            }\n            if (maybeDims === void 0) {\n              maybeDims = [data.length];\n            } else if (!Array.isArray(maybeDims)) {\n              throw new TypeError(\"A tensor's dims must be a number array\");\n            }\n            dims = maybeDims;\n            this.cpuData = data;\n            this.dataLocation = \"cpu\";\n          }\n          const size = calculateSize(dims);\n          if (this.cpuData && size !== this.cpuData.length) {\n            if ((type === \"uint4\" || type === \"int4\") && Math.ceil(size / 2) === this.cpuData.length) {\n            } else {\n              throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);\n            }\n          }\n          this.type = type;\n          this.dims = dims;\n          this.size = size;\n        }\n        // #endregion\n        // #region factory\n        static async fromImage(image, options) {\n          return tensorFromImage(image, options);\n        }\n        static fromTexture(texture, options) {\n          return tensorFromTexture(texture, options);\n        }\n        static fromGpuBuffer(gpuBuffer, options) {\n          return tensorFromGpuBuffer(gpuBuffer, options);\n        }\n        static fromMLTensor(mlTensor, options) {\n          return tensorFromMLTensor(mlTensor, options);\n        }\n        static fromPinnedBuffer(type, buffer, dims) {\n          return tensorFromPinnedBuffer(type, buffer, dims);\n        }\n        // #endregion\n        // #region conversions\n        toDataURL(options) {\n          return tensorToDataURL(this, options);\n        }\n        toImageData(options) {\n          return tensorToImageData(this, options);\n        }\n        // #endregion\n        // #region properties\n        get data() {\n          this.ensureValid();\n          if (!this.cpuData) {\n            throw new Error(\"The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.\");\n          }\n          return this.cpuData;\n        }\n        get location() {\n          return this.dataLocation;\n        }\n        get texture() {\n          this.ensureValid();\n          if (!this.gpuTextureData) {\n            throw new Error(\"The data is not stored as a WebGL texture.\");\n          }\n          return this.gpuTextureData;\n        }\n        get gpuBuffer() {\n          this.ensureValid();\n          if (!this.gpuBufferData) {\n            throw new Error(\"The data is not stored as a WebGPU buffer.\");\n          }\n          return this.gpuBufferData;\n        }\n        get mlTensor() {\n          this.ensureValid();\n          if (!this.mlTensorData) {\n            throw new Error(\"The data is not stored as a WebNN MLTensor.\");\n          }\n          return this.mlTensorData;\n        }\n        // #endregion\n        // #region methods\n        async getData(releaseData) {\n          this.ensureValid();\n          switch (this.dataLocation) {\n            case \"cpu\":\n            case \"cpu-pinned\":\n              return this.data;\n            case \"texture\":\n            case \"gpu-buffer\":\n            case \"ml-tensor\": {\n              if (!this.downloader) {\n                throw new Error(\"The current tensor is not created with a specified data downloader.\");\n              }\n              if (this.isDownloading) {\n                throw new Error(\"The current tensor is being downloaded.\");\n              }\n              try {\n                this.isDownloading = true;\n                const data = await this.downloader();\n                this.downloader = void 0;\n                this.dataLocation = \"cpu\";\n                this.cpuData = data;\n                if (releaseData && this.disposer) {\n                  this.disposer();\n                  this.disposer = void 0;\n                }\n                return data;\n              } finally {\n                this.isDownloading = false;\n              }\n            }\n            default:\n              throw new Error(`cannot get data from location: ${this.dataLocation}`);\n          }\n        }\n        dispose() {\n          if (this.isDownloading) {\n            throw new Error(\"The current tensor is being downloaded.\");\n          }\n          if (this.disposer) {\n            this.disposer();\n            this.disposer = void 0;\n          }\n          this.cpuData = void 0;\n          this.gpuTextureData = void 0;\n          this.gpuBufferData = void 0;\n          this.mlTensorData = void 0;\n          this.downloader = void 0;\n          this.isDownloading = void 0;\n          this.dataLocation = \"none\";\n        }\n        // #endregion\n        // #region tensor utilities\n        ensureValid() {\n          if (this.dataLocation === \"none\") {\n            throw new Error(\"The tensor is disposed.\");\n          }\n        }\n        reshape(dims) {\n          this.ensureValid();\n          if (this.downloader || this.disposer) {\n            throw new Error(\"Cannot reshape a tensor that owns GPU resource.\");\n          }\n          return tensorReshape(this, dims);\n        }\n      };\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/tensor.js\n  var Tensor2;\n  var init_tensor = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/tensor.js\"() {\n      init_tensor_impl();\n      Tensor2 = Tensor;\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/trace.js\n  var TRACE, TRACE_FUNC, TRACE_FUNC_BEGIN, TRACE_FUNC_END;\n  var init_trace = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/trace.js\"() {\n      init_env_impl();\n      TRACE = (deviceType, label) => {\n        if (typeof env.trace === \"undefined\" ? !env.wasm.trace : !env.trace) {\n          return;\n        }\n        console.timeStamp(`${deviceType}::ORT::${label}`);\n      };\n      TRACE_FUNC = (msg, extraMsg) => {\n        const stack = new Error().stack?.split(/\\r\\n|\\r|\\n/g) || [];\n        let hasTraceFunc = false;\n        for (let i = 0; i < stack.length; i++) {\n          if (hasTraceFunc && !stack[i].includes(\"TRACE_FUNC\")) {\n            let label = `FUNC_${msg}::${stack[i].trim().split(\" \")[1]}`;\n            if (extraMsg) {\n              label += `::${extraMsg}`;\n            }\n            TRACE(\"CPU\", label);\n            return;\n          }\n          if (stack[i].includes(\"TRACE_FUNC\")) {\n            hasTraceFunc = true;\n          }\n        }\n      };\n      TRACE_FUNC_BEGIN = (extraMsg) => {\n        if (typeof env.trace === \"undefined\" ? !env.wasm.trace : !env.trace) {\n          return;\n        }\n        TRACE_FUNC(\"BEGIN\", extraMsg);\n      };\n      TRACE_FUNC_END = (extraMsg) => {\n        if (typeof env.trace === \"undefined\" ? !env.wasm.trace : !env.trace) {\n          return;\n        }\n        TRACE_FUNC(\"END\", extraMsg);\n      };\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/inference-session-impl.js\n  var InferenceSession;\n  var init_inference_session_impl = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/inference-session-impl.js\"() {\n      init_backend_impl();\n      init_tensor();\n      init_trace();\n      InferenceSession = class _InferenceSession {\n        constructor(handler) {\n          this.handler = handler;\n        }\n        async run(feeds, arg1, arg2) {\n          TRACE_FUNC_BEGIN();\n          const fetches = {};\n          let options = {};\n          if (typeof feeds !== \"object\" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {\n            throw new TypeError(\"'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.\");\n          }\n          let isFetchesEmpty = true;\n          if (typeof arg1 === \"object\") {\n            if (arg1 === null) {\n              throw new TypeError(\"Unexpected argument[1]: cannot be null.\");\n            }\n            if (arg1 instanceof Tensor2) {\n              throw new TypeError(\"'fetches' cannot be a Tensor\");\n            }\n            if (Array.isArray(arg1)) {\n              if (arg1.length === 0) {\n                throw new TypeError(\"'fetches' cannot be an empty array.\");\n              }\n              isFetchesEmpty = false;\n              for (const name of arg1) {\n                if (typeof name !== \"string\") {\n                  throw new TypeError(\"'fetches' must be a string array or an object.\");\n                }\n                if (this.outputNames.indexOf(name) === -1) {\n                  throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                }\n                fetches[name] = null;\n              }\n              if (typeof arg2 === \"object\" && arg2 !== null) {\n                options = arg2;\n              } else if (typeof arg2 !== \"undefined\") {\n                throw new TypeError(\"'options' must be an object.\");\n              }\n            } else {\n              let isFetches = false;\n              const arg1Keys = Object.getOwnPropertyNames(arg1);\n              for (const name of this.outputNames) {\n                if (arg1Keys.indexOf(name) !== -1) {\n                  const v = arg1[name];\n                  if (v === null || v instanceof Tensor2) {\n                    isFetches = true;\n                    isFetchesEmpty = false;\n                    fetches[name] = v;\n                  }\n                }\n              }\n              if (isFetches) {\n                if (typeof arg2 === \"object\" && arg2 !== null) {\n                  options = arg2;\n                } else if (typeof arg2 !== \"undefined\") {\n                  throw new TypeError(\"'options' must be an object.\");\n                }\n              } else {\n                options = arg1;\n              }\n            }\n          } else if (typeof arg1 !== \"undefined\") {\n            throw new TypeError(\"Unexpected argument[1]: must be 'fetches' or 'options'.\");\n          }\n          for (const name of this.inputNames) {\n            if (typeof feeds[name] === \"undefined\") {\n              throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n          }\n          if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n              fetches[name] = null;\n            }\n          }\n          const results = await this.handler.run(feeds, fetches, options);\n          const returnValue = {};\n          for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n              const result = results[key];\n              if (result instanceof Tensor2) {\n                returnValue[key] = result;\n              } else {\n                returnValue[key] = new Tensor2(result.type, result.data, result.dims);\n              }\n            }\n          }\n          TRACE_FUNC_END();\n          return returnValue;\n        }\n        async release() {\n          return this.handler.dispose();\n        }\n        static async create(arg0, arg1, arg2, arg3) {\n          TRACE_FUNC_BEGIN();\n          let filePathOrUint8Array;\n          let options = {};\n          if (typeof arg0 === \"string\") {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === \"object\" && arg1 !== null) {\n              options = arg1;\n            } else if (typeof arg1 !== \"undefined\") {\n              throw new TypeError(\"'options' must be an object.\");\n            }\n          } else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === \"object\" && arg1 !== null) {\n              options = arg1;\n            } else if (typeof arg1 !== \"undefined\") {\n              throw new TypeError(\"'options' must be an object.\");\n            }\n          } else if (arg0 instanceof ArrayBuffer || typeof SharedArrayBuffer !== \"undefined\" && arg0 instanceof SharedArrayBuffer) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === \"object\" && arg1 !== null) {\n              options = arg1;\n            } else if (typeof arg1 === \"number\") {\n              byteOffset = arg1;\n              if (!Number.isSafeInteger(byteOffset)) {\n                throw new RangeError(\"'byteOffset' must be an integer.\");\n              }\n              if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n              }\n              byteLength = arg0.byteLength - byteOffset;\n              if (typeof arg2 === \"number\") {\n                byteLength = arg2;\n                if (!Number.isSafeInteger(byteLength)) {\n                  throw new RangeError(\"'byteLength' must be an integer.\");\n                }\n                if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                  throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                }\n                if (typeof arg3 === \"object\" && arg3 !== null) {\n                  options = arg3;\n                } else if (typeof arg3 !== \"undefined\") {\n                  throw new TypeError(\"'options' must be an object.\");\n                }\n              } else if (typeof arg2 !== \"undefined\") {\n                throw new TypeError(\"'byteLength' must be a number.\");\n              }\n            } else if (typeof arg1 !== \"undefined\") {\n              throw new TypeError(\"'options' must be an object.\");\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n          } else {\n            throw new TypeError(\"Unexpected argument[0]: must be 'path' or 'buffer'.\");\n          }\n          const [backend, optionsWithValidatedEPs] = await resolveBackendAndExecutionProviders(options);\n          const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, optionsWithValidatedEPs);\n          TRACE_FUNC_END();\n          return new _InferenceSession(handler);\n        }\n        startProfiling() {\n          this.handler.startProfiling();\n        }\n        endProfiling() {\n          this.handler.endProfiling();\n        }\n        get inputNames() {\n          return this.handler.inputNames;\n        }\n        get outputNames() {\n          return this.handler.outputNames;\n        }\n      };\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/inference-session.js\n  var InferenceSession2;\n  var init_inference_session = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/inference-session.js\"() {\n      init_inference_session_impl();\n      InferenceSession2 = InferenceSession;\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/tensor-conversion.js\n  var init_tensor_conversion = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/tensor-conversion.js\"() {\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/tensor-factory.js\n  var init_tensor_factory = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/tensor-factory.js\"() {\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/onnx-model.js\n  var init_onnx_model = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/onnx-model.js\"() {\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/onnx-value.js\n  var init_onnx_value = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/onnx-value.js\"() {\n    }\n  });\n\n  // node_modules/onnxruntime-common/dist/esm/index.js\n  var esm_exports = {};\n  __export(esm_exports, {\n    InferenceSession: () => InferenceSession2,\n    TRACE: () => TRACE,\n    TRACE_FUNC_BEGIN: () => TRACE_FUNC_BEGIN,\n    TRACE_FUNC_END: () => TRACE_FUNC_END,\n    Tensor: () => Tensor2,\n    env: () => env2,\n    registerBackend: () => registerBackend\n  });\n  var init_esm = __esm({\n    \"node_modules/onnxruntime-common/dist/esm/index.js\"() {\n      init_backend();\n      init_env();\n      init_inference_session();\n      init_tensor();\n      init_tensor_conversion();\n      init_tensor_factory();\n      init_trace();\n      init_onnx_model();\n      init_onnx_value();\n    }\n  });\n\n  // node_modules/onnxruntime-web/dist/ort.bundle.min.mjs\n  var ort_bundle_min_exports = {};\n  __export(ort_bundle_min_exports, {\n    InferenceSession: () => Gp,\n    TRACE: () => gr,\n    TRACE_FUNC_BEGIN: () => Re,\n    TRACE_FUNC_END: () => Oe,\n    Tensor: () => Ge,\n    default: () => IS,\n    env: () => ge,\n    registerBackend: () => $t\n  });\n  var import_meta, zn, Up, Np, Vp, On, U, Dt, Wp, Ft, fr, vt, $t, Lp, Fi, Bn, qi, ji, Ki, Zi, Me, Dn, ge, Qi, Yi, Xi, Ji, Mn, ea, ta, ra, na, oa, ia, xt, qt, aa, sa, ua, da, la, ca, Pe, hr, Ge, Rn, gr, pa, Re, Oe, Un, br, ma, Gp, fa, ha, ga, ba, ya, Nn, We, yr, $a, wa, va, Hp, xa, Ta, Wn, Sa, Fp, qp, Ia, Ea, Gn, jp, Ue, ka, Ln, Kp, Zp, Pa, Qp, Ca, za, Aa, Oa, _r, Hn, Fn, Ar, Ba, Yp, Xp, Jp, wr, fe, ht, Ne, Kt, pe, Er, Da, Ma, em, tm, rm, kr, nm, Ra, Ua, Mt, Ye, gt, Pr, Zt, zr, Or, qn, ee, Qt, jn, om, im, Na, Va, Br, am, se, Xe, Kn, Je, k, Tt, Dr, Wa, La, ne, Mr, Zn, Yn, Ha, sm, Ga, um, Fa, Rr, Ur, Qn, qa, ja, Xn, dm, Nr, Ka, Vr, Za, Jn, eo, lm, cm, Qa, ro, to, Xa, Ja, no, J, Se, It, io, be, Ae, N, ce, ao, Ct, He, F, Wr, P, M, es, Lr, oo, ts, ie, pm, rs, mm, fm, hm, gm, Ee, ns, os, st, bm, ym, _m, wm, vm, $m, xm, Sm, Tm, Im, et, is, as, ss, us, ds, ls, cs, ps, ms, fs, hs, tt, Cm, Hr, so, rt, Am, Em, km, Pm, zm, Om, Bm, Dm, Mm, Rm, nt, gs, bs, ys, _s, ws, vs, $s, xs, Ss, Ts, Gr, Is, Cs, As, uo, Es, Um, lo, Nm, Vm, Wm, Rt, Lm, ks, Fr, Gm, Hm, Fm, Ps, zs, qm, jm, Os, Bs, Km, me, Ds, Ms, Rs, Us, Ns, Vs, Ws, Ls, Gs, Zm, Hs, Fs, qs, js, Yt, Ks, qr, Zs, Qs, Ys, Xs, Js, eu, tu, ru, nu, ou, iu, au, su, uu, du, lu, cu, pu, co, po, mu, fu, hu, Qm, Ym, gu, jr, Xm, Jm, yu, _u, ef, tf, ot, wu, vu, $u, xu, Su, Tu, Iu, Cu, Au, Eu, ku, nf, of, af, sf, Pu, zu, Ou, Fe, qe, je, Kr, bt, Ie, Bu, Zr, Du, Mu, Xt, Qr, Yr, uf, df, mo, Ru, lf, fo, cf, Jt, Xr, pf, Uu, Nu, mf, Vu, Jr, ff, Wu, hf, Lu, Gu, Hu, Fu, qu, ju, gf, ho, bf, go, bo, Ku, yf, _f, yo, Zu, Qu, Yu, wf, vf, $f, Xu, Ju, xf, ed, Sf, td, rd, Tf, nd, od, id, If, Cf, Af, ad, sd, ud, _o, en, dd, Ef, kf, wo, vo, ld, Pf, cd, pd, md, zf, fd, Of, Bf, hd, gd, Df, bd, yd, Mf, Rf, _d, wd, vd, Uf, $d, xd, Sd, Nf, Vf, Td, Id, Cd, Wf, Lf, Ad, Ed, kd, Gf, Hf, Pd, zd, Od, ut, yt, Ut, Nt, Ff, qf, jf, Kf, Zf, Qf, Yf, Xf, Bd, Dd, Md, Be, th, Ud, Rd, rh, er, Nd, $o, nh, oh, ih, ah, xo, Vd, Wd, So, sh, tn, Ld, To, uh, dh, Gd, lh, Hd, Fd, qd, ch, ph, jd, Kd, mh, fh, Zd, Qd, hh, Yd, Xd, gh, bh, yh, Jd, el, tl, _h, wh, vh, $h, xh, Sh, Th, Ih, rl, nl, rn, ol, il, al, sl, Ch, Ah, ul, dl, ll, cl, pl, ml, fl, hl, gl, bl, yl, _l, wl, kh, Ph, vl, $l, xl, zh, Oh, Sl, Tl, Bh, Il, Cl, Dh, Al, El, kl, Mh, Rh, Uh, Pl, Nh, Vh, Wh, Lh, Gh, Hh, Fh, qh, zl, jh, Kh, Zh, Qh, Yh, Ol, Bl, Dl, Xh, Jh, Ml, Rl, eg, nn, tg, Ul, rg, ng, Nl, Vl, Wl, og, ig, Ll, Gl, Hl, Fl, ag, sg, ug, ql, jl, dg, lg, Kl, Zl, Ql, Yl, on, Xl, Jl, cg, pg, Io, Co, ec, tc, tr, Ao, mg, rc, fg, vr, $r, At, hg, nc, jt, xr, Sr, oc, Tr, Ir, Cr, Vn, Et, Le, rr, sn, un, an, Eo, ko, Vt, Wt, bg, ic, ac, sc, uc, dc, lc, cc, Po, pc, yg, dn, mc, hc, fc, ln, _g, gc, _a, IS;\n  var init_ort_bundle_min = __esm({\n    \"node_modules/onnxruntime-web/dist/ort.bundle.min.mjs\"() {\n      import_meta = {};\n      zn = Object.defineProperty;\n      Up = Object.getOwnPropertyDescriptor;\n      Np = Object.getOwnPropertyNames;\n      Vp = Object.prototype.hasOwnProperty;\n      On = ((e) => typeof __require < \"u\" ? __require : typeof Proxy < \"u\" ? new Proxy(e, { get: (t, r) => (typeof __require < \"u\" ? __require : t)[r] }) : e)(function(e) {\n        if (typeof __require < \"u\") return __require.apply(this, arguments);\n        throw Error('Dynamic require of \"' + e + '\" is not supported');\n      });\n      U = (e, t) => () => (e && (t = e(e = 0)), t);\n      Dt = (e, t) => {\n        for (var r in t) zn(e, r, { get: t[r], enumerable: true });\n      };\n      Wp = (e, t, r, n) => {\n        if (t && typeof t == \"object\" || typeof t == \"function\") for (let o of Np(t)) !Vp.call(e, o) && o !== r && zn(e, o, { get: () => t[o], enumerable: !(n = Up(t, o)) || n.enumerable });\n        return e;\n      };\n      Ft = (e) => Wp(zn({}, \"__esModule\", { value: true }), e);\n      Bn = U(() => {\n        \"use strict\";\n        fr = /* @__PURE__ */ new Map(), vt = [], $t = (e, t, r) => {\n          if (t && typeof t.init == \"function\" && typeof t.createInferenceSessionHandler == \"function\") {\n            let n = fr.get(e);\n            if (n === void 0) fr.set(e, { backend: t, priority: r });\n            else {\n              if (n.priority > r) return;\n              if (n.priority === r && n.backend !== t) throw new Error(`cannot register backend \"${e}\" using priority ${r}`);\n            }\n            if (r >= 0) {\n              let o = vt.indexOf(e);\n              o !== -1 && vt.splice(o, 1);\n              for (let i = 0; i < vt.length; i++) if (fr.get(vt[i]).priority <= r) {\n                vt.splice(i, 0, e);\n                return;\n              }\n              vt.push(e);\n            }\n            return;\n          }\n          throw new TypeError(\"not a valid backend\");\n        }, Lp = async (e) => {\n          let t = fr.get(e);\n          if (!t) return \"backend not found.\";\n          if (t.initialized) return t.backend;\n          if (t.aborted) return t.error;\n          {\n            let r = !!t.initPromise;\n            try {\n              return r || (t.initPromise = t.backend.init(e)), await t.initPromise, t.initialized = true, t.backend;\n            } catch (n) {\n              return r || (t.error = `${n}`, t.aborted = true), t.error;\n            } finally {\n              delete t.initPromise;\n            }\n          }\n        }, Fi = async (e) => {\n          let t = e.executionProviders || [], r = t.map((d) => typeof d == \"string\" ? d : d.name), n = r.length === 0 ? vt : r, o, i = [], a = /* @__PURE__ */ new Set();\n          for (let d of n) {\n            let c = await Lp(d);\n            typeof c == \"string\" ? i.push({ name: d, err: c }) : (o || (o = c), o === c && a.add(d));\n          }\n          if (!o) throw new Error(`no available backend found. ERR: ${i.map((d) => `[${d.name}] ${d.err}`).join(\", \")}`);\n          for (let { name: d, err: c } of i) r.includes(d) && console.warn(`removing requested execution provider \"${d}\" from session options because it is not available: ${c}`);\n          let u = t.filter((d) => a.has(typeof d == \"string\" ? d : d.name));\n          return [o, new Proxy(e, { get: (d, c) => c === \"executionProviders\" ? u : Reflect.get(d, c) })];\n        };\n      });\n      qi = U(() => {\n        \"use strict\";\n        Bn();\n      });\n      Ki = U(() => {\n        \"use strict\";\n        ji = \"1.22.0-dev.20250409-89f8206ba4\";\n      });\n      Dn = U(() => {\n        \"use strict\";\n        Ki();\n        Zi = \"warning\", Me = { wasm: {}, webgl: {}, webgpu: {}, versions: { common: ji }, set logLevel(e) {\n          if (e !== void 0) {\n            if (typeof e != \"string\" || [\"verbose\", \"info\", \"warning\", \"error\", \"fatal\"].indexOf(e) === -1) throw new Error(`Unsupported logging level: ${e}`);\n            Zi = e;\n          }\n        }, get logLevel() {\n          return Zi;\n        } };\n        Object.defineProperty(Me, \"logLevel\", { enumerable: true });\n      });\n      Qi = U(() => {\n        \"use strict\";\n        Dn();\n        ge = Me;\n      });\n      Ji = U(() => {\n        \"use strict\";\n        Yi = (e, t) => {\n          let r = typeof document < \"u\" ? document.createElement(\"canvas\") : new OffscreenCanvas(1, 1);\n          r.width = e.dims[3], r.height = e.dims[2];\n          let n = r.getContext(\"2d\");\n          if (n != null) {\n            let o, i;\n            t?.tensorLayout !== void 0 && t.tensorLayout === \"NHWC\" ? (o = e.dims[2], i = e.dims[3]) : (o = e.dims[3], i = e.dims[2]);\n            let a = t?.format !== void 0 ? t.format : \"RGB\", u = t?.norm, d, c;\n            u === void 0 || u.mean === void 0 ? d = [255, 255, 255, 255] : typeof u.mean == \"number\" ? d = [u.mean, u.mean, u.mean, u.mean] : (d = [u.mean[0], u.mean[1], u.mean[2], 0], u.mean[3] !== void 0 && (d[3] = u.mean[3])), u === void 0 || u.bias === void 0 ? c = [0, 0, 0, 0] : typeof u.bias == \"number\" ? c = [u.bias, u.bias, u.bias, u.bias] : (c = [u.bias[0], u.bias[1], u.bias[2], 0], u.bias[3] !== void 0 && (c[3] = u.bias[3]));\n            let p = i * o, m = 0, f = p, b = p * 2, g = -1;\n            a === \"RGBA\" ? (m = 0, f = p, b = p * 2, g = p * 3) : a === \"RGB\" ? (m = 0, f = p, b = p * 2) : a === \"RBG\" && (m = 0, b = p, f = p * 2);\n            for (let _ = 0; _ < i; _++) for (let S = 0; S < o; S++) {\n              let $ = (e.data[m++] - c[0]) * d[0], v = (e.data[f++] - c[1]) * d[1], x = (e.data[b++] - c[2]) * d[2], T = g === -1 ? 255 : (e.data[g++] - c[3]) * d[3];\n              n.fillStyle = \"rgba(\" + $ + \",\" + v + \",\" + x + \",\" + T + \")\", n.fillRect(S, _, 1, 1);\n            }\n            if (\"toDataURL\" in r) return r.toDataURL();\n            throw new Error(\"toDataURL is not supported\");\n          } else throw new Error(\"Can not access image data\");\n        }, Xi = (e, t) => {\n          let r = typeof document < \"u\" ? document.createElement(\"canvas\").getContext(\"2d\") : new OffscreenCanvas(1, 1).getContext(\"2d\"), n;\n          if (r != null) {\n            let o, i, a;\n            t?.tensorLayout !== void 0 && t.tensorLayout === \"NHWC\" ? (o = e.dims[2], i = e.dims[1], a = e.dims[3]) : (o = e.dims[3], i = e.dims[2], a = e.dims[1]);\n            let u = t !== void 0 && t.format !== void 0 ? t.format : \"RGB\", d = t?.norm, c, p;\n            d === void 0 || d.mean === void 0 ? c = [255, 255, 255, 255] : typeof d.mean == \"number\" ? c = [d.mean, d.mean, d.mean, d.mean] : (c = [d.mean[0], d.mean[1], d.mean[2], 255], d.mean[3] !== void 0 && (c[3] = d.mean[3])), d === void 0 || d.bias === void 0 ? p = [0, 0, 0, 0] : typeof d.bias == \"number\" ? p = [d.bias, d.bias, d.bias, d.bias] : (p = [d.bias[0], d.bias[1], d.bias[2], 0], d.bias[3] !== void 0 && (p[3] = d.bias[3]));\n            let m = i * o;\n            if (t !== void 0 && (t.format !== void 0 && a === 4 && t.format !== \"RGBA\" || a === 3 && t.format !== \"RGB\" && t.format !== \"BGR\")) throw new Error(\"Tensor format doesn't match input tensor dims\");\n            let f = 4, b = 0, g = 1, _ = 2, S = 3, $ = 0, v = m, x = m * 2, T = -1;\n            u === \"RGBA\" ? ($ = 0, v = m, x = m * 2, T = m * 3) : u === \"RGB\" ? ($ = 0, v = m, x = m * 2) : u === \"RBG\" && ($ = 0, x = m, v = m * 2), n = r.createImageData(o, i);\n            for (let E = 0; E < i * o; b += f, g += f, _ += f, S += f, E++) n.data[b] = (e.data[$++] - p[0]) * c[0], n.data[g] = (e.data[v++] - p[1]) * c[1], n.data[_] = (e.data[x++] - p[2]) * c[2], n.data[S] = T === -1 ? 255 : (e.data[T++] - p[3]) * c[3];\n          } else throw new Error(\"Can not access image data\");\n          return n;\n        };\n      });\n      ia = U(() => {\n        \"use strict\";\n        hr();\n        Mn = (e, t) => {\n          if (e === void 0) throw new Error(\"Image buffer must be defined\");\n          if (t.height === void 0 || t.width === void 0) throw new Error(\"Image height and width must be defined\");\n          if (t.tensorLayout === \"NHWC\") throw new Error(\"NHWC Tensor layout is not supported yet\");\n          let { height: r, width: n } = t, o = t.norm ?? { mean: 255, bias: 0 }, i, a;\n          typeof o.mean == \"number\" ? i = [o.mean, o.mean, o.mean, o.mean] : i = [o.mean[0], o.mean[1], o.mean[2], o.mean[3] ?? 255], typeof o.bias == \"number\" ? a = [o.bias, o.bias, o.bias, o.bias] : a = [o.bias[0], o.bias[1], o.bias[2], o.bias[3] ?? 0];\n          let u = t.format !== void 0 ? t.format : \"RGBA\", d = t.tensorFormat !== void 0 && t.tensorFormat !== void 0 ? t.tensorFormat : \"RGB\", c = r * n, p = d === \"RGBA\" ? new Float32Array(c * 4) : new Float32Array(c * 3), m = 4, f = 0, b = 1, g = 2, _ = 3, S = 0, $ = c, v = c * 2, x = -1;\n          u === \"RGB\" && (m = 3, f = 0, b = 1, g = 2, _ = -1), d === \"RGBA\" ? x = c * 3 : d === \"RBG\" ? (S = 0, v = c, $ = c * 2) : d === \"BGR\" && (v = 0, $ = c, S = c * 2);\n          for (let E = 0; E < c; E++, f += m, g += m, b += m, _ += m) p[S++] = (e[f] + a[0]) / i[0], p[$++] = (e[b] + a[1]) / i[1], p[v++] = (e[g] + a[2]) / i[2], x !== -1 && _ !== -1 && (p[x++] = (e[_] + a[3]) / i[3]);\n          return d === \"RGBA\" ? new Pe(\"float32\", p, [1, 4, r, n]) : new Pe(\"float32\", p, [1, 3, r, n]);\n        }, ea = async (e, t) => {\n          let r = typeof HTMLImageElement < \"u\" && e instanceof HTMLImageElement, n = typeof ImageData < \"u\" && e instanceof ImageData, o = typeof ImageBitmap < \"u\" && e instanceof ImageBitmap, i = typeof e == \"string\", a, u = t ?? {}, d = () => {\n            if (typeof document < \"u\") return document.createElement(\"canvas\");\n            if (typeof OffscreenCanvas < \"u\") return new OffscreenCanvas(1, 1);\n            throw new Error(\"Canvas is not supported\");\n          }, c = (p) => typeof HTMLCanvasElement < \"u\" && p instanceof HTMLCanvasElement || p instanceof OffscreenCanvas ? p.getContext(\"2d\") : null;\n          if (r) {\n            let p = d();\n            p.width = e.width, p.height = e.height;\n            let m = c(p);\n            if (m != null) {\n              let f = e.height, b = e.width;\n              if (t !== void 0 && t.resizedHeight !== void 0 && t.resizedWidth !== void 0 && (f = t.resizedHeight, b = t.resizedWidth), t !== void 0) {\n                if (u = t, t.tensorFormat !== void 0) throw new Error(\"Image input config format must be RGBA for HTMLImageElement\");\n                u.tensorFormat = \"RGBA\", u.height = f, u.width = b;\n              } else u.tensorFormat = \"RGBA\", u.height = f, u.width = b;\n              m.drawImage(e, 0, 0), a = m.getImageData(0, 0, b, f).data;\n            } else throw new Error(\"Can not access image data\");\n          } else if (n) {\n            let p, m;\n            if (t !== void 0 && t.resizedWidth !== void 0 && t.resizedHeight !== void 0 ? (p = t.resizedHeight, m = t.resizedWidth) : (p = e.height, m = e.width), t !== void 0 && (u = t), u.format = \"RGBA\", u.height = p, u.width = m, t !== void 0) {\n              let f = d();\n              f.width = m, f.height = p;\n              let b = c(f);\n              if (b != null) b.putImageData(e, 0, 0), a = b.getImageData(0, 0, m, p).data;\n              else throw new Error(\"Can not access image data\");\n            } else a = e.data;\n          } else if (o) {\n            if (t === void 0) throw new Error(\"Please provide image config with format for Imagebitmap\");\n            let p = d();\n            p.width = e.width, p.height = e.height;\n            let m = c(p);\n            if (m != null) {\n              let f = e.height, b = e.width;\n              return m.drawImage(e, 0, 0, b, f), a = m.getImageData(0, 0, b, f).data, u.height = f, u.width = b, Mn(a, u);\n            } else throw new Error(\"Can not access image data\");\n          } else {\n            if (i) return new Promise((p, m) => {\n              let f = d(), b = c(f);\n              if (!e || !b) return m();\n              let g = new Image();\n              g.crossOrigin = \"Anonymous\", g.src = e, g.onload = () => {\n                f.width = g.width, f.height = g.height, b.drawImage(g, 0, 0, f.width, f.height);\n                let _ = b.getImageData(0, 0, f.width, f.height);\n                u.height = f.height, u.width = f.width, p(Mn(_.data, u));\n              };\n            });\n            throw new Error(\"Input data provided is not supported - aborted tensor creation\");\n          }\n          if (a !== void 0) return Mn(a, u);\n          throw new Error(\"Input data provided is not supported - aborted tensor creation\");\n        }, ta = (e, t) => {\n          let { width: r, height: n, download: o, dispose: i } = t, a = [1, n, r, 4];\n          return new Pe({ location: \"texture\", type: \"float32\", texture: e, dims: a, download: o, dispose: i });\n        }, ra = (e, t) => {\n          let { dataType: r, dims: n, download: o, dispose: i } = t;\n          return new Pe({ location: \"gpu-buffer\", type: r ?? \"float32\", gpuBuffer: e, dims: n, download: o, dispose: i });\n        }, na = (e, t) => {\n          let { dataType: r, dims: n, download: o, dispose: i } = t;\n          return new Pe({ location: \"ml-tensor\", type: r ?? \"float32\", mlTensor: e, dims: n, download: o, dispose: i });\n        }, oa = (e, t, r) => new Pe({ location: \"cpu-pinned\", type: e, data: t, dims: r ?? [t.length] });\n      });\n      ua = U(() => {\n        \"use strict\";\n        xt = /* @__PURE__ */ new Map([[\"float32\", Float32Array], [\"uint8\", Uint8Array], [\"int8\", Int8Array], [\"uint16\", Uint16Array], [\"int16\", Int16Array], [\"int32\", Int32Array], [\"bool\", Uint8Array], [\"float64\", Float64Array], [\"uint32\", Uint32Array], [\"int4\", Uint8Array], [\"uint4\", Uint8Array]]), qt = /* @__PURE__ */ new Map([[Float32Array, \"float32\"], [Uint8Array, \"uint8\"], [Int8Array, \"int8\"], [Uint16Array, \"uint16\"], [Int16Array, \"int16\"], [Int32Array, \"int32\"], [Float64Array, \"float64\"], [Uint32Array, \"uint32\"]]), aa = false, sa = () => {\n          if (!aa) {\n            aa = true;\n            let e = typeof BigInt64Array < \"u\" && BigInt64Array.from, t = typeof BigUint64Array < \"u\" && BigUint64Array.from, r = globalThis.Float16Array, n = typeof r < \"u\" && r.from;\n            e && (xt.set(\"int64\", BigInt64Array), qt.set(BigInt64Array, \"int64\")), t && (xt.set(\"uint64\", BigUint64Array), qt.set(BigUint64Array, \"uint64\")), n ? (xt.set(\"float16\", r), qt.set(r, \"float16\")) : xt.set(\"float16\", Uint16Array);\n          }\n        };\n      });\n      ca = U(() => {\n        \"use strict\";\n        hr();\n        da = (e) => {\n          let t = 1;\n          for (let r = 0; r < e.length; r++) {\n            let n = e[r];\n            if (typeof n != \"number\" || !Number.isSafeInteger(n)) throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);\n            if (n < 0) throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);\n            t *= n;\n          }\n          return t;\n        }, la = (e, t) => {\n          switch (e.location) {\n            case \"cpu\":\n              return new Pe(e.type, e.data, t);\n            case \"cpu-pinned\":\n              return new Pe({ location: \"cpu-pinned\", data: e.data, type: e.type, dims: t });\n            case \"texture\":\n              return new Pe({ location: \"texture\", texture: e.texture, type: e.type, dims: t });\n            case \"gpu-buffer\":\n              return new Pe({ location: \"gpu-buffer\", gpuBuffer: e.gpuBuffer, type: e.type, dims: t });\n            case \"ml-tensor\":\n              return new Pe({ location: \"ml-tensor\", mlTensor: e.mlTensor, type: e.type, dims: t });\n            default:\n              throw new Error(`tensorReshape: tensor location ${e.location} is not supported`);\n          }\n        };\n      });\n      hr = U(() => {\n        \"use strict\";\n        Ji();\n        ia();\n        ua();\n        ca();\n        Pe = class {\n          constructor(t, r, n) {\n            sa();\n            let o, i;\n            if (typeof t == \"object\" && \"location\" in t) switch (this.dataLocation = t.location, o = t.type, i = t.dims, t.location) {\n              case \"cpu-pinned\": {\n                let u = xt.get(o);\n                if (!u) throw new TypeError(`unsupported type \"${o}\" to create tensor from pinned buffer`);\n                if (!(t.data instanceof u)) throw new TypeError(`buffer should be of type ${u.name}`);\n                this.cpuData = t.data;\n                break;\n              }\n              case \"texture\": {\n                if (o !== \"float32\") throw new TypeError(`unsupported type \"${o}\" to create tensor from texture`);\n                this.gpuTextureData = t.texture, this.downloader = t.download, this.disposer = t.dispose;\n                break;\n              }\n              case \"gpu-buffer\": {\n                if (o !== \"float32\" && o !== \"float16\" && o !== \"int32\" && o !== \"int64\" && o !== \"uint32\" && o !== \"uint8\" && o !== \"bool\" && o !== \"uint4\" && o !== \"int4\") throw new TypeError(`unsupported type \"${o}\" to create tensor from gpu buffer`);\n                this.gpuBufferData = t.gpuBuffer, this.downloader = t.download, this.disposer = t.dispose;\n                break;\n              }\n              case \"ml-tensor\": {\n                if (o !== \"float32\" && o !== \"float16\" && o !== \"int32\" && o !== \"int64\" && o !== \"uint32\" && o !== \"uint64\" && o !== \"int8\" && o !== \"uint8\" && o !== \"bool\" && o !== \"uint4\" && o !== \"int4\") throw new TypeError(`unsupported type \"${o}\" to create tensor from MLTensor`);\n                this.mlTensorData = t.mlTensor, this.downloader = t.download, this.disposer = t.dispose;\n                break;\n              }\n              default:\n                throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);\n            }\n            else {\n              let u, d;\n              if (typeof t == \"string\") if (o = t, d = n, t === \"string\") {\n                if (!Array.isArray(r)) throw new TypeError(\"A string tensor's data must be a string array.\");\n                u = r;\n              } else {\n                let c = xt.get(t);\n                if (c === void 0) throw new TypeError(`Unsupported tensor type: ${t}.`);\n                if (Array.isArray(r)) {\n                  if (t === \"float16\" && c === Uint16Array || t === \"uint4\" || t === \"int4\") throw new TypeError(`Creating a ${t} tensor from number array is not supported. Please use ${c.name} as data.`);\n                  t === \"uint64\" || t === \"int64\" ? u = c.from(r, BigInt) : u = c.from(r);\n                } else if (r instanceof c) u = r;\n                else if (r instanceof Uint8ClampedArray) if (t === \"uint8\") u = Uint8Array.from(r);\n                else throw new TypeError(\"A Uint8ClampedArray tensor's data must be type of uint8\");\n                else if (t === \"float16\" && r instanceof Uint16Array && c !== Uint16Array) u = new globalThis.Float16Array(r.buffer, r.byteOffset, r.length);\n                else throw new TypeError(`A ${o} tensor's data must be type of ${c}`);\n              }\n              else if (d = r, Array.isArray(t)) {\n                if (t.length === 0) throw new TypeError(\"Tensor type cannot be inferred from an empty array.\");\n                let c = typeof t[0];\n                if (c === \"string\") o = \"string\", u = t;\n                else if (c === \"boolean\") o = \"bool\", u = Uint8Array.from(t);\n                else throw new TypeError(`Invalid element type of data array: ${c}.`);\n              } else if (t instanceof Uint8ClampedArray) o = \"uint8\", u = Uint8Array.from(t);\n              else {\n                let c = qt.get(t.constructor);\n                if (c === void 0) throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);\n                o = c, u = t;\n              }\n              if (d === void 0) d = [u.length];\n              else if (!Array.isArray(d)) throw new TypeError(\"A tensor's dims must be a number array\");\n              i = d, this.cpuData = u, this.dataLocation = \"cpu\";\n            }\n            let a = da(i);\n            if (this.cpuData && a !== this.cpuData.length && !((o === \"uint4\" || o === \"int4\") && Math.ceil(a / 2) === this.cpuData.length)) throw new Error(`Tensor's size(${a}) does not match data length(${this.cpuData.length}).`);\n            this.type = o, this.dims = i, this.size = a;\n          }\n          static async fromImage(t, r) {\n            return ea(t, r);\n          }\n          static fromTexture(t, r) {\n            return ta(t, r);\n          }\n          static fromGpuBuffer(t, r) {\n            return ra(t, r);\n          }\n          static fromMLTensor(t, r) {\n            return na(t, r);\n          }\n          static fromPinnedBuffer(t, r, n) {\n            return oa(t, r, n);\n          }\n          toDataURL(t) {\n            return Yi(this, t);\n          }\n          toImageData(t) {\n            return Xi(this, t);\n          }\n          get data() {\n            if (this.ensureValid(), !this.cpuData) throw new Error(\"The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.\");\n            return this.cpuData;\n          }\n          get location() {\n            return this.dataLocation;\n          }\n          get texture() {\n            if (this.ensureValid(), !this.gpuTextureData) throw new Error(\"The data is not stored as a WebGL texture.\");\n            return this.gpuTextureData;\n          }\n          get gpuBuffer() {\n            if (this.ensureValid(), !this.gpuBufferData) throw new Error(\"The data is not stored as a WebGPU buffer.\");\n            return this.gpuBufferData;\n          }\n          get mlTensor() {\n            if (this.ensureValid(), !this.mlTensorData) throw new Error(\"The data is not stored as a WebNN MLTensor.\");\n            return this.mlTensorData;\n          }\n          async getData(t) {\n            switch (this.ensureValid(), this.dataLocation) {\n              case \"cpu\":\n              case \"cpu-pinned\":\n                return this.data;\n              case \"texture\":\n              case \"gpu-buffer\":\n              case \"ml-tensor\": {\n                if (!this.downloader) throw new Error(\"The current tensor is not created with a specified data downloader.\");\n                if (this.isDownloading) throw new Error(\"The current tensor is being downloaded.\");\n                try {\n                  this.isDownloading = true;\n                  let r = await this.downloader();\n                  return this.downloader = void 0, this.dataLocation = \"cpu\", this.cpuData = r, t && this.disposer && (this.disposer(), this.disposer = void 0), r;\n                } finally {\n                  this.isDownloading = false;\n                }\n              }\n              default:\n                throw new Error(`cannot get data from location: ${this.dataLocation}`);\n            }\n          }\n          dispose() {\n            if (this.isDownloading) throw new Error(\"The current tensor is being downloaded.\");\n            this.disposer && (this.disposer(), this.disposer = void 0), this.cpuData = void 0, this.gpuTextureData = void 0, this.gpuBufferData = void 0, this.mlTensorData = void 0, this.downloader = void 0, this.isDownloading = void 0, this.dataLocation = \"none\";\n          }\n          ensureValid() {\n            if (this.dataLocation === \"none\") throw new Error(\"The tensor is disposed.\");\n          }\n          reshape(t) {\n            if (this.ensureValid(), this.downloader || this.disposer) throw new Error(\"Cannot reshape a tensor that owns GPU resource.\");\n            return la(this, t);\n          }\n        };\n      });\n      Rn = U(() => {\n        \"use strict\";\n        hr();\n        Ge = Pe;\n      });\n      Un = U(() => {\n        \"use strict\";\n        Dn();\n        gr = (e, t) => {\n          (typeof Me.trace > \"u\" ? !Me.wasm.trace : !Me.trace) || console.timeStamp(`${e}::ORT::${t}`);\n        }, pa = (e, t) => {\n          let r = new Error().stack?.split(/\\r\\n|\\r|\\n/g) || [], n = false;\n          for (let o = 0; o < r.length; o++) {\n            if (n && !r[o].includes(\"TRACE_FUNC\")) {\n              let i = `FUNC_${e}::${r[o].trim().split(\" \")[1]}`;\n              t && (i += `::${t}`), gr(\"CPU\", i);\n              return;\n            }\n            r[o].includes(\"TRACE_FUNC\") && (n = true);\n          }\n        }, Re = (e) => {\n          (typeof Me.trace > \"u\" ? !Me.wasm.trace : !Me.trace) || pa(\"BEGIN\", e);\n        }, Oe = (e) => {\n          (typeof Me.trace > \"u\" ? !Me.wasm.trace : !Me.trace) || pa(\"END\", e);\n        };\n      });\n      ma = U(() => {\n        \"use strict\";\n        Bn();\n        Rn();\n        Un();\n        br = class e {\n          constructor(t) {\n            this.handler = t;\n          }\n          async run(t, r, n) {\n            Re();\n            let o = {}, i = {};\n            if (typeof t != \"object\" || t === null || t instanceof Ge || Array.isArray(t)) throw new TypeError(\"'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.\");\n            let a = true;\n            if (typeof r == \"object\") {\n              if (r === null) throw new TypeError(\"Unexpected argument[1]: cannot be null.\");\n              if (r instanceof Ge) throw new TypeError(\"'fetches' cannot be a Tensor\");\n              if (Array.isArray(r)) {\n                if (r.length === 0) throw new TypeError(\"'fetches' cannot be an empty array.\");\n                a = false;\n                for (let c of r) {\n                  if (typeof c != \"string\") throw new TypeError(\"'fetches' must be a string array or an object.\");\n                  if (this.outputNames.indexOf(c) === -1) throw new RangeError(`'fetches' contains invalid output name: ${c}.`);\n                  o[c] = null;\n                }\n                if (typeof n == \"object\" && n !== null) i = n;\n                else if (typeof n < \"u\") throw new TypeError(\"'options' must be an object.\");\n              } else {\n                let c = false, p = Object.getOwnPropertyNames(r);\n                for (let m of this.outputNames) if (p.indexOf(m) !== -1) {\n                  let f = r[m];\n                  (f === null || f instanceof Ge) && (c = true, a = false, o[m] = f);\n                }\n                if (c) {\n                  if (typeof n == \"object\" && n !== null) i = n;\n                  else if (typeof n < \"u\") throw new TypeError(\"'options' must be an object.\");\n                } else i = r;\n              }\n            } else if (typeof r < \"u\") throw new TypeError(\"Unexpected argument[1]: must be 'fetches' or 'options'.\");\n            for (let c of this.inputNames) if (typeof t[c] > \"u\") throw new Error(`input '${c}' is missing in 'feeds'.`);\n            if (a) for (let c of this.outputNames) o[c] = null;\n            let u = await this.handler.run(t, o, i), d = {};\n            for (let c in u) if (Object.hasOwnProperty.call(u, c)) {\n              let p = u[c];\n              p instanceof Ge ? d[c] = p : d[c] = new Ge(p.type, p.data, p.dims);\n            }\n            return Oe(), d;\n          }\n          async release() {\n            return this.handler.dispose();\n          }\n          static async create(t, r, n, o) {\n            Re();\n            let i, a = {};\n            if (typeof t == \"string\") {\n              if (i = t, typeof r == \"object\" && r !== null) a = r;\n              else if (typeof r < \"u\") throw new TypeError(\"'options' must be an object.\");\n            } else if (t instanceof Uint8Array) {\n              if (i = t, typeof r == \"object\" && r !== null) a = r;\n              else if (typeof r < \"u\") throw new TypeError(\"'options' must be an object.\");\n            } else if (t instanceof ArrayBuffer || typeof SharedArrayBuffer < \"u\" && t instanceof SharedArrayBuffer) {\n              let p = t, m = 0, f = t.byteLength;\n              if (typeof r == \"object\" && r !== null) a = r;\n              else if (typeof r == \"number\") {\n                if (m = r, !Number.isSafeInteger(m)) throw new RangeError(\"'byteOffset' must be an integer.\");\n                if (m < 0 || m >= p.byteLength) throw new RangeError(`'byteOffset' is out of range [0, ${p.byteLength}).`);\n                if (f = t.byteLength - m, typeof n == \"number\") {\n                  if (f = n, !Number.isSafeInteger(f)) throw new RangeError(\"'byteLength' must be an integer.\");\n                  if (f <= 0 || m + f > p.byteLength) throw new RangeError(`'byteLength' is out of range (0, ${p.byteLength - m}].`);\n                  if (typeof o == \"object\" && o !== null) a = o;\n                  else if (typeof o < \"u\") throw new TypeError(\"'options' must be an object.\");\n                } else if (typeof n < \"u\") throw new TypeError(\"'byteLength' must be a number.\");\n              } else if (typeof r < \"u\") throw new TypeError(\"'options' must be an object.\");\n              i = new Uint8Array(p, m, f);\n            } else throw new TypeError(\"Unexpected argument[0]: must be 'path' or 'buffer'.\");\n            let [u, d] = await Fi(a), c = await u.createInferenceSessionHandler(i, d);\n            return Oe(), new e(c);\n          }\n          startProfiling() {\n            this.handler.startProfiling();\n          }\n          endProfiling() {\n            this.handler.endProfiling();\n          }\n          get inputNames() {\n            return this.handler.inputNames;\n          }\n          get outputNames() {\n            return this.handler.outputNames;\n          }\n          get inputMetadata() {\n            return this.handler.inputMetadata;\n          }\n          get outputMetadata() {\n            return this.handler.outputMetadata;\n          }\n        };\n      });\n      fa = U(() => {\n        \"use strict\";\n        ma();\n        Gp = br;\n      });\n      ha = U(() => {\n        \"use strict\";\n      });\n      ga = U(() => {\n        \"use strict\";\n      });\n      ba = U(() => {\n        \"use strict\";\n      });\n      ya = U(() => {\n        \"use strict\";\n      });\n      Nn = {};\n      Dt(Nn, { InferenceSession: () => Gp, TRACE: () => gr, TRACE_FUNC_BEGIN: () => Re, TRACE_FUNC_END: () => Oe, Tensor: () => Ge, env: () => ge, registerBackend: () => $t });\n      We = U(() => {\n        \"use strict\";\n        qi();\n        Qi();\n        fa();\n        Rn();\n        ha();\n        ga();\n        Un();\n        ba();\n        ya();\n      });\n      yr = U(() => {\n        \"use strict\";\n      });\n      $a = {};\n      Dt($a, { default: () => Hp });\n      xa = U(() => {\n        \"use strict\";\n        Vn();\n        ht();\n        _r();\n        wa = \"ort-wasm-proxy-worker\", va = globalThis.self?.name === wa;\n        va && (self.onmessage = (e) => {\n          let { type: t, in: r } = e.data;\n          try {\n            switch (t) {\n              case \"init-wasm\":\n                wr(r.wasm).then(() => {\n                  vr(r).then(() => {\n                    postMessage({ type: t });\n                  }, (n) => {\n                    postMessage({ type: t, err: n });\n                  });\n                }, (n) => {\n                  postMessage({ type: t, err: n });\n                });\n                break;\n              case \"init-ep\": {\n                let { epName: n, env: o } = r;\n                $r(o, n).then(() => {\n                  postMessage({ type: t });\n                }, (i) => {\n                  postMessage({ type: t, err: i });\n                });\n                break;\n              }\n              case \"copy-from\": {\n                let { buffer: n } = r, o = jt(n);\n                postMessage({ type: t, out: o });\n                break;\n              }\n              case \"create\": {\n                let { model: n, options: o } = r;\n                xr(n, o).then((i) => {\n                  postMessage({ type: t, out: i });\n                }, (i) => {\n                  postMessage({ type: t, err: i });\n                });\n                break;\n              }\n              case \"release\":\n                Sr(r), postMessage({ type: t });\n                break;\n              case \"run\": {\n                let { sessionId: n, inputIndices: o, inputs: i, outputIndices: a, options: u } = r;\n                Tr(n, o, i, a, new Array(a.length).fill(null), u).then((d) => {\n                  d.some((c) => c[3] !== \"cpu\") ? postMessage({ type: t, err: \"Proxy does not support non-cpu tensor location.\" }) : postMessage({ type: t, out: d }, Cr([...i, ...d]));\n                }, (d) => {\n                  postMessage({ type: t, err: d });\n                });\n                break;\n              }\n              case \"end-profiling\":\n                Ir(r), postMessage({ type: t });\n                break;\n              default:\n            }\n          } catch (n) {\n            postMessage({ type: t, err: n });\n          }\n        });\n        Hp = va ? null : (e) => new Worker(e ?? Ue, { type: \"module\", name: wa });\n      });\n      Ta = {};\n      Dt(Ta, { default: () => Fp });\n      Ia = U(() => {\n        \"use strict\";\n        Sa = (Wn = import_meta.url, async function(e = {}) {\n          var t, r, n = e, o = new Promise((s, l) => {\n            t = s, r = l;\n          }), i = typeof window == \"object\", a = typeof WorkerGlobalScope < \"u\", u = a && self.name?.startsWith(\"em-pthread\");\n          n.mountExternalData = (s, l) => {\n            s.startsWith(\"./\") && (s = s.substring(2)), (n.Eb || (n.Eb = /* @__PURE__ */ new Map())).set(s, l);\n          }, n.unmountExternalData = () => {\n            delete n.Eb;\n          };\n          var d = globalThis.SharedArrayBuffer ?? new WebAssembly.Memory({ initial: 0, maximum: 0, pc: true }).buffer.constructor;\n          let c = (s) => async (...l) => {\n            try {\n              if (n.Fb) throw Error(\"Session already started\");\n              let h = n.Fb = { dc: l[0], errors: [] }, y = await s(...l);\n              if (n.Fb !== h) throw Error(\"Session mismatch\");\n              n.Jb?.flush();\n              let w = h.errors;\n              if (0 < w.length) {\n                let A = await Promise.all(w);\n                if (A = A.filter((B) => B), 0 < A.length) throw Error(A.join(`\n`));\n              }\n              return y;\n            } finally {\n              n.Fb = null;\n            }\n          };\n          n.jsepInit = (s, l) => {\n            if (s === \"webgpu\") {\n              [n.Jb, n.Ub, n.Yb, n.Kb, n.Xb, n.jb, n.Zb, n.ac, n.Vb, n.Wb, n.$b] = l;\n              let h = n.Jb;\n              n.jsepRegisterBuffer = (y, w, A, B) => h.registerBuffer(y, w, A, B), n.jsepGetBuffer = (y) => h.getBuffer(y), n.jsepCreateDownloader = (y, w, A) => h.createDownloader(y, w, A), n.jsepOnCreateSession = (y) => {\n                h.onCreateSession(y);\n              }, n.jsepOnReleaseSession = (y) => {\n                h.onReleaseSession(y);\n              }, n.jsepOnRunStart = (y) => h.onRunStart(y), n.bc = (y, w) => {\n                h.upload(y, w);\n              };\n            } else if (s === \"webnn\") {\n              let h = l[0];\n              [n.nc, n.Nb, n.webnnEnsureTensor, n.Ob, n.webnnDownloadTensor] = l.slice(1), n.webnnReleaseTensorId = n.Nb, n.webnnUploadTensor = n.Ob, n.webnnOnRunStart = (y) => h.onRunStart(y), n.webnnOnRunEnd = h.onRunEnd.bind(h), n.webnnRegisterMLContext = (y, w) => {\n                h.registerMLContext(y, w);\n              }, n.webnnOnReleaseSession = (y) => {\n                h.onReleaseSession(y);\n              }, n.webnnCreateMLTensorDownloader = (y, w) => h.createMLTensorDownloader(y, w), n.webnnRegisterMLTensor = (y, w, A, B) => h.registerMLTensor(y, w, A, B), n.webnnCreateMLContext = (y) => h.createMLContext(y), n.webnnRegisterMLConstant = (y, w, A, B, R, G) => h.registerMLConstant(y, w, A, B, R, n.Eb, G), n.webnnRegisterGraphInput = h.registerGraphInput.bind(h), n.webnnIsGraphInput = h.isGraphInput.bind(h), n.webnnCreateTemporaryTensor = h.createTemporaryTensor.bind(h), n.webnnIsInt64Supported = h.isInt64Supported.bind(h);\n            }\n          };\n          let p = () => {\n            let s = (l, h, y) => (...w) => {\n              let A = Ze, B = h?.();\n              w = l(...w);\n              let R = h?.();\n              return B !== R && (l = R, y(B), h = y = null), Ze != A ? new Promise((G, K) => {\n                Sn = { resolve: G, reject: K };\n              }) : w;\n            };\n            (() => {\n              for (let l of [\"_OrtAppendExecutionProvider\", \"_OrtCreateSession\", \"_OrtRun\", \"_OrtRunWithBinding\", \"_OrtBindInput\"]) n[l] = s(n[l], () => n[l], (h) => n[l] = h);\n            })(), c !== void 0 && (n._OrtRun = c(n._OrtRun), n._OrtRunWithBinding = c(n._OrtRunWithBinding)), p = void 0;\n          };\n          n.asyncInit = () => {\n            p?.();\n          };\n          var m, f, b = Object.assign({}, n), g = (s, l) => {\n            throw l;\n          }, _ = \"\";\n          (i || a) && (a ? _ = self.location.href : typeof document < \"u\" && document.currentScript && (_ = document.currentScript.src), Wn && (_ = Wn), _ = _.startsWith(\"blob:\") ? \"\" : _.slice(0, _.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1), a && (f = (s) => {\n            var l = new XMLHttpRequest();\n            return l.open(\"GET\", s, false), l.responseType = \"arraybuffer\", l.send(null), new Uint8Array(l.response);\n          }), m = async (s) => {\n            if (X(s)) return new Promise((h, y) => {\n              var w = new XMLHttpRequest();\n              w.open(\"GET\", s, true), w.responseType = \"arraybuffer\", w.onload = () => {\n                w.status == 200 || w.status == 0 && w.response ? h(w.response) : y(w.status);\n              }, w.onerror = y, w.send(null);\n            });\n            var l = await fetch(s, { credentials: \"same-origin\" });\n            if (l.ok) return l.arrayBuffer();\n            throw Error(l.status + \" : \" + l.url);\n          });\n          var S = console.log.bind(console), $ = console.error.bind(console), v = S, x = $;\n          Object.assign(n, b), b = null;\n          var T, E, I, z, O, D, L, q, Q, W, Z, we, H, j = n.wasmBinary, te = false, X = (s) => s.startsWith(\"file://\");\n          function ue() {\n            return T.buffer != z.buffer && Ce(), z;\n          }\n          function he() {\n            return T.buffer != z.buffer && Ce(), O;\n          }\n          function ye() {\n            return T.buffer != z.buffer && Ce(), D;\n          }\n          function re() {\n            return T.buffer != z.buffer && Ce(), L;\n          }\n          function C() {\n            return T.buffer != z.buffer && Ce(), q;\n          }\n          function V() {\n            return T.buffer != z.buffer && Ce(), Q;\n          }\n          function de() {\n            return T.buffer != z.buffer && Ce(), W;\n          }\n          function ze() {\n            return T.buffer != z.buffer && Ce(), H;\n          }\n          if (u) {\n            let s = function(l) {\n              try {\n                var h = l.data, y = h.Bb;\n                if (y === \"load\") {\n                  let w = [];\n                  self.onmessage = (A) => w.push(A), self.startWorker = () => {\n                    postMessage({ Bb: \"loaded\" });\n                    for (let A of w) s(A);\n                    self.onmessage = s;\n                  };\n                  for (let A of h.Rb) n[A] && !n[A].proxy || (n[A] = (...B) => {\n                    postMessage({ Bb: \"callHandler\", Qb: A, args: B });\n                  }, A == \"print\" && (v = n[A]), A == \"printErr\" && (x = n[A]));\n                  T = h.kc, Ce(), ve(h.lc);\n                } else if (y === \"run\") {\n                  _c(h.Ab), An(h.Ab, 0, 0, 1, 0, 0), No(), $n(h.Ab), $e || (Oi(), $e = true);\n                  try {\n                    wc(h.fc, h.Hb);\n                  } catch (w) {\n                    if (w != \"unwind\") throw w;\n                  }\n                } else h.target !== \"setimmediate\" && (y === \"checkMailbox\" ? $e && nr() : y && (x(`worker: received unknown command ${y}`), x(h)));\n              } catch (w) {\n                throw Bi(), w;\n              }\n            };\n            var wg = s, ve, $e = false;\n            x = function(...l) {\n              l = l.join(\" \"), console.error(l);\n            }, self.alert = function(...l) {\n              postMessage({ Bb: \"alert\", text: l.join(\" \"), ic: cr() });\n            }, self.onunhandledrejection = (l) => {\n              throw l.reason || l;\n            }, self.onmessage = s;\n          }\n          function Ce() {\n            var s = T.buffer;\n            n.HEAP8 = z = new Int8Array(s), n.HEAP16 = D = new Int16Array(s), n.HEAPU8 = O = new Uint8Array(s), n.HEAPU16 = L = new Uint16Array(s), n.HEAP32 = q = new Int32Array(s), n.HEAPU32 = Q = new Uint32Array(s), n.HEAPF32 = W = new Float32Array(s), n.HEAPF64 = H = new Float64Array(s), n.HEAP64 = Z = new BigInt64Array(s), n.HEAPU64 = we = new BigUint64Array(s);\n          }\n          function _t() {\n            u ? startWorker(n) : Y.Ca();\n          }\n          u || (T = new WebAssembly.Memory({ initial: 256, maximum: 65536, shared: true }), Ce());\n          var kt, Pt = 0, Lt = null;\n          function zo() {\n            if (--Pt == 0 && Lt) {\n              var s = Lt;\n              Lt = null, s();\n            }\n          }\n          function dt(s) {\n            throw x(s = \"Aborted(\" + s + \")\"), te = true, s = new WebAssembly.RuntimeError(s + \". Build with -sASSERTIONS for more info.\"), r(s), s;\n          }\n          function Oo() {\n            return { a: { L: yc, Aa: bc, b: $c, $: Go, A: qo, pa: jo, X: Zo, Z: Qo, qa: Yo, na: Xo, ga: Jo, ma: ei, J: ti, Y: ri, V: ni, oa: oi, W: ii, va: xc, E: Tc, Q: Ic, O: Ac, D: kc, u: Pc, r: zc, P: Oc, z: Vc, R: Wc, ja: Lc, T: Gc, aa: Hc, M: Fc, F: qc, ia: $n, sa: jc, t: Kc, Ba: Zc, w: Xc, o: Jc, l: tp, c: _n, n: rp, j: ip, v: ap, p: sp, f: up, s: dp, m: lp, e: cp, k: pp, i: mp, g: fp, d: hp, da: gp, ea: bp, fa: yp, ba: _i, ca: wi, N: vi, xa: wp, ua: xp, h: Sp, C: Tp, G: Ip, ta: vp, x: Cp, ra: Ap, U: Ep, q: _p, y: kp, K: Pp, S: zp, za: Op, ya: Bp, ka: Ti, la: Ii, _: hn, B: Ci, I: Ai, ha: Ei, H: ki, a: T, wa: fn } };\n          }\n          var cn = { 829644: (s, l, h, y, w) => {\n            if (n === void 0 || !n.Eb) return 1;\n            if ((s = Te(Number(s >>> 0))).startsWith(\"./\") && (s = s.substring(2)), !(s = n.Eb.get(s))) return 2;\n            if (l = Number(l >>> 0), h = Number(h >>> 0), y = Number(y >>> 0), l + h > s.byteLength) return 3;\n            try {\n              let A = s.subarray(l, l + h);\n              switch (w) {\n                case 0:\n                  he().set(A, y >>> 0);\n                  break;\n                case 1:\n                  n.mc ? n.mc(y, A) : n.bc(y, A);\n                  break;\n                default:\n                  return 4;\n              }\n              return 0;\n            } catch {\n              return 4;\n            }\n          }, 830468: (s, l, h) => {\n            n.Ob(s, he().subarray(l >>> 0, l + h >>> 0));\n          }, 830532: () => n.nc(), 830574: (s) => {\n            n.Nb(s);\n          }, 830611: () => {\n            n.Vb();\n          }, 830642: () => {\n            n.Wb();\n          }, 830671: () => {\n            n.$b();\n          }, 830696: (s) => n.Ub(s), 830729: (s) => n.Yb(s), 830761: (s, l, h) => {\n            n.Kb(Number(s), Number(l), Number(h), true);\n          }, 830824: (s, l, h) => {\n            n.Kb(Number(s), Number(l), Number(h));\n          }, 830881: () => typeof wasmOffsetConverter < \"u\", 830938: (s) => {\n            n.jb(\"Abs\", s, void 0);\n          }, 830989: (s) => {\n            n.jb(\"Neg\", s, void 0);\n          }, 831040: (s) => {\n            n.jb(\"Floor\", s, void 0);\n          }, 831093: (s) => {\n            n.jb(\"Ceil\", s, void 0);\n          }, 831145: (s) => {\n            n.jb(\"Reciprocal\", s, void 0);\n          }, 831203: (s) => {\n            n.jb(\"Sqrt\", s, void 0);\n          }, 831255: (s) => {\n            n.jb(\"Exp\", s, void 0);\n          }, 831306: (s) => {\n            n.jb(\"Erf\", s, void 0);\n          }, 831357: (s) => {\n            n.jb(\"Sigmoid\", s, void 0);\n          }, 831412: (s, l, h) => {\n            n.jb(\"HardSigmoid\", s, { alpha: l, beta: h });\n          }, 831491: (s) => {\n            n.jb(\"Log\", s, void 0);\n          }, 831542: (s) => {\n            n.jb(\"Sin\", s, void 0);\n          }, 831593: (s) => {\n            n.jb(\"Cos\", s, void 0);\n          }, 831644: (s) => {\n            n.jb(\"Tan\", s, void 0);\n          }, 831695: (s) => {\n            n.jb(\"Asin\", s, void 0);\n          }, 831747: (s) => {\n            n.jb(\"Acos\", s, void 0);\n          }, 831799: (s) => {\n            n.jb(\"Atan\", s, void 0);\n          }, 831851: (s) => {\n            n.jb(\"Sinh\", s, void 0);\n          }, 831903: (s) => {\n            n.jb(\"Cosh\", s, void 0);\n          }, 831955: (s) => {\n            n.jb(\"Asinh\", s, void 0);\n          }, 832008: (s) => {\n            n.jb(\"Acosh\", s, void 0);\n          }, 832061: (s) => {\n            n.jb(\"Atanh\", s, void 0);\n          }, 832114: (s) => {\n            n.jb(\"Tanh\", s, void 0);\n          }, 832166: (s) => {\n            n.jb(\"Not\", s, void 0);\n          }, 832217: (s, l, h) => {\n            n.jb(\"Clip\", s, { min: l, max: h });\n          }, 832286: (s) => {\n            n.jb(\"Clip\", s, void 0);\n          }, 832338: (s, l) => {\n            n.jb(\"Elu\", s, { alpha: l });\n          }, 832396: (s) => {\n            n.jb(\"Gelu\", s, void 0);\n          }, 832448: (s) => {\n            n.jb(\"Relu\", s, void 0);\n          }, 832500: (s, l) => {\n            n.jb(\"LeakyRelu\", s, { alpha: l });\n          }, 832564: (s, l) => {\n            n.jb(\"ThresholdedRelu\", s, { alpha: l });\n          }, 832634: (s, l) => {\n            n.jb(\"Cast\", s, { to: l });\n          }, 832692: (s) => {\n            n.jb(\"Add\", s, void 0);\n          }, 832743: (s) => {\n            n.jb(\"Sub\", s, void 0);\n          }, 832794: (s) => {\n            n.jb(\"Mul\", s, void 0);\n          }, 832845: (s) => {\n            n.jb(\"Div\", s, void 0);\n          }, 832896: (s) => {\n            n.jb(\"Pow\", s, void 0);\n          }, 832947: (s) => {\n            n.jb(\"Equal\", s, void 0);\n          }, 833e3: (s) => {\n            n.jb(\"Greater\", s, void 0);\n          }, 833055: (s) => {\n            n.jb(\"GreaterOrEqual\", s, void 0);\n          }, 833117: (s) => {\n            n.jb(\"Less\", s, void 0);\n          }, 833169: (s) => {\n            n.jb(\"LessOrEqual\", s, void 0);\n          }, 833228: (s, l, h, y, w) => {\n            n.jb(\"ReduceMean\", s, { keepDims: !!l, noopWithEmptyAxes: !!h, axes: y ? Array.from(C().subarray(Number(y) >>> 0, Number(w) >>> 0)) : [] });\n          }, 833403: (s, l, h, y, w) => {\n            n.jb(\"ReduceMax\", s, { keepDims: !!l, noopWithEmptyAxes: !!h, axes: y ? Array.from(C().subarray(Number(y) >>> 0, Number(w) >>> 0)) : [] });\n          }, 833577: (s, l, h, y, w) => {\n            n.jb(\"ReduceMin\", s, { keepDims: !!l, noopWithEmptyAxes: !!h, axes: y ? Array.from(C().subarray(Number(y) >>> 0, Number(w) >>> 0)) : [] });\n          }, 833751: (s, l, h, y, w) => {\n            n.jb(\"ReduceProd\", s, { keepDims: !!l, noopWithEmptyAxes: !!h, axes: y ? Array.from(C().subarray(Number(y) >>> 0, Number(w) >>> 0)) : [] });\n          }, 833926: (s, l, h, y, w) => {\n            n.jb(\"ReduceSum\", s, { keepDims: !!l, noopWithEmptyAxes: !!h, axes: y ? Array.from(C().subarray(Number(y) >>> 0, Number(w) >>> 0)) : [] });\n          }, 834100: (s, l, h, y, w) => {\n            n.jb(\"ReduceL1\", s, { keepDims: !!l, noopWithEmptyAxes: !!h, axes: y ? Array.from(C().subarray(Number(y) >>> 0, Number(w) >>> 0)) : [] });\n          }, 834273: (s, l, h, y, w) => {\n            n.jb(\"ReduceL2\", s, { keepDims: !!l, noopWithEmptyAxes: !!h, axes: y ? Array.from(C().subarray(Number(y) >>> 0, Number(w) >>> 0)) : [] });\n          }, 834446: (s, l, h, y, w) => {\n            n.jb(\"ReduceLogSum\", s, { keepDims: !!l, noopWithEmptyAxes: !!h, axes: y ? Array.from(C().subarray(Number(y) >>> 0, Number(w) >>> 0)) : [] });\n          }, 834623: (s, l, h, y, w) => {\n            n.jb(\"ReduceSumSquare\", s, { keepDims: !!l, noopWithEmptyAxes: !!h, axes: y ? Array.from(C().subarray(Number(y) >>> 0, Number(w) >>> 0)) : [] });\n          }, 834803: (s, l, h, y, w) => {\n            n.jb(\"ReduceLogSumExp\", s, { keepDims: !!l, noopWithEmptyAxes: !!h, axes: y ? Array.from(C().subarray(Number(y) >>> 0, Number(w) >>> 0)) : [] });\n          }, 834983: (s) => {\n            n.jb(\"Where\", s, void 0);\n          }, 835036: (s, l, h) => {\n            n.jb(\"Transpose\", s, { perm: l ? Array.from(C().subarray(Number(l) >>> 0, Number(h) >>> 0)) : [] });\n          }, 835160: (s, l, h, y) => {\n            n.jb(\"DepthToSpace\", s, { blocksize: l, mode: Te(h), format: y ? \"NHWC\" : \"NCHW\" });\n          }, 835293: (s, l, h, y) => {\n            n.jb(\"DepthToSpace\", s, { blocksize: l, mode: Te(h), format: y ? \"NHWC\" : \"NCHW\" });\n          }, 835426: (s, l, h, y, w, A, B, R, G, K, ae, le, _e, ke, Bt) => {\n            n.jb(\"ConvTranspose\", s, { format: G ? \"NHWC\" : \"NCHW\", autoPad: l, dilations: [h], group: y, kernelShape: [w], pads: [A, B], strides: [R], wIsConst: () => !!ue()[K >>> 0], outputPadding: ae ? Array.from(C().subarray(Number(ae) >>> 0, Number(le) >>> 0)) : [], outputShape: _e ? Array.from(C().subarray(Number(_e) >>> 0, Number(ke) >>> 0)) : [], activation: Te(Bt) });\n          }, 835859: (s, l, h, y, w, A, B, R, G, K, ae, le, _e, ke) => {\n            n.jb(\"ConvTranspose\", s, { format: R ? \"NHWC\" : \"NCHW\", autoPad: l, dilations: Array.from(C().subarray(Number(h) >>> 0, 2 + (Number(h) >>> 0) >>> 0)), group: y, kernelShape: Array.from(C().subarray(Number(w) >>> 0, 2 + (Number(w) >>> 0) >>> 0)), pads: Array.from(C().subarray(Number(A) >>> 0, 4 + (Number(A) >>> 0) >>> 0)), strides: Array.from(C().subarray(Number(B) >>> 0, 2 + (Number(B) >>> 0) >>> 0)), wIsConst: () => !!ue()[G >>> 0], outputPadding: K ? Array.from(C().subarray(Number(K) >>> 0, Number(ae) >>> 0)) : [], outputShape: le ? Array.from(C().subarray(Number(le) >>> 0, Number(_e) >>> 0)) : [], activation: Te(ke) });\n          }, 836520: (s, l, h, y, w, A, B, R, G, K, ae, le, _e, ke, Bt) => {\n            n.jb(\"ConvTranspose\", s, { format: G ? \"NHWC\" : \"NCHW\", autoPad: l, dilations: [h], group: y, kernelShape: [w], pads: [A, B], strides: [R], wIsConst: () => !!ue()[K >>> 0], outputPadding: ae ? Array.from(C().subarray(Number(ae) >>> 0, Number(le) >>> 0)) : [], outputShape: _e ? Array.from(C().subarray(Number(_e) >>> 0, Number(ke) >>> 0)) : [], activation: Te(Bt) });\n          }, 836953: (s, l, h, y, w, A, B, R, G, K, ae, le, _e, ke) => {\n            n.jb(\"ConvTranspose\", s, { format: R ? \"NHWC\" : \"NCHW\", autoPad: l, dilations: Array.from(C().subarray(Number(h) >>> 0, 2 + (Number(h) >>> 0) >>> 0)), group: y, kernelShape: Array.from(C().subarray(Number(w) >>> 0, 2 + (Number(w) >>> 0) >>> 0)), pads: Array.from(C().subarray(Number(A) >>> 0, 4 + (Number(A) >>> 0) >>> 0)), strides: Array.from(C().subarray(Number(B) >>> 0, 2 + (Number(B) >>> 0) >>> 0)), wIsConst: () => !!ue()[G >>> 0], outputPadding: K ? Array.from(C().subarray(Number(K) >>> 0, Number(ae) >>> 0)) : [], outputShape: le ? Array.from(C().subarray(Number(le) >>> 0, Number(_e) >>> 0)) : [], activation: Te(ke) });\n          }, 837614: (s, l) => {\n            n.jb(\"GlobalAveragePool\", s, { format: l ? \"NHWC\" : \"NCHW\" });\n          }, 837705: (s, l, h, y, w, A, B, R, G, K, ae, le, _e, ke) => {\n            n.jb(\"AveragePool\", s, { format: ke ? \"NHWC\" : \"NCHW\", auto_pad: l, ceil_mode: h, count_include_pad: y, storage_order: w, dilations: A ? Array.from(C().subarray(Number(A) >>> 0, Number(B) >>> 0)) : [], kernel_shape: R ? Array.from(C().subarray(Number(R) >>> 0, Number(G) >>> 0)) : [], pads: K ? Array.from(C().subarray(Number(K) >>> 0, Number(ae) >>> 0)) : [], strides: le ? Array.from(C().subarray(Number(le) >>> 0, Number(_e) >>> 0)) : [] });\n          }, 838184: (s, l) => {\n            n.jb(\"GlobalAveragePool\", s, { format: l ? \"NHWC\" : \"NCHW\" });\n          }, 838275: (s, l, h, y, w, A, B, R, G, K, ae, le, _e, ke) => {\n            n.jb(\"AveragePool\", s, { format: ke ? \"NHWC\" : \"NCHW\", auto_pad: l, ceil_mode: h, count_include_pad: y, storage_order: w, dilations: A ? Array.from(C().subarray(Number(A) >>> 0, Number(B) >>> 0)) : [], kernel_shape: R ? Array.from(C().subarray(Number(R) >>> 0, Number(G) >>> 0)) : [], pads: K ? Array.from(C().subarray(Number(K) >>> 0, Number(ae) >>> 0)) : [], strides: le ? Array.from(C().subarray(Number(le) >>> 0, Number(_e) >>> 0)) : [] });\n          }, 838754: (s, l) => {\n            n.jb(\"GlobalMaxPool\", s, { format: l ? \"NHWC\" : \"NCHW\" });\n          }, 838841: (s, l, h, y, w, A, B, R, G, K, ae, le, _e, ke) => {\n            n.jb(\"MaxPool\", s, { format: ke ? \"NHWC\" : \"NCHW\", auto_pad: l, ceil_mode: h, count_include_pad: y, storage_order: w, dilations: A ? Array.from(C().subarray(Number(A) >>> 0, Number(B) >>> 0)) : [], kernel_shape: R ? Array.from(C().subarray(Number(R) >>> 0, Number(G) >>> 0)) : [], pads: K ? Array.from(C().subarray(Number(K) >>> 0, Number(ae) >>> 0)) : [], strides: le ? Array.from(C().subarray(Number(le) >>> 0, Number(_e) >>> 0)) : [] });\n          }, 839316: (s, l) => {\n            n.jb(\"GlobalMaxPool\", s, { format: l ? \"NHWC\" : \"NCHW\" });\n          }, 839403: (s, l, h, y, w, A, B, R, G, K, ae, le, _e, ke) => {\n            n.jb(\"MaxPool\", s, { format: ke ? \"NHWC\" : \"NCHW\", auto_pad: l, ceil_mode: h, count_include_pad: y, storage_order: w, dilations: A ? Array.from(C().subarray(Number(A) >>> 0, Number(B) >>> 0)) : [], kernel_shape: R ? Array.from(C().subarray(Number(R) >>> 0, Number(G) >>> 0)) : [], pads: K ? Array.from(C().subarray(Number(K) >>> 0, Number(ae) >>> 0)) : [], strides: le ? Array.from(C().subarray(Number(le) >>> 0, Number(_e) >>> 0)) : [] });\n          }, 839878: (s, l, h, y, w) => {\n            n.jb(\"Gemm\", s, { alpha: l, beta: h, transA: y, transB: w });\n          }, 839982: (s) => {\n            n.jb(\"MatMul\", s, void 0);\n          }, 840036: (s, l, h, y) => {\n            n.jb(\"ArgMax\", s, { keepDims: !!l, selectLastIndex: !!h, axis: y });\n          }, 840144: (s, l, h, y) => {\n            n.jb(\"ArgMin\", s, { keepDims: !!l, selectLastIndex: !!h, axis: y });\n          }, 840252: (s, l) => {\n            n.jb(\"Softmax\", s, { axis: l });\n          }, 840315: (s, l) => {\n            n.jb(\"Concat\", s, { axis: l });\n          }, 840375: (s, l, h, y, w) => {\n            n.jb(\"Split\", s, { axis: l, numOutputs: h, splitSizes: y ? Array.from(C().subarray(Number(y) >>> 0, Number(w) >>> 0)) : [] });\n          }, 840531: (s) => {\n            n.jb(\"Expand\", s, void 0);\n          }, 840585: (s, l) => {\n            n.jb(\"Gather\", s, { axis: Number(l) });\n          }, 840656: (s, l) => {\n            n.jb(\"GatherElements\", s, { axis: Number(l) });\n          }, 840735: (s, l) => {\n            n.jb(\"GatherND\", s, { batch_dims: Number(l) });\n          }, 840814: (s, l, h, y, w, A, B, R, G, K, ae) => {\n            n.jb(\"Resize\", s, { antialias: l, axes: h ? Array.from(C().subarray(Number(h) >>> 0, Number(y) >>> 0)) : [], coordinateTransformMode: Te(w), cubicCoeffA: A, excludeOutside: B, extrapolationValue: R, keepAspectRatioPolicy: Te(G), mode: Te(K), nearestMode: Te(ae) });\n          }, 841176: (s, l, h, y, w, A, B) => {\n            n.jb(\"Slice\", s, { starts: l ? Array.from(C().subarray(Number(l) >>> 0, Number(h) >>> 0)) : [], ends: y ? Array.from(C().subarray(Number(y) >>> 0, Number(w) >>> 0)) : [], axes: A ? Array.from(C().subarray(Number(A) >>> 0, Number(B) >>> 0)) : [] });\n          }, 841440: (s) => {\n            n.jb(\"Tile\", s, void 0);\n          }, 841492: (s, l, h) => {\n            n.jb(\"InstanceNormalization\", s, { epsilon: l, format: h ? \"NHWC\" : \"NCHW\" });\n          }, 841606: (s, l, h) => {\n            n.jb(\"InstanceNormalization\", s, { epsilon: l, format: h ? \"NHWC\" : \"NCHW\" });\n          }, 841720: (s) => {\n            n.jb(\"Range\", s, void 0);\n          }, 841773: (s, l) => {\n            n.jb(\"Einsum\", s, { equation: Te(l) });\n          }, 841854: (s, l, h, y, w) => {\n            n.jb(\"Pad\", s, { mode: l, value: h, pads: y ? Array.from(C().subarray(Number(y) >>> 0, Number(w) >>> 0)) : [] });\n          }, 841997: (s, l, h, y, w, A) => {\n            n.jb(\"BatchNormalization\", s, { epsilon: l, momentum: h, spatial: !!w, trainingMode: !!y, format: A ? \"NHWC\" : \"NCHW\" });\n          }, 842166: (s, l, h, y, w, A) => {\n            n.jb(\"BatchNormalization\", s, { epsilon: l, momentum: h, spatial: !!w, trainingMode: !!y, format: A ? \"NHWC\" : \"NCHW\" });\n          }, 842335: (s, l, h) => {\n            n.jb(\"CumSum\", s, { exclusive: Number(l), reverse: Number(h) });\n          }, 842432: (s, l, h) => {\n            n.jb(\"DequantizeLinear\", s, { axis: l, blockSize: h });\n          }, 842522: (s, l, h, y, w) => {\n            n.jb(\"GridSample\", s, { align_corners: l, mode: Te(h), padding_mode: Te(y), format: w ? \"NHWC\" : \"NCHW\" });\n          }, 842692: (s, l, h, y, w) => {\n            n.jb(\"GridSample\", s, { align_corners: l, mode: Te(h), padding_mode: Te(y), format: w ? \"NHWC\" : \"NCHW\" });\n          }, 842862: (s, l) => {\n            n.jb(\"ScatterND\", s, { reduction: Te(l) });\n          }, 842947: (s, l, h, y, w, A, B, R, G) => {\n            n.jb(\"Attention\", s, { numHeads: l, isUnidirectional: h, maskFilterValue: y, scale: w, doRotary: A, qkvHiddenSizes: B ? Array.from(C().subarray(Number(R) >>> 0, Number(R) + B >>> 0)) : [], pastPresentShareBuffer: !!G });\n          }, 843219: (s) => {\n            n.jb(\"BiasAdd\", s, void 0);\n          }, 843274: (s) => {\n            n.jb(\"BiasSplitGelu\", s, void 0);\n          }, 843335: (s) => {\n            n.jb(\"FastGelu\", s, void 0);\n          }, 843391: (s, l, h, y, w, A, B, R, G, K, ae, le, _e, ke, Bt, Rp) => {\n            n.jb(\"Conv\", s, { format: le ? \"NHWC\" : \"NCHW\", auto_pad: l, dilations: h ? Array.from(C().subarray(Number(h) >>> 0, Number(y) >>> 0)) : [], group: w, kernel_shape: A ? Array.from(C().subarray(Number(A) >>> 0, Number(B) >>> 0)) : [], pads: R ? Array.from(C().subarray(Number(R) >>> 0, Number(G) >>> 0)) : [], strides: K ? Array.from(C().subarray(Number(K) >>> 0, Number(ae) >>> 0)) : [], w_is_const: () => !!ue()[Number(_e) >>> 0], activation: Te(ke), activation_params: Bt ? Array.from(de().subarray(Number(Bt) >>> 0, Number(Rp) >>> 0)) : [] });\n          }, 843975: (s) => {\n            n.jb(\"Gelu\", s, void 0);\n          }, 844027: (s, l, h, y, w, A, B, R, G) => {\n            n.jb(\"GroupQueryAttention\", s, { numHeads: l, kvNumHeads: h, scale: y, softcap: w, doRotary: A, rotaryInterleaved: B, smoothSoftmax: R, localWindowSize: G });\n          }, 844244: (s, l, h, y) => {\n            n.jb(\"LayerNormalization\", s, { axis: l, epsilon: h, simplified: !!y });\n          }, 844355: (s, l, h, y) => {\n            n.jb(\"LayerNormalization\", s, { axis: l, epsilon: h, simplified: !!y });\n          }, 844466: (s, l, h, y, w, A) => {\n            n.jb(\"MatMulNBits\", s, { k: l, n: h, accuracyLevel: y, bits: w, blockSize: A });\n          }, 844593: (s, l, h, y, w, A) => {\n            n.jb(\"MultiHeadAttention\", s, { numHeads: l, isUnidirectional: h, maskFilterValue: y, scale: w, doRotary: A });\n          }, 844752: (s, l) => {\n            n.jb(\"QuickGelu\", s, { alpha: l });\n          }, 844816: (s, l, h, y, w) => {\n            n.jb(\"RotaryEmbedding\", s, { interleaved: !!l, numHeads: h, rotaryEmbeddingDim: y, scale: w });\n          }, 844955: (s, l, h) => {\n            n.jb(\"SkipLayerNormalization\", s, { epsilon: l, simplified: !!h });\n          }, 845057: (s, l, h) => {\n            n.jb(\"SkipLayerNormalization\", s, { epsilon: l, simplified: !!h });\n          }, 845159: (s, l, h, y) => {\n            n.jb(\"GatherBlockQuantized\", s, { gatherAxis: l, quantizeAxis: h, blockSize: y });\n          }, 845280: (s) => {\n            n.Zb(s);\n          }, 845314: (s, l) => n.ac(Number(s), Number(l), n.Fb.dc, n.Fb.errors) };\n          function bc(s, l, h) {\n            return mi(async () => {\n              await n.Xb(Number(s), Number(l), Number(h));\n            });\n          }\n          function yc() {\n            return typeof wasmOffsetConverter < \"u\";\n          }\n          class pn {\n            constructor(l) {\n              __publicField(this, \"name\", \"ExitStatus\");\n              this.message = `Program terminated with exit(${l})`, this.status = l;\n            }\n          }\n          var Bo = (s) => {\n            s.terminate(), s.onmessage = () => {\n            };\n          }, mn = [], Do = (s) => {\n            ct.length == 0 && (Wo(), Vo(ct[0]));\n            var l = ct.pop();\n            if (!l) return 6;\n            Gt.push(l), wt[s.Ab] = l, l.Ab = s.Ab;\n            var h = { Bb: \"run\", fc: s.ec, Hb: s.Hb, Ab: s.Ab };\n            return l.postMessage(h, s.Mb), 0;\n          }, lt = 0, xe = (s, l, ...h) => {\n            for (var y = 2 * h.length, w = Pn(), A = kn(8 * y), B = A >>> 3, R = 0; R < h.length; R++) {\n              var G = h[R];\n              typeof G == \"bigint\" ? (Z[B + 2 * R] = 1n, Z[B + 2 * R + 1] = G) : (Z[B + 2 * R] = 0n, ze()[B + 2 * R + 1 >>> 0] = G);\n            }\n            return s = Di(s, 0, y, A, l), mr(w), s;\n          };\n          function fn(s) {\n            if (u) return xe(0, 1, s);\n            if (I = s, !(0 < lt)) {\n              for (var l of Gt) Bo(l);\n              for (l of ct) Bo(l);\n              ct = [], Gt = [], wt = {}, te = true;\n            }\n            g(0, new pn(s));\n          }\n          function Mo(s) {\n            if (u) return xe(1, 0, s);\n            hn(s);\n          }\n          var hn = (s) => {\n            if (I = s, u) throw Mo(s), \"unwind\";\n            fn(s);\n          }, ct = [], Gt = [], Ro = [], wt = {}, Uo = (s) => {\n            var l = s.Ab;\n            delete wt[l], ct.push(s), Gt.splice(Gt.indexOf(s), 1), s.Ab = 0, Mi(l);\n          };\n          function No() {\n            Ro.forEach((s) => s());\n          }\n          var Vo = (s) => new Promise((l) => {\n            s.onmessage = (w) => {\n              var A = (w = w.data).Bb;\n              if (w.Gb && w.Gb != cr()) {\n                var B = wt[w.Gb];\n                B ? B.postMessage(w, w.Mb) : x(`Internal error! Worker sent a message \"${A}\" to target pthread ${w.Gb}, but that thread no longer exists!`);\n              } else A === \"checkMailbox\" ? nr() : A === \"spawnThread\" ? Do(w) : A === \"cleanupThread\" ? Uo(wt[w.hc]) : A === \"loaded\" ? (s.loaded = true, l(s)) : A === \"alert\" ? alert(`Thread ${w.ic}: ${w.text}`) : w.target === \"setimmediate\" ? s.postMessage(w) : A === \"callHandler\" ? n[w.Qb](...w.args) : A && x(`worker sent an unknown command ${A}`);\n            }, s.onerror = (w) => {\n              throw x(`worker sent an error! ${w.filename}:${w.lineno}: ${w.message}`), w;\n            };\n            var h, y = [];\n            for (h of []) n.propertyIsEnumerable(h) && y.push(h);\n            s.postMessage({ Bb: \"load\", Rb: y, kc: T, lc: E });\n          });\n          function Wo() {\n            var s = new Worker((() => {\n              let l = URL;\n              return import_meta.url > \"file:\" && import_meta.url < \"file;\" ? new l(\"ort.bundle.min.mjs\", import_meta.url) : new URL(import_meta.url);\n            })(), { type: \"module\", workerData: \"em-pthread\", name: \"em-pthread\" });\n            ct.push(s);\n          }\n          var _c = (s) => {\n            Ce();\n            var l = V()[s + 52 >>> 2 >>> 0];\n            s = V()[s + 56 >>> 2 >>> 0], Ni(l, l - s), mr(l);\n          }, wc = (s, l) => {\n            lt = 0, s = Vi(s, l), 0 < lt ? I = s : En(s);\n          };\n          class vc {\n            constructor(l) {\n              this.Ib = l - 24;\n            }\n          }\n          function $c(s, l, h) {\n            var y = new vc(s >>>= 0);\n            throw l >>>= 0, h >>>= 0, V()[y.Ib + 16 >>> 2 >>> 0] = 0, V()[y.Ib + 4 >>> 2 >>> 0] = l, V()[y.Ib + 8 >>> 2 >>> 0] = h, s;\n          }\n          function Lo(s, l, h, y) {\n            return u ? xe(2, 1, s, l, h, y) : Go(s, l, h, y);\n          }\n          function Go(s, l, h, y) {\n            if (s >>>= 0, h >>>= 0, y >>>= 0, d === void 0) return 6;\n            var w = [];\n            return u && w.length === 0 ? Lo(s, l >>>= 0, h, y) : (s = { ec: h, Ab: s, Hb: y, Mb: w }, u ? (s.Bb = \"spawnThread\", postMessage(s, w), 0) : Do(s));\n          }\n          var Ho = typeof TextDecoder < \"u\" ? new TextDecoder() : void 0, Fo = (s, l = 0, h = NaN) => {\n            var y = (l >>>= 0) + h;\n            for (h = l; s[h] && !(h >= y); ) ++h;\n            if (16 < h - l && s.buffer && Ho) return Ho.decode(s.buffer instanceof ArrayBuffer ? s.subarray(l, h) : s.slice(l, h));\n            for (y = \"\"; l < h; ) {\n              var w = s[l++];\n              if (128 & w) {\n                var A = 63 & s[l++];\n                if ((224 & w) == 192) y += String.fromCharCode((31 & w) << 6 | A);\n                else {\n                  var B = 63 & s[l++];\n                  65536 > (w = (240 & w) == 224 ? (15 & w) << 12 | A << 6 | B : (7 & w) << 18 | A << 12 | B << 6 | 63 & s[l++]) ? y += String.fromCharCode(w) : (w -= 65536, y += String.fromCharCode(55296 | w >> 10, 56320 | 1023 & w));\n                }\n              } else y += String.fromCharCode(w);\n            }\n            return y;\n          }, Te = (s, l) => (s >>>= 0) ? Fo(he(), s, l) : \"\";\n          function qo(s, l, h) {\n            return u ? xe(3, 1, s, l, h) : 0;\n          }\n          function jo(s, l) {\n            if (u) return xe(4, 1, s, l);\n          }\n          var Ko = (s) => {\n            for (var l = 0, h = 0; h < s.length; ++h) {\n              var y = s.charCodeAt(h);\n              127 >= y ? l++ : 2047 >= y ? l += 2 : 55296 <= y && 57343 >= y ? (l += 4, ++h) : l += 3;\n            }\n            return l;\n          }, zt = (s, l, h) => {\n            var y = he();\n            if (l >>>= 0, 0 < h) {\n              var w = l;\n              h = l + h - 1;\n              for (var A = 0; A < s.length; ++A) {\n                var B = s.charCodeAt(A);\n                if (55296 <= B && 57343 >= B && (B = 65536 + ((1023 & B) << 10) | 1023 & s.charCodeAt(++A)), 127 >= B) {\n                  if (l >= h) break;\n                  y[l++ >>> 0] = B;\n                } else {\n                  if (2047 >= B) {\n                    if (l + 1 >= h) break;\n                    y[l++ >>> 0] = 192 | B >> 6;\n                  } else {\n                    if (65535 >= B) {\n                      if (l + 2 >= h) break;\n                      y[l++ >>> 0] = 224 | B >> 12;\n                    } else {\n                      if (l + 3 >= h) break;\n                      y[l++ >>> 0] = 240 | B >> 18, y[l++ >>> 0] = 128 | B >> 12 & 63;\n                    }\n                    y[l++ >>> 0] = 128 | B >> 6 & 63;\n                  }\n                  y[l++ >>> 0] = 128 | 63 & B;\n                }\n              }\n              y[l >>> 0] = 0, s = l - w;\n            } else s = 0;\n            return s;\n          };\n          function Zo(s, l) {\n            if (u) return xe(5, 1, s, l);\n          }\n          function Qo(s, l, h) {\n            if (u) return xe(6, 1, s, l, h);\n          }\n          function Yo(s, l, h) {\n            return u ? xe(7, 1, s, l, h) : 0;\n          }\n          function Xo(s, l) {\n            if (u) return xe(8, 1, s, l);\n          }\n          function Jo(s, l, h) {\n            if (u) return xe(9, 1, s, l, h);\n          }\n          function ei(s, l, h, y) {\n            if (u) return xe(10, 1, s, l, h, y);\n          }\n          function ti(s, l, h, y) {\n            if (u) return xe(11, 1, s, l, h, y);\n          }\n          function ri(s, l, h, y) {\n            if (u) return xe(12, 1, s, l, h, y);\n          }\n          function ni(s) {\n            if (u) return xe(13, 1, s);\n          }\n          function oi(s, l) {\n            if (u) return xe(14, 1, s, l);\n          }\n          function ii(s, l, h) {\n            if (u) return xe(15, 1, s, l, h);\n          }\n          var ai, pt, xc = () => dt(\"\"), Ke = (s) => {\n            for (var l = \"\"; he()[s >>> 0]; ) l += ai[he()[s++ >>> 0]];\n            return l;\n          }, gn = {}, bn = {}, Sc = {};\n          function it(s, l, h = {}) {\n            return function(y, w, A = {}) {\n              var B = w.name;\n              if (!y) throw new pt(`type \"${B}\" must have a positive integer typeid pointer`);\n              if (bn.hasOwnProperty(y)) {\n                if (A.Sb) return;\n                throw new pt(`Cannot register type '${B}' twice`);\n              }\n              bn[y] = w, delete Sc[y], gn.hasOwnProperty(y) && (w = gn[y], delete gn[y], w.forEach((R) => R()));\n            }(s, l, h);\n          }\n          var si = (s, l, h) => {\n            switch (l) {\n              case 1:\n                return h ? (y) => ue()[y >>> 0] : (y) => he()[y >>> 0];\n              case 2:\n                return h ? (y) => ye()[y >>> 1 >>> 0] : (y) => re()[y >>> 1 >>> 0];\n              case 4:\n                return h ? (y) => C()[y >>> 2 >>> 0] : (y) => V()[y >>> 2 >>> 0];\n              case 8:\n                return h ? (y) => Z[y >>> 3] : (y) => we[y >>> 3];\n              default:\n                throw new TypeError(`invalid integer width (${l}): ${s}`);\n            }\n          };\n          function Tc(s, l, h) {\n            h >>>= 0, it(s >>>= 0, { name: l = Ke(l >>> 0), fromWireType: (y) => y, toWireType: function(y, w) {\n              if (typeof w != \"bigint\" && typeof w != \"number\") throw w = w === null ? \"null\" : (y = typeof w) == \"object\" || y === \"array\" || y === \"function\" ? w.toString() : \"\" + w, new TypeError(`Cannot convert \"${w}\" to ${this.name}`);\n              return typeof w == \"number\" && (w = BigInt(w)), w;\n            }, Cb: mt, readValueFromPointer: si(l, h, l.indexOf(\"u\") == -1), Db: null });\n          }\n          var mt = 8;\n          function Ic(s, l, h, y) {\n            it(s >>>= 0, { name: l = Ke(l >>> 0), fromWireType: function(w) {\n              return !!w;\n            }, toWireType: function(w, A) {\n              return A ? h : y;\n            }, Cb: mt, readValueFromPointer: function(w) {\n              return this.fromWireType(he()[w >>> 0]);\n            }, Db: null });\n          }\n          var yn = [], at = [];\n          function _n(s) {\n            9 < (s >>>= 0) && --at[s + 1] == 0 && (at[s] = void 0, yn.push(s));\n          }\n          var De = (s) => {\n            if (!s) throw new pt(\"Cannot use deleted val. handle = \" + s);\n            return at[s];\n          }, Ve = (s) => {\n            switch (s) {\n              case void 0:\n                return 2;\n              case null:\n                return 4;\n              case true:\n                return 6;\n              case false:\n                return 8;\n              default:\n                let l = yn.pop() || at.length;\n                return at[l] = s, at[l + 1] = 1, l;\n            }\n          };\n          function wn(s) {\n            return this.fromWireType(V()[s >>> 2 >>> 0]);\n          }\n          var Cc = { name: \"emscripten::val\", fromWireType: (s) => {\n            var l = De(s);\n            return _n(s), l;\n          }, toWireType: (s, l) => Ve(l), Cb: mt, readValueFromPointer: wn, Db: null };\n          function Ac(s) {\n            return it(s >>> 0, Cc);\n          }\n          var Ec = (s, l) => {\n            switch (l) {\n              case 4:\n                return function(h) {\n                  return this.fromWireType(de()[h >>> 2 >>> 0]);\n                };\n              case 8:\n                return function(h) {\n                  return this.fromWireType(ze()[h >>> 3 >>> 0]);\n                };\n              default:\n                throw new TypeError(`invalid float width (${l}): ${s}`);\n            }\n          };\n          function kc(s, l, h) {\n            h >>>= 0, it(s >>>= 0, { name: l = Ke(l >>> 0), fromWireType: (y) => y, toWireType: (y, w) => w, Cb: mt, readValueFromPointer: Ec(l, h), Db: null });\n          }\n          function Pc(s, l, h, y, w) {\n            if (s >>>= 0, h >>>= 0, l = Ke(l >>> 0), w === -1 && (w = 4294967295), w = (R) => R, y === 0) {\n              var A = 32 - 8 * h;\n              w = (R) => R << A >>> A;\n            }\n            var B = l.includes(\"unsigned\") ? function(R, G) {\n              return G >>> 0;\n            } : function(R, G) {\n              return G;\n            };\n            it(s, { name: l, fromWireType: w, toWireType: B, Cb: mt, readValueFromPointer: si(l, h, y !== 0), Db: null });\n          }\n          function zc(s, l, h) {\n            function y(A) {\n              var B = V()[A >>> 2 >>> 0];\n              return A = V()[A + 4 >>> 2 >>> 0], new w(ue().buffer, A, B);\n            }\n            var w = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][l];\n            it(s >>>= 0, { name: h = Ke(h >>> 0), fromWireType: y, Cb: mt, readValueFromPointer: y }, { Sb: true });\n          }\n          function Oc(s, l) {\n            it(s >>>= 0, { name: l = Ke(l >>> 0), fromWireType: function(h) {\n              for (var y, w = V()[h >>> 2 >>> 0], A = h + 4, B = A, R = 0; R <= w; ++R) {\n                var G = A + R;\n                R != w && he()[G >>> 0] != 0 || (B = Te(B, G - B), y === void 0 ? y = B : (y += \"\\0\", y += B), B = G + 1);\n              }\n              return Qe(h), y;\n            }, toWireType: function(h, y) {\n              y instanceof ArrayBuffer && (y = new Uint8Array(y));\n              var w = typeof y == \"string\";\n              if (!(w || y instanceof Uint8Array || y instanceof Uint8ClampedArray || y instanceof Int8Array)) throw new pt(\"Cannot pass non-string to std::string\");\n              var A = w ? Ko(y) : y.length, B = pr(4 + A + 1), R = B + 4;\n              if (V()[B >>> 2 >>> 0] = A, w) zt(y, R, A + 1);\n              else if (w) for (w = 0; w < A; ++w) {\n                var G = y.charCodeAt(w);\n                if (255 < G) throw Qe(B), new pt(\"String has UTF-16 code units that do not fit in 8 bits\");\n                he()[R + w >>> 0] = G;\n              }\n              else for (w = 0; w < A; ++w) he()[R + w >>> 0] = y[w];\n              return h !== null && h.push(Qe, B), B;\n            }, Cb: mt, readValueFromPointer: wn, Db(h) {\n              Qe(h);\n            } });\n          }\n          var ui = typeof TextDecoder < \"u\" ? new TextDecoder(\"utf-16le\") : void 0, Bc = (s, l) => {\n            for (var h = s >> 1, y = h + l / 2; !(h >= y) && re()[h >>> 0]; ) ++h;\n            if (32 < (h <<= 1) - s && ui) return ui.decode(he().slice(s, h));\n            for (h = \"\", y = 0; !(y >= l / 2); ++y) {\n              var w = ye()[s + 2 * y >>> 1 >>> 0];\n              if (w == 0) break;\n              h += String.fromCharCode(w);\n            }\n            return h;\n          }, Dc = (s, l, h) => {\n            if (h ?? (h = 2147483647), 2 > h) return 0;\n            var y = l;\n            h = (h -= 2) < 2 * s.length ? h / 2 : s.length;\n            for (var w = 0; w < h; ++w) {\n              var A = s.charCodeAt(w);\n              ye()[l >>> 1 >>> 0] = A, l += 2;\n            }\n            return ye()[l >>> 1 >>> 0] = 0, l - y;\n          }, Mc = (s) => 2 * s.length, Rc = (s, l) => {\n            for (var h = 0, y = \"\"; !(h >= l / 4); ) {\n              var w = C()[s + 4 * h >>> 2 >>> 0];\n              if (w == 0) break;\n              ++h, 65536 <= w ? (w -= 65536, y += String.fromCharCode(55296 | w >> 10, 56320 | 1023 & w)) : y += String.fromCharCode(w);\n            }\n            return y;\n          }, Uc = (s, l, h) => {\n            if (l >>>= 0, h ?? (h = 2147483647), 4 > h) return 0;\n            var y = l;\n            h = y + h - 4;\n            for (var w = 0; w < s.length; ++w) {\n              var A = s.charCodeAt(w);\n              if (55296 <= A && 57343 >= A && (A = 65536 + ((1023 & A) << 10) | 1023 & s.charCodeAt(++w)), C()[l >>> 2 >>> 0] = A, (l += 4) + 4 > h) break;\n            }\n            return C()[l >>> 2 >>> 0] = 0, l - y;\n          }, Nc = (s) => {\n            for (var l = 0, h = 0; h < s.length; ++h) {\n              var y = s.charCodeAt(h);\n              55296 <= y && 57343 >= y && ++h, l += 4;\n            }\n            return l;\n          };\n          function Vc(s, l, h) {\n            if (s >>>= 0, l >>>= 0, h = Ke(h >>>= 0), l === 2) var y = Bc, w = Dc, A = Mc, B = (R) => re()[R >>> 1 >>> 0];\n            else l === 4 && (y = Rc, w = Uc, A = Nc, B = (R) => V()[R >>> 2 >>> 0]);\n            it(s, { name: h, fromWireType: (R) => {\n              for (var G, K = V()[R >>> 2 >>> 0], ae = R + 4, le = 0; le <= K; ++le) {\n                var _e = R + 4 + le * l;\n                le != K && B(_e) != 0 || (ae = y(ae, _e - ae), G === void 0 ? G = ae : (G += \"\\0\", G += ae), ae = _e + l);\n              }\n              return Qe(R), G;\n            }, toWireType: (R, G) => {\n              if (typeof G != \"string\") throw new pt(`Cannot pass non-string to C++ string type ${h}`);\n              var K = A(G), ae = pr(4 + K + l);\n              return V()[ae >>> 2 >>> 0] = K / l, w(G, ae + 4, K + l), R !== null && R.push(Qe, ae), ae;\n            }, Cb: mt, readValueFromPointer: wn, Db(R) {\n              Qe(R);\n            } });\n          }\n          function Wc(s, l) {\n            it(s >>>= 0, { Tb: true, name: l = Ke(l >>> 0), Cb: 0, fromWireType: () => {\n            }, toWireType: () => {\n            } });\n          }\n          function Lc(s) {\n            An(s >>> 0, !a, 1, !i, 131072, false), No();\n          }\n          var vn = (s) => {\n            if (!te) try {\n              if (s(), !(0 < lt)) try {\n                u ? En(I) : hn(I);\n              } catch (l) {\n                l instanceof pn || l == \"unwind\" || g(0, l);\n              }\n            } catch (l) {\n              l instanceof pn || l == \"unwind\" || g(0, l);\n            }\n          };\n          function $n(s) {\n            s >>>= 0, typeof Atomics.jc == \"function\" && (Atomics.jc(C(), s >>> 2, s).value.then(nr), s += 128, Atomics.store(C(), s >>> 2, 1));\n          }\n          var nr = () => {\n            var s = cr();\n            s && ($n(s), vn(Ui));\n          };\n          function Gc(s, l) {\n            (s >>>= 0) == l >>> 0 ? setTimeout(nr) : u ? postMessage({ Gb: s, Bb: \"checkMailbox\" }) : (s = wt[s]) && s.postMessage({ Bb: \"checkMailbox\" });\n          }\n          var xn = [];\n          function Hc(s, l, h, y, w) {\n            for (l >>>= 0, y /= 2, xn.length = y, h = w >>> 0 >>> 3, w = 0; w < y; w++) xn[w] = Z[h + 2 * w] ? Z[h + 2 * w + 1] : ze()[h + 2 * w + 1 >>> 0];\n            return (l ? cn[l] : Mp[s])(...xn);\n          }\n          var Fc = () => {\n            lt = 0;\n          };\n          function qc(s) {\n            s >>>= 0, u ? postMessage({ Bb: \"cleanupThread\", hc: s }) : Uo(wt[s]);\n          }\n          function jc(s) {\n          }\n          var or = (s, l) => {\n            var h = bn[s];\n            if (h === void 0) throw s = zi(s), h = Ke(s), Qe(s), new pt(`${l} has unknown type ${h}`);\n            return h;\n          }, di = (s, l, h) => {\n            var y = [];\n            return s = s.toWireType(y, h), y.length && (V()[l >>> 2 >>> 0] = Ve(y)), s;\n          };\n          function Kc(s, l, h) {\n            return l >>>= 0, h >>>= 0, s = De(s >>> 0), l = or(l, \"emval::as\"), di(l, h, s);\n          }\n          function Zc(s, l) {\n            return l >>>= 0, s = De(s >>> 0), (l = or(l, \"emval::as\")).toWireType(null, s);\n          }\n          var ir = (s) => {\n            try {\n              s();\n            } catch (l) {\n              dt(l);\n            }\n          }, ft = 0, Ze = null, li = 0, ar = [], ci = {}, pi = {}, Qc = 0, Sn = null, Yc = [];\n          function mi(s) {\n            return function(l) {\n              if (!te) {\n                if (ft === 0) {\n                  var h = false, y = false;\n                  l((w = 0) => {\n                    if (!te && (li = w, h = true, y)) {\n                      ft = 2, ir(() => Gi(Ze)), typeof MainLoop < \"u\" && MainLoop.Pb && MainLoop.resume(), w = false;\n                      try {\n                        var A = function() {\n                          var G = C()[Ze + 8 >>> 2 >>> 0];\n                          return G = Y[pi[G]], --lt, G();\n                        }();\n                      } catch (G) {\n                        A = G, w = true;\n                      }\n                      var B = false;\n                      if (!Ze) {\n                        var R = Sn;\n                        R && (Sn = null, (w ? R.reject : R.resolve)(A), B = true);\n                      }\n                      if (w && !B) throw A;\n                    }\n                  }), y = true, h || (ft = 1, Ze = function() {\n                    var w = pr(65548), A = w + 12;\n                    V()[w >>> 2 >>> 0] = A, V()[w + 4 >>> 2 >>> 0] = A + 65536, A = ar[0];\n                    var B = ci[A];\n                    return B === void 0 && (B = Qc++, ci[A] = B, pi[B] = A), A = B, C()[w + 8 >>> 2 >>> 0] = A, w;\n                  }(), typeof MainLoop < \"u\" && MainLoop.Pb && MainLoop.pause(), ir(() => Wi(Ze)));\n                } else ft === 2 ? (ft = 0, ir(Hi), Qe(Ze), Ze = null, Yc.forEach(vn)) : dt(`invalid state: ${ft}`);\n                return li;\n              }\n            }((l) => {\n              s().then(l);\n            });\n          }\n          function Xc(s) {\n            return s >>>= 0, mi(async () => {\n              var l = await De(s);\n              return Ve(l);\n            });\n          }\n          var sr = [];\n          function Jc(s, l, h, y) {\n            return h >>>= 0, y >>>= 0, (s = sr[s >>> 0])(null, l = De(l >>> 0), h, y);\n          }\n          var ep = {}, ur = (s) => {\n            var l = ep[s];\n            return l === void 0 ? Ke(s) : l;\n          };\n          function tp(s, l, h, y, w) {\n            return h >>>= 0, y >>>= 0, w >>>= 0, (s = sr[s >>> 0])(l = De(l >>> 0), l[h = ur(h)], y, w);\n          }\n          var fi = () => typeof globalThis == \"object\" ? globalThis : Function(\"return this\")();\n          function rp(s) {\n            return (s >>>= 0) == 0 ? Ve(fi()) : (s = ur(s), Ve(fi()[s]));\n          }\n          var np = (s) => {\n            var l = sr.length;\n            return sr.push(s), l;\n          }, op = (s, l) => {\n            for (var h = Array(s), y = 0; y < s; ++y) h[y] = or(V()[l + 4 * y >>> 2 >>> 0], \"parameter \" + y);\n            return h;\n          }, hi = (s, l) => Object.defineProperty(l, \"name\", { value: s });\n          function ip(s, l, h) {\n            var y = (l = op(s, l >>> 0)).shift();\n            s--;\n            var w = `return function (obj, func, destructorsRef, args) {\n`, A = 0, B = [];\n            h === 0 && B.push(\"obj\");\n            for (var R = [\"retType\"], G = [y], K = 0; K < s; ++K) B.push(\"arg\" + K), R.push(\"argType\" + K), G.push(l[K]), w += `  var arg${K} = argType${K}.readValueFromPointer(args${A ? \"+\" + A : \"\"});\n`, A += l[K].Cb;\n            return w += `  var rv = ${h === 1 ? \"new func\" : \"func.call\"}(${B.join(\", \")});\n`, y.Tb || (R.push(\"emval_returnValue\"), G.push(di), w += `  return emval_returnValue(retType, destructorsRef, rv);\n`), R.push(w + `};\n`), s = function(ae) {\n              var le = Function;\n              if (!(le instanceof Function)) throw new TypeError(`new_ called with constructor type ${typeof le} which is not a function`);\n              var _e = hi(le.name || \"unknownFunctionName\", function() {\n              });\n              return _e.prototype = le.prototype, _e = new _e(), (ae = le.apply(_e, ae)) instanceof Object ? ae : _e;\n            }(R)(...G), h = `methodCaller<(${l.map((ae) => ae.name).join(\", \")}) => ${y.name}>`, np(hi(h, s));\n          }\n          function ap(s) {\n            return s = ur(s >>> 0), Ve(n[s]);\n          }\n          function sp(s, l) {\n            return l >>>= 0, s = De(s >>> 0), l = De(l), Ve(s[l]);\n          }\n          function up(s) {\n            9 < (s >>>= 0) && (at[s + 1] += 1);\n          }\n          function dp() {\n            return Ve([]);\n          }\n          function lp(s) {\n            s = De(s >>> 0);\n            for (var l = Array(s.length), h = 0; h < s.length; h++) l[h] = s[h];\n            return Ve(l);\n          }\n          function cp(s) {\n            return Ve(ur(s >>> 0));\n          }\n          function pp() {\n            return Ve({});\n          }\n          function mp(s) {\n            for (var l = De(s >>>= 0); l.length; ) {\n              var h = l.pop();\n              l.pop()(h);\n            }\n            _n(s);\n          }\n          function fp(s, l, h) {\n            l >>>= 0, h >>>= 0, s = De(s >>> 0), l = De(l), h = De(h), s[l] = h;\n          }\n          function hp(s, l) {\n            return l >>>= 0, s = (s = or(s >>> 0, \"_emval_take_value\")).readValueFromPointer(l), Ve(s);\n          }\n          function gp(s, l) {\n            s = -9007199254740992 > s || 9007199254740992 < s ? NaN : Number(s), l >>>= 0, s = new Date(1e3 * s), C()[l >>> 2 >>> 0] = s.getUTCSeconds(), C()[l + 4 >>> 2 >>> 0] = s.getUTCMinutes(), C()[l + 8 >>> 2 >>> 0] = s.getUTCHours(), C()[l + 12 >>> 2 >>> 0] = s.getUTCDate(), C()[l + 16 >>> 2 >>> 0] = s.getUTCMonth(), C()[l + 20 >>> 2 >>> 0] = s.getUTCFullYear() - 1900, C()[l + 24 >>> 2 >>> 0] = s.getUTCDay(), s = (s.getTime() - Date.UTC(s.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0, C()[l + 28 >>> 2 >>> 0] = s;\n          }\n          var gi = (s) => s % 4 == 0 && (s % 100 != 0 || s % 400 == 0), bi = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], yi = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n          function bp(s, l) {\n            s = -9007199254740992 > s || 9007199254740992 < s ? NaN : Number(s), l >>>= 0, s = new Date(1e3 * s), C()[l >>> 2 >>> 0] = s.getSeconds(), C()[l + 4 >>> 2 >>> 0] = s.getMinutes(), C()[l + 8 >>> 2 >>> 0] = s.getHours(), C()[l + 12 >>> 2 >>> 0] = s.getDate(), C()[l + 16 >>> 2 >>> 0] = s.getMonth(), C()[l + 20 >>> 2 >>> 0] = s.getFullYear() - 1900, C()[l + 24 >>> 2 >>> 0] = s.getDay();\n            var h = (gi(s.getFullYear()) ? bi : yi)[s.getMonth()] + s.getDate() - 1 | 0;\n            C()[l + 28 >>> 2 >>> 0] = h, C()[l + 36 >>> 2 >>> 0] = -60 * s.getTimezoneOffset(), h = new Date(s.getFullYear(), 6, 1).getTimezoneOffset();\n            var y = new Date(s.getFullYear(), 0, 1).getTimezoneOffset();\n            s = 0 | (h != y && s.getTimezoneOffset() == Math.min(y, h)), C()[l + 32 >>> 2 >>> 0] = s;\n          }\n          function yp(s) {\n            s >>>= 0;\n            var l = new Date(C()[s + 20 >>> 2 >>> 0] + 1900, C()[s + 16 >>> 2 >>> 0], C()[s + 12 >>> 2 >>> 0], C()[s + 8 >>> 2 >>> 0], C()[s + 4 >>> 2 >>> 0], C()[s >>> 2 >>> 0], 0), h = C()[s + 32 >>> 2 >>> 0], y = l.getTimezoneOffset(), w = new Date(l.getFullYear(), 6, 1).getTimezoneOffset(), A = new Date(l.getFullYear(), 0, 1).getTimezoneOffset(), B = Math.min(A, w);\n            return 0 > h ? C()[s + 32 >>> 2 >>> 0] = +(w != A && B == y) : 0 < h != (B == y) && (w = Math.max(A, w), l.setTime(l.getTime() + 6e4 * ((0 < h ? B : w) - y))), C()[s + 24 >>> 2 >>> 0] = l.getDay(), h = (gi(l.getFullYear()) ? bi : yi)[l.getMonth()] + l.getDate() - 1 | 0, C()[s + 28 >>> 2 >>> 0] = h, C()[s >>> 2 >>> 0] = l.getSeconds(), C()[s + 4 >>> 2 >>> 0] = l.getMinutes(), C()[s + 8 >>> 2 >>> 0] = l.getHours(), C()[s + 12 >>> 2 >>> 0] = l.getDate(), C()[s + 16 >>> 2 >>> 0] = l.getMonth(), C()[s + 20 >>> 2 >>> 0] = l.getYear(), s = l.getTime(), BigInt(isNaN(s) ? -1 : s / 1e3);\n          }\n          function _i(s, l, h, y, w, A, B) {\n            return u ? xe(16, 1, s, l, h, y, w, A, B) : -52;\n          }\n          function wi(s, l, h, y, w, A) {\n            if (u) return xe(17, 1, s, l, h, y, w, A);\n          }\n          var Ht = {}, _p = () => performance.timeOrigin + performance.now();\n          function vi(s, l) {\n            if (u) return xe(18, 1, s, l);\n            if (Ht[s] && (clearTimeout(Ht[s].id), delete Ht[s]), !l) return 0;\n            var h = setTimeout(() => {\n              delete Ht[s], vn(() => Ri(s, performance.timeOrigin + performance.now()));\n            }, l);\n            return Ht[s] = { id: h, qc: l }, 0;\n          }\n          function wp(s, l, h, y) {\n            s >>>= 0, l >>>= 0, h >>>= 0, y >>>= 0;\n            var w = (/* @__PURE__ */ new Date()).getFullYear(), A = new Date(w, 0, 1).getTimezoneOffset();\n            w = new Date(w, 6, 1).getTimezoneOffset();\n            var B = Math.max(A, w);\n            V()[s >>> 2 >>> 0] = 60 * B, C()[l >>> 2 >>> 0] = +(A != w), s = (l = (R) => {\n              var G = Math.abs(R);\n              return `UTC${0 <= R ? \"-\" : \"+\"}${String(Math.floor(G / 60)).padStart(2, \"0\")}${String(G % 60).padStart(2, \"0\")}`;\n            })(A), l = l(w), w < A ? (zt(s, h, 17), zt(l, y, 17)) : (zt(s, y, 17), zt(l, h, 17));\n          }\n          var vp = () => Date.now(), $p = 1;\n          function xp(s, l, h) {\n            if (!(0 <= s && 3 >= s)) return 28;\n            if (s === 0) s = Date.now();\n            else {\n              if (!$p) return 52;\n              s = performance.timeOrigin + performance.now();\n            }\n            return Z[h >>> 0 >>> 3] = BigInt(Math.round(1e6 * s)), 0;\n          }\n          var Tn = [], $i = (s, l) => {\n            Tn.length = 0;\n            for (var h; h = he()[s++ >>> 0]; ) {\n              var y = h != 105;\n              l += (y &= h != 112) && l % 8 ? 4 : 0, Tn.push(h == 112 ? V()[l >>> 2 >>> 0] : h == 106 ? Z[l >>> 3] : h == 105 ? C()[l >>> 2 >>> 0] : ze()[l >>> 3 >>> 0]), l += y ? 8 : 4;\n            }\n            return Tn;\n          };\n          function Sp(s, l, h) {\n            return s >>>= 0, l = $i(l >>> 0, h >>> 0), cn[s](...l);\n          }\n          function Tp(s, l, h) {\n            return s >>>= 0, l = $i(l >>> 0, h >>> 0), cn[s](...l);\n          }\n          var Ip = () => {\n          };\n          function Cp(s, l) {\n            return x(Te(s >>> 0, l >>> 0));\n          }\n          var Ap = () => {\n            throw lt += 1, \"unwind\";\n          };\n          function Ep() {\n            return 4294901760;\n          }\n          var kp = () => navigator.hardwareConcurrency;\n          function Pp() {\n            return dt(\"Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER\"), 0;\n          }\n          function zp(s) {\n            s >>>= 0;\n            var l = he().length;\n            if (s <= l || 4294901760 < s) return false;\n            for (var h = 1; 4 >= h; h *= 2) {\n              var y = l * (1 + 0.2 / h);\n              y = Math.min(y, s + 100663296);\n              e: {\n                y = (Math.min(4294901760, 65536 * Math.ceil(Math.max(s, y) / 65536)) - T.buffer.byteLength + 65535) / 65536 | 0;\n                try {\n                  T.grow(y), Ce();\n                  var w = 1;\n                  break e;\n                } catch {\n                }\n                w = void 0;\n              }\n              if (w) return true;\n            }\n            return false;\n          }\n          var dr = () => (dt(\"Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER\"), 0), Ot = {}, xi = (s) => {\n            s.forEach((l) => {\n              var h = dr();\n              h && (Ot[h] = l);\n            });\n          };\n          function Op() {\n            var s = Error().stack.toString().split(`\n`);\n            return s[0] == \"Error\" && s.shift(), xi(s), Ot.Lb = dr(), Ot.cc = s, Ot.Lb;\n          }\n          function Bp(s, l, h) {\n            if (s >>>= 0, l >>>= 0, Ot.Lb == s) var y = Ot.cc;\n            else (y = Error().stack.toString().split(`\n`))[0] == \"Error\" && y.shift(), xi(y);\n            for (var w = 3; y[w] && dr() != s; ) ++w;\n            for (s = 0; s < h && y[s + w]; ++s) C()[l + 4 * s >>> 2 >>> 0] = dr();\n            return s;\n          }\n          var In, Cn = {}, Si = () => {\n            if (!In) {\n              var s, l = { USER: \"web_user\", LOGNAME: \"web_user\", PATH: \"/\", PWD: \"/\", HOME: \"/home/web_user\", LANG: (typeof navigator == \"object\" && navigator.languages && navigator.languages[0] || \"C\").replace(\"-\", \"_\") + \".UTF-8\", _: \"./this.program\" };\n              for (s in Cn) Cn[s] === void 0 ? delete l[s] : l[s] = Cn[s];\n              var h = [];\n              for (s in l) h.push(`${s}=${l[s]}`);\n              In = h;\n            }\n            return In;\n          };\n          function Ti(s, l) {\n            if (u) return xe(19, 1, s, l);\n            s >>>= 0, l >>>= 0;\n            var h = 0;\n            return Si().forEach((y, w) => {\n              var A = l + h;\n              for (w = V()[s + 4 * w >>> 2 >>> 0] = A, A = 0; A < y.length; ++A) ue()[w++ >>> 0] = y.charCodeAt(A);\n              ue()[w >>> 0] = 0, h += y.length + 1;\n            }), 0;\n          }\n          function Ii(s, l) {\n            if (u) return xe(20, 1, s, l);\n            s >>>= 0, l >>>= 0;\n            var h = Si();\n            V()[s >>> 2 >>> 0] = h.length;\n            var y = 0;\n            return h.forEach((w) => y += w.length + 1), V()[l >>> 2 >>> 0] = y, 0;\n          }\n          function Ci(s) {\n            return u ? xe(21, 1, s) : 52;\n          }\n          function Ai(s, l, h, y) {\n            return u ? xe(22, 1, s, l, h, y) : 52;\n          }\n          function Ei(s, l, h, y) {\n            return u ? xe(23, 1, s, l, h, y) : 70;\n          }\n          var Dp = [null, [], []];\n          function ki(s, l, h, y) {\n            if (u) return xe(24, 1, s, l, h, y);\n            l >>>= 0, h >>>= 0, y >>>= 0;\n            for (var w = 0, A = 0; A < h; A++) {\n              var B = V()[l >>> 2 >>> 0], R = V()[l + 4 >>> 2 >>> 0];\n              l += 8;\n              for (var G = 0; G < R; G++) {\n                var K = he()[B + G >>> 0], ae = Dp[s];\n                K === 0 || K === 10 ? ((s === 1 ? v : x)(Fo(ae)), ae.length = 0) : ae.push(K);\n              }\n              w += R;\n            }\n            return V()[y >>> 2 >>> 0] = w, 0;\n          }\n          u || function() {\n            for (var s = n.numThreads - 1; s--; ) Wo();\n            mn.unshift(() => {\n              Pt++, function(l) {\n                u ? l() : Promise.all(ct.map(Vo)).then(l);\n              }(() => zo());\n            });\n          }();\n          for (var Pi = Array(256), lr = 0; 256 > lr; ++lr) Pi[lr] = String.fromCharCode(lr);\n          ai = Pi, pt = n.BindingError = class extends Error {\n            constructor(s) {\n              super(s), this.name = \"BindingError\";\n            }\n          }, n.InternalError = class extends Error {\n            constructor(s) {\n              super(s), this.name = \"InternalError\";\n            }\n          }, at.push(0, 1, void 0, 1, null, 1, true, 1, false, 1), n.count_emval_handles = () => at.length / 2 - 5 - yn.length;\n          var Y, Mp = [fn, Mo, Lo, qo, jo, Zo, Qo, Yo, Xo, Jo, ei, ti, ri, ni, oi, ii, _i, wi, vi, Ti, Ii, Ci, Ai, Ei, ki];\n          (async function() {\n            function s(y, w) {\n              return Y = y.exports, Y = function() {\n                var A = Y, B = {};\n                for (let [R, G] of Object.entries(A)) B[R] = typeof G == \"function\" ? (...K) => {\n                  ar.push(R);\n                  try {\n                    return G(...K);\n                  } finally {\n                    te || (ar.pop(), Ze && ft === 1 && ar.length === 0 && (ft = 0, lt += 1, ir(Li), typeof Fibers < \"u\" && Fibers.rc()));\n                  }\n                } : G;\n                return B;\n              }(), Y = function() {\n                var A = Y, B = (G) => (K) => G(K) >>> 0, R = (G) => () => G() >>> 0;\n                return (A = Object.assign({}, A)).Da = B(A.Da), A.fb = R(A.fb), A.hb = B(A.hb), A.tb = B(A.tb), A.ub = R(A.ub), A.__cxa_get_exception_ptr = B(A.__cxa_get_exception_ptr), A;\n              }(), Ro.push(Y.ib), E = w, zo(), Y;\n            }\n            Pt++;\n            var l = Oo();\n            if (n.instantiateWasm) return new Promise((y) => {\n              n.instantiateWasm(l, (w, A) => {\n                s(w, A), y(w.exports);\n              });\n            });\n            if (u) return new Promise((y) => {\n              ve = (w) => {\n                var A = new WebAssembly.Instance(w, Oo());\n                y(s(A, w));\n              };\n            });\n            kt ?? (kt = n.locateFile ? n.locateFile ? n.locateFile(\"ort-wasm-simd-threaded.jsep.wasm\", _) : _ + \"ort-wasm-simd-threaded.jsep.wasm\" : new URL(\"ort-wasm-simd-threaded.jsep.wasm\", import_meta.url).href);\n            try {\n              var h = await async function(y) {\n                var w = kt;\n                if (!j && typeof WebAssembly.instantiateStreaming == \"function\" && !X(w)) try {\n                  var A = fetch(w, { credentials: \"same-origin\" });\n                  return await WebAssembly.instantiateStreaming(A, y);\n                } catch (B) {\n                  x(`wasm streaming compile failed: ${B}`), x(\"falling back to ArrayBuffer instantiation\");\n                }\n                return async function(B, R) {\n                  try {\n                    var G = await async function(K) {\n                      if (!j) try {\n                        var ae = await m(K);\n                        return new Uint8Array(ae);\n                      } catch {\n                      }\n                      if (K == kt && j) K = new Uint8Array(j);\n                      else {\n                        if (!f) throw \"both async and sync fetching of the wasm failed\";\n                        K = f(K);\n                      }\n                      return K;\n                    }(B);\n                    return await WebAssembly.instantiate(G, R);\n                  } catch (K) {\n                    x(`failed to asynchronously prepare wasm: ${K}`), dt(K);\n                  }\n                }(w, y);\n              }(l);\n              return s(h.instance, h.module);\n            } catch (y) {\n              return r(y), Promise.reject(y);\n            }\n          })();\n          var zi = (s) => (zi = Y.Da)(s), Oi = () => (Oi = Y.Ea)();\n          n._OrtInit = (s, l) => (n._OrtInit = Y.Fa)(s, l), n._OrtGetLastError = (s, l) => (n._OrtGetLastError = Y.Ga)(s, l), n._OrtCreateSessionOptions = (s, l, h, y, w, A, B, R, G, K) => (n._OrtCreateSessionOptions = Y.Ha)(s, l, h, y, w, A, B, R, G, K), n._OrtAppendExecutionProvider = (s, l, h, y, w) => (n._OrtAppendExecutionProvider = Y.Ia)(s, l, h, y, w), n._OrtAddFreeDimensionOverride = (s, l, h) => (n._OrtAddFreeDimensionOverride = Y.Ja)(s, l, h), n._OrtAddSessionConfigEntry = (s, l, h) => (n._OrtAddSessionConfigEntry = Y.Ka)(s, l, h), n._OrtReleaseSessionOptions = (s) => (n._OrtReleaseSessionOptions = Y.La)(s), n._OrtCreateSession = (s, l, h) => (n._OrtCreateSession = Y.Ma)(s, l, h), n._OrtReleaseSession = (s) => (n._OrtReleaseSession = Y.Na)(s), n._OrtGetInputOutputCount = (s, l, h) => (n._OrtGetInputOutputCount = Y.Oa)(s, l, h), n._OrtGetInputOutputMetadata = (s, l, h, y) => (n._OrtGetInputOutputMetadata = Y.Pa)(s, l, h, y), n._OrtFree = (s) => (n._OrtFree = Y.Qa)(s), n._OrtCreateTensor = (s, l, h, y, w, A) => (n._OrtCreateTensor = Y.Ra)(s, l, h, y, w, A), n._OrtGetTensorData = (s, l, h, y, w) => (n._OrtGetTensorData = Y.Sa)(s, l, h, y, w), n._OrtReleaseTensor = (s) => (n._OrtReleaseTensor = Y.Ta)(s), n._OrtCreateRunOptions = (s, l, h, y) => (n._OrtCreateRunOptions = Y.Ua)(s, l, h, y), n._OrtAddRunConfigEntry = (s, l, h) => (n._OrtAddRunConfigEntry = Y.Va)(s, l, h), n._OrtReleaseRunOptions = (s) => (n._OrtReleaseRunOptions = Y.Wa)(s), n._OrtCreateBinding = (s) => (n._OrtCreateBinding = Y.Xa)(s), n._OrtBindInput = (s, l, h) => (n._OrtBindInput = Y.Ya)(s, l, h), n._OrtBindOutput = (s, l, h, y) => (n._OrtBindOutput = Y.Za)(s, l, h, y), n._OrtClearBoundOutputs = (s) => (n._OrtClearBoundOutputs = Y._a)(s), n._OrtReleaseBinding = (s) => (n._OrtReleaseBinding = Y.$a)(s), n._OrtRunWithBinding = (s, l, h, y, w) => (n._OrtRunWithBinding = Y.ab)(s, l, h, y, w), n._OrtRun = (s, l, h, y, w, A, B, R) => (n._OrtRun = Y.bb)(s, l, h, y, w, A, B, R), n._OrtEndProfiling = (s) => (n._OrtEndProfiling = Y.cb)(s), n._JsepOutput = (s, l, h) => (n._JsepOutput = Y.db)(s, l, h), n._JsepGetNodeName = (s) => (n._JsepGetNodeName = Y.eb)(s);\n          var cr = () => (cr = Y.fb)(), Qe = n._free = (s) => (Qe = n._free = Y.gb)(s), pr = n._malloc = (s) => (pr = n._malloc = Y.hb)(s), An = (s, l, h, y, w, A) => (An = Y.kb)(s, l, h, y, w, A), Bi = () => (Bi = Y.lb)(), Di = (s, l, h, y, w) => (Di = Y.mb)(s, l, h, y, w), Mi = (s) => (Mi = Y.nb)(s), En = (s) => (En = Y.ob)(s), Ri = (s, l) => (Ri = Y.pb)(s, l), Ui = () => (Ui = Y.qb)(), Ni = (s, l) => (Ni = Y.rb)(s, l), mr = (s) => (mr = Y.sb)(s), kn = (s) => (kn = Y.tb)(s), Pn = () => (Pn = Y.ub)(), Vi = n.dynCall_ii = (s, l) => (Vi = n.dynCall_ii = Y.vb)(s, l), Wi = (s) => (Wi = Y.wb)(s), Li = () => (Li = Y.xb)(), Gi = (s) => (Gi = Y.yb)(s), Hi = () => (Hi = Y.zb)();\n          return n.stackSave = () => Pn(), n.stackRestore = (s) => mr(s), n.stackAlloc = (s) => kn(s), n.setValue = function(s, l, h = \"i8\") {\n            switch (h.endsWith(\"*\") && (h = \"*\"), h) {\n              case \"i1\":\n              case \"i8\":\n                ue()[s >>> 0] = l;\n                break;\n              case \"i16\":\n                ye()[s >>> 1 >>> 0] = l;\n                break;\n              case \"i32\":\n                C()[s >>> 2 >>> 0] = l;\n                break;\n              case \"i64\":\n                Z[s >>> 3] = BigInt(l);\n                break;\n              case \"float\":\n                de()[s >>> 2 >>> 0] = l;\n                break;\n              case \"double\":\n                ze()[s >>> 3 >>> 0] = l;\n                break;\n              case \"*\":\n                V()[s >>> 2 >>> 0] = l;\n                break;\n              default:\n                dt(`invalid type for setValue: ${h}`);\n            }\n          }, n.getValue = function(s, l = \"i8\") {\n            switch (l.endsWith(\"*\") && (l = \"*\"), l) {\n              case \"i1\":\n              case \"i8\":\n                return ue()[s >>> 0];\n              case \"i16\":\n                return ye()[s >>> 1 >>> 0];\n              case \"i32\":\n                return C()[s >>> 2 >>> 0];\n              case \"i64\":\n                return Z[s >>> 3];\n              case \"float\":\n                return de()[s >>> 2 >>> 0];\n              case \"double\":\n                return ze()[s >>> 3 >>> 0];\n              case \"*\":\n                return V()[s >>> 2 >>> 0];\n              default:\n                dt(`invalid type for getValue: ${l}`);\n            }\n          }, n.UTF8ToString = Te, n.stringToUTF8 = zt, n.lengthBytesUTF8 = Ko, function s() {\n            if (0 < Pt) Lt = s;\n            else if (u) t(n), _t();\n            else {\n              for (; 0 < mn.length; ) mn.shift()(n);\n              0 < Pt ? Lt = s : (n.calledRun = true, te || (_t(), t(n)));\n            }\n          }(), n.PTR_SIZE = 4, o;\n        }), Fp = Sa, qp = globalThis.self?.name?.startsWith(\"em-pthread\");\n        qp && Sa();\n      });\n      _r = U(() => {\n        \"use strict\";\n        yr();\n        Ea = typeof location > \"u\" ? void 0 : location.origin, Gn = import_meta.url > \"file:\" && import_meta.url < \"file;\", jp = () => {\n          if (true) {\n            if (Gn) {\n              let e = URL;\n              return new URL(new e(\"ort.bundle.min.mjs\", import_meta.url).href, Ea).href;\n            }\n            return import_meta.url;\n          }\n        }, Ue = jp(), ka = () => {\n          if (Ue && !Ue.startsWith(\"blob:\")) return Ue.substring(0, Ue.lastIndexOf(\"/\") + 1);\n        }, Ln = (e, t) => {\n          try {\n            let r = t ?? Ue;\n            return (r ? new URL(e, r) : new URL(e)).origin === Ea;\n          } catch {\n            return false;\n          }\n        }, Kp = (e, t) => {\n          let r = t ?? Ue;\n          try {\n            return (r ? new URL(e, r) : new URL(e)).href;\n          } catch {\n            return;\n          }\n        }, Zp = (e, t) => `${t ?? \"./\"}${e}`, Pa = async (e) => {\n          let r = await (await fetch(e, { credentials: \"same-origin\" })).blob();\n          return URL.createObjectURL(r);\n        }, Qp = async (e) => (await import(\n          /*webpackIgnore:true*/\n          e\n        )).default, Ca = (xa(), Ft($a)).default, za = async () => {\n          if (!Ue) throw new Error(\"Failed to load proxy worker: cannot determine the script source URL.\");\n          if (Ln(Ue)) return [void 0, Ca()];\n          let e = await Pa(Ue);\n          return [e, Ca(e)];\n        }, Aa = (Ia(), Ft(Ta)).default, Oa = async (e, t, r) => {\n          if (!e && !t && Aa && Ue && Ln(Ue)) return [void 0, Aa];\n          {\n            let n = \"ort-wasm-simd-threaded.jsep.mjs\", o = e ?? Kp(n, t), i = r && o && !Ln(o, t), a = i ? await Pa(o) : o ?? Zp(n, t);\n            return [i ? a : void 0, await Qp(a)];\n          }\n        };\n      });\n      ht = U(() => {\n        \"use strict\";\n        _r();\n        Fn = false, Ar = false, Ba = false, Yp = () => {\n          if (typeof SharedArrayBuffer > \"u\") return false;\n          try {\n            return typeof MessageChannel < \"u\" && new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11]));\n          } catch {\n            return false;\n          }\n        }, Xp = () => {\n          try {\n            return WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1, 28, 0, 65, 0, 253, 15, 253, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 186, 1, 26, 11]));\n          } catch {\n            return false;\n          }\n        }, Jp = () => {\n          try {\n            return WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 123, 3, 2, 1, 0, 10, 19, 1, 17, 0, 65, 1, 253, 15, 65, 2, 253, 15, 65, 3, 253, 15, 253, 147, 2, 11]));\n          } catch {\n            return false;\n          }\n        }, wr = async (e) => {\n          if (Fn) return Promise.resolve();\n          if (Ar) throw new Error(\"multiple calls to 'initializeWebAssembly()' detected.\");\n          if (Ba) throw new Error(\"previous call to 'initializeWebAssembly()' failed.\");\n          Ar = true;\n          let t = e.initTimeout, r = e.numThreads;\n          if (e.simd !== false) {\n            if (e.simd === \"relaxed\") {\n              if (!Jp()) throw new Error(\"Relaxed WebAssembly SIMD is not supported in the current environment.\");\n            } else if (!Xp()) throw new Error(\"WebAssembly SIMD is not supported in the current environment.\");\n          }\n          let n = Yp();\n          r > 1 && !n && (typeof self < \"u\" && !self.crossOriginIsolated && console.warn(\"env.wasm.numThreads is set to \" + r + \", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info.\"), console.warn(\"WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading.\"), e.numThreads = r = 1);\n          let o = e.wasmPaths, i = typeof o == \"string\" ? o : void 0, a = o?.mjs, u = a?.href ?? a, d = o?.wasm, c = d?.href ?? d, p = e.wasmBinary, [m, f] = await Oa(u, i, r > 1), b = false, g = [];\n          if (t > 0 && g.push(new Promise((_) => {\n            setTimeout(() => {\n              b = true, _();\n            }, t);\n          })), g.push(new Promise((_, S) => {\n            let $ = { numThreads: r };\n            if (p) $.wasmBinary = p;\n            else if (c || i) $.locateFile = (v) => c ?? i + v;\n            else if (u && u.indexOf(\"blob:\") !== 0) $.locateFile = (v) => new URL(v, u).href;\n            else if (m) {\n              let v = ka();\n              v && ($.locateFile = (x) => v + x);\n            }\n            f($).then((v) => {\n              Ar = false, Fn = true, Hn = v, _(), m && URL.revokeObjectURL(m);\n            }, (v) => {\n              Ar = false, Ba = true, S(v);\n            });\n          })), await Promise.race(g), b) throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`);\n        }, fe = () => {\n          if (Fn && Hn) return Hn;\n          throw new Error(\"WebAssembly is not initialized yet.\");\n        };\n      });\n      Er = U(() => {\n        \"use strict\";\n        ht();\n        Ne = (e, t) => {\n          let r = fe(), n = r.lengthBytesUTF8(e) + 1, o = r._malloc(n);\n          return r.stringToUTF8(e, o, n), t.push(o), o;\n        }, Kt = (e, t, r, n) => {\n          if (typeof e == \"object\" && e !== null) {\n            if (r.has(e)) throw new Error(\"Circular reference in options\");\n            r.add(e);\n          }\n          Object.entries(e).forEach(([o, i]) => {\n            let a = t ? t + o : o;\n            if (typeof i == \"object\") Kt(i, a + \".\", r, n);\n            else if (typeof i == \"string\" || typeof i == \"number\") n(a, i.toString());\n            else if (typeof i == \"boolean\") n(a, i ? \"1\" : \"0\");\n            else throw new Error(`Can't handle extra config type: ${typeof i}`);\n          });\n        }, pe = (e) => {\n          let t = fe(), r = t.stackSave();\n          try {\n            let n = t.PTR_SIZE, o = t.stackAlloc(2 * n);\n            t._OrtGetLastError(o, o + n);\n            let i = Number(t.getValue(o, n === 4 ? \"i32\" : \"i64\")), a = t.getValue(o + n, \"*\"), u = a ? t.UTF8ToString(a) : \"\";\n            throw new Error(`${e} ERROR_CODE: ${i}, ERROR_MESSAGE: ${u}`);\n          } finally {\n            t.stackRestore(r);\n          }\n        };\n      });\n      Ma = U(() => {\n        \"use strict\";\n        ht();\n        Er();\n        Da = (e) => {\n          let t = fe(), r = 0, n = [], o = e || {};\n          try {\n            if (e?.logSeverityLevel === void 0) o.logSeverityLevel = 2;\n            else if (typeof e.logSeverityLevel != \"number\" || !Number.isInteger(e.logSeverityLevel) || e.logSeverityLevel < 0 || e.logSeverityLevel > 4) throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);\n            if (e?.logVerbosityLevel === void 0) o.logVerbosityLevel = 0;\n            else if (typeof e.logVerbosityLevel != \"number\" || !Number.isInteger(e.logVerbosityLevel)) throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);\n            e?.terminate === void 0 && (o.terminate = false);\n            let i = 0;\n            return e?.tag !== void 0 && (i = Ne(e.tag, n)), r = t._OrtCreateRunOptions(o.logSeverityLevel, o.logVerbosityLevel, !!o.terminate, i), r === 0 && pe(\"Can't create run options.\"), e?.extra !== void 0 && Kt(e.extra, \"\", /* @__PURE__ */ new WeakSet(), (a, u) => {\n              let d = Ne(a, n), c = Ne(u, n);\n              t._OrtAddRunConfigEntry(r, d, c) !== 0 && pe(`Can't set a run config entry: ${a} - ${u}.`);\n            }), [r, n];\n          } catch (i) {\n            throw r !== 0 && t._OrtReleaseRunOptions(r), n.forEach((a) => t._free(a)), i;\n          }\n        };\n      });\n      Ua = U(() => {\n        \"use strict\";\n        ht();\n        Er();\n        em = (e) => {\n          switch (e) {\n            case \"disabled\":\n              return 0;\n            case \"basic\":\n              return 1;\n            case \"extended\":\n              return 2;\n            case \"all\":\n              return 99;\n            default:\n              throw new Error(`unsupported graph optimization level: ${e}`);\n          }\n        }, tm = (e) => {\n          switch (e) {\n            case \"sequential\":\n              return 0;\n            case \"parallel\":\n              return 1;\n            default:\n              throw new Error(`unsupported execution mode: ${e}`);\n          }\n        }, rm = (e) => {\n          e.extra || (e.extra = {}), e.extra.session || (e.extra.session = {});\n          let t = e.extra.session;\n          t.use_ort_model_bytes_directly || (t.use_ort_model_bytes_directly = \"1\"), e.executionProviders && e.executionProviders.some((r) => (typeof r == \"string\" ? r : r.name) === \"webgpu\") && (e.enableMemPattern = false);\n        }, kr = (e, t, r, n) => {\n          let o = Ne(t, n), i = Ne(r, n);\n          fe()._OrtAddSessionConfigEntry(e, o, i) !== 0 && pe(`Can't set a session config entry: ${t} - ${r}.`);\n        }, nm = async (e, t, r) => {\n          for (let n of t) {\n            let o = typeof n == \"string\" ? n : n.name, i = [];\n            switch (o) {\n              case \"webnn\":\n                if (o = \"WEBNN\", typeof n != \"string\") {\n                  let m = n?.deviceType;\n                  m && kr(e, \"deviceType\", m, r);\n                }\n                break;\n              case \"webgpu\":\n                if (o = \"JS\", typeof n != \"string\") {\n                  let p = n;\n                  if (p?.preferredLayout) {\n                    if (p.preferredLayout !== \"NCHW\" && p.preferredLayout !== \"NHWC\") throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${p.preferredLayout}`);\n                    kr(e, \"preferredLayout\", p.preferredLayout, r);\n                  }\n                }\n                break;\n              case \"wasm\":\n              case \"cpu\":\n                continue;\n              default:\n                throw new Error(`not supported execution provider: ${o}`);\n            }\n            let a = Ne(o, r), u = i.length, d = 0, c = 0;\n            if (u > 0) {\n              d = fe()._malloc(u * fe().PTR_SIZE), r.push(d), c = fe()._malloc(u * fe().PTR_SIZE), r.push(c);\n              for (let p = 0; p < u; p++) fe().setValue(d + p * fe().PTR_SIZE, i[p][0], \"*\"), fe().setValue(c + p * fe().PTR_SIZE, i[p][1], \"*\");\n            }\n            await fe()._OrtAppendExecutionProvider(e, a, d, c, u) !== 0 && pe(`Can't append execution provider: ${o}.`);\n          }\n        }, Ra = async (e) => {\n          let t = fe(), r = 0, n = [], o = e || {};\n          rm(o);\n          try {\n            let i = em(o.graphOptimizationLevel ?? \"all\"), a = tm(o.executionMode ?? \"sequential\"), u = typeof o.logId == \"string\" ? Ne(o.logId, n) : 0, d = o.logSeverityLevel ?? 2;\n            if (!Number.isInteger(d) || d < 0 || d > 4) throw new Error(`log serverity level is not valid: ${d}`);\n            let c = o.logVerbosityLevel ?? 0;\n            if (!Number.isInteger(c) || c < 0 || c > 4) throw new Error(`log verbosity level is not valid: ${c}`);\n            let p = typeof o.optimizedModelFilePath == \"string\" ? Ne(o.optimizedModelFilePath, n) : 0;\n            if (r = t._OrtCreateSessionOptions(i, !!o.enableCpuMemArena, !!o.enableMemPattern, a, !!o.enableProfiling, 0, u, d, c, p), r === 0 && pe(\"Can't create session options.\"), o.executionProviders && await nm(r, o.executionProviders, n), o.enableGraphCapture !== void 0) {\n              if (typeof o.enableGraphCapture != \"boolean\") throw new Error(`enableGraphCapture must be a boolean value: ${o.enableGraphCapture}`);\n              kr(r, \"enableGraphCapture\", o.enableGraphCapture.toString(), n);\n            }\n            if (o.freeDimensionOverrides) for (let [m, f] of Object.entries(o.freeDimensionOverrides)) {\n              if (typeof m != \"string\") throw new Error(`free dimension override name must be a string: ${m}`);\n              if (typeof f != \"number\" || !Number.isInteger(f) || f < 0) throw new Error(`free dimension override value must be a non-negative integer: ${f}`);\n              let b = Ne(m, n);\n              t._OrtAddFreeDimensionOverride(r, b, f) !== 0 && pe(`Can't set a free dimension override: ${m} - ${f}.`);\n            }\n            return o.extra !== void 0 && Kt(o.extra, \"\", /* @__PURE__ */ new WeakSet(), (m, f) => {\n              kr(r, m, f, n);\n            }), [r, n];\n          } catch (i) {\n            throw r !== 0 && t._OrtReleaseSessionOptions(r) !== 0 && pe(\"Can't release session options.\"), n.forEach((a) => t._free(a)), i;\n          }\n        };\n      });\n      ee = U(() => {\n        \"use strict\";\n        Mt = (e) => {\n          switch (e) {\n            case \"int8\":\n              return 3;\n            case \"uint8\":\n              return 2;\n            case \"bool\":\n              return 9;\n            case \"int16\":\n              return 5;\n            case \"uint16\":\n              return 4;\n            case \"int32\":\n              return 6;\n            case \"uint32\":\n              return 12;\n            case \"float16\":\n              return 10;\n            case \"float32\":\n              return 1;\n            case \"float64\":\n              return 11;\n            case \"string\":\n              return 8;\n            case \"int64\":\n              return 7;\n            case \"uint64\":\n              return 13;\n            case \"int4\":\n              return 22;\n            case \"uint4\":\n              return 21;\n            default:\n              throw new Error(`unsupported data type: ${e}`);\n          }\n        }, Ye = (e) => {\n          switch (e) {\n            case 3:\n              return \"int8\";\n            case 2:\n              return \"uint8\";\n            case 9:\n              return \"bool\";\n            case 5:\n              return \"int16\";\n            case 4:\n              return \"uint16\";\n            case 6:\n              return \"int32\";\n            case 12:\n              return \"uint32\";\n            case 10:\n              return \"float16\";\n            case 1:\n              return \"float32\";\n            case 11:\n              return \"float64\";\n            case 8:\n              return \"string\";\n            case 7:\n              return \"int64\";\n            case 13:\n              return \"uint64\";\n            case 22:\n              return \"int4\";\n            case 21:\n              return \"uint4\";\n            default:\n              throw new Error(`unsupported data type: ${e}`);\n          }\n        }, gt = (e, t) => {\n          let r = [-1, 4, 1, 1, 2, 2, 4, 8, -1, 1, 2, 8, 4, 8, -1, -1, -1, -1, -1, -1, -1, 0.5, 0.5][e], n = typeof t == \"number\" ? t : t.reduce((o, i) => o * i, 1);\n          return r > 0 ? Math.ceil(n * r) : void 0;\n        }, Pr = (e) => {\n          switch (e) {\n            case \"float16\":\n              return typeof Float16Array < \"u\" && Float16Array.from ? Float16Array : Uint16Array;\n            case \"float32\":\n              return Float32Array;\n            case \"uint8\":\n              return Uint8Array;\n            case \"int8\":\n              return Int8Array;\n            case \"uint16\":\n              return Uint16Array;\n            case \"int16\":\n              return Int16Array;\n            case \"int32\":\n              return Int32Array;\n            case \"bool\":\n              return Uint8Array;\n            case \"float64\":\n              return Float64Array;\n            case \"uint32\":\n              return Uint32Array;\n            case \"int64\":\n              return BigInt64Array;\n            case \"uint64\":\n              return BigUint64Array;\n            default:\n              throw new Error(`unsupported type: ${e}`);\n          }\n        }, Zt = (e) => {\n          switch (e) {\n            case \"verbose\":\n              return 0;\n            case \"info\":\n              return 1;\n            case \"warning\":\n              return 2;\n            case \"error\":\n              return 3;\n            case \"fatal\":\n              return 4;\n            default:\n              throw new Error(`unsupported logging level: ${e}`);\n          }\n        }, zr = (e) => e === \"float32\" || e === \"float16\" || e === \"int32\" || e === \"int64\" || e === \"uint32\" || e === \"uint8\" || e === \"bool\" || e === \"uint4\" || e === \"int4\", Or = (e) => e === \"float32\" || e === \"float16\" || e === \"int32\" || e === \"int64\" || e === \"uint32\" || e === \"uint64\" || e === \"int8\" || e === \"uint8\" || e === \"bool\" || e === \"uint4\" || e === \"int4\", qn = (e) => {\n          switch (e) {\n            case \"none\":\n              return 0;\n            case \"cpu\":\n              return 1;\n            case \"cpu-pinned\":\n              return 2;\n            case \"texture\":\n              return 3;\n            case \"gpu-buffer\":\n              return 4;\n            case \"ml-tensor\":\n              return 5;\n            default:\n              throw new Error(`unsupported data location: ${e}`);\n          }\n        };\n      });\n      jn = U(() => {\n        \"use strict\";\n        yr();\n        Qt = async (e) => {\n          if (typeof e == \"string\") if (false) try {\n            let { readFile: t } = On(\"node:fs/promises\");\n            return new Uint8Array(await t(e));\n          } catch (t) {\n            if (t.code === \"ERR_FS_FILE_TOO_LARGE\") {\n              let { createReadStream: r } = On(\"node:fs\"), n = r(e), o = [];\n              for await (let i of n) o.push(i);\n              return new Uint8Array(Buffer.concat(o));\n            }\n            throw t;\n          }\n          else {\n            let t = await fetch(e);\n            if (!t.ok) throw new Error(`failed to load external data file: ${e}`);\n            let r = t.headers.get(\"Content-Length\"), n = r ? parseInt(r, 10) : 0;\n            if (n < 1073741824) return new Uint8Array(await t.arrayBuffer());\n            {\n              if (!t.body) throw new Error(`failed to load external data file: ${e}, no response body.`);\n              let o = t.body.getReader(), i;\n              try {\n                i = new ArrayBuffer(n);\n              } catch (u) {\n                if (u instanceof RangeError) {\n                  let d = Math.ceil(n / 65536);\n                  i = new WebAssembly.Memory({ initial: d, maximum: d }).buffer;\n                } else throw u;\n              }\n              let a = 0;\n              for (; ; ) {\n                let { done: u, value: d } = await o.read();\n                if (u) break;\n                let c = d.byteLength;\n                new Uint8Array(i, a, c).set(d), a += c;\n              }\n              return new Uint8Array(i, 0, n);\n            }\n          }\n          else return e instanceof Blob ? new Uint8Array(await e.arrayBuffer()) : e instanceof Uint8Array ? e : new Uint8Array(e);\n        };\n      });\n      Xe = U(() => {\n        \"use strict\";\n        ee();\n        om = [\"V\", \"I\", \"W\", \"E\", \"F\"], im = (e, t) => {\n          console.log(`[${om[e]},${(/* @__PURE__ */ new Date()).toISOString()}]${t}`);\n        }, Br = (e, t) => {\n          Na = e, Va = t;\n        }, am = (e, t) => {\n          let r = Zt(e), n = Zt(Na);\n          r >= n && im(r, typeof t == \"function\" ? t() : t);\n        }, se = (...e) => {\n          Va && am(...e);\n        };\n      });\n      ne = U(() => {\n        \"use strict\";\n        Kn = class {\n          static calcMatMulShape(t, r) {\n            return t[1] !== r[0] ? void 0 : [t[0], r[1]];\n          }\n        }, Je = class {\n          static calcShape(t, r, n = false) {\n            let o = t.length, i = r.length;\n            if (o === 0) return r;\n            if (i === 0) return t;\n            let a = Math.max(t.length, r.length), u = new Array(a);\n            if (n) {\n              if (o < 2 || i < 2) return;\n              let d = Kn.calcMatMulShape([t[o - 2], t[o - 1]], [r[i - 2], r[i - 1]]);\n              if (d === void 0) return;\n              [u[a - 2], u[a - 1]] = d;\n            }\n            for (let d = n ? 3 : 1; d <= a; d++) {\n              let c = o - d < 0 ? 1 : t[o - d], p = i - d < 0 ? 1 : r[i - d];\n              if (c !== p && c > 1 && p > 1) return;\n              let m = Math.max(c, p);\n              if (c && p) u[a - d] = Math.max(c, p);\n              else {\n                if (m > 1) return;\n                u[a - d] = 0;\n              }\n            }\n            return u;\n          }\n          static isValidBroadcast(t, r) {\n            let n = t.length, o = r.length;\n            if (n > o) return false;\n            for (let i = 1; i <= n; i++) if (t[n - i] !== 1 && t[n - i] !== r[o - i]) return false;\n            return true;\n          }\n        }, k = class e {\n          static size(t) {\n            return e.getSizeFromDimensionRange(t, 0, t.length);\n          }\n          static convertShape(t, r = 4) {\n            let n = t.length;\n            if (n === 0) return [];\n            let o = new Array(n), i = n - 1;\n            for (; i >= 0; ) {\n              if (t[i] % r === 0) {\n                o[i] = t[i] / r;\n                break;\n              }\n              if (r % t[i] !== 0) throw new Error(\"cannot convert shape\");\n              o[i] = 1, r /= t[i], i--;\n            }\n            for (i--; i >= 0; i--) o[i] = t[i];\n            return o;\n          }\n          static sizeFromDimension(t, r) {\n            if (r < 0 || r > t.length) throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);\n            return e.getSizeFromDimensionRange(t, r, t.length);\n          }\n          static sizeToDimension(t, r) {\n            if (r < 0 || r > t.length) throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);\n            return e.getSizeFromDimensionRange(t, 0, r);\n          }\n          static getSizeFromDimensionRange(t, r, n) {\n            let o = 1;\n            for (let i = r; i < n; i++) {\n              if (t[i] < 0) throw new Error(\"cannot get valid size from specified dimension range. Most likely the range contains negative values in them.\");\n              o *= Number(t[i]);\n            }\n            return o;\n          }\n          static computeStrides(t) {\n            let r = t.length;\n            if (r === 0) return [];\n            if (r === 1) return [1];\n            let n = new Array(r);\n            n[r - 1] = 1, n[r - 2] = t[r - 1];\n            for (let o = r - 3; o >= 0; --o) n[o] = n[o + 1] * t[o + 1];\n            return n;\n          }\n          static normalizeAxis(t, r) {\n            if (t < -r && t >= r) throw new Error(\"unsupported axis for this operation.\");\n            return t < 0 ? t + r : t;\n          }\n          static normalizeAxes(t, r) {\n            return t.map((n) => this.normalizeAxis(n, r ?? t.length));\n          }\n          static sortBasedOnPerm(t, r) {\n            return r ? r.map((n) => t[n]) : t.slice().reverse();\n          }\n          static padShape(t, r) {\n            let n = t.length;\n            return t.map((o, i) => o + r[i] + r[i + n]);\n          }\n          static areEqual(t, r) {\n            return t.length !== r.length ? false : t.every((n, o) => n === r[o]);\n          }\n        }, Tt = class e {\n          static adjustPoolAttributes(t, r, n, o, i, a) {\n            if (!t && n.length !== r.length - 2) throw new Error(\"length of specified kernel shapes should be 2 less than length of input dimensions\");\n            if (t) for (let u = 0; u < r.length - 2; u++) u >= n.length ? n.push(r[u + 2]) : n[u] = r[u + 2];\n            for (let u = 0; u < n.length; u++) if (u < o.length) {\n              if (o[u] < 0) throw new Error(\"strides should be greater than or equal to 1\");\n            } else o.push(1);\n            for (let u = 0; u < n.length; u++) if (u < i.length) {\n              if (i[u] < 0) throw new Error(\"dilations should be greater than or equal to 1\");\n            } else i.push(1);\n            for (let u = 0; u < n.length * 2; u++) if (u < a.length) {\n              if (a[u] < 0) throw new Error(\"pad should be greater than or equal to 1\");\n            } else a.push(0);\n            for (let u = 0; u < n.length; u++) {\n              if (n[u] <= 0) throw new Error(\"kernel shapes need to be greater than 0\");\n              if (a[u] >= n[u] || a[u + n.length] >= n[u]) throw new Error(\"pads should be smaller than kernel\");\n            }\n          }\n          static adjustPadsBasedOnAutoPad(t, r, n, o, i, a, u) {\n            if (u) {\n              if (i.length !== 2 * (t.length - 2)) throw new Error(\"length of pads should be twice the length of data dimensions\");\n              if (r.length !== t.length - 2) throw new Error(\"length of strides should be the length of data dimensions\");\n              if (o.length !== t.length - 2) throw new Error(\"length of kernel shapes should be the length of data dimensions\");\n              for (let d = 0; d < t.length - 2; d++) e.adjustPadAndReturnShape(t[d + (a ? 1 : 2)], r[d], n[d], o[d], i, d, d + t.length - 2, u);\n            }\n          }\n          static computePoolOutputShape(t, r, n, o, i, a, u) {\n            if (r.length <= 0) throw new Error(\"input shape must be of size greater than 0\");\n            let d = [r[0], r[1]];\n            return e.computeShapeHelper(t, r, d, n, o, i, a, u), d;\n          }\n          static computeConvOutputShape(t, r, n, o, i, a, u) {\n            if (t.length <= 0 || r.length <= 0) throw new Error(\"invalid input tensor dims or invalid filter tensor dims\");\n            let d = [t[0], r[0]];\n            return e.computeShapeHelper(false, t, d, n, o, i, a, u), d;\n          }\n          static computeShapeHelper(t, r, n, o, i, a, u, d) {\n            if (t) for (let c = 0; c < r.length - 2; c++) n.push(1);\n            else for (let c = 0; c < r.length - 2; c++) n.push(e.adjustPadAndReturnShape(r[c + 2], o[c], i[c], a[c], u, c, c + r.length - 2, d));\n          }\n          static adjustPadAndReturnShape(t, r, n, o, i, a, u, d) {\n            let c = n * (o - 1) + 1;\n            if (d && d !== \"NOTSET\") switch (d) {\n              case \"VALID\":\n                return i[a] = 0, i[u] = 0, Math.floor((t - c) / r + 1);\n              case \"SAME_LOWER\":\n              case \"SAME_UPPER\":\n                if (n !== 1) throw new Error(\"Dilation not supported for SAME_UPPER or SAME_LOWER\");\n                {\n                  let m = ((t + r - 1) / r - 1) * r + o - t;\n                  return i[a] = Math.floor(d === \"SAME_LOWER\" ? (m + 1) / 2 : m / 2), i[u] = m - i[a], Math.floor((t + m - o) / r + 1);\n                }\n              default:\n                throw new Error(\"Unsupported AutoPad type\");\n            }\n            else return Math.floor((t + i[a] + i[u] - c) / r + 1);\n          }\n        }, Dr = class {\n          static getShapeOfGemmResult(t, r, n, o, i) {\n            if (t.length !== 2 || n.length !== 2) throw new Error(\"shape need to be of size 2\");\n            let a, u, d;\n            r ? (a = t[1], u = t[0]) : (a = t[0], u = t[1]);\n            let c = -1;\n            if (o ? (d = n[0], c = 1) : (d = n[1], c = 0), n[c] !== u) throw new Error(\"dimension mismatch\");\n            if (a <= 0 || d <= 0 || u <= 0) throw new Error(\"invalid shape specified\");\n            if (i && !Je.isValidBroadcast(i, [a, d])) throw new Error(\"gemm: invalid bias shape for broadcast\");\n            return [a, d, u];\n          }\n        }, Wa = -34028234663852886e22, La = 34028234663852886e22;\n      });\n      Zn = U(() => {\n        \"use strict\";\n        ee();\n        Mr = (e, t) => new (Pr(t))(e);\n      });\n      ja = U(() => {\n        \"use strict\";\n        Xe();\n        Yn = (e, t = true) => {\n          if (e.byteLength % 8 !== 0) throw new Error(\"Invalid Uint8Array length - must be a multiple of 8 (BigInt).\");\n          let r = e.byteLength / 8, n = new BigInt64Array(e.buffer, e.byteOffset, r), o = new Int32Array(r);\n          for (let i = 0; i < r; i++) {\n            let a = n[i];\n            if (a > 2147483647n || a < -2147483648n) throw new Error(`Overflow occurred when converting BigInt to Int32 at index ${i}: ${a}`);\n            o[i] = Number(a);\n          }\n          return t ? new Uint8Array(o.buffer) : o;\n        }, Ha = (e, t = true) => {\n          if (e.byteLength % 4 !== 0) throw new Error(\"Invalid Uint8Array length - must be a multiple of 4 (Int32).\");\n          let r = e.byteLength / 4, n = new Int32Array(e.buffer, e.byteOffset, r), o = BigInt64Array.from(n, BigInt);\n          return t ? new Uint8Array(o.buffer) : o;\n        }, sm = 1, Ga = () => sm++, um = /* @__PURE__ */ new Map([[\"float32\", 32], [\"float16\", 16], [\"int32\", 32], [\"uint32\", 32], [\"int64\", 64], [\"uint64\", 64], [\"int8\", 8], [\"uint8\", 8], [\"int4\", 4], [\"uint4\", 4]]), Fa = (e, t) => {\n          let r = um.get(e);\n          if (!r) throw new Error(\"Unsupported data type.\");\n          return t.length > 0 ? Math.ceil(t.reduce((n, o) => n * o) * r / 8) : 0;\n        }, Rr = class {\n          constructor(t) {\n            this.shouldConvertInt64toInt32 = false;\n            this.isInt64ToInt32Converted = false;\n            let { sessionId: r, context: n, tensor: o, dataType: i, shape: a, shouldConvertInt64toInt32: u = false } = t;\n            this.sessionId = r, this.mlContext = n, this.mlTensor = o, this.dataType = i, this.tensorShape = a, this.shouldConvertInt64toInt32 = u;\n          }\n          get tensor() {\n            return this.mlTensor;\n          }\n          get type() {\n            return this.dataType;\n          }\n          get shape() {\n            return this.tensorShape;\n          }\n          get byteLength() {\n            return Fa(this.dataType, this.tensorShape);\n          }\n          destroy() {\n            se(\"verbose\", () => \"[WebNN] TensorWrapper.destroy\"), this.mlTensor.destroy();\n          }\n          write(t) {\n            this.mlContext.writeTensor(this.mlTensor, t);\n          }\n          async read(t, r) {\n            if (t) {\n              let n = await this.mlContext.readTensor(this.mlTensor), o = Ha(new Uint8Array(n));\n              if (r) {\n                (r instanceof ArrayBuffer ? new Uint8Array(r) : new Uint8Array(r.buffer, r.byteOffset, r.byteLength)).set(o);\n                return;\n              } else return o.buffer;\n            } else return r ? this.mlContext.readTensor(this.mlTensor, r) : this.mlContext.readTensor(this.mlTensor);\n          }\n          canReuseTensor(t, r, n) {\n            return this.mlContext === t && this.dataType === r && this.tensorShape.length === n.length && this.tensorShape.every((o, i) => o === n[i]);\n          }\n          setIsInt64ToInt32Converted(t) {\n            this.isInt64ToInt32Converted = t;\n          }\n        }, Ur = class {\n          constructor(t, r) {\n            this.tensorManager = t;\n            this.wrapper = r;\n          }\n          get tensorWrapper() {\n            return this.wrapper;\n          }\n          releaseTensor() {\n            this.tensorWrapper && (this.tensorManager.releaseTensor(this.tensorWrapper), this.wrapper = void 0);\n          }\n          async ensureTensor(t, r, n, o) {\n            let i = r, a = this.tensorManager.getMLContext(t), u = i === \"int64\" && !a.opSupportLimits().input.dataTypes.includes(\"int64\");\n            if (u && (i = \"int32\", se(\"verbose\", () => \"[WebNN] TensorIdTracker.ensureTensor: convert dataType from int64 to int32\")), this.wrapper) {\n              if (this.wrapper.canReuseTensor(a, i, n)) return this.wrapper.tensor;\n              if (o) {\n                if (this.wrapper.byteLength !== Fa(i, n)) throw new Error(\"Unable to copy data to tensor with different size.\");\n                this.activeUpload = new Uint8Array(await this.wrapper.read());\n              }\n              this.tensorManager.releaseTensor(this.wrapper);\n            }\n            let d = typeof MLTensorUsage > \"u\" ? void 0 : MLTensorUsage.READ | MLTensorUsage.WRITE;\n            return this.wrapper = await this.tensorManager.getCachedTensor(t, i, n, d, true, true, u), o && this.activeUpload && (this.wrapper.write(this.activeUpload), this.activeUpload = void 0), this.wrapper.tensor;\n          }\n          upload(t) {\n            let r = t;\n            if (this.wrapper) if (this.wrapper.shouldConvertInt64toInt32 && (r = Yn(t, true), this.wrapper.setIsInt64ToInt32Converted(true)), r.byteLength === this.wrapper.byteLength) {\n              this.wrapper.write(r);\n              return;\n            } else se(\"verbose\", () => \"Data size does not match tensor size. Releasing tensor.\"), this.releaseTensor();\n            this.activeUpload ? this.activeUpload.set(r) : this.activeUpload = new Uint8Array(r);\n          }\n          async download(t) {\n            if (this.activeUpload) {\n              let r = this.wrapper?.isInt64ToInt32Converted ? Ha(this.activeUpload) : this.activeUpload;\n              if (t) {\n                t instanceof ArrayBuffer ? new Uint8Array(t).set(r) : new Uint8Array(t.buffer, t.byteOffset, t.byteLength).set(r);\n                return;\n              } else return r.buffer;\n            }\n            if (!this.wrapper) throw new Error(\"Tensor has not been created.\");\n            return t ? this.wrapper.read(this.wrapper?.shouldConvertInt64toInt32, t) : this.wrapper.read(this.wrapper?.shouldConvertInt64toInt32);\n          }\n        }, Qn = class {\n          constructor(t) {\n            this.backend = t;\n            this.tensorTrackersById = /* @__PURE__ */ new Map();\n            this.freeTensors = [];\n            this.externalTensors = /* @__PURE__ */ new Set();\n          }\n          getMLContext(t) {\n            let r = this.backend.getMLContext(t);\n            if (!r) throw new Error(\"MLContext not found for session.\");\n            return r;\n          }\n          reserveTensorId() {\n            let t = Ga();\n            return this.tensorTrackersById.set(t, new Ur(this)), t;\n          }\n          releaseTensorId(t) {\n            let r = this.tensorTrackersById.get(t);\n            r && (this.tensorTrackersById.delete(t), r.tensorWrapper && this.releaseTensor(r.tensorWrapper));\n          }\n          async ensureTensor(t, r, n, o, i) {\n            se(\"verbose\", () => `[WebNN] TensorManager.ensureTensor {tensorId: ${r}, dataType: ${n}, shape: ${o}, copyOld: ${i}}`);\n            let a = this.tensorTrackersById.get(r);\n            if (!a) throw new Error(\"Tensor not found.\");\n            return a.ensureTensor(t, n, o, i);\n          }\n          upload(t, r) {\n            let n = this.tensorTrackersById.get(t);\n            if (!n) throw new Error(\"Tensor not found.\");\n            n.upload(r);\n          }\n          async download(t, r) {\n            se(\"verbose\", () => `[WebNN] TensorManager.download {tensorId: ${t}, dstBuffer: ${r?.byteLength}}`);\n            let n = this.tensorTrackersById.get(t);\n            if (!n) throw new Error(\"Tensor not found.\");\n            return n.download(r);\n          }\n          releaseTensorsForSession(t) {\n            for (let r of this.freeTensors) r.sessionId === t && r.destroy();\n            this.freeTensors = this.freeTensors.filter((r) => r.sessionId !== t);\n          }\n          registerTensor(t, r, n, o) {\n            let i = this.getMLContext(t), a = Ga(), u = new Rr({ sessionId: t, context: i, tensor: r, dataType: n, shape: o });\n            return this.tensorTrackersById.set(a, new Ur(this, u)), this.externalTensors.add(u), a;\n          }\n          async getCachedTensor(t, r, n, o, i, a, u = false) {\n            let d = this.getMLContext(t);\n            for (let [p, m] of this.freeTensors.entries()) if (m.canReuseTensor(d, r, n)) {\n              se(\"verbose\", () => `[WebNN] Reusing tensor {dataType: ${r}, shape: ${n}}`);\n              let f = this.freeTensors.splice(p, 1)[0];\n              return f.sessionId = t, f;\n            }\n            se(\"verbose\", () => `[WebNN] MLContext.createTensor {dataType: ${r}, shape: ${n}}`);\n            let c = await d.createTensor({ dataType: r, shape: n, dimensions: n, usage: o, writable: i, readable: a });\n            return new Rr({ sessionId: t, context: d, tensor: c, dataType: r, shape: n, shouldConvertInt64toInt32: u });\n          }\n          releaseTensor(t) {\n            this.externalTensors.has(t) && this.externalTensors.delete(t), this.freeTensors.push(t);\n          }\n        }, qa = (...e) => new Qn(...e);\n      });\n      Ka = U(() => {\n        \"use strict\";\n        ee();\n        ht();\n        Zn();\n        ja();\n        Xe();\n        Xn = /* @__PURE__ */ new Map([[1, \"float32\"], [10, \"float16\"], [6, \"int32\"], [12, \"uint32\"], [7, \"int64\"], [13, \"uint64\"], [22, \"int4\"], [21, \"uint4\"], [3, \"int8\"], [2, \"uint8\"], [9, \"uint8\"]]), dm = (e, t) => {\n          if (e === t) return true;\n          if (e === void 0 || t === void 0) return false;\n          let r = Object.keys(e).sort(), n = Object.keys(t).sort();\n          return r.length === n.length && r.every((o, i) => o === n[i] && e[o] === t[o]);\n        }, Nr = class {\n          constructor(t) {\n            this.tensorManager = qa(this);\n            this.mlContextBySessionId = /* @__PURE__ */ new Map();\n            this.sessionIdsByMLContext = /* @__PURE__ */ new Map();\n            this.mlContextCache = [];\n            this.sessionGraphInputs = /* @__PURE__ */ new Map();\n            this.temporaryGraphInputs = [];\n            this.temporarySessionTensorIds = /* @__PURE__ */ new Map();\n            Br(t.logLevel, !!t.debug);\n          }\n          get currentSessionId() {\n            if (this.activeSessionId === void 0) throw new Error(\"No active session\");\n            return this.activeSessionId;\n          }\n          onRunStart(t) {\n            se(\"verbose\", () => `[WebNN] onRunStart {sessionId: ${t}}`), this.activeSessionId = t;\n          }\n          onRunEnd(t) {\n            se(\"verbose\", () => `[WebNN] onRunEnd {sessionId: ${t}}`);\n            let r = this.temporarySessionTensorIds.get(t);\n            if (r) {\n              for (let n of r) se(\"verbose\", () => `[WebNN] releasing temporary tensor {tensorId: ${n}}`), this.tensorManager.releaseTensorId(n);\n              this.temporarySessionTensorIds.delete(t), this.activeSessionId = void 0;\n            }\n          }\n          async createMLContext(t) {\n            if (t instanceof GPUDevice) {\n              let n = this.mlContextCache.findIndex((o) => o.gpuDevice === t);\n              if (n !== -1) return this.mlContextCache[n].mlContext;\n              {\n                let o = await navigator.ml.createContext(t);\n                return this.mlContextCache.push({ gpuDevice: t, mlContext: o }), o;\n              }\n            } else if (t === void 0) {\n              let n = this.mlContextCache.findIndex((o) => o.options === void 0 && o.gpuDevice === void 0);\n              if (n !== -1) return this.mlContextCache[n].mlContext;\n              {\n                let o = await navigator.ml.createContext();\n                return this.mlContextCache.push({ mlContext: o }), o;\n              }\n            }\n            let r = this.mlContextCache.findIndex((n) => dm(n.options, t));\n            if (r !== -1) return this.mlContextCache[r].mlContext;\n            {\n              let n = await navigator.ml.createContext(t);\n              return this.mlContextCache.push({ options: t, mlContext: n }), n;\n            }\n          }\n          registerMLContext(t, r) {\n            this.mlContextBySessionId.set(t, r);\n            let n = this.sessionIdsByMLContext.get(r);\n            n || (n = /* @__PURE__ */ new Set(), this.sessionIdsByMLContext.set(r, n)), n.add(t), this.temporaryGraphInputs.length > 0 && (this.sessionGraphInputs.set(t, this.temporaryGraphInputs), this.temporaryGraphInputs = []);\n          }\n          onReleaseSession(t) {\n            this.sessionGraphInputs.delete(t);\n            let r = this.mlContextBySessionId.get(t);\n            if (!r) return;\n            this.tensorManager.releaseTensorsForSession(t), this.mlContextBySessionId.delete(t);\n            let n = this.sessionIdsByMLContext.get(r);\n            if (n.delete(t), n.size === 0) {\n              this.sessionIdsByMLContext.delete(r);\n              let o = this.mlContextCache.findIndex((i) => i.mlContext === r);\n              o !== -1 && this.mlContextCache.splice(o, 1);\n            }\n          }\n          getMLContext(t) {\n            return this.mlContextBySessionId.get(t);\n          }\n          reserveTensorId() {\n            return this.tensorManager.reserveTensorId();\n          }\n          releaseTensorId(t) {\n            se(\"verbose\", () => `[WebNN] releaseTensorId {tensorId: ${t}}`), this.tensorManager.releaseTensorId(t);\n          }\n          async ensureTensor(t, r, n, o, i) {\n            let a = Xn.get(n);\n            if (!a) throw new Error(`Unsupported ONNX data type: ${n}`);\n            return this.tensorManager.ensureTensor(t ?? this.currentSessionId, r, a, o, i);\n          }\n          async createTemporaryTensor(t, r, n) {\n            se(\"verbose\", () => `[WebNN] createTemporaryTensor {onnxDataType: ${r}, shape: ${n}}`);\n            let o = Xn.get(r);\n            if (!o) throw new Error(`Unsupported ONNX data type: ${r}`);\n            let i = this.tensorManager.reserveTensorId();\n            await this.tensorManager.ensureTensor(t, i, o, n, false);\n            let a = this.temporarySessionTensorIds.get(t);\n            return a ? a.push(i) : this.temporarySessionTensorIds.set(t, [i]), i;\n          }\n          uploadTensor(t, r) {\n            if (!fe().shouldTransferToMLTensor) throw new Error(\"Trying to upload to a MLTensor while shouldTransferToMLTensor is false\");\n            se(\"verbose\", () => `[WebNN] uploadTensor {tensorId: ${t}, data: ${r.byteLength}}`), this.tensorManager.upload(t, r);\n          }\n          async downloadTensor(t, r) {\n            return this.tensorManager.download(t, r);\n          }\n          createMLTensorDownloader(t, r) {\n            return async () => {\n              let n = await this.tensorManager.download(t);\n              return Mr(n, r);\n            };\n          }\n          registerMLTensor(t, r, n, o) {\n            let i = Xn.get(n);\n            if (!i) throw new Error(`Unsupported ONNX data type: ${n}`);\n            let a = this.tensorManager.registerTensor(t, r, i, o);\n            return se(\"verbose\", () => `[WebNN] registerMLTensor {tensor: ${r}, dataType: ${i}, dimensions: ${o}} -> {tensorId: ${a}}`), a;\n          }\n          registerMLConstant(t, r, n, o, i, a, u = false) {\n            if (!a) throw new Error(\"External mounted files are not available.\");\n            let d = t;\n            t.startsWith(\"./\") && (d = t.substring(2));\n            let c = a.get(d);\n            if (!c) throw new Error(`File with name ${d} not found in preloaded files.`);\n            if (r + n > c.byteLength) throw new Error(\"Out of bounds: data offset and length exceed the external file data size.\");\n            let p = c.slice(r, r + n).buffer, m;\n            switch (i.dataType) {\n              case \"float32\":\n                m = new Float32Array(p);\n                break;\n              case \"float16\":\n                m = typeof Float16Array < \"u\" && Float16Array.from ? new Float16Array(p) : new Uint16Array(p);\n                break;\n              case \"int32\":\n                m = new Int32Array(p);\n                break;\n              case \"uint32\":\n                m = new Uint32Array(p);\n                break;\n              case \"int64\":\n                u ? (m = Yn(new Uint8Array(p), false), i.dataType = \"int32\") : m = new BigInt64Array(p);\n                break;\n              case \"uint64\":\n                m = new BigUint64Array(p);\n                break;\n              case \"int8\":\n                m = new Int8Array(p);\n                break;\n              case \"int4\":\n              case \"uint4\":\n              case \"uint8\":\n                m = new Uint8Array(p);\n                break;\n              default:\n                throw new Error(`Unsupported data type: ${i.dataType} in creating WebNN Constant from external data.`);\n            }\n            return se(\"verbose\", () => `[WebNN] registerMLConstant {dataType: ${i.dataType}, shape: ${i.shape}}} ${u ? \"(Note: it was int64 data type and registered to int32 as workaround)\" : \"\"}`), o.constant(i, m);\n          }\n          registerGraphInput(t) {\n            this.temporaryGraphInputs.push(t);\n          }\n          isGraphInput(t, r) {\n            let n = this.sessionGraphInputs.get(t);\n            return n ? n.includes(r) : false;\n          }\n          isInt64Supported(t) {\n            return !!this.mlContextBySessionId.get(t)?.opSupportLimits().input.dataTypes.includes(\"int64\");\n          }\n          flush() {\n          }\n        };\n      });\n      Vr = U(() => {\n        \"use strict\";\n      });\n      Ja = U(() => {\n        \"use strict\";\n        Xe();\n        Vr();\n        Za = /* @__PURE__ */ new Map([[64, 250], [128, 200], [256, 200], [512, 200], [2048, 230], [4096, 200], [8192, 50], [16384, 50], [32768, 50], [65536, 50], [131072, 50], [262144, 50], [524288, 50], [1048576, 50], [2097152, 30], [4194304, 20], [8388608, 10], [12582912, 10], [16777216, 10], [26214400, 15], [33554432, 22], [44236800, 2], [58982400, 6], [67108864, 6], [134217728, 6], [167772160, 6]]), Jn = [], eo = (e) => Math.ceil(Number(e) / 16) * 16, lm = (e) => {\n          for (let t = 0; t < Jn.length; t++) {\n            let r = Jn[t];\n            if (e <= r) return r;\n          }\n          return Math.ceil(e / 16) * 16;\n        }, cm = 1, Qa = () => cm++, ro = async (e, t, r, n) => {\n          let o = eo(r), i = e.device.createBuffer({ size: o, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ });\n          try {\n            let a = e.getCommandEncoder();\n            e.endComputePass(), a.copyBufferToBuffer(t, 0, i, 0, o), e.flush(), await i.mapAsync(GPUMapMode.READ);\n            let u = i.getMappedRange();\n            if (n) {\n              let d = n();\n              return d.set(new Uint8Array(u, 0, r)), d;\n            } else return new Uint8Array(u.slice(0, r));\n          } finally {\n            i.destroy();\n          }\n        }, to = class {\n          constructor(t) {\n            this.backend = t;\n            this.storageCache = /* @__PURE__ */ new Map(), this.freeBuffers = /* @__PURE__ */ new Map(), this.freeUniformBuffers = /* @__PURE__ */ new Map(), this.buffersPending = [], this.capturedPendingBuffers = /* @__PURE__ */ new Map();\n            for (let [r] of Za) Jn.push(r), this.freeBuffers.set(r, []), this.freeUniformBuffers.set(r, []);\n            this.sessionCount = 0;\n          }\n          upload(t, r) {\n            let n = r.buffer, o = r.byteOffset, i = r.byteLength, a = eo(i), u = this.storageCache.get(t);\n            if (!u) throw new Error(\"gpu data for uploading does not exist\");\n            if (Number(u.originalSize) !== i) throw new Error(`inconsistent data size. gpu data size=${u.originalSize}, data size=${i}`);\n            let d = this.backend.device.createBuffer({ mappedAtCreation: true, size: a, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC }), c = d.getMappedRange();\n            new Uint8Array(c).set(new Uint8Array(n, o, i)), d.unmap();\n            let p = this.backend.device.createCommandEncoder();\n            p.copyBufferToBuffer(d, 0, u.gpuData.buffer, 0, a), this.backend.device.queue.submit([p.finish()]), d.destroy(), se(\"verbose\", () => `[WebGPU] GpuDataManager.upload(id=${t})`);\n          }\n          memcpy(t, r) {\n            let n = this.storageCache.get(t);\n            if (!n) throw new Error(\"source gpu data for memcpy does not exist\");\n            let o = this.storageCache.get(r);\n            if (!o) throw new Error(\"destination gpu data for memcpy does not exist\");\n            if (n.originalSize !== o.originalSize) throw new Error(\"inconsistent source and destination gpu data size\");\n            let i = eo(n.originalSize), a = this.backend.getCommandEncoder();\n            this.backend.endComputePass(), a.copyBufferToBuffer(n.gpuData.buffer, 0, o.gpuData.buffer, 0, i);\n          }\n          registerExternalBuffer(t, r, n) {\n            let o;\n            if (n) {\n              if (o = n[0], t === n[1]) return se(\"verbose\", () => `[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${o}, buffer is the same, skip.`), o;\n              if (this.backend.capturedCommandList.has(this.backend.currentSessionId)) throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.\n             Please use the previous external buffer!`);\n            } else o = Qa();\n            return this.storageCache.set(o, { gpuData: { id: o, type: 0, buffer: t }, originalSize: r }), se(\"verbose\", () => `[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${o}, registered.`), o;\n          }\n          unregisterExternalBuffer(t) {\n            t !== void 0 && (this.storageCache.delete(t), se(\"verbose\", () => `[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${t}`));\n          }\n          create(t, r = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST) {\n            let n = lm(t), o, i = (r & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE, a = (r & GPUBufferUsage.UNIFORM) === GPUBufferUsage.UNIFORM;\n            if (i || a) {\n              let c = (i ? this.freeBuffers : this.freeUniformBuffers).get(n);\n              c ? c.length > 0 ? o = c.pop() : o = this.backend.device.createBuffer({ size: n, usage: r }) : o = this.backend.device.createBuffer({ size: n, usage: r });\n            } else o = this.backend.device.createBuffer({ size: n, usage: r });\n            let u = { id: Qa(), type: 0, buffer: o };\n            return this.storageCache.set(u.id, { gpuData: u, originalSize: Number(t) }), se(\"verbose\", () => `[WebGPU] GpuDataManager.create(size=${t}) => id=${u.id}`), u;\n          }\n          get(t) {\n            return this.storageCache.get(t)?.gpuData;\n          }\n          release(t) {\n            let r = typeof t == \"bigint\" ? Number(t) : t, n = this.storageCache.get(r);\n            if (!n) {\n              if (this.storageCache.size === 0) return 0;\n              throw new Error(\"releasing data does not exist\");\n            }\n            return se(\"verbose\", () => `[WebGPU] GpuDataManager.release(id=${r}), gpuDataId=${n.gpuData.id}`), this.storageCache.delete(r), this.buffersPending.push(n.gpuData.buffer), n.originalSize;\n          }\n          async download(t, r) {\n            let n = this.storageCache.get(Number(t));\n            if (!n) throw new Error(\"data does not exist\");\n            await ro(this.backend, n.gpuData.buffer, n.originalSize, r);\n          }\n          refreshPendingBuffers() {\n            if (this.buffersPending.length !== 0) if (this.backend.sessionStatus === \"default\") {\n              for (let t of this.buffersPending) {\n                let r = Za.get(t.size);\n                if ((t.usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE) {\n                  let n = this.freeBuffers.get(t.size) || [];\n                  r === void 0 || n.length >= r ? t.destroy() : n.push(t);\n                } else if ((t.usage & GPUBufferUsage.UNIFORM) === GPUBufferUsage.UNIFORM) {\n                  let n = this.freeUniformBuffers.get(t.size) || [];\n                  r === void 0 || n.length >= r ? t.destroy() : n.push(t);\n                } else t.destroy();\n              }\n              this.buffersPending = [];\n            } else {\n              let t = this.capturedPendingBuffers.get(this.backend.currentSessionId);\n              t || (t = [], this.capturedPendingBuffers.set(this.backend.currentSessionId, t));\n              for (let r of this.buffersPending) t.push(r);\n              this.buffersPending = [];\n            }\n          }\n          dispose() {\n            this.freeBuffers.forEach((t) => {\n              t.forEach((r) => {\n                r.destroy();\n              });\n            }), this.freeUniformBuffers.forEach((t) => {\n              t.forEach((r) => {\n                r.destroy();\n              });\n            }), this.storageCache.forEach((t) => {\n              t.gpuData.buffer.destroy();\n            }), this.capturedPendingBuffers.forEach((t) => {\n              t.forEach((r) => {\n                r.destroy();\n              });\n            }), this.storageCache = /* @__PURE__ */ new Map(), this.freeBuffers = /* @__PURE__ */ new Map(), this.freeUniformBuffers = /* @__PURE__ */ new Map(), this.capturedPendingBuffers = /* @__PURE__ */ new Map();\n          }\n          onCreateSession() {\n            this.sessionCount += 1;\n          }\n          onReleaseSession(t) {\n            let r = this.capturedPendingBuffers.get(t);\n            r && (r.forEach((n) => {\n              n.destroy();\n            }), this.capturedPendingBuffers.delete(t)), this.sessionCount -= 1, this.sessionCount === 0 && (se(\"warning\", () => \"[WebGPU] Clearing webgpu buffer cache\"), this.storageCache.forEach((n) => {\n              n.gpuData.buffer.destroy();\n            }), this.storageCache = /* @__PURE__ */ new Map());\n          }\n        }, Xa = (...e) => new to(...e);\n      });\n      Se = U(() => {\n        \"use strict\";\n        no = class {\n          constructor(t) {\n            Object.assign(this, t);\n          }\n          get cacheKey() {\n            return this.key || (this.key = Object.getOwnPropertyNames(this).sort().map((t) => `${this[t]}`).join(\";\")), this.key;\n          }\n        }, J = (e) => new no(e);\n      });\n      ie = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        It = 64, io = (e, t) => {\n          if (t === 3) throw new Error(\"vec3 has same alignment as vec4, use vec4 instead\");\n          switch (Number(e)) {\n            case 10:\n              return t > 1 ? `vec${t}<f16>` : \"f16\";\n            case 1:\n              return t > 1 ? `vec${t}<f32>` : \"f32\";\n            case 6:\n              return t > 1 ? `vec${t}<i32>` : \"i32\";\n            case 12:\n              return t > 1 ? `vec${t}<u32>` : \"u32\";\n            case 7:\n              if (t > 1) throw new Error(\"currently not supported vecX of uint64 yet\");\n              return [\"vec2<u32>\", \"i32\"];\n            case 13:\n              if (t > 1) throw new Error(\"currently not supported vecX of uint64 yet\");\n              return [\"vec2<u32>\", \"u32\"];\n            case 9:\n              if (t !== 4) throw new Error(\"bool must be vec4\");\n              return [\"u32\", \"vec4<bool>\"];\n            case 22:\n              return \"i32\";\n            case 21:\n              return \"u32\";\n            default:\n              throw new Error(`Unknown data type: ${e}`);\n          }\n        }, be = (e, t = 1) => {\n          let r = io(e, t);\n          return typeof r == \"string\" ? r : r[0];\n        }, Ae = (e, t = 1) => {\n          let r = io(e, t);\n          return typeof r == \"string\" ? r : r[1];\n        }, N = (...e) => {\n          let t = [];\n          return e.forEach((r) => {\n            r.length !== 0 && t.push({ type: 12, data: r }, { type: 12, data: k.computeStrides(r) });\n          }), t;\n        }, ce = (e) => e % 4 === 0 ? 4 : e % 2 === 0 ? 2 : 1, ao = (e = \"f32\", t, r = \"0\") => !t || t === 1 ? `${e}(${r})` : `vec${t}<${e}>(${r})`, Ct = (e, t, r) => e === \"f32\" ? r : t === 1 ? `f32(${r})` : `vec${t}<f32>(${r})`, He = (e, t) => t === 4 ? `(${e}.x + ${e}.y + ${e}.z + ${e}.w)` : t === 2 ? `(${e}.x + ${e}.y)` : t === 3 ? `(${e}.x + ${e}.y + ${e}.z)` : e, F = (e, t, r, n) => e.startsWith(\"uniforms.\") && r > 4 ? typeof t == \"string\" ? n === \"f16\" ? `${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]` : `${e}[(${t}) / 4][(${t}) % 4]` : n === \"f16\" ? `${e}[${Math.floor(t / 8)}][${Math.floor(t % 8 / 4)}][${t % 8 % 4}]` : `${e}[${Math.floor(t / 4)}][${t % 4}]` : r > 1 ? `${e}[${t}]` : e, Wr = (e, t, r, n, o) => {\n          let i = typeof r == \"number\", a = i ? r : r.length, u = [...new Array(a).keys()], d = a < 2 ? \"u32\" : a <= 4 ? `vec${a}<u32>` : `array<u32, ${a}>`, c = io(t, o), p = typeof c == \"string\" ? c : c[1], m = typeof c == \"string\" ? c : c[0], f = { indices: d, value: p, storage: m, tensor: t }, b = (C) => typeof C == \"string\" ? C : `${C}u`, g = { offsetToIndices: false, indicesToOffset: false, broadcastedIndicesToOffset: false, set: false, setByIndices: false, get: false, getByIndices: false }, _ = i ? \"uniforms.\" : \"\", S = `${_}${e}_shape`, $ = `${_}${e}_strides`, v = \"\";\n          for (let C = 0; C < a - 1; C++) v += `\n    let dim${C} = current / ${F($, C, a)};\n    let rest${C} = current % ${F($, C, a)};\n    indices[${C}] = dim${C};\n    current = rest${C};\n    `;\n          v += `indices[${a - 1}] = current;`;\n          let x = a < 2 ? \"\" : `\n  fn o2i_${e}(offset: u32) -> ${f.indices} {\n    var indices: ${f.indices};\n    var current = offset;\n    ${v}\n    return indices;\n  }`, T = (C) => (g.offsetToIndices = true, a < 2 ? C : `o2i_${e}(${C})`), E = [];\n          if (a >= 2) for (let C = a - 1; C >= 0; C--) E.push(`${F($, C, a)} * (indices[${C}])`);\n          let I = a < 2 ? \"\" : `\n  fn i2o_${e}(indices: ${f.indices}) -> u32 {\n    return ${E.join(\"+\")};\n  }`, z = (C) => (g.indicesToOffset = true, a < 2 ? C : `i2o_${e}(${C})`), O = (...C) => a === 0 ? \"0u\" : `${f.indices}(${C.map(b).join(\",\")})`, D = (C, V) => a < 2 ? `${C}` : `${F(C, V, a)}`, L = (C, V, de) => a < 2 ? `${C}=${de};` : `${F(C, V, a)}=${de};`, q = {}, Q = (C, V) => {\n            g.broadcastedIndicesToOffset = true;\n            let de = `${V.name}broadcastedIndicesTo${e}Offset`;\n            if (de in q) return `${de}(${C})`;\n            let ze = [];\n            for (let ve = a - 1; ve >= 0; ve--) {\n              let $e = V.indicesGet(\"outputIndices\", ve + V.rank - a);\n              ze.push(`${D($, ve)} * (${$e} % ${D(S, ve)})`);\n            }\n            return q[de] = `fn ${de}(outputIndices: ${V.type.indices}) -> u32 {\n             return ${ze.length > 0 ? ze.join(\"+\") : \"0u\"};\n           }`, `${de}(${C})`;\n          }, W = (C, V) => (() => {\n            if (f.storage === f.value) return `${e}[${C}]=${V};`;\n            if (f.storage === \"vec2<u32>\" && f.value === \"i32\") return `${e}[${C}]=vec2<u32>(u32(${V}), select(0u, 0xFFFFFFFFu, ${V} < 0));`;\n            if (f.storage === \"vec2<u32>\" && f.value === \"u32\") return `${e}[${C}]=vec2<u32>(u32(${V}), 0u);`;\n            if (f.storage === \"u32\" && f.value === \"vec4<bool>\") return `${e}[${C}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${V}));`;\n            throw new Error(`not supported combination of storage type ${f.storage} and value type ${f.value} yet`);\n          })(), Z = (C) => (() => {\n            if (f.storage === f.value) return `${e}[${C}]`;\n            if (f.storage === \"vec2<u32>\" && f.value === \"i32\") return `i32(${e}[${C}].x)`;\n            if (f.storage === \"vec2<u32>\" && f.value === \"u32\") return `u32(${e}[${C}].x)`;\n            if (f.storage === \"u32\" && f.value === \"vec4<bool>\") return `vec4<bool>(bool(${e}[${C}] & 0xFFu), bool(${e}[${C}] & 0xFF00u), bool(${e}[${C}] & 0xFF0000u), bool(${e}[${C}] & 0xFF000000u))`;\n            throw new Error(`not supported combination of storage type ${f.storage} and value type ${f.value} yet`);\n          })(), we = a < 2 ? \"\" : `\n  fn get_${e}ByIndices(indices: ${f.indices}) -> ${p} {\n    return ${Z(`i2o_${e}(indices)`)};\n  }`, H = a < 2 ? \"\" : (() => {\n            let C = u.map((de) => `d${de}: u32`).join(\", \"), V = u.map((de) => `d${de}`).join(\", \");\n            return `\n  fn get_${e}(${C}) -> ${p} {\n    return get_${e}ByIndices(${O(V)});\n  }`;\n          })(), j = (...C) => {\n            if (C.length !== a) throw new Error(`indices length must be ${a}`);\n            let V = C.map(b).join(\",\");\n            return a === 0 ? Z(\"0u\") : a === 1 ? Z(V[0]) : (g.get = true, g.getByIndices = true, g.indicesToOffset = true, `get_${e}(${V})`);\n          }, te = (C) => a < 2 ? Z(C) : (g.getByIndices = true, g.indicesToOffset = true, `get_${e}ByIndices(${C})`), X = a < 2 ? \"\" : `\n  fn set_${e}ByIndices(indices: ${f.indices}, value: ${p}) {\n    ${W(`i2o_${e}(indices)`, \"value\")}\n  }`, ue = a < 2 ? \"\" : (() => {\n            let C = u.map((de) => `d${de}: u32`).join(\", \"), V = u.map((de) => `d${de}`).join(\", \");\n            return `\n  fn set_${e}(${C}, value: ${p}) {\n    set_${e}ByIndices(${O(V)}, value);\n  }`;\n          })();\n          return { impl: () => {\n            let C = [], V = false;\n            return g.offsetToIndices && (C.push(x), V = true), g.indicesToOffset && (C.push(I), V = true), g.broadcastedIndicesToOffset && (Object.values(q).forEach((de) => C.push(de)), V = true), g.set && (C.push(ue), V = true), g.setByIndices && (C.push(X), V = true), g.get && (C.push(H), V = true), g.getByIndices && (C.push(we), V = true), !i && V && C.unshift(`const ${S} = ${f.indices}(${r.join(\",\")});`, `const ${$} = ${f.indices}(${k.computeStrides(r).join(\",\")});`), C.join(`\n`);\n          }, type: f, offsetToIndices: T, indicesToOffset: z, broadcastedIndicesToOffset: Q, indices: O, indicesGet: D, indicesSet: L, set: (...C) => {\n            if (C.length !== a + 1) throw new Error(`indices length must be ${a}`);\n            let V = C[a];\n            if (typeof V != \"string\") throw new Error(\"value must be string\");\n            let de = C.slice(0, a).map(b).join(\",\");\n            return a === 0 ? W(\"0u\", V) : a === 1 ? W(de[0], V) : (g.set = true, g.setByIndices = true, g.indicesToOffset = true, `set_${e}(${de}, ${V})`);\n          }, setByOffset: W, setByIndices: (C, V) => a < 2 ? W(C, V) : (g.setByIndices = true, g.indicesToOffset = true, `set_${e}ByIndices(${C}, ${V});`), get: j, getByOffset: Z, getByIndices: te, usage: n, name: e, strides: $, shape: S, rank: a };\n        }, P = (e, t, r, n = 1) => Wr(e, t, r, \"input\", n), M = (e, t, r, n = 1) => Wr(e, t, r, \"output\", n), es = (e, t, r) => Wr(e, t, r, \"atomicOutput\", 1), Lr = (e, t, r, n = 1) => Wr(e, t, r, \"internal\", n), oo = class {\n          constructor(t, r) {\n            this.normalizedDispatchGroup = t;\n            this.limits = r;\n            this.internalVariables = [];\n            this.variables = [];\n            this.uniforms = [];\n            this.variableIndex = 0;\n          }\n          guardAgainstOutOfBoundsWorkgroupSizes(t) {\n            return `if (global_idx >= ${typeof t == \"number\" ? `${t}u` : t}) { return; }`;\n          }\n          mainStart(t = It) {\n            let r = typeof t == \"number\" ? t : t[0], n = typeof t == \"number\" ? 1 : t[1], o = typeof t == \"number\" ? 1 : t[2];\n            if (r > this.limits.maxComputeWorkgroupSizeX || n > this.limits.maxComputeWorkgroupSizeY || o > this.limits.maxComputeWorkgroupSizeZ) throw new Error(`workgroup size [${r}, ${n}, ${o}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);\n            if (r * n * o > this.limits.maxComputeInvocationsPerWorkgroup) throw new Error(`workgroup size [${r}, ${n}, ${o}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);\n            let i = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1, a = i ? `@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(local_invocation_id) local_id : vec3<u32>` : `@builtin(global_invocation_id) global_id : vec3<u32>,\n                                             @builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`, u = i ? `let global_idx = global_id.x;\n         let workgroup_index = workgroup_id.x;` : `let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n             workgroup_id.y * num_workgroups[0] + workgroup_id.x;\n         let global_idx = workgroup_index * ${r * n * o}u + local_idx;`;\n            return `@compute @workgroup_size(${r}, ${n}, ${o})\n  fn main(${a}) {\n    ${u}\n  `;\n          }\n          appendVariableUniforms(t) {\n            t.rank !== 0 && (t.shape.startsWith(\"uniforms.\") && this.uniforms.push({ name: t.shape.replace(\"uniforms.\", \"\"), type: \"u32\", length: t.rank }), t.strides.startsWith(\"uniforms.\") && this.uniforms.push({ name: t.strides.replace(\"uniforms.\", \"\"), type: \"u32\", length: t.rank }));\n          }\n          declareVariable(t, r) {\n            if (t.usage === \"internal\") throw new Error(\"cannot use internal variable with declareVariable(). use registerInternalVariables() instead.\");\n            this.variables.push(t), this.appendVariableUniforms(t);\n            let n = t.usage === \"input\" ? \"read\" : \"read_write\", o = t.usage === \"atomicOutput\" ? \"atomic<i32>\" : t.type.storage;\n            return `@group(0) @binding(${r}) var<storage, ${n}> ${t.name}: array<${o}>;`;\n          }\n          declareVariables(...t) {\n            return t.map((r) => this.declareVariable(r, this.variableIndex++)).join(`\n`);\n          }\n          registerInternalVariable(t) {\n            if (t.usage !== \"internal\") throw new Error(\"cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.\");\n            this.internalVariables.push(t), this.appendVariableUniforms(t);\n          }\n          registerInternalVariables(...t) {\n            return t.forEach((r) => this.registerInternalVariable(r)), this;\n          }\n          registerUniform(t, r, n = 1) {\n            return this.uniforms.push({ name: t, type: r, length: n }), this;\n          }\n          registerUniforms(t) {\n            return this.uniforms = this.uniforms.concat(t), this;\n          }\n          uniformDeclaration() {\n            if (this.uniforms.length === 0) return \"\";\n            let t = [];\n            for (let { name: r, type: n, length: o } of this.uniforms) if (o && o > 4) n === \"f16\" ? t.push(`@align(16) ${r}:array<mat2x4<${n}>, ${Math.ceil(o / 8)}>`) : t.push(`${r}:array<vec4<${n}>, ${Math.ceil(o / 4)}>`);\n            else {\n              let i = o == null || o === 1 ? n : `vec${o}<${n}>`;\n              t.push(`${r}:${i}`);\n            }\n            return `\n      struct Uniforms { ${t.join(\", \")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`;\n          }\n          get additionalImplementations() {\n            return this.uniformDeclaration() + this.variables.map((t) => t.impl()).join(`\n`) + this.internalVariables.map((t) => t.impl()).join(`\n`);\n          }\n          get variablesInfo() {\n            if (this.uniforms.length === 0) return;\n            let t = (r) => [12, 10, 1, 6][[\"u32\", \"f16\", \"f32\", \"i32\"].indexOf(r)];\n            return this.uniforms.map((r) => [t(r.type), r.length ?? 1]);\n          }\n        }, ts = (e, t) => new oo(e, t);\n      });\n      st = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        pm = (e, t) => {\n          if (!e || e.length !== 1) throw new Error(\"Transpose requires 1 input.\");\n          if (t.length !== 0 && t.length !== e[0].dims.length) throw new Error(`perm size ${t.length} does not match input rank ${e[0].dims.length}`);\n        }, rs = (e, t) => t.length !== 0 ? t : [...new Array(e).keys()].reverse(), mm = (e, t) => k.sortBasedOnPerm(e, rs(e.length, t)), fm = (e, t, r, n) => {\n          let o = `fn perm(i: ${n.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`;\n          for (let i = 0; i < t; ++i) o += `a[${e[i]}]=i[${i}];`;\n          return o += \"return a;}\";\n        }, hm = (e, t) => {\n          let r = [], n = [];\n          for (let o = 0; o < e.length; ++o) e[o] !== 1 && r.push(e[o]), e[t[o]] !== 1 && n.push(t[o]);\n          return { newShape: r, newPerm: n };\n        }, gm = (e, t) => {\n          let r = 0;\n          for (let n = 0; n < e.length; ++n) if (t[e[n]] !== 1) {\n            if (e[n] < r) return false;\n            r = e[n];\n          }\n          return true;\n        }, Ee = (e, t) => {\n          let r = e.dataType, n = e.dims.length, o = rs(n, t), i = mm(e.dims, o), a = e.dims, u = i, d = n < 2 || gm(o, e.dims), c;\n          if (d) return c = (_) => {\n            let S = P(\"input\", r, a, 4), $ = M(\"output\", r, u, 4);\n            return `\n  ${_.registerUniform(\"output_size\", \"u32\").declareVariables(S, $)}\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n    output[global_idx] = input[global_idx];\n  }`;\n          }, { name: \"TransposeCopy\", shaderCache: { inputDependencies: [\"type\"] }, getRunData: () => {\n            let _ = k.size(i);\n            return { outputs: [{ dims: i, dataType: e.dataType }], dispatchGroup: { x: Math.ceil(_ / 64 / 4) }, programUniforms: [{ type: 12, data: Math.ceil(_ / 4) }] };\n          }, getShaderSource: c };\n          let { newShape: p, newPerm: m } = hm(e.dims, o), f = k.areEqual(m, [2, 3, 1]), b = k.areEqual(m, [3, 1, 2]);\n          if (p.length === 2 || f || b) {\n            a = f ? [p[0], p[1] * p[2]] : b ? [p[0] * p[1], p[2]] : p, u = [a[1], a[0]];\n            let _ = 16;\n            return c = (S) => {\n              let $ = P(\"a\", r, a.length), v = M(\"output\", r, u.length);\n              return `\n  ${S.registerUniform(\"output_size\", \"u32\").declareVariables($, v)}\n  var<workgroup> tile : array<array<${v.type.value}, ${_ + 1}>, ${_}>;\n  ${S.mainStart([_, _, 1])}\n    let stride = (uniforms.output_shape[1] - 1) / ${_} + 1;\n    let workgroup_id_x = workgroup_index % stride;\n    let workgroup_id_y = workgroup_index / stride;\n    let input_col = workgroup_id_y * ${_}u + local_id.x;\n    let input_row = workgroup_id_x * ${_}u + local_id.y;\n    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {\n      tile[local_id.y][local_id.x] = ${$.getByIndices(`${$.type.indices}(input_row, input_col)`)};\n    }\n    workgroupBarrier();\n\n    let output_col = workgroup_id_x * ${_}u + local_id.x;\n    let output_row = workgroup_id_y * ${_}u + local_id.y;\n    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {\n      ${v.setByIndices(`${v.type.indices}(output_row, output_col)`, \"tile[local_id.x][local_id.y]\")}\n    }\n  }`;\n            }, { name: \"TransposeShared\", shaderCache: { inputDependencies: [\"type\"] }, getRunData: () => {\n              let S = k.size(i);\n              return { outputs: [{ dims: i, dataType: e.dataType }], dispatchGroup: { x: Math.ceil(u[1] / _), y: Math.ceil(u[0] / _) }, programUniforms: [{ type: 12, data: S }, ...N(a, u)] };\n            }, getShaderSource: c };\n          }\n          return c = (_) => {\n            let S = P(\"a\", r, a.length), $ = M(\"output\", r, u.length);\n            return `\n  ${_.registerUniform(\"output_size\", \"u32\").declareVariables(S, $)}\n\n  ${fm(o, n, S, $)}\n\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n\n    let indices = ${$.offsetToIndices(\"global_idx\")};\n    let aIndices = perm(indices);\n\n    ${$.setByOffset(\"global_idx\", S.getByIndices(\"aIndices\"))}\n  }`;\n          }, { name: \"Transpose\", shaderCache: { hint: `${t}`, inputDependencies: [\"rank\"] }, getRunData: () => {\n            let _ = k.size(i);\n            return { outputs: [{ dims: i, dataType: e.dataType }], dispatchGroup: { x: Math.ceil(_ / 64) }, programUniforms: [{ type: 12, data: _ }, ...N(a, u)] };\n          }, getShaderSource: c };\n        }, ns = (e, t) => {\n          pm(e.inputs, t.perm), e.compute(Ee(e.inputs[0], t.perm));\n        }, os = (e) => J({ perm: e.perm });\n      });\n      hs = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        ie();\n        Gr();\n        st();\n        bm = { max: \"select(bestValue, candidate, candidate > bestValue)\", min: \"select(bestValue, candidate, candidate < bestValue)\", mean: \"bestValue + candidate\", sum: \"bestValue + candidate\", prod: \"bestValue * candidate\", sumSquare: \"bestValue + candidate * candidate\", logSumExp: \"bestValue + exp(candidate)\", l1: \"bestValue + abs(candidate)\", l2: \"bestValue + candidate * candidate\", logSum: \"bestValue + candidate\" }, ym = { max: \"select(bestValue, candidate, candidate > bestValue)\", min: \"select(bestValue, candidate, candidate < bestValue)\", mean: \"bestValue + candidate\", sum: \"bestValue + candidate\", prod: \"bestValue * candidate\", sumSquare: \"bestValue + candidate\", logSumExp: \"bestValue + candidate\", l1: \"bestValue + candidate\", l2: \"bestValue + candidate\", logSum: \"bestValue + candidate\" }, _m = { max: \"_A[offset]\", min: \"_A[offset]\", mean: \"0\", sum: \"0\", prod: \"1\", sumSquare: \"0\", logSumExp: \"0\", l1: \"0\", l2: \"0\", logSum: \"0\" }, wm = { max: \"bestValue\", min: \"bestValue\", sum: \"bestValue\", prod: \"bestValue\", sumSquare: \"bestValue\", logSumExp: \"log(bestValue)\", l1: \"bestValue\", l2: \"sqrt(bestValue)\", logSum: \"log(bestValue)\" }, vm = (e, t) => {\n          let r = [];\n          for (let n = t - e; n < t; ++n) r.push(n);\n          return r;\n        }, $m = (e, t) => {\n          let r = [], n = e.length;\n          for (let i = 0; i < n; i++) t.indexOf(i) === -1 && r.push(e[i]);\n          let o = t.map((i) => e[i]);\n          return [r, o];\n        }, xm = (e, t) => {\n          let r = e.length + t.length, n = [], o = 0;\n          for (let i = 0; i < r; i++) t.indexOf(i) === -1 ? n.push(e[o++]) : n.push(1);\n          return n;\n        }, Sm = (e, t) => {\n          for (let r = 0; r < e.length; ++r) if (e[e.length - r - 1] !== t - 1 - r) return false;\n          return true;\n        }, Tm = (e, t) => {\n          let r = [];\n          if (!Sm(e, t)) {\n            for (let n = 0; n < t; ++n) e.indexOf(n) === -1 && r.push(n);\n            e.forEach((n) => r.push(n));\n          }\n          return r;\n        }, Im = (e, t, r, n, o, i, a) => {\n          let u = r[0].dims, d = k.size(i), c = k.size(a), p = P(\"_A\", r[0].dataType, u), m = M(\"output\", o, i), f = 64;\n          d === 1 && (f = 256);\n          let b = `\n          var<workgroup> aBestValues : array<f32, ${f}>;\n       `, g = (_) => `\n        ${_.registerUniform(\"reduceSize\", \"u32\").declareVariables(p, m)}\n        ${b}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${_.mainStart(f)}\n\n          let outputIndex = global_idx / ${f};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = f32(${_m[n]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${f}) {\n           let candidate = f32(${p.getByOffset(\"offset + k\")});\n           bestValue = ${bm[n]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${f}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${ym[n]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${m.setByOffset(\"outputIndex\", `${n === \"mean\" ? `${m.type.storage}(bestValue / f32(uniforms.reduceSize))` : `${m.type.storage}(${wm[n]})`}`)};\n         }\n        }`;\n          return { name: e, shaderCache: { hint: `${t};${f}`, inputDependencies: [\"type\"] }, getShaderSource: g, getRunData: () => ({ outputs: [{ dims: i, dataType: o }], dispatchGroup: { x: d }, programUniforms: [{ type: 12, data: c }] }) };\n        }, et = (e, t, r, n) => {\n          let o = e.inputs.length === 1 ? r : so(e.inputs, r), i = o.axes;\n          i.length === 0 && !o.noopWithEmptyAxes && (i = e.inputs[0].dims.map((b, g) => g));\n          let a = k.normalizeAxes(i, e.inputs[0].dims.length), u = a, d = e.inputs[0], c = Tm(u, e.inputs[0].dims.length);\n          c.length > 0 && (d = e.compute(Ee(e.inputs[0], c), { inputs: [0], outputs: [-1] })[0], u = vm(u.length, d.dims.length));\n          let [p, m] = $m(d.dims, u), f = p;\n          o.keepDims && (f = xm(p, a)), e.compute(Im(t, o.cacheKey, [d], n, e.inputs[0].dataType, f, m), { inputs: [d] });\n        }, is = (e, t) => {\n          et(e, \"ReduceMeanShared\", t, \"mean\");\n        }, as = (e, t) => {\n          et(e, \"ReduceL1Shared\", t, \"l1\");\n        }, ss = (e, t) => {\n          et(e, \"ReduceL2Shared\", t, \"l2\");\n        }, us = (e, t) => {\n          et(e, \"ReduceLogSumExpShared\", t, \"logSumExp\");\n        }, ds = (e, t) => {\n          et(e, \"ReduceMaxShared\", t, \"max\");\n        }, ls = (e, t) => {\n          et(e, \"ReduceMinShared\", t, \"min\");\n        }, cs = (e, t) => {\n          et(e, \"ReduceProdShared\", t, \"prod\");\n        }, ps = (e, t) => {\n          et(e, \"ReduceSumShared\", t, \"sum\");\n        }, ms = (e, t) => {\n          et(e, \"ReduceSumSquareShared\", t, \"sumSquare\");\n        }, fs = (e, t) => {\n          et(e, \"ReduceLogSumShared\", t, \"logSum\");\n        };\n      });\n      Gr = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        hs();\n        tt = (e) => {\n          if (!e || e.length === 0 || e.length > 2) throw new Error(\"Reduce op requires 1 or 2 inputs.\");\n          if (e.length === 2 && e[1].dims.length !== 1) throw new Error(\"Invalid axes input dims.\");\n        }, Cm = (e) => [\"\", \"\", `var value = ${e.getByIndices(\"input_indices\")};`, \"\"], Hr = (e, t, r, n, o, i, a = false, u = false) => {\n          let d = [], c = r[0].dims, p = c.length, m = k.normalizeAxes(o, p), f = !u && m.length === 0;\n          c.forEach((S, $) => {\n            f || m.indexOf($) >= 0 ? a && d.push(1) : d.push(S);\n          });\n          let b = d.length, g = k.size(d);\n          return { name: e, shaderCache: t, getShaderSource: (S) => {\n            let $ = [], v = P(\"_A\", r[0].dataType, p), x = M(\"output\", i, b), T = n(v, x, m), E = T[2];\n            for (let I = 0, z = 0; I < p; I++) f || m.indexOf(I) >= 0 ? (a && z++, E = `for(var j${I}: u32 = 0; j${I} < ${c[I]}; j${I}++) {\n                  ${T[2].includes(\"last_index\") ? `let last_index = j${I};` : \"\"}\n                  ${v.indicesSet(\"input_indices\", I, `j${I}`)}\n                  ${E}\n                }`) : ($.push(`${v.indicesSet(\"input_indices\", I, x.indicesGet(\"output_indices\", z))};`), z++);\n            return `\n\n        ${S.registerUniform(\"output_size\", \"u32\").declareVariables(v, x)}\n\n        ${S.mainStart()}\n          ${S.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n          var input_indices: ${v.type.indices};\n          let output_indices = ${x.offsetToIndices(\"global_idx\")};\n\n          ${$.join(`\n`)}\n          ${T[0]}       // init ops for reduce max/min\n          ${T[1]}\n          ${E}\n          ${T[3]}\n          ${T.length === 4 ? x.setByOffset(\"global_idx\", \"value\") : T.slice(4).join(`\n`)}\n        }`;\n          }, getRunData: () => ({ outputs: [{ dims: d, dataType: i }], dispatchGroup: { x: Math.ceil(g / 64) }, programUniforms: [{ type: 12, data: g }, ...N(c, d)] }) };\n        }, so = (e, t) => {\n          let r = [];\n          return e[1].dims[0] > 0 && e[1].getBigInt64Array().forEach((n) => r.push(Number(n))), J({ axes: r, keepDims: t.keepDims, noopWithEmptyAxes: t.noopWithEmptyAxes });\n        }, rt = (e, t, r, n) => {\n          let o = e.inputs, i = o.length === 1 ? r : so(o, r);\n          e.compute(Hr(t, { hint: i.cacheKey, inputDependencies: [\"rank\"] }, [o[0]], i.noopWithEmptyAxes && i.axes.length === 0 ? Cm : n, i.axes, o[0].dataType, i.keepDims, i.noopWithEmptyAxes), { inputs: [0] });\n        }, Am = (e, t) => {\n          tt(e.inputs), rt(e, \"ReduceLogSum\", t, (n, o) => [`var value = ${o.type.storage}(0);`, \"\", `value += ${n.getByIndices(\"input_indices\")};`, \"value = log(value);\"]);\n        }, Em = (e, t) => {\n          tt(e.inputs), rt(e, \"ReduceL1\", t, (n, o) => [`var value = ${o.type.storage}(0);`, \"\", `value += abs(${n.getByIndices(\"input_indices\")});`, \"\"]);\n        }, km = (e, t) => {\n          tt(e.inputs), rt(e, \"ReduceL2\", t, (n, o) => [`var t = ${o.type.value}(0); var value = ${o.type.value}(0);`, \"\", `t = ${n.getByIndices(\"input_indices\")}; value += (t * t);`, \"value = sqrt(value);\"]);\n        }, Pm = (e, t) => {\n          tt(e.inputs), rt(e, \"ReduceLogSumExp\", t, (n, o) => [`var value = ${o.type.storage}(0);`, \"\", `value += exp(${n.getByIndices(\"input_indices\")});`, \"value = log(value);\"]);\n        }, zm = (e, t) => {\n          tt(e.inputs), rt(e, \"ReduceMax\", t, (n, o, i) => {\n            let a = [];\n            for (let u = 0; u < n.rank; u++) (i.indexOf(u) >= 0 || i.length === 0) && a.push(n.indicesSet(\"input_indices\", u, 0));\n            return [`${a.join(`\n`)}`, `var value = ${n.getByIndices(\"input_indices\")};`, `value = max(value, ${n.getByIndices(\"input_indices\")});`, \"\"];\n          });\n        }, Om = (e, t) => {\n          tt(e.inputs), rt(e, \"ReduceMean\", t, (n, o, i) => {\n            let a = 1;\n            for (let u = 0; u < n.rank; u++) (i.indexOf(u) >= 0 || i.length === 0) && (a *= e.inputs[0].dims[u]);\n            return [\"var sum = f32(0);\", \"\", `sum += f32(${n.getByIndices(\"input_indices\")});`, `let value = ${o.type.value}(sum / ${a});`];\n          });\n        }, Bm = (e, t) => {\n          tt(e.inputs), rt(e, \"ReduceMin\", t, (n, o, i) => {\n            let a = [];\n            for (let u = 0; u < n.rank; u++) (i.indexOf(u) >= 0 || i.length === 0) && a.push(`input_indices[${u}] = 0;`);\n            return [`${a.join(`\n`)}`, `var value = ${n.getByIndices(\"input_indices\")};`, `value = min(value, ${n.getByIndices(\"input_indices\")});`, \"\"];\n          });\n        }, Dm = (e, t) => {\n          tt(e.inputs), rt(e, \"ReduceProd\", t, (n, o) => [`var value = ${o.type.storage}(1);`, \"\", `value *= ${n.getByIndices(\"input_indices\")};`, \"\"]);\n        }, Mm = (e, t) => {\n          tt(e.inputs), rt(e, \"ReduceSum\", t, (n, o) => [`var value = ${o.type.storage}(0);`, \"\", `value += ${n.getByIndices(\"input_indices\")};`, \"\"]);\n        }, Rm = (e, t) => {\n          tt(e.inputs), rt(e, \"ReduceSumSquare\", t, (n, o) => [`var t = ${o.type.value}(0); var value = ${o.type.value}(0);`, \"\", `t = ${n.getByIndices(\"input_indices\")}; value += t * t;`, \"\"]);\n        }, nt = (e, t, r) => {\n          if (t.length === 0) return r;\n          let n = 1, o = 1;\n          for (let i = 0; i < t.length; i++) t.indexOf(i) === -1 ? n *= e[i] : o *= e[i];\n          return o < 32 && n > 1024;\n        }, gs = (e, t) => {\n          nt(e.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Om(e, t) : is(e, t);\n        }, bs = (e, t) => {\n          nt(e.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Em(e, t) : as(e, t);\n        }, ys = (e, t) => {\n          nt(e.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? km(e, t) : ss(e, t);\n        }, _s = (e, t) => {\n          nt(e.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Pm(e, t) : us(e, t);\n        }, ws = (e, t) => {\n          nt(e.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? zm(e, t) : ds(e, t);\n        }, vs = (e, t) => {\n          nt(e.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Bm(e, t) : ls(e, t);\n        }, $s = (e, t) => {\n          nt(e.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Dm(e, t) : cs(e, t);\n        }, xs = (e, t) => {\n          nt(e.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Mm(e, t) : ps(e, t);\n        }, Ss = (e, t) => {\n          nt(e.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Rm(e, t) : ms(e, t);\n        }, Ts = (e, t) => {\n          nt(e.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Am(e, t) : fs(e, t);\n        };\n      });\n      Es = U(() => {\n        \"use strict\";\n        ee();\n        Se();\n        Gr();\n        Is = (e) => {\n          if (!e || e.length === 0 || e.length > 2) throw new Error(\"ArgMinMaxOp op requires 1 or 2 inputs.\");\n          if (e[0].dataType !== 1) throw new Error(\"Invalid input type.\");\n        }, Cs = (e, t) => {\n          Is(e.inputs);\n          let r = (n, o, i) => {\n            let a = [];\n            for (let u = 0; u < n.rank; u++) (i.indexOf(u) >= 0 || i.length === 0) && a.push(`input_indices[${u}] = 0;`);\n            return [`${a.join(`\n`)}`, `var value = ${n.getByIndices(\"input_indices\")};\nvar best_index : i32 = 0;`, `if (${n.getByIndices(\"input_indices\")} ${t.selectLastIndex > 0 ? \"<=\" : \"<\"} value) {\n         value = ${n.getByIndices(\"input_indices\")};\n         best_index = i32(last_index);\n       }`, \"\", o.setByOffset(\"global_idx\", \"best_index\")];\n          };\n          e.compute(Hr(\"ArgMin\", { hint: t.cacheKey, inputDependencies: [\"rank\"] }, [e.inputs[0]], r, [t.axis], 7, t.keepDims), { inputs: [0] });\n        }, As = (e, t) => {\n          Is(e.inputs);\n          let r = (n, o, i) => {\n            let a = [];\n            for (let u = 0; u < n.rank; u++) (i.indexOf(u) >= 0 || i.length === 0) && a.push(`input_indices[${u}] = 0;`);\n            return [`${a.join(`\n`)}`, `var value = ${n.getByIndices(\"input_indices\")};\nvar best_index : i32 = 0;`, `if (${n.getByIndices(\"input_indices\")} ${t.selectLastIndex > 0 ? \">=\" : \">\"} value) {\n         value = ${n.getByIndices(\"input_indices\")};\n         best_index = i32(last_index);\n       }`, \"\", o.setByOffset(\"global_idx\", \"best_index\")];\n          };\n          e.compute(Hr(\"argMax\", { hint: t.cacheKey, inputDependencies: [\"rank\"] }, [e.inputs[0]], r, [t.axis], 7, t.keepDims), { inputs: [0] });\n        }, uo = (e) => J(e);\n      });\n      Fr = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Vr();\n        ie();\n        Um = (e, t) => {\n          let r = e[0], n = e[1], o = e[2], i = e[3], a = e[4], u = e[5];\n          if (a && u) throw new Error(\"Attention cannot have both past and attention_bias\");\n          if (r.dims.length !== 3) throw new Error('Input \"input\" must have 3 dimensions');\n          let d = r.dims[0], c = r.dims[1], p = r.dims[2];\n          if (o.dims.length !== 1) throw new Error('Input \"bias\" is expected to have 1 dimensions');\n          if (n.dims.length !== 2) throw new Error('Input \"weights\" is expected to have 2 dimensions');\n          if (n.dims[0] !== p) throw new Error(\"Input 1 dimension 0 should have same length as dimension 2 of input 0\");\n          if (o.dims[0] !== n.dims[1]) throw new Error('Input \"bias\" dimension 0 should have same length as dimension 1 of input \"weights\"');\n          let m = o.dims[0] / 3, f = m, b = f;\n          if (t.qkvHiddenSizes.length > 0) {\n            if (t.qkvHiddenSizes.length !== 3) throw new Error(\"qkv_hidden_sizes attribute should have 3 elements\");\n            for (let x of t.qkvHiddenSizes) if (x % t.numHeads !== 0) throw new Error(\"qkv_hidden_sizes should be divisible by num_heads\");\n            m = t.qkvHiddenSizes[0], f = t.qkvHiddenSizes[1], b = t.qkvHiddenSizes[2];\n          }\n          let g = c;\n          if (m !== f) throw new Error(\"qkv_hidden_sizes first element should be same as the second\");\n          if (o.dims[0] !== m + f + b) throw new Error('Input \"bias\" dimension 0 should have same length as sum of Q/K/V hidden sizes');\n          let _ = 0;\n          if (a) {\n            if (f !== b) throw new Error('Input \"past\" expect k_hidden_size == v_hidden_size');\n            if (a.dims.length !== 5) throw new Error('Input \"past\" must have 5 dimensions');\n            if (a.dims[0] !== 2) throw new Error('Input \"past\" first dimension must be 2');\n            if (a.dims[1] !== d) throw new Error('Input \"past\" second dimension must be batch_size');\n            if (a.dims[2] !== t.numHeads) throw new Error('Input \"past\" third dimension must be num_heads');\n            if (a.dims[4] !== f / t.numHeads) throw new Error('Input \"past\" fifth dimension must be k_hidden_size / num_heads');\n            t.pastPresentShareBuffer || (_ = a.dims[3]);\n          }\n          let S = g + _, $ = -1, v = 0;\n          if (i) throw new Error(\"Mask not supported\");\n          if (a) throw new Error(\"past is not supported\");\n          if (u) {\n            if (u.dims.length !== 4) throw new Error('Input \"attention_bias\" must have 4 dimensions');\n            if (u.dims[0] !== d || u.dims[1] !== t.numHeads || u.dims[2] !== c || u.dims[3] !== S) throw new Error('Expect \"attention_bias\" shape (batch_size, num_heads, sequence_length, total_sequence_length)');\n          }\n          return { batchSize: d, sequenceLength: c, pastSequenceLength: _, kvSequenceLength: g, totalSequenceLength: S, maxSequenceLength: $, inputHiddenSize: p, hiddenSize: m, vHiddenSize: b, headSize: Math.floor(m / t.numHeads), vHeadSize: Math.floor(b / t.numHeads), numHeads: t.numHeads, isUnidirectional: false, pastPresentShareBuffer: false, maskFilterValue: t.maskFilterValue, maskType: v, scale: t.scale, broadcastResPosBias: false, passPastInKv: false, qkvFormat: 1 };\n        }, lo = (e, t, r) => t && e ? `\n      let total_sequence_length_input = u32(${t.getByOffset(\"0\")});\n      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);\n      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;\n      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;\n      total_sequence_length = u32(${e?.getByOffset(\"batchIdx\")}) + 1;\n      var past_sequence_length: u32 = 0;\n      if (is_first_prompt == false) {\n        past_sequence_length = total_sequence_length - sequence_length;\n      }\n       ` : `\n    ${r ? \"let past_sequence_length = uniforms.past_sequence_length\" : \"\"};\n    let present_sequence_length = total_sequence_length;\n    `, Nm = (e, t, r, n, o, i, a, u) => {\n          let d = ce(a ? 1 : i), c = 64, p = i / d;\n          p < c && (c = 32);\n          let m = Math.ceil(i / d / c), f = [{ type: 12, data: t }, { type: 12, data: r }, { type: 12, data: n }, { type: 12, data: o }, { type: 12, data: p }, { type: 12, data: m }], b = be(e.dataType, d), g = Ae(1, d), _ = [\"type\"];\n          a && _.push(\"type\"), u && _.push(\"type\");\n          let S = ($) => {\n            let v = M(\"x\", e.dataType, e.dims, d), x = [v], T = a ? P(\"seq_lens\", a.dataType, a.dims) : void 0;\n            T && x.push(T);\n            let E = u ? P(\"total_sequence_length_input\", u.dataType, u.dims) : void 0;\n            E && x.push(E);\n            let I = Ae(e.dataType), z = [{ name: \"batch_size\", type: \"u32\" }, { name: \"num_heads\", type: \"u32\" }, { name: \"past_sequence_length\", type: \"u32\" }, { name: \"sequence_length\", type: \"u32\" }, { name: \"total_sequence_length\", type: \"u32\" }, { name: \"elements_per_thread\", type: \"u32\" }];\n            return `\n  var<workgroup> thread_max: array<f32, ${c}>;\n  var<workgroup> thread_sum: array<f32, ${c}>;\n  ${$.registerUniforms(z).declareVariables(...x)}\n  ${$.mainStart([c, 1, 1])}\n    let batchIdx = workgroup_id.z / uniforms.num_heads;\n    let headIdx = workgroup_id.z % uniforms.num_heads;\n    let sequence_length = uniforms.sequence_length;\n    var total_sequence_length = uniforms.total_sequence_length;\n    ${lo(T, E, false)}\n    let local_offset = local_idx * uniforms.elements_per_thread;\n    let offset = (global_idx / ${c}) * uniforms.total_sequence_length + local_offset;\n    let seq_causal_length = ${a ? \"u32(past_sequence_length + workgroup_id.y + 1)\" : \"total_sequence_length\"};\n    var thread_max_vector = ${g}(-3.402823e+38f);\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\n      thread_max_vector = max(${g}(x[offset + i]), thread_max_vector);\n    }\n    thread_max[local_idx] = ${(() => {\n              switch (d) {\n                case 1:\n                  return \"thread_max_vector\";\n                case 2:\n                  return \"max(thread_max_vector.x, thread_max_vector.y)\";\n                case 4:\n                  return \"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))\";\n                default:\n                  throw new Error(`Unsupported components: ${d}`);\n              }\n            })()};\n    workgroupBarrier();\n\n    var max_value =  f32(-3.402823e+38f);\n    for (var i = 0u; i < ${c}; i++) {\n      max_value = max(thread_max[i], max_value);\n    }\n\n    var sum_vector = ${g}(0);\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\n      sum_vector += exp(${g}(x[offset + i]) - max_value);\n    }\n    thread_sum[local_idx] = ${(() => {\n              switch (d) {\n                case 1:\n                  return \"sum_vector\";\n                case 2:\n                  return \"sum_vector.x + sum_vector.y\";\n                case 4:\n                  return \"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w\";\n                default:\n                  throw new Error(`Unsupported components: ${d}`);\n              }\n            })()};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${c}; i++) {\n      sum += thread_sum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\n        x[offset + i] = ${v.type.value}(${I}(1.0) / ${I}(seq_causal_length));\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\n        var f32input = ${g}(x[offset + i]);\n        x[offset + i] = ${v.type.value}(exp(f32input - max_value) / sum);\n      }\n    }\n      ${a ? `\n        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {\n          x[offset + total_seq_id] = ${v.type.value}(${I}(0));\n        }` : \"\"};\n  }`;\n          };\n          return { name: \"AttentionProbsSoftmax\", shaderCache: { hint: `${c};${b};${d}`, inputDependencies: _ }, getShaderSource: S, getRunData: () => ({ outputs: [], dispatchGroup: { x: 1, y: o, z: t * r }, programUniforms: f }) };\n        }, Vm = (e, t, r, n, o, i, a, u, d) => {\n          let c = a + i.kvSequenceLength, p = [i.batchSize, i.numHeads, i.sequenceLength, c], m = e > 1 && n, f = i.kvNumHeads ? i.kvNumHeads : i.numHeads, b = m ? [i.batchSize, f, c, i.headSize] : void 0, g = i.nReps ? i.nReps : 1, _ = i.scale === 0 ? 1 / Math.sqrt(i.headSize) : i.scale, S = ce(i.headSize), $ = i.headSize / S, v = 12, x = { x: Math.ceil(c / v), y: Math.ceil(i.sequenceLength / v), z: i.batchSize * i.numHeads }, T = [{ type: 12, data: i.sequenceLength }, { type: 12, data: $ }, { type: 12, data: c }, { type: 12, data: i.numHeads }, { type: 12, data: i.headSize }, { type: 1, data: _ }, { type: 12, data: a }, { type: 12, data: i.kvSequenceLength }, { type: 12, data: g }], E = m && n && k.size(n.dims) > 0, I = [\"type\", \"type\"];\n          E && I.push(\"type\"), o && I.push(\"type\"), u && I.push(\"type\"), d && I.push(\"type\");\n          let z = [{ dims: p, dataType: t.dataType, gpuDataType: 0 }];\n          m && z.push({ dims: b, dataType: t.dataType, gpuDataType: 0 });\n          let O = (D) => {\n            let L = P(\"q\", t.dataType, t.dims, S), q = P(\"key\", r.dataType, r.dims, S), Q = [L, q];\n            if (E) {\n              let X = P(\"past_key\", n.dataType, n.dims, S);\n              Q.push(X);\n            }\n            o && Q.push(P(\"attention_bias\", o.dataType, o.dims));\n            let W = u ? P(\"seq_lens\", u.dataType, u.dims) : void 0;\n            W && Q.push(W);\n            let Z = d ? P(\"total_sequence_length_input\", d.dataType, d.dims) : void 0;\n            Z && Q.push(Z);\n            let we = M(\"output\", t.dataType, p), H = [we];\n            m && H.push(M(\"present_key\", t.dataType, b, S));\n            let j = Ae(1, S), te = [{ name: \"M\", type: \"u32\" }, { name: \"K\", type: \"u32\" }, { name: \"N\", type: \"u32\" }, { name: \"num_heads\", type: \"u32\" }, { name: \"head_size\", type: \"u32\" }, { name: \"alpha\", type: \"f32\" }, { name: \"past_sequence_length\", type: \"u32\" }, { name: \"kv_sequence_length\", type: \"u32\" }, { name: \"n_reps\", type: \"u32\" }];\n            return `\n  const TILE_SIZE = ${v}u;\n\n  var<workgroup> tileQ: array<${L.type.storage}, ${v * v}>;\n  var<workgroup> tileK: array<${L.type.storage}, ${v * v}>;\n  ${D.registerUniforms(te).declareVariables(...Q, ...H)}\n  ${D.mainStart([v, v, 1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z % uniforms.num_heads;\n    let kvHeadIdx = ${g === 1 ? \"headIdx\" : \"headIdx / uniforms.n_reps\"};\n    let kv_num_heads = ${g === 1 ? \"uniforms.num_heads\" : \"uniforms.num_heads / uniforms.n_reps\"};\n    let batchIdx = workgroup_id.z / uniforms.num_heads;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let sequence_length = uniforms.M;\n    var total_sequence_length = uniforms.N;\n    ${lo(W, Z, true)}\n    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;\n    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;\n    ${E && m ? \"let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;\" : \"\"};\n    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;\n    ${m ? \"let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;\" : \"\"}\n    var value = ${j}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        var idx = TILE_SIZE * local_id.y + local_id.x;\n      ${E && m ? `\n              if (n + local_id.y < past_sequence_length) {\n                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];\n              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {\n                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];\n              }` : `\n          if (n + local_id.y < uniforms.kv_sequence_length) {\n            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];\n          }`}\n      ${m ? `if (n + local_id.y < present_sequence_length) {\n        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];\n      }` : \"\"}\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {\n          value += ${j}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);\n      }\n\n      workgroupBarrier();\n    }\n\n    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {\n      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;\n      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;\n      var sum: f32 = ${(() => {\n              switch (S) {\n                case 1:\n                  return \"value\";\n                case 2:\n                  return \"value.x + value.y\";\n                case 4:\n                  return \"value.x + value.y + value.z + value.w\";\n                default:\n                  throw new Error(`Unsupported components: ${S}`);\n              }\n            })()};\n        output[outputIdx] = ${we.type.value} (sum * uniforms.alpha) + ${o ? \"attention_bias[outputIdx]\" : \"0.0\"};\n    }\n  }`;\n          };\n          return { name: \"AttentionProbs\", shaderCache: { hint: `${S};${o !== void 0};${n !== void 0};${e}`, inputDependencies: I }, getRunData: () => ({ outputs: z, dispatchGroup: x, programUniforms: T }), getShaderSource: O };\n        }, Wm = (e, t, r, n, o, i, a = void 0, u = void 0) => {\n          let d = i + o.kvSequenceLength, c = o.nReps ? o.nReps : 1, p = o.vHiddenSize * c, m = e > 1 && n, f = o.kvNumHeads ? o.kvNumHeads : o.numHeads, b = m ? [o.batchSize, f, d, o.headSize] : void 0, g = [o.batchSize, o.sequenceLength, p], _ = 12, S = { x: Math.ceil(o.vHeadSize / _), y: Math.ceil(o.sequenceLength / _), z: o.batchSize * o.numHeads }, $ = [{ type: 12, data: o.sequenceLength }, { type: 12, data: d }, { type: 12, data: o.vHeadSize }, { type: 12, data: o.numHeads }, { type: 12, data: o.headSize }, { type: 12, data: p }, { type: 12, data: i }, { type: 12, data: o.kvSequenceLength }, { type: 12, data: c }], v = m && n && k.size(n.dims) > 0, x = [\"type\", \"type\"];\n          v && x.push(\"type\"), a && x.push(\"type\"), u && x.push(\"type\");\n          let T = [{ dims: g, dataType: t.dataType, gpuDataType: 0 }];\n          m && T.push({ dims: b, dataType: t.dataType, gpuDataType: 0 });\n          let E = (I) => {\n            let z = P(\"probs\", t.dataType, t.dims), O = P(\"v\", r.dataType, r.dims), D = [z, O];\n            v && D.push(P(\"past_value\", n.dataType, n.dims));\n            let L = a ? P(\"seq_lens\", a.dataType, a.dims) : void 0;\n            a && D.push(L);\n            let q = u ? P(\"total_sequence_length_input\", u.dataType, u.dims) : void 0;\n            u && D.push(q);\n            let W = [M(\"output\", t.dataType, g)];\n            m && W.push(M(\"present_value\", t.dataType, b));\n            let Z = [{ name: \"M\", type: \"u32\" }, { name: \"K\", type: \"u32\" }, { name: \"N\", type: \"u32\" }, { name: \"num_heads\", type: \"u32\" }, { name: \"head_size\", type: \"u32\" }, { name: \"v_hidden_size\", type: \"u32\" }, { name: \"past_sequence_length\", type: \"u32\" }, { name: \"kv_sequence_length\", type: \"u32\" }, { name: \"n_reps\", type: \"u32\" }];\n            return `\n  const TILE_SIZE = ${_}u;\n  var<workgroup> tileQ: array<${z.type.value}, ${_ * _}>;\n  var<workgroup> tileV: array<${z.type.value}, ${_ * _}>;\n  ${I.registerUniforms(Z).declareVariables(...D, ...W)}\n  ${I.mainStart([_, _, 1])}\n   let headIdx = workgroup_id.z % uniforms.num_heads;\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let kvHeadIdx = ${c === 1 ? \"headIdx\" : \"headIdx / uniforms.n_reps\"};\n   let kv_num_heads = ${c === 1 ? \"uniforms.num_heads\" : \"uniforms.num_heads / uniforms.n_reps\"};\n   let m = global_id.y;\n   let n = global_id.x;\n   let sequence_length = uniforms.M;\n   var total_sequence_length = uniforms.K;\n   ${lo(L, q, true)}\n   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;\n   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch\n   ${v && m ? \"let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;\" : \"\"};\n   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;\n   ${m ? \"let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;\" : \"\"}\n   var value = ${z.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        var idx = TILE_SIZE * local_id.y + local_id.x;\n        ${v && m ? `\n        if (w + local_id.y < past_sequence_length) {\n          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];\n        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {\n          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];\n        }\n      ` : `\n            if (w + local_id.y < uniforms.kv_sequence_length) {\n              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];\n            }`}\n        ${m ? `\n            if (w + local_id.y < present_sequence_length) {\n          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];\n        }` : \"\"}\n      }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + headIdx * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`;\n          };\n          return { name: \"AttentionScore\", shaderCache: { hint: `${n !== void 0};${e}`, inputDependencies: x }, getRunData: () => ({ outputs: T, dispatchGroup: S, programUniforms: $ }), getShaderSource: E };\n        }, Rt = (e, t, r, n, o, i, a, u, d, c, p = void 0, m = void 0) => {\n          let f = Math.min(e.outputCount, 1 + (a ? 1 : 0) + (u ? 1 : 0)), b = f > 1 ? c.pastSequenceLength : 0, g = b + c.kvSequenceLength, _ = d && k.size(d.dims) > 0 ? d : void 0, S = [t, r];\n          f > 1 && a && k.size(a.dims) > 0 && S.push(a), _ && S.push(_), p && S.push(p), m && S.push(m);\n          let $ = e.compute(Vm(f, t, r, a, _, c, b, p, m), { inputs: S, outputs: f > 1 ? [-1, 1] : [-1] })[0];\n          e.compute(Nm($, c.batchSize, c.numHeads, b, c.sequenceLength, g, p, m), { inputs: p && m ? [$, p, m] : [$], outputs: [] });\n          let v = [$, n];\n          f > 1 && u && k.size(u.dims) > 0 && v.push(u), p && v.push(p), m && v.push(m), e.compute(Wm(f, $, n, u, c, b, p, m), { inputs: v, outputs: f > 1 ? [0, 2] : [0] });\n        }, Lm = (e, t) => {\n          let r = [t.batchSize, t.numHeads, t.sequenceLength, t.headSize], n = t.sequenceLength, o = t.inputHiddenSize, i = t.headSize, a = 12, u = { x: Math.ceil(t.headSize / a), y: Math.ceil(t.sequenceLength / a), z: t.batchSize * t.numHeads }, d = [e.inputs[0], e.inputs[1], e.inputs[2]], c = [{ type: 12, data: n }, { type: 12, data: o }, { type: 12, data: i }, { type: 12, data: t.numHeads }, { type: 12, data: t.headSize }, { type: 12, data: t.hiddenSize }, { type: 12, data: t.hiddenSize + t.hiddenSize + t.vHiddenSize }], p = (m) => {\n            let f = M(\"output_q\", d[0].dataType, r), b = M(\"output_k\", d[0].dataType, r), g = M(\"output_v\", d[0].dataType, r), _ = P(\"input\", d[0].dataType, d[0].dims), S = P(\"weight\", d[1].dataType, d[1].dims), $ = P(\"bias\", d[2].dataType, d[2].dims), v = _.type.storage, x = [{ name: \"M\", type: \"u32\" }, { name: \"K\", type: \"u32\" }, { name: \"N\", type: \"u32\" }, { name: \"num_heads\", type: \"u32\" }, { name: \"head_size\", type: \"u32\" }, { name: \"hidden_size\", type: \"u32\" }, { name: \"ldb\", type: \"u32\" }];\n            return `\n  const TILE_SIZE = ${a}u;\n  var<workgroup> tileInput: array<${v}, ${a * a}>;\n  var<workgroup> tileWeightQ: array<${v}, ${a * a}>;\n  var<workgroup> tileWeightK: array<${v}, ${a * a}>;\n  var<workgroup> tileWeightV: array<${v}, ${a * a}>;\n  ${m.registerUniforms(x).declareVariables(_, S, $, f, b, g)}\n  ${m.mainStart([a, a, 1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = global_id.y;\n    let n = global_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${v}(0);\n    var valueK = ${v}(0);\n    var valueV = ${v}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`;\n          };\n          return e.compute({ name: \"AttentionPrepare\", shaderCache: { inputDependencies: [\"type\", \"type\", \"type\"] }, getRunData: () => ({ outputs: [{ dims: r, dataType: e.inputs[0].dataType, gpuDataType: 0 }, { dims: r, dataType: e.inputs[0].dataType, gpuDataType: 0 }, { dims: r, dataType: e.inputs[0].dataType, gpuDataType: 0 }], dispatchGroup: u, programUniforms: c }), getShaderSource: p }, { inputs: d, outputs: [-1, -1, -1] });\n        }, ks = (e, t) => {\n          let r = Um(e.inputs, t), [n, o, i] = Lm(e, r);\n          return Rt(e, n, o, i, e.inputs[4], void 0, void 0, void 0, e.inputs[5], r);\n        };\n      });\n      zs = U(() => {\n        \"use strict\";\n        We();\n        ee();\n        ne();\n        Se();\n        ie();\n        Gm = (e, t) => {\n          if (!e || e.length !== 5) throw new Error(\"BatchNormalization requires 5 inputs\");\n          let r = (n, o, i) => {\n            let a = o.length;\n            if (a !== n.length) throw new Error(`${i}: num dimensions != ${a}`);\n            o.forEach((u, d) => {\n              if (u !== n[d]) throw new Error(`${i}: dim[${d}] do not match`);\n            });\n          };\n          if (e[0].dims.length > 1) {\n            let n = t.format === \"NHWC\" ? t.spatial ? e[0].dims.slice(-1) : e[0].dims.slice(-1).concat(e[0].dims.slice(1, e[0].dims.length - 1)) : e[0].dims.slice(1, t.spatial ? 2 : void 0);\n            r(e[1].dims, n, \"Invalid input scale\"), r(e[2].dims, n, \"Invalid input B\"), r(e[3].dims, n, \"Invalid input mean\"), r(e[4].dims, n, \"Invalid input var\");\n          } else r(e[1].dims, [1], \"Invalid input scale\"), r(e[2].dims, [1], \"Invalid input B\"), r(e[3].dims, [1], \"Invalid input mean\"), r(e[4].dims, [1], \"Invalid input var\");\n        }, Hm = (e, t) => {\n          let { epsilon: r, spatial: n, format: o } = t, i = e[0].dims, a = n ? ce(i[i.length - 1]) : 1, u = o === \"NHWC\" && i.length > 1 ? a : 1, d = k.size(i) / a, c = n, p = c ? i.length : i, m = P(\"x\", e[0].dataType, e[0].dims, a), f = P(\"scale\", e[1].dataType, e[1].dims, u), b = P(\"bias\", e[2].dataType, e[2].dims, u), g = P(\"inputMean\", e[3].dataType, e[3].dims, u), _ = P(\"inputVar\", e[4].dataType, e[4].dims, u), S = M(\"y\", e[0].dataType, p, a), $ = () => {\n            let x = \"\";\n            if (n) x = `let cOffset = ${i.length === 1 ? \"0u\" : o === \"NHWC\" ? `outputIndices[${i.length - 1}] / ${a}` : \"outputIndices[1]\"};`;\n            else if (o === \"NCHW\") x = `\n            ${S.indicesSet(\"outputIndices\", \"0\", \"0\")}\n            let cOffset = ${S.indicesToOffset(\"outputIndices\")};`;\n            else {\n              x = `var cIndices = ${f.type.indices}(0);\n                       cIndices[0] = outputIndices[${i.length - 1}];`;\n              for (let T = 1; T < f.rank; T++) x += `cIndices[${T}] = outputIndices[${T}];`;\n              x += `let cOffset = ${f.indicesToOffset(\"cIndices\")};`;\n            }\n            return x;\n          }, v = (x) => `\n  const epsilon = ${r};\n  ${x.registerUniform(\"outputSize\", \"u32\").declareVariables(m, f, b, g, _, S)}\n  ${x.mainStart()}\n  ${x.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n    var outputIndices = ${S.offsetToIndices(`global_idx * ${a}`)};\n    ${$()}\n    let scale = ${f.getByOffset(\"cOffset\")};\n    let bias = ${b.getByOffset(\"cOffset\")};\n    let inputMean = ${g.getByOffset(\"cOffset\")};\n    let inputVar = ${_.getByOffset(\"cOffset\")};\n    let x = ${m.getByOffset(\"global_idx\")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${S.setByOffset(\"global_idx\", \"value\")}\n  }`;\n          return { name: \"BatchNormalization\", shaderCache: { hint: `${t.epsilon}_${t.format}_${n}_${a}`, inputDependencies: c ? [\"rank\", \"type\", \"type\", \"type\", \"type\"] : void 0 }, getShaderSource: v, getRunData: () => ({ outputs: [{ dims: e[0].dims, dataType: e[0].dataType }], dispatchGroup: { x: Math.ceil(d / 64) }, programUniforms: c ? [{ type: 12, data: d }, ...N(i)] : [{ type: 12, data: d }] }) };\n        }, Fm = (e) => J(e), Ps = (e, t) => {\n          let { inputs: r, outputCount: n } = e, o = Fm({ ...t, outputCount: n });\n          if (ge.webgpu.validateInputContent && Gm(r, o), t.trainingMode) throw new Error(\"BatchNormalization trainingMode is not supported yet.\");\n          e.compute(Hm(r, o));\n        };\n      });\n      Bs = U(() => {\n        \"use strict\";\n        ne();\n        ie();\n        qm = (e) => {\n          if (e[0].dims.length !== 3) throw new Error(\"input should have 3 dimensions\");\n          if (![320, 640, 1280].includes(e[0].dims[2])) throw new Error(\"number of channels should be 320, 640 or 1280\");\n          if (e[1].dims.length !== 1) throw new Error(\"bias is expected to have 1 dimensions\");\n          if (e[0].dims[2] !== e[1].dims[0]) throw new Error(\"last dimension of input and bias are not the same\");\n        }, jm = (e) => {\n          let t = e[0].dims, r = e[0].dims[2], n = k.size(t) / 4, o = e[0].dataType, i = P(\"input\", o, t, 4), a = P(\"bias\", o, [r], 4), u = P(\"residual\", o, t, 4), d = M(\"output\", o, t, 4);\n          return { name: \"BiasAdd\", getRunData: () => ({ outputs: [{ dims: t, dataType: e[0].dataType }], dispatchGroup: { x: Math.ceil(n / 64) } }), getShaderSource: (p) => `\n  const channels = ${r}u / 4;\n  ${p.declareVariables(i, a, u, d)}\n\n  ${p.mainStart()}\n    ${p.guardAgainstOutOfBoundsWorkgroupSizes(n)}\n    let value = ${i.getByOffset(\"global_idx\")}\n      + ${a.getByOffset(\"global_idx % channels\")} + ${u.getByOffset(\"global_idx\")};\n    ${d.setByOffset(\"global_idx\", \"value\")}\n  }` };\n        }, Os = (e) => {\n          qm(e.inputs), e.compute(jm(e.inputs));\n        };\n      });\n      jr = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        Km = (e, t, r, n, o, i, a) => {\n          let u = Math.ceil(t / 4), d = \"\";\n          typeof o == \"string\" ? d = `${o}(a)` : d = o(\"a\");\n          let c = P(\"inputData\", r, [u], 4), p = M(\"outputData\", n, [u], 4), m = [{ name: \"vec_size\", type: \"u32\" }];\n          return a && m.push(...a), `\n      ${e.registerUniforms(m).declareVariables(c, p)}\n\n  ${i ?? \"\"}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.vec_size\")}\n\n    let a = ${c.getByOffset(\"global_idx\")};\n    ${p.setByOffset(\"global_idx\", d)}\n  }`;\n        }, me = (e, t, r, n, o, i = e.dataType, a, u) => {\n          let d = [{ type: 12, data: Math.ceil(k.size(e.dims) / 4) }];\n          return a && d.push(...a), { name: t, shaderCache: { hint: o, inputDependencies: [\"type\"] }, getShaderSource: (c) => Km(c, k.size(e.dims), e.dataType, i, r, n, u), getRunData: (c) => ({ outputs: [{ dims: e.dims, dataType: i }], dispatchGroup: { x: Math.ceil(k.size(c[0].dims) / 64 / 4) }, programUniforms: d }) };\n        }, Ds = (e) => {\n          e.compute(me(e.inputs[0], \"Abs\", \"abs\"));\n        }, Ms = (e) => {\n          e.compute(me(e.inputs[0], \"Acos\", \"acos\"));\n        }, Rs = (e) => {\n          e.compute(me(e.inputs[0], \"Acosh\", \"acosh\"));\n        }, Us = (e) => {\n          e.compute(me(e.inputs[0], \"Asin\", \"asin\"));\n        }, Ns = (e) => {\n          e.compute(me(e.inputs[0], \"Asinh\", \"asinh\"));\n        }, Vs = (e) => {\n          e.compute(me(e.inputs[0], \"Atan\", \"atan\"));\n        }, Ws = (e) => {\n          e.compute(me(e.inputs[0], \"Atanh\", \"atanh\"));\n        }, Ls = (e) => J(e), Gs = (e, t) => {\n          let r;\n          switch (t.to) {\n            case 10:\n              r = \"vec4<f16>\";\n              break;\n            case 1:\n              r = \"vec4<f32>\";\n              break;\n            case 12:\n              r = \"vec4<u32>\";\n              break;\n            case 6:\n              r = \"vec4<i32>\";\n              break;\n            case 9:\n              r = \"vec4<bool>\";\n              break;\n            default:\n              throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`);\n          }\n          e.compute(me(e.inputs[0], \"Cast\", r, void 0, t.cacheKey, t.to));\n        }, Zm = (e) => {\n          let t, r, n = e.length >= 2 && e[1].data !== 0, o = e.length >= 3 && e[2].data !== 0;\n          switch (e[0].dataType) {\n            case 1:\n              t = n ? e[1].getFloat32Array()[0] : -34028234663852886e22, r = o ? e[2].getFloat32Array()[0] : 34028234663852886e22;\n              break;\n            case 10:\n              t = n ? e[1].getUint16Array()[0] : 64511, r = o ? e[2].getUint16Array()[0] : 31743;\n              break;\n            default:\n              throw new Error(\"Unsupport data type\");\n          }\n          return J({ min: t, max: r });\n        }, Hs = (e, t) => {\n          let r = t || Zm(e.inputs), n = Ae(e.inputs[0].dataType);\n          e.compute(me(e.inputs[0], \"Clip\", (o) => `clamp(${o}, vec4<${n}>(uniforms.min), vec4<${n}>(uniforms.max))`, void 0, r.cacheKey, void 0, [{ type: e.inputs[0].dataType, data: r.min }, { type: e.inputs[0].dataType, data: r.max }], [{ name: \"min\", type: n }, { name: \"max\", type: n }]), { inputs: [0] });\n        }, Fs = (e) => {\n          e.compute(me(e.inputs[0], \"Ceil\", \"ceil\"));\n        }, qs = (e) => {\n          e.compute(me(e.inputs[0], \"Cos\", \"cos\"));\n        }, js = (e) => {\n          e.compute(me(e.inputs[0], \"Cosh\", \"cosh\"));\n        }, Yt = (e) => J(e), Ks = (e, t) => {\n          let r = Ae(e.inputs[0].dataType);\n          e.compute(me(e.inputs[0], \"Elu\", (n) => `elu_vf32(${n})`, `\n  const elu_alpha_ = ${r}(${t.alpha});\n\n  fn elu_f32(a: ${r}) -> ${r} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`, t.cacheKey));\n        }, qr = (e = \"f32\") => `\nconst r0: ${e} = 0.3275911;\nconst r1: ${e} = 0.254829592;\nconst r2: ${e} = -0.284496736;\nconst r3: ${e} = 1.421413741;\nconst r4: ${e} = -1.453152027;\nconst r5: ${e} = 1.061405429;\n\nfn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`, Zs = (e) => {\n          let t = Ae(e.inputs[0].dataType);\n          e.compute(me(e.inputs[0], \"Erf\", (r) => `erf_vf32(${r})`, qr(t)));\n        }, Qs = (e) => {\n          e.compute(me(e.inputs[0], \"Exp\", \"exp\"));\n        }, Ys = (e) => {\n          e.compute(me(e.inputs[0], \"Floor\", \"floor\"));\n        }, Xs = (e) => {\n          let t = Ae(e.inputs[0].dataType);\n          e.compute(me(e.inputs[0], \"Gelu\", (r) => `0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`, qr(t)));\n        }, Js = (e, t) => {\n          let r = Ae(e.inputs[0].dataType);\n          e.compute(me(e.inputs[0], \"LeakyRelu\", (n) => `select(leaky_relu_alpha_ * ${n}, ${n}, ${n} >= vec4<${r}>(0.0))`, `const leaky_relu_alpha_ = ${r}(${t.alpha});`, t.cacheKey));\n        }, eu = (e) => {\n          e.compute(me(e.inputs[0], \"Not\", (t) => `!${t}`));\n        }, tu = (e) => {\n          e.compute(me(e.inputs[0], \"Neg\", (t) => `-${t}`));\n        }, ru = (e) => {\n          e.compute(me(e.inputs[0], \"Reciprocal\", (t) => `1.0/${t}`));\n        }, nu = (e) => {\n          let t = Ae(e.inputs[0].dataType);\n          e.compute(me(e.inputs[0], \"Relu\", (r) => `select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`));\n        }, ou = (e) => {\n          e.compute(me(e.inputs[0], \"Sigmoid\", (t) => `(1.0 / (1.0 + exp(-${t})))`));\n        }, iu = (e) => J(e), au = (e, t) => {\n          let r = Ae(e.inputs[0].dataType);\n          e.compute(me(e.inputs[0], \"HardSigmoid\", (n) => `max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${n} + vec4<${r}>(${t.beta})))`, void 0, t.cacheKey));\n        }, su = (e) => {\n          e.compute(me(e.inputs[0], \"Sin\", \"sin\"));\n        }, uu = (e) => {\n          e.compute(me(e.inputs[0], \"Sinh\", \"sinh\"));\n        }, du = (e) => {\n          e.compute(me(e.inputs[0], \"Sqrt\", \"sqrt\"));\n        }, lu = (e) => {\n          e.compute(me(e.inputs[0], \"Tan\", \"tan\"));\n        }, cu = (e) => `sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`, pu = (e) => {\n          e.compute(me(e.inputs[0], \"Tanh\", cu));\n        }, co = (e = \"f32\") => `\nconst fast_gelu_a: ${e} = 0.5;\nconst fast_gelu_b: ${e} = 0.7978845608028654;\nconst fast_gelu_c: ${e} = 0.035677408136300125;\n\nfn tanh_v(v: vec4<${e}>) -> vec4<${e}> {\n  return ${cu(\"v\")};\n}\n`, po = (e) => `(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`, mu = (e) => {\n          let t = Ae(e.inputs[0].dataType);\n          e.compute(me(e.inputs[0], \"FastGelu\", po, co(t), void 0, e.inputs[0].dataType));\n        }, fu = (e, t) => {\n          let r = Ae(e.inputs[0].dataType);\n          return e.compute(me(e.inputs[0], \"ThresholdedRelu\", (n) => `select(vec4<${r}>(0.0), ${n}, ${n} > thresholded_relu_alpha_)`, `const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`, t.cacheKey)), 0;\n        }, hu = (e) => {\n          e.compute(me(e.inputs[0], \"Log\", \"log\"));\n        }, Qm = (e, t) => `\nconst alpha = vec4<${e}>(${t});\nconst one = ${e}(1.0);\nconst zero = ${e}(0.0);\n\nfn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {\n  let v = x *alpha;\n  var x1 : vec4<${e}>;\n  for (var i = 0; i < 4; i = i + 1) {\n    if (v[i] >= zero) {\n      x1[i] = one / (one + exp(-v[i]));\n    } else {\n      x1[i] = one - one / (one + exp(v[i]));\n    }\n  }\n  return x * x1;\n}\n`, Ym = (e) => `quick_gelu_impl(${e})`, gu = (e, t) => {\n          let r = Ae(e.inputs[0].dataType);\n          e.compute(me(e.inputs[0], \"QuickGelu\", Ym, Qm(r, t.alpha), t.cacheKey, e.inputs[0].dataType));\n        };\n      });\n      _u = U(() => {\n        \"use strict\";\n        ne();\n        ie();\n        jr();\n        Xm = (e) => {\n          if (e[0].dims.length !== 3) throw new Error(\"input should have 3 dimensions\");\n          if (![2560, 5120, 10240].includes(e[0].dims[2])) throw new Error(\"hidden state should be 2560, 5120 or 10240\");\n          if (e[1].dims.length !== 1) throw new Error(\"bias is expected to have 1 dimensions\");\n          if (e[0].dims[2] !== e[1].dims[0]) throw new Error(\"last dimension of input and bias are not the same\");\n        }, Jm = (e) => {\n          let t = e[0].dims.slice();\n          t[2] = t[2] / 2;\n          let r = P(\"input\", e[0].dataType, e[0].dims, 4), n = P(\"bias\", e[0].dataType, [e[0].dims[2]], 4), o = M(\"output\", e[0].dataType, t, 4), i = k.size(t) / 4, a = be(e[0].dataType);\n          return { name: \"BiasSplitGelu\", getRunData: () => ({ outputs: [{ dims: t, dataType: e[0].dataType }], dispatchGroup: { x: Math.ceil(i / 64) } }), getShaderSource: (d) => `\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2] / 4 / 2}u;\n\n  ${d.declareVariables(r, n, o)}\n\n  ${qr(a)}\n\n  ${d.mainStart()}\n    ${d.guardAgainstOutOfBoundsWorkgroupSizes(i)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${o.setByOffset(\"global_idx\", \"valueLeft * geluRight\")}\n  }` };\n        }, yu = (e) => {\n          Xm(e.inputs), e.compute(Jm(e.inputs));\n        };\n      });\n      ku = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        ie();\n        ef = (e, t, r, n, o, i, a, u, d, c, p, m) => {\n          let f, b;\n          typeof u == \"string\" ? f = b = (v, x) => `${u}((${v}),(${x}))` : typeof u == \"function\" ? f = b = u : (f = u.scalar, b = u.vector);\n          let g = M(\"outputData\", p, n.length, 4), _ = P(\"aData\", d, t.length, 4), S = P(\"bData\", c, r.length, 4), $;\n          if (o) if (i) {\n            let v = k.size(t) === 1, x = k.size(r) === 1, T = t.length > 0 && t[t.length - 1] % 4 === 0, E = r.length > 0 && r[r.length - 1] % 4 === 0;\n            v || x ? $ = g.setByOffset(\"global_idx\", b(v ? `${_.type.value}(${_.getByOffset(\"0\")}.x)` : _.getByOffset(\"global_idx\"), x ? `${S.type.value}(${S.getByOffset(\"0\")}.x)` : S.getByOffset(\"global_idx\"))) : $ = `\n            let outputIndices = ${g.offsetToIndices(\"global_idx * 4u\")};\n            let offsetA = ${_.broadcastedIndicesToOffset(\"outputIndices\", g)};\n            let offsetB = ${S.broadcastedIndicesToOffset(\"outputIndices\", g)};\n            ${g.setByOffset(\"global_idx\", b(a || T ? _.getByOffset(\"offsetA / 4u\") : `${_.type.value}(${_.getByOffset(\"offsetA / 4u\")}[offsetA % 4u])`, a || E ? S.getByOffset(\"offsetB / 4u\") : `${S.type.value}(${S.getByOffset(\"offsetB / 4u\")}[offsetB % 4u])`))}\n          `;\n          } else $ = g.setByOffset(\"global_idx\", b(_.getByOffset(\"global_idx\"), S.getByOffset(\"global_idx\")));\n          else {\n            if (!i) throw new Error(\"no necessary to use scalar implementation for element-wise binary op implementation.\");\n            let v = (x, T, E = \"\") => {\n              let I = `aData[indexA${T}][componentA${T}]`, z = `bData[indexB${T}][componentB${T}]`;\n              return `\n            let outputIndices${T} = ${g.offsetToIndices(`global_idx * 4u + ${T}u`)};\n            let offsetA${T} = ${_.broadcastedIndicesToOffset(`outputIndices${T}`, g)};\n            let offsetB${T} = ${S.broadcastedIndicesToOffset(`outputIndices${T}`, g)};\n            let indexA${T} = offsetA${T} / 4u;\n            let indexB${T} = offsetB${T} / 4u;\n            let componentA${T} = offsetA${T} % 4u;\n            let componentB${T} = offsetB${T} % 4u;\n            ${x}[${T}] = ${E}(${f(I, z)});\n          `;\n            };\n            p === 9 ? $ = `\n            var data = vec4<u32>(0);\n            ${v(\"data\", 0, \"u32\")}\n            ${v(\"data\", 1, \"u32\")}\n            ${v(\"data\", 2, \"u32\")}\n            ${v(\"data\", 3, \"u32\")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));` : $ = `\n            ${v(\"outputData[global_idx]\", 0)}\n            ${v(\"outputData[global_idx]\", 1)}\n            ${v(\"outputData[global_idx]\", 2)}\n            ${v(\"outputData[global_idx]\", 3)}\n          `;\n          }\n          return `\n        ${e.registerUniform(\"vec_size\", \"u32\").declareVariables(_, S, g)}\n\n        ${m ?? \"\"}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.vec_size\")}\n        ${$}\n      }`;\n        }, tf = (e, t, r, n, o, i, a = r.dataType) => {\n          let u = r.dims.map((_) => Number(_) ?? 1), d = n.dims.map((_) => Number(_) ?? 1), c = !k.areEqual(u, d), p = u, m = k.size(u), f = false, b = false, g = [c];\n          if (c) {\n            let _ = Je.calcShape(u, d, false);\n            if (!_) throw new Error(\"Can't perform binary op on the given tensors\");\n            p = _.slice(), m = k.size(p);\n            let S = k.size(u) === 1, $ = k.size(d) === 1, v = u.length > 0 && u[u.length - 1] % 4 === 0, x = d.length > 0 && d[d.length - 1] % 4 === 0;\n            g.push(S), g.push($), g.push(v), g.push(x);\n            let T = 1;\n            for (let E = 1; E < p.length; E++) {\n              let I = u[u.length - E], z = d[d.length - E];\n              if (I === z) T *= I;\n              else break;\n            }\n            T % 4 === 0 ? (b = true, f = true) : (S || $ || v || x) && (f = true);\n          } else f = true;\n          return g.push(f), { name: e, shaderCache: { hint: t + g.map((_) => _.toString()).join(\"_\"), inputDependencies: [\"rank\", \"rank\"] }, getShaderSource: (_) => ef(_, u, d, p, f, c, b, o, r.dataType, n.dataType, a, i), getRunData: () => ({ outputs: [{ dims: p, dataType: a }], dispatchGroup: { x: Math.ceil(m / 64 / 4) }, programUniforms: [{ type: 12, data: Math.ceil(k.size(p) / 4) }, ...N(u, d, p)] }) };\n        }, ot = (e, t, r, n, o, i) => {\n          e.compute(tf(t, o ?? \"\", e.inputs[0], e.inputs[1], r, n, i));\n        }, wu = (e) => {\n          ot(e, \"Add\", (t, r) => `${t}+${r}`);\n        }, vu = (e) => {\n          ot(e, \"Div\", (t, r) => `${t}/${r}`);\n        }, $u = (e) => {\n          ot(e, \"Equal\", { scalar: (t, r) => `u32(${t}==${r})`, vector: (t, r) => `vec4<u32>(${t}==${r})` }, void 0, void 0, 9);\n        }, xu = (e) => {\n          ot(e, \"Mul\", (t, r) => `${t}*${r}`);\n        }, Su = (e) => {\n          let t = P(\"input\", e.inputs[0].dataType, e.inputs[0].dims).type.value;\n          ot(e, \"Pow\", { scalar: (n, o) => `pow_custom(${n},${o})`, vector: (n, o) => `pow_vector_custom(${n},${o})` }, `\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t === \"i32\" ? \"round\" : \"\"}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `);\n        }, Tu = (e) => {\n          ot(e, \"Sub\", (t, r) => `${t}-${r}`);\n        }, Iu = (e) => {\n          ot(e, \"Greater\", { scalar: (t, r) => `u32(${t}>${r})`, vector: (t, r) => `vec4<u32>(${t}>${r})` }, void 0, void 0, 9);\n        }, Cu = (e) => {\n          ot(e, \"Less\", { scalar: (t, r) => `u32(${t}<${r})`, vector: (t, r) => `vec4<u32>(${t}<${r})` }, void 0, void 0, 9);\n        }, Au = (e) => {\n          ot(e, \"GreaterOrEqual\", { scalar: (t, r) => `u32(${t}>=${r})`, vector: (t, r) => `vec4<u32>(${t}>=${r})` }, void 0, void 0, 9);\n        }, Eu = (e) => {\n          ot(e, \"LessOrEqual\", { scalar: (t, r) => `u32(${t}<=${r})`, vector: (t, r) => `vec4<u32>(${t}<=${r})` }, void 0, void 0, 9);\n        };\n      });\n      Ou = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        nf = (e, t) => {\n          if (!e || e.length < 1) throw new Error(\"too few inputs\");\n          let r = 0, n = e[r], o = n.dataType, i = n.dims.length;\n          e.forEach((a, u) => {\n            if (u !== r) {\n              if (a.dataType !== o) throw new Error(\"input tensors should be one type\");\n              if (a.dims.length !== i) throw new Error(\"input tensors should have the same shape\");\n              a.dims.forEach((d, c) => {\n                if (c !== t && d !== n.dims[c]) throw new Error(\"non concat dimensions must match\");\n              });\n            }\n          });\n        }, of = (e, t) => `\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`, af = (e, t) => {\n          let r = e.length, n = [];\n          for (let o = 0; o < r; ++o) {\n            let i = t.setByOffset(\"global_idx\", e[o].getByIndices(\"indices\"));\n            r === 1 ? n.push(i) : o === 0 ? n.push(`if (inputIndex == ${o}u) { ${i} }`) : o === r - 1 ? n.push(`else { ${i} }`) : n.push(`else if (inputIndex == ${o}) { ${i} }`);\n          }\n          return n.join(`\n`);\n        }, sf = (e, t, r, n) => {\n          let o = k.size(r), i = new Array(e.length), a = new Array(e.length), u = 0, d = [], c = [], p = [{ type: 12, data: o }];\n          for (let _ = 0; _ < e.length; ++_) u += e[_].dims[t], i[_] = u, c.push(e[_].dims.length), a[_] = P(`input${_}`, n, c[_]), d.push(\"rank\"), p.push({ type: 12, data: i[_] });\n          for (let _ = 0; _ < e.length; ++_) p.push(...N(e[_].dims));\n          p.push(...N(r));\n          let m = M(\"output\", n, r.length), f = m.indicesGet(\"indices\", t), b = Array.from(Array(i.length).keys()).map((_) => `uniforms.sizeInConcatAxis${_}`).join(\",\"), g = (_) => `\n\n  ${(() => {\n            _.registerUniform(\"outputSize\", \"u32\");\n            for (let S = 0; S < e.length; S++) _.registerUniform(`sizeInConcatAxis${S}`, \"u32\");\n            return _.declareVariables(...a, m);\n          })()}\n\n  ${of(i.length, b)}\n\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n\n    var indices = ${m.offsetToIndices(\"global_idx\")};\n\n    let inputIndex = calculateInputIndex(${f});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${i.length}u>(${b});\n      ${f} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${af(a, m)}\n  }`;\n          return { name: \"Concat\", shaderCache: { hint: `${t}`, inputDependencies: d }, getRunData: () => ({ outputs: [{ dims: r, dataType: n }], dispatchGroup: { x: Math.ceil(o / 64) }, programUniforms: p }), getShaderSource: g };\n        }, Pu = (e, t) => {\n          let r = e.inputs, n = r[0].dims, o = k.normalizeAxis(t.axis, n.length);\n          nf(r, o);\n          let i = n.slice();\n          i[o] = r.reduce((u, d) => u + (d.dims.length > o ? d.dims[o] : 0), 0);\n          let a = r.filter((u) => k.size(u.dims) > 0);\n          e.compute(sf(a, o, i, r[0].dataType), { inputs: a });\n        }, zu = (e) => J({ axis: e.axis });\n      });\n      bt = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Fe = (e, t, r = \"f32\") => {\n          switch (e.activation) {\n            case \"Relu\":\n              return `value = max(value, ${t}(0.0));`;\n            case \"Sigmoid\":\n              return `value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;\n            case \"Clip\":\n              return `value = clamp(value, ${t}(${r}(uniforms.clip_min)), ${t}(${r}(uniforms.clip_max)));`;\n            case \"HardSigmoid\":\n              return `value = max(${t}(0.0), min(${t}(1.0), ${r}(uniforms.alpha) * value + ${r}(uniforms.beta)));`;\n            case \"LeakyRelu\":\n              return `value = select(${r}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;\n            case \"Tanh\":\n              return `let e2x = exp(-2.0 * abs(value));\n              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);\n        `;\n            case \"\":\n              return \"\";\n            default:\n              throw new Error(`Unsupported activation ${e.activation}`);\n          }\n        }, qe = (e, t) => {\n          e.activation === \"Clip\" ? t.push({ type: 1, data: e.clipMax }, { type: 1, data: e.clipMin }) : e.activation === \"HardSigmoid\" ? t.push({ type: 1, data: e.alpha }, { type: 1, data: e.beta }) : e.activation === \"LeakyRelu\" && t.push({ type: 1, data: e.alpha });\n        }, je = (e, t) => {\n          e.activation === \"Clip\" ? t.push({ name: \"clip_max\", type: \"f32\" }, { name: \"clip_min\", type: \"f32\" }) : e.activation === \"HardSigmoid\" ? t.push({ name: \"alpha\", type: \"f32\" }, { name: \"beta\", type: \"f32\" }) : e.activation === \"LeakyRelu\" && t.push({ name: \"alpha\", type: \"f32\" });\n        }, Kr = (e) => {\n          let t = e?.activation || \"\";\n          if (t === \"HardSigmoid\") {\n            let [r, n] = e?.activation_params || [0.2, 0.5];\n            return { activation: t, alpha: r, beta: n };\n          } else if (t === \"Clip\") {\n            let [r, n] = e?.activation_params || [Wa, La];\n            return { activation: t, clipMax: n, clipMin: r };\n          } else if (t === \"LeakyRelu\") {\n            let [r] = e?.activation_params || [0.01];\n            return { activation: t, alpha: r };\n          }\n          return { activation: t };\n        };\n      });\n      Zr = U(() => {\n        \"use strict\";\n        Ie = (e, t) => {\n          switch (e) {\n            case 1:\n              return t;\n            case 2:\n              return `vec2<${t}>`;\n            case 3:\n              return `vec3<${t}>`;\n            case 4:\n              return `vec4<${t}>`;\n            default:\n              throw new Error(`${e}-component is not supported.`);\n          }\n        }, Bu = (e) => `\n      ${e ? \"value = value + getBiasByOutputCoords(coords);\" : \"\"}\n      `;\n      });\n      Mu = U(() => {\n        \"use strict\";\n        Du = (e) => `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`;\n      });\n      Yr = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        ie();\n        bt();\n        Xt = (e, t, r, n, o) => {\n          let i = n - r;\n          return `\n      ${Array.from({ length: r }).map((a, u) => `\n      if (${F(t.shape, u, t.rank)} != 1) {\n        ${t.indicesSet(e, u, F(o, u + i, n))}\n      } else {\n        ${t.indicesSet(e, u, 0)}\n      }`).join(\"\")}\n`;\n        }, Qr = (e, t, r, n, o = false, i) => {\n          let a = e[0].dims, u = e[1].dims, d = a[a.length - 2], c = u[u.length - 1], p = a[a.length - 1], m = ce(c), f = ce(p), b = ce(d), g = k.size(r) / m / b, _ = e.length > 2, S = n ? n.slice(0, -2) : r.slice(0, -2), v = [k.size(S), d, c], x = [{ type: 12, data: g }, { type: 12, data: d }, { type: 12, data: c }, { type: 12, data: p }];\n          qe(t, x), x.push(...N(S, a, u)), _ && x.push(...N(e[2].dims)), x.push(...N(v));\n          let T = (E) => {\n            let I = Lr(\"batch_dims\", e[0].dataType, S.length), z = P(\"a\", e[0].dataType, a.length, f), O = P(\"b\", e[1].dataType, u.length, m), D = M(\"output\", e[0].dataType, v.length, m), L = be(D.type.tensor), q = Fe(t, D.type.value, L), Q = [z, O], W = \"\";\n            if (_) {\n              let H = o ? m : 1;\n              Q.push(P(\"bias\", e[2].dataType, e[2].dims.length, H)), W = `${o ? `value += bias[col / ${H}];` : `value += ${D.type.value}(bias[row + i]);`}`;\n            }\n            let Z = [{ name: \"output_size\", type: \"u32\" }, { name: \"M\", type: \"u32\" }, { name: \"N\", type: \"u32\" }, { name: \"K\", type: \"u32\" }];\n            je(t, Z);\n            let we = () => {\n              let H = `var a_data: ${z.type.value};`;\n              for (let j = 0; j < f; j++) H += `\n              let b_data${j} = b[(b_offset + (k + ${j}) * uniforms.N + col) / ${m}];`;\n              for (let j = 0; j < b; j++) {\n                H += `a_data = a[(a_offset + (row + ${j}) * uniforms.K + k) / ${f}];`;\n                for (let te = 0; te < f; te++) H += `\n            values[${j}] = fma(${O.type.value}(a_data${f === 1 ? \"\" : `[${te}]`}), b_data${te}, values[${j}]);\n`;\n              }\n              return H;\n            };\n            return `\n  ${E.registerUniforms(Z).registerInternalVariables(I).declareVariables(...Q, D)}\n  ${E.mainStart()}\n    ${E.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n    let col = (global_idx % (uniforms.N / ${m})) * ${m};\n    var index1 = global_idx / (uniforms.N / ${m});\n    let stride1 = uniforms.M / ${b};\n    let row = (index1 % stride1) * ${b};\n    let batch = index1 / stride1;\n\n    ${r.length === 2 ? \"\" : `let batch_indices = ${I.offsetToIndices(\"batch\")};`}\n\n    var a_indices: ${z.type.indices};\n    ${Xt(\"a_indices\", z, z.rank - 2, I.rank, \"batch_indices\")}\n    ${z.indicesSet(\"a_indices\", z.rank - 2, 0)}\n    ${z.indicesSet(\"a_indices\", z.rank - 1, 0)}\n    let a_offset = ${z.indicesToOffset(\"a_indices\")};\n\n    var b_indices: ${O.type.indices};\n    ${Xt(\"b_indices\", O, O.rank - 2, I.rank, \"batch_indices\")}\n    ${O.indicesSet(\"b_indices\", O.rank - 2, 0)}\n    ${O.indicesSet(\"b_indices\", O.rank - 1, 0)}\n    let b_offset = ${O.indicesToOffset(\"b_indices\")};\n    var values: array<${D.type.value}, ${b}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${f}) {\n      ${we()}\n    }\n    for (var i = 0u; i < ${b}u; i++) {\n      var value = values[i];\n      ${W}\n      ${q}\n      let cur_indices = ${D.type.indices}(batch, row + i, col);\n      let offset = ${D.indicesToOffset(\"cur_indices\")};\n      ${D.setByOffset(`offset / ${m}`, \"value\")};\n    }\n  }\n  `;\n          };\n          return { name: \"MatMulNaive\", shaderCache: { hint: `${t.activation};${m};${f};${b};${o}`, inputDependencies: _ ? [\"rank\", \"rank\", \"rank\"] : [\"rank\", \"rank\"] }, getRunData: () => ({ outputs: [{ dims: i ? i(r) : r, dataType: e[0].dataType }], dispatchGroup: { x: Math.ceil(g / 64) }, programUniforms: x }), getShaderSource: T };\n        };\n      });\n      Xr = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        ie();\n        bt();\n        Yr();\n        Zr();\n        uf = (e, t) => e ? `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t ? \", batchIndices\" : \"\"});\n        ` : `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t ? \", batchIndices\" : \"\"});\n        `, df = (e, t) => e ? `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t === 3 ? \"\" : \"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];\"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t === 3 ? \"\" : \"acc[i] = BCached3 * ACached3[i] + acc[i];\"}\n        }` : `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t === 3 ? \"\" : \"acc[i] = BCached3 * ACached.w + acc[i];\"}\n        }`, mo = (e, t, r = \"f32\", n, o = false, i = 32, a = false, u = 32) => {\n          let d = t[1] * e[1], c = t[0] * e[0], p = o ? d : i, m = o ? i : d, f = p / t[0], b = i / t[1];\n          if (!((o && f === 4 && e[1] === 4 || !o && (f === 3 || f === 4)) && p % t[0] === 0 && i % t[1] === 0 && e[0] === 4)) throw new Error(`If transposeA ${o} is true, innerElementSize ${f} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${f} must be 3 or 4.\n  tileAWidth ${p} must be divisible by workgroupSize[0]${t[0]}. tileInner ${i} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);\n          return `\nvar<workgroup> mm_Asub: array<array<vec${f}<${r}>, ${p / f}>, ${m}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${c / e[0]}>, ${i}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${f};\nconst tileInner = ${i};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${a ? \"0\" : \"i32(globalId.z)\"};\n  ${n ? `let batchIndices = ${n.offsetToIndices(\"u32(batch)\")};` : \"\"}\n  let globalRowStart = i32(workgroupId.y) * ${d};\n\n  let num_tiles = ${a ? `${Math.ceil(u / i)}` : \"(uniforms.dim_inner - 1) / tileInner + 1\"};\n  var kStart = ${a ? `i32(globalId.z) * ${u}` : \"0\"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${b};\n  for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${uf(o, n)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${b}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${n ? \", batchIndices\" : \"\"});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${f === 3 ? \"\" : \"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];\"}\n\n          ${df(o, f)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n        }, Ru = (e, t) => e ? `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t ? \", batchIndices\" : \"\"});\n            ` : `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t ? \", batchIndices\" : \"\"});\n            `, lf = (e) => e ? \"let ACached = mm_Asub[k][tileRow + innerRow];\" : \"let ACached = mm_Asub[tileRow + innerRow][k];\", fo = (e, t, r = \"f32\", n, o = false, i = 32, a = false, u = 32, d = false) => {\n          let c = e[1] * t[1], p = e[0] * t[0], m = o ? c : i, f = o ? i : c;\n          if (!(f % t[1] === 0 && m % t[0] === 0 && i % t[1] === 0)) throw new Error(`tileAHight ${f} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${m} must be divisible by workgroupSize[0]${t[0]}, tileInner ${i} must be divisible by workgroupSize[1]${t[1]}`);\n          let b = f / t[1], g = m / t[0], _ = i / t[1], S = d ? `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${c};\n    let globalColStart = i32(workgroupId.x) * ${p};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${f}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${m}; inputCol = inputCol + ${t[0]}) {\n          ${Ru(o, n)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${i}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${p}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${n ? \", batchIndices\" : \"\"});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${o ? `mm_Asub[k][localRow + innerRow * ${t[1]}];` : `mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    ` : `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${c};\n\nlet tileRowA = i32(localId.y) * ${b};\nlet tileColA = i32(localId.x) * ${g};\nlet tileRowB = i32(localId.y) * ${_};\n// Loop over shared dimension.\nfor (var t = 0; t < num_tiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${b}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${g}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${Ru(o, n)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${n ? \", batchIndices\" : \"\"});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${lf(o)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n          return `\n  var<workgroup> mm_Asub : array<array<${r}, ${m}>, ${f}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${p}>, ${i}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${i};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${a ? \"0\" : \"i32(globalId.z)\"};\n    ${n ? `let batchIndices = ${n.offsetToIndices(\"u32(batch)\")};` : \"\"}\n    let num_tiles = ${a ? `${Math.ceil(u / i)}` : \"(uniforms.dim_inner - 1) / tileInner + 1\"};\n    var kStart = ${a ? `i32(globalId.z) * ${u}` : \"0\"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n    ${S}\n  }\n`;\n        }, cf = (e, t, r, n, o = false) => {\n          let [i, a, u, d] = n, c = be(n[0].type.tensor);\n          return `\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${i.type.indices}) -> ${Ie(e, c)} {\n      var value = ${Ie(e, c)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)\n      {\n        var aIndices: ${a.type.indices};\n        ${Xt(\"aIndices\", a, a.rank - 2, i.rank, \"batchIndices\")}\n        ${a.indicesSet(\"aIndices\", a.rank - 2, \"u32(row)\")}\n        ${a.indicesSet(\"aIndices\", a.rank - 1, \"u32(colIn)\")}\n        value = ${a.getByIndices(\"aIndices\")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${i.type.indices}) -> ${Ie(e, c)} {\n      var value = ${Ie(e, c)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)\n      {\n        var bIndices: ${u.type.indices};\n        ${Xt(\"bIndices\", u, u.rank - 2, i.rank, \"batchIndices\")}\n        ${u.indicesSet(\"bIndices\", u.rank - 2, \"u32(row)\")}\n        ${u.indicesSet(\"bIndices\", u.rank - 1, \"u32(colIn)\")}\n        value = ${u.getByIndices(\"bIndices\")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ie(e, c)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t ? `value = value + ${o ? \"bias[colIn]\" : `${Ie(e, c)}(bias[row])`};` : \"\"}\n        ${r}\n        ${d.setByIndices(\"vec3<u32>(coords)\", \"value\")}\n      }\n    }\n    `;\n        }, Jt = (e, t, r, n, o = false, i) => {\n          let a = e[0].dims, u = e[1].dims, d = a.slice(0, -2), c = u.slice(0, -2), p = n ? n.slice(0, -2) : r.slice(0, -2), m = k.size(p), f = a[a.length - 2], b = a[a.length - 1], g = u[u.length - 1], _ = b % 4 === 0 && g % 4 === 0, S = f <= 8 ? [4, 1, 1] : [4, 4, 1], $ = [8, 8, 1], v = [Math.ceil(g / $[0] / S[0]), Math.ceil(f / $[1] / S[1]), Math.ceil(m / $[2] / S[2])], x = _ ? 4 : 1, T = [...d, f, b / x], E = T.length, I = [...c, b, g / x], z = I.length, O = [m, f, g / x], D = [{ type: 6, data: f }, { type: 6, data: g }, { type: 6, data: b }];\n          qe(t, D), D.push(...N(p, T, I));\n          let L = [\"rank\", \"rank\"], q = e.length > 2;\n          q && (D.push(...N(e[2].dims)), L.push(\"rank\")), D.push(...N(O));\n          let Q = (W) => {\n            let Z = p.length, we = Lr(\"batchDims\", e[0].dataType, Z, 1), H = be(e[0].dataType), j = P(\"a\", e[0].dataType, E, x), te = P(\"b\", e[1].dataType, z, x), X = M(\"result\", e[0].dataType, O.length, x), ue = [j, te];\n            if (q) {\n              let V = o ? x : 1;\n              ue.push(P(\"bias\", e[2].dataType, e[2].dims.length, V));\n            }\n            let he = [{ name: \"dim_a_outer\", type: \"i32\" }, { name: \"dim_b_outer\", type: \"i32\" }, { name: \"dim_inner\", type: \"i32\" }];\n            je(t, he);\n            let ye = be(X.type.tensor), re = Fe(t, X.type.value, ye), C = cf(x, q, re, [we, j, te, X], o);\n            return `\n  ${W.registerUniforms(he).registerInternalVariables(we).declareVariables(...ue, X)}\n  ${C}\n  ${_ ? mo(S, $, H, we) : fo(S, $, H, we)}\n                   `;\n          };\n          return { name: \"MatMul\", shaderCache: { hint: `${S};${t.activation};${_};${o}`, inputDependencies: L }, getRunData: () => ({ outputs: [{ dims: i ? i(r) : r, dataType: e[0].dataType }], dispatchGroup: { x: v[0], y: v[1], z: v[2] }, programUniforms: D }), getShaderSource: Q };\n        };\n      });\n      Nu = U(() => {\n        \"use strict\";\n        ee();\n        Xe();\n        ie();\n        bt();\n        Zr();\n        Mu();\n        Xr();\n        pf = (e, t, r, n, o = false, i, a = 4, u = 4, d = 4, c = \"f32\") => {\n          let p = (L) => {\n            switch (L) {\n              case 1:\n                return \"resData = x[xIndex];\";\n              case 3:\n                return `resData = vec3<${c}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;\n              case 4:\n                return \"resData = x[xIndex / 4];\";\n              default:\n                throw new Error(`innerElementSize ${L} is not supported.`);\n            }\n          }, m = (L) => {\n            switch (L) {\n              case 1:\n                return \"return w[row * i32(uniforms.w_shape[3]) + colIn];\";\n              case 4:\n                return \"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];\";\n              default:\n                throw new Error(`innerElementSize ${L} is not supported.`);\n            }\n          }, f = e ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ` : `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `, b = e ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` : `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `, g = e ? \"i32(uniforms.x_shape[1])\" : \"i32(uniforms.x_shape[2])\", _ = e ? \"i32(uniforms.x_shape[2])\" : \"i32(uniforms.x_shape[3])\", S = e ? \"row\" : \"col\", $ = e ? \"col\" : \"row\", v = `\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e ? \"i32(uniforms.result_shape[2])\" : \"i32(uniforms.result_shape[3])\"};\n    let outRow = ${S} / outWidth;\n    let outCol = ${S} % outWidth;\n\n    let WRow = ${$} / (i32(uniforms.w_shape[1]) * inChannels);\n    let WCol = ${$} / inChannels % i32(uniforms.w_shape[1]);\n    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n    let xCh = ${$} % inChannels;\n    var resData = ${Ie(a, c)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${g} && xCol >= 0 && xCol < ${_}) {\n      ${f}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${p(a)}\n    }\n    return resData;`, x = e ? t && n ? `\n    let col = colIn * ${a};\n    ${v}` : `\n    let col = colIn * ${a};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n      ${v}\n    }\n    return ${Ie(a, c)}(0.0);` : n && r ? `\n    let col = colIn * ${a};\n    ${v}` : `\n    let col = colIn * ${a};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${v}\n    }\n    return ${Ie(a, c)}(0.0);`, T = e ? n && r ? m(u) : `\n    let col = colIn * ${u};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${m(u)}\n    }\n    return ${Ie(u, c)}(0.0);` : `\n    let col = colIn * ${u};\n    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {\n      ${m(u)}\n    }\n    return ${Ie(u, c)}(0.0);`, E = Ie(d, c), I = e ? Ie(a, c) : Ie(u, c), z = e ? Ie(u, c) : Ie(a, c), O = Fe(i, E, c);\n          return `\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${I} {\n      ${e ? x : T}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${z} {\n      ${e ? T : x}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${E}) {\n      let col = colIn * ${d};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)\n      {\n      var value = valueIn;\n      let outWidth = ${e ? \"i32(uniforms.result_shape[2])\" : \"i32(uniforms.result_shape[3])\"};\n      ${b}\n      ${Bu(o)}\n      ${O}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n        }, Uu = (e, t, r, n, o, i, a, u, d) => {\n          let c = t.format === \"NHWC\", p = c ? e[0].dims[3] : e[0].dims[1], m = r[0], f = c ? r[2] : r[3], b = c ? r[1] : r[2], g = c ? r[3] : r[1], _ = c && (p % 4 === 0 || p % 3 === 0) && g % 4 === 0, S = c ? g : f * b, $ = c ? f * b : g, v = [8, 8, 1], x = n <= 8 ? [4, 1, 1] : [4, 4, 1], T = [Math.ceil(S / v[0] / x[0]), Math.ceil($ / v[1] / x[1]), Math.ceil(m / v[2] / x[2])];\n          se(\"verbose\", () => `[conv2d_mm_webgpu] dispatch = ${T}`);\n          let E = _ ? c && p % 4 !== 0 ? 3 : 4 : 1, I = v[1] * x[1], z = v[0] * x[0], O = Math.max(v[0] * E, v[1]), D = n % I === 0, L = o % z === 0, q = i % O === 0, Q = _ ? [E, 4, 4] : [1, 1, 1], W = [{ type: 6, data: n }, { type: 6, data: o }, { type: 6, data: i }, { type: 6, data: [t.pads[0], t.pads[1]] }, { type: 6, data: t.strides }, { type: 6, data: t.dilations }];\n          qe(t, W), W.push(...N(e[0].dims, e[1].dims));\n          let Z = [\"rank\", \"rank\"];\n          a && (W.push(...N(e[2].dims)), Z.push(\"rank\")), W.push(...N(r));\n          let we = (H) => {\n            let j = [{ name: \"dim_a_outer\", type: \"i32\" }, { name: \"dim_b_outer\", type: \"i32\" }, { name: \"dim_inner\", type: \"i32\" }, { name: \"pad\", type: \"i32\", length: 2 }, { name: \"stride\", type: \"i32\", length: 2 }, { name: \"dilation\", type: \"i32\", length: 2 }];\n            je(t, j);\n            let te = _ ? 4 : 1, X = be(e[0].dataType), ue = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${_ ? `vec4<${X}>` : X}) {\n        result[flatIndex] = ${_ ? `vec4<${X}>` : X}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${_ ? `vec4<${X}>` : X}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${_ ? \"/ 4\" : \"\"}, value);\n      }`, he = P(\"x\", e[0].dataType, e[0].dims.length, E === 3 ? 1 : E), ye = P(\"w\", e[1].dataType, e[1].dims.length, te), re = [he, ye], C = M(\"result\", e[0].dataType, r.length, te);\n            if (a) {\n              let V = P(\"bias\", e[2].dataType, e[2].dims.length, te);\n              re.push(V), ue += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${_ ? `vec4<${X}>` : X} {\n          return bias[coords.${c ? \"w\" : \"y\"}${_ ? \"/ 4\" : \"\"}];\n        }`;\n            }\n            return `\n        ${Du(\"uniforms.result_strides\")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${H.registerUniforms(j).declareVariables(...re, C)}\n        ${ue}\n        ${pf(c, D, L, q, a, t, Q[0], Q[1], Q[2], X)}\n        ${_ ? mo(x, v, X, void 0, !c, O) : fo(x, v, X, void 0, !c, O, false, void 0, u)}`;\n          };\n          return { name: \"Conv2DMatMul\", shaderCache: { hint: `${t.cacheKey};${E};${_};${D};${L};${q};${I};${z};${O}`, inputDependencies: Z }, getRunData: () => ({ outputs: [{ dims: d ? d(r) : r, dataType: e[0].dataType }], dispatchGroup: { x: T[0], y: T[1], z: T[2] }, programUniforms: W }), getShaderSource: we };\n        };\n      });\n      Hu = U(() => {\n        \"use strict\";\n        ee();\n        Xe();\n        ne();\n        ie();\n        bt();\n        Zr();\n        mf = (e) => {\n          let t = 1;\n          for (let r = 0; r < e.length; r++) t *= e[r];\n          return t;\n        }, Vu = (e) => typeof e == \"number\" ? [e, e, e] : e, Jr = (e, t) => t <= 1 ? e : e + (e - 1) * (t - 1), ff = (e, t, r, n = 1) => {\n          let o = Jr(t, n);\n          return Math.floor((e[0] * (r - 1) - r + o) / 2);\n        }, Wu = (e, t, r, n, o) => {\n          o == null && (o = ff(e, t[0], n[0]));\n          let i = [0, 0, 0, r];\n          for (let a = 0; a < 3; a++) e[a] + 2 * o >= t[a] && (i[a] = Math.trunc((e[a] - t[a] + 2 * o) / n[a] + 1));\n          return i;\n        }, hf = (e, t, r, n, o, i, a, u, d, c) => {\n          let p, m, f, b;\n          if (e === \"VALID\" && (e = 0), typeof e == \"number\") {\n            p = { top: e, bottom: e, left: e, right: e, front: e, back: e };\n            let g = Wu([t, r, n, 1], [u, d, c], 1, [o, i, a], e);\n            m = g[0], f = g[1], b = g[2];\n          } else if (Array.isArray(e)) {\n            if (!e.every((_, S, $) => _ === $[0])) throw Error(`Unsupported padding parameter: ${e}`);\n            p = { top: e[0], bottom: e[1], left: e[2], right: e[3], front: e[4], back: e[5] };\n            let g = Wu([t, r, n, 1], [u, d, c], 1, [o, i, a], e[0]);\n            m = g[0], f = g[1], b = g[2];\n          } else if (e === \"SAME_UPPER\") {\n            m = Math.ceil(t / o), f = Math.ceil(r / i), b = Math.ceil(n / a);\n            let g = (m - 1) * o + u - t, _ = (f - 1) * i + d - r, S = (b - 1) * a + c - n, $ = Math.floor(g / 2), v = g - $, x = Math.floor(_ / 2), T = _ - x, E = Math.floor(S / 2), I = S - E;\n            p = { top: x, bottom: T, left: E, right: I, front: $, back: v };\n          } else throw Error(`Unknown padding parameter: ${e}`);\n          return { padInfo: p, outDepth: m, outHeight: f, outWidth: b };\n        }, Lu = (e, t, r, n, o, i = false, a = \"channelsLast\") => {\n          let u, d, c, p, m;\n          if (a === \"channelsLast\") [u, d, c, p, m] = e;\n          else if (a === \"channelsFirst\") [u, m, d, c, p] = e;\n          else throw new Error(`Unknown dataFormat ${a}`);\n          let [f, , b, g, _] = t, [S, $, v] = Vu(r), [x, T, E] = Vu(n), I = Jr(b, x), z = Jr(g, T), O = Jr(_, E), { padInfo: D, outDepth: L, outHeight: q, outWidth: Q } = hf(o, d, c, p, S, $, v, I, z, O), W = i ? f * m : f, Z = [0, 0, 0, 0, 0];\n          return a === \"channelsFirst\" ? Z = [u, W, L, q, Q] : a === \"channelsLast\" && (Z = [u, L, q, Q, W]), { batchSize: u, dataFormat: a, inDepth: d, inHeight: c, inWidth: p, inChannels: m, outDepth: L, outHeight: q, outWidth: Q, outChannels: W, padInfo: D, strideDepth: S, strideHeight: $, strideWidth: v, filterDepth: b, filterHeight: g, filterWidth: _, effectiveFilterDepth: I, effectiveFilterHeight: z, effectiveFilterWidth: O, dilationDepth: x, dilationHeight: T, dilationWidth: E, inShape: e, outShape: Z, filterShape: t };\n        }, Gu = (e, t, r, n, o, i) => {\n          let a = i === \"channelsLast\", u = a ? e[0].dims[3] : e[0].dims[1], d = false, c = [64, 1, 1], p = { x: r.map((v, x) => x) }, m = [Math.ceil(mf(p.x.map((v) => r[v])) / c[0]), 1, 1];\n          se(\"verbose\", () => `[conv3d_naive_webgpu] dispatch = ${m}`);\n          let f = d ? a && u % 4 !== 0 ? 3 : 4 : 1, b = k.size(r), g = [{ type: 12, data: b }, { type: 12, data: n }, { type: 12, data: o }, { type: 12, data: t.strides }, { type: 12, data: t.dilations }];\n          qe(t, g), g.push(...N(e[0].dims, e[1].dims));\n          let _ = [\"rank\", \"rank\"], S = e.length === 3;\n          S && (g.push(...N(e[2].dims)), _.push(\"rank\")), g.push(...N(r));\n          let $ = (v) => {\n            let x = [{ name: \"output_size\", type: \"u32\" }, { name: \"filter_dims\", type: \"u32\", length: n.length }, { name: \"pads\", type: \"u32\", length: o.length }, { name: \"strides\", type: \"u32\", length: t.strides.length }, { name: \"dilations\", type: \"u32\", length: t.dilations.length }];\n            je(t, x);\n            let T = d ? 4 : 1, E = be(e[0].dataType), I = P(\"x\", e[0].dataType, e[0].dims.length, f === 3 ? 1 : f), z = P(\"W\", e[1].dataType, e[1].dims.length, T), O = [I, z], D = M(\"result\", e[0].dataType, r.length, T), L = \"\";\n            if (S) {\n              let W = P(\"bias\", e[2].dataType, e[2].dims.length, T);\n              O.push(W), L += `\n        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${d ? `vec4<${E}>` : E} {\n          return bias[${a ? F(\"coords\", 4, 5) : F(\"coords\", 1, 5)}${d ? \"/ 4\" : \"\"}];\n        }`;\n            }\n            let q = Ie(f, E), Q = Fe(t, q, E);\n            return `\n            ${L}\n            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {\n              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);\n              return ${I.getByIndices(\"aIndices\")};\n            }\n            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {\n              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);\n              return ${z.getByIndices(\"aIndices\")};\n            }\n          ${v.registerUniforms(x).declareVariables(...O, D)}\n          ${v.mainStart()}\n          ${v.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n              let coords = ${D.offsetToIndices(\"global_idx\")};\n              let batch = ${F(\"coords\", 0, I.rank)};\n              let d2 = ${a ? F(\"coords\", I.rank - 1, I.rank) : F(\"coords\", 1, I.rank)};\n              let xFRCCorner = vec3<u32>(${a ? F(\"coords\", 1, I.rank) : F(\"coords\", 2, I.rank)},\n              ${a ? F(\"coords\", 2, I.rank) : F(\"coords\", 3, I.rank)},\n              ${a ? F(\"coords\", 3, I.rank) : F(\"coords\", 4, I.rank)}) * uniforms.strides - uniforms.pads;\n              let xFCorner = xFRCCorner.x;\n              let xRCorner = xFRCCorner.y;\n              let xCCorner = xFRCCorner.z;\n              let xShapeY = ${a ? F(\"uniforms.x_shape\", 1, I.rank) : F(\"uniforms.x_shape\", 2, I.rank)};\n              let xShapeZ = ${a ? F(\"uniforms.x_shape\", 2, I.rank) : F(\"uniforms.x_shape\", 3, I.rank)};\n              let xShapeW = ${a ? F(\"uniforms.x_shape\", 3, I.rank) : F(\"uniforms.x_shape\", 4, I.rank)};\n              let xShapeU = ${a ? F(\"uniforms.x_shape\", 4, I.rank) : F(\"uniforms.x_shape\", 1, I.rank)};\n              let inputDepthNearestVec4 = (xShapeU / 4) * 4;\n              let inputDepthVec4Remainder = xShapeU % 4;\n\n              var value = 0.0;\n              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {\n                let xF = xFCorner + wF * uniforms.dilations[0];\n                if (xF < 0 || xF >= xShapeY) {\n                  continue;\n                }\n\n                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {\n                  let xR = xRCorner + wR * uniforms.dilations[1];\n                  if (xR < 0 || xR >= xShapeZ) {\n                    continue;\n                  }\n\n                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {\n                    let xC = xCCorner + wC * uniforms.dilations[2];\n                    if (xC < 0 || xC >= xShapeW) {\n                      continue;\n                    }\n\n                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {\n                      ${a ? `let xValues = vec4<f32>(\n                               getX(batch, xF, xR, xC, d1),\n                               getX(batch, xF, xR, xC, d1 + 1),\n                               getX(batch, xF, xR, xC, d1 + 2),\n                               getX(batch, xF, xR, xC, d1 + 3));\n                            ` : `let xValues = vec4<f32>(\n                               getX(batch, d1, xF, xR, xC),\n                               getX(batch, d1 + 1, xF, xR, xC),\n                               getX(batch, d1 + 2, xF, xR, xC),\n                               getX(batch, d1 + 3, xF, xR, xC));\n                            `}\n                            let wValues = vec4<f32>(\n                              getW(d2, d1, wF, wR, wC),\n                              getW(d2, d1 + 1, wF, wR, wC),\n                              getW(d2, d1 + 2, wF, wR, wC),\n                              getW(d2, d1 + 3, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    }\n                    if (inputDepthVec4Remainder == 1) {\n                        ${a ? `value += getX(batch, xF, xR, xC, inputDepthNearestVec4)\n                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);` : `value += getX(batch, inputDepthNearestVec4, xF, xR, xC)\n                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}\n                    } else if (inputDepthVec4Remainder == 2) {\n                      ${a ? `let xValues = vec2<f32>(\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));\n                      ` : `let xValues = vec2<f32>(\n                        getX(batch, inputDepthNearestVec4, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));\n                    `}\n                    let wValues = vec2<f32>(\n                      getW(d2, inputDepthNearestVec4, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    } else if (inputDepthVec4Remainder == 3) {\n                      ${a ? `let xValues = vec3<f32>(\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));\n                      ` : `let xValues = vec3<f32>(\n                        getX(batch, inputDepthNearestVec4, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));\n                    `}\n                    let wValues = vec3<f32>(\n                      getW(d2, inputDepthNearestVec4, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    }\n                  }\n                }\n              }\n              ${S ? \"value = value + getBiasByOutputCoords(coords)\" : \"\"};\n              ${Q}\n              result[global_idx] = f32(value);\n          }`;\n          };\n          return { name: \"Conv3DNaive\", shaderCache: { hint: `${t.cacheKey};${a};${f};${S}`, inputDependencies: _ }, getRunData: () => ({ outputs: [{ dims: r, dataType: e[0].dataType }], dispatchGroup: { x: m[0], y: m[1], z: m[2] }, programUniforms: g }), getShaderSource: $ };\n        };\n      });\n      ju = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        ie();\n        bt();\n        Fu = (e, t, r, n) => {\n          let o = e.length > 2, i = o ? \"value += b[output_channel];\" : \"\", a = e[0].dims, u = e[1].dims, d = t.format === \"NHWC\", c = d ? r[3] : r[1], p = c / t.group, m = d && p >= 4 ? ce(c) : 1, f = k.size(r) / m, b = [{ type: 12, data: f }, { type: 12, data: t.dilations }, { type: 12, data: [t.strides[0], t.strides[1]] }, { type: 12, data: [t.pads[0], t.pads[1]] }, { type: 12, data: p }];\n          qe(t, b), b.push(...N(a, [u[0], u[1], u[2], u[3] / m]));\n          let g = o ? [\"rank\", \"rank\", \"rank\"] : [\"rank\", \"rank\"];\n          b.push(...N([r[0], r[1], r[2], r[3] / m]));\n          let _ = (S) => {\n            let $ = M(\"output\", e[0].dataType, r.length, m), v = be($.type.tensor), x = Fe(t, $.type.value, v), T = P(\"x\", e[0].dataType, a.length), E = P(\"w\", e[1].dataType, u.length, m), I = [T, E];\n            o && I.push(P(\"b\", e[2].dataType, e[2].dims, m));\n            let z = [{ name: \"output_size\", type: \"u32\" }, { name: \"dilations\", type: \"u32\", length: t.dilations.length }, { name: \"strides\", type: \"u32\", length: 2 }, { name: \"pads\", type: \"u32\", length: 2 }, { name: \"output_channels_per_group\", type: \"u32\" }];\n            je(t, z);\n            let O = d ? `\n      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {\n            continue;\n          }\n\n          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {\n            let input_channel = in_channel_offset + wInChannel;\n            let xVal = ${T.get(\"batch\", \"xHeight\", \"xWidth\", \"input_channel\")};\n            let wVal = ${E.get(\"wHeight\", \"wWidth\", \"wInChannel\", \"output_channel\")};\n            value += xVal * wVal;\n          }\n        }\n      }\n      ` : `\n      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {\n        let input_channel = in_channel_offset + wInChannel;\n        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {\n          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {\n            continue;\n          }\n\n          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {\n            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {\n              continue;\n            }\n\n            let xVal = ${T.get(\"batch\", \"input_channel\", \"xHeight\", \"xWidth\")};\n            let wVal = ${E.get(\"output_channel\", \"wInChannel\", \"wHeight\", \"wWidth\")};\n            value += xVal * wVal;\n          }\n        }\n      }\n      `;\n            return `\n  ${S.registerUniforms(z).declareVariables(...I, $)}\n\n  ${S.mainStart()}\n    ${S.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n\n    let outputIndices = ${$.offsetToIndices(\"global_idx\")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${d ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${d ? 1 : 2}], outputIndices[${d ? 2 : 3}]) * uniforms.strides - uniforms.pads;\n    let group_id: u32 = output_channel * ${m} / uniforms.output_channels_per_group;\n    var in_channel_offset = group_id * uniforms.w_shape[${d ? 2 : 1}];\n\n    var value: ${$.type.value} = ${$.type.value}(0);\n    ${O}\n    ${i}\n    ${x}\n    ${$.setByOffset(\"global_idx\", \"value\")}\n  }`;\n          };\n          return { name: \"GroupedConv\", shaderCache: { hint: `${t.cacheKey}_${m}`, inputDependencies: g }, getRunData: () => ({ outputs: [{ dims: n ? n(r) : r, dataType: e[0].dataType }], dispatchGroup: { x: Math.ceil(f / 64) }, programUniforms: b }), getShaderSource: _ };\n        }, qu = (e, t, r, n) => {\n          let o = e.length > 2, i = ce(r[3]), a = ce(r[2]), u = k.size(r) / i / a, d = [e[0].dims[0], e[0].dims[1], e[0].dims[2], e[0].dims[3] / i], c = [e[1].dims[0], e[1].dims[1], e[1].dims[2], e[1].dims[3] / i], p = [r[0], r[1], r[2], r[3] / i], m = [{ type: 12, data: u }, { type: 6, data: [t.strides[0], t.strides[1]] }, { type: 6, data: [t.pads[0], t.pads[1]] }];\n          qe(t, m), m.push(...N(d, c, p));\n          let f = (a - 1) * t.strides[1] + c[1], b = (g) => {\n            let _ = M(\"output\", e[0].dataType, p.length, i), S = be(_.type.tensor), $ = Fe(t, _.type.value, S), v = P(\"x\", e[0].dataType, d.length, i), x = P(\"w\", e[1].dataType, c.length, i), T = [v, x];\n            o && T.push(P(\"b\", e[2].dataType, e[2].dims, i));\n            let E = o ? \"value += b[output_channel];\" : \"\", I = [{ name: \"output_size\", type: \"u32\" }, { name: \"strides\", type: \"i32\", length: 2 }, { name: \"pads\", type: \"i32\", length: 2 }];\n            return je(t, I), `\n  ${g.registerUniforms(I).declareVariables(...T, _)}\n  ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n    let width0 = uniforms.output_shape[3];\n    let output_channel = global_idx % width0;\n    var index1 = global_idx / width0;\n    let width1 = uniforms.output_shape[2] / ${a}u;\n    let col = (index1 % width1) * ${a}u;\n    index1 = index1 / width1;\n    let row = index1 % uniforms.output_shape[1];\n    let batch = index1 / uniforms.output_shape[1];\n\n    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;\n\n    var x_vals: array<${v.type.value}, ${f}>;\n    var values: array<${_.type.value}, ${a}>;\n    let input_channel = output_channel;\n    // Use constant instead of uniform can give better performance for w's height/width.\n    for (var w_height: u32 = 0u; w_height < ${c[0]}; w_height++) {\n      let x_height = x_corner.x + i32(w_height);\n      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {\n        for (var i = 0; i < ${f}; i++) {\n          let x_width = x_corner.y + i;\n          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {\n            x_vals[i] = ${v.get(\"batch\", \"u32(x_height)\", \"u32(x_width)\", \"input_channel\")};\n          } else {\n            x_vals[i] = ${v.type.value}(0);\n          }\n        }\n        for (var w_width: u32 = 0u; w_width < ${c[1]}; w_width++) {\n          let w_val = ${x.get(\"w_height\", \"w_width\", \"0\", \"output_channel\")};\n          for (var i = 0u; i < ${a}u; i++) {\n            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);\n          }\n        }\n      }\n    }\n\n    for (var i = 0u; i < ${a}u; i++) {\n      var value = values[i];\n      ${E}\n      ${$}\n      ${_.set(\"batch\", \"row\", \"col + i\", \"output_channel\", \"value\")};\n    }\n  }`;\n          };\n          return { name: \"GroupedConv-Vectorize\", shaderCache: { hint: `${t.cacheKey};${i};${a};${f};${c[0]};${c[1]}`, inputDependencies: o ? [\"rank\", \"rank\", \"type\"] : [\"rank\", \"rank\"] }, getRunData: () => ({ outputs: [{ dims: n ? n(r) : r, dataType: e[0].dataType }], dispatchGroup: { x: Math.ceil(u / 64) }, programUniforms: m }), getShaderSource: b };\n        };\n      });\n      Zu = U(() => {\n        \"use strict\";\n        ne();\n        Nu();\n        Hu();\n        Xr();\n        ju();\n        bt();\n        Yr();\n        st();\n        gf = (e, t, r, n, o, i) => {\n          let a = e[0], u = e.slice(i ? 1 : 2, i ? 3 : 4), d = u.length, c = t[0], m = t.slice(2).map((g, _) => g + (g - 1) * (r[_] - 1)), b = u.map((g, _) => g + n[_] + n[_ + d]).map((g, _) => Math.floor((g - m[_] + o[_]) / o[_]));\n          return b.splice(0, 0, a), b.splice(i ? 3 : 1, 0, c), b;\n        }, ho = [2, 3, 1, 0], bf = (e, t) => {\n          if (!e || e.length !== 2 && e.length !== 3) throw new Error(\"Conv requires 2 or 3 inputs\");\n          if (e[0].dims.length > 5) throw new Error(\"greater than 5D is not supported\");\n          if (e[0].dims.length !== e[1].dims.length) throw new Error(\"filter does not have same dimension as input\");\n          let r = e[0].dims[t.format === \"NHWC\" ? e[0].dims.length - 1 : 1], n = e[1].dims[1] * t.group;\n          if (r !== n) throw new Error(\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\");\n          if (e.length === 3 && (e[2].dims.length !== 1 || e[1].dims[0] !== e[2].dims[0])) throw new Error(\"invalid bias\");\n          let o = e[0].dims.length - 2;\n          if (t.dilations.length !== o) throw new Error(`dilations should be ${o}D`);\n          if (t.strides.length !== o) throw new Error(`strides should be ${o}D`);\n          if (t.pads.length !== o * 2) throw new Error(`pads should be ${o * 2}D`);\n          if (t.kernelShape.length !== 0 && t.kernelShape.length !== e[1].dims.length - 2) throw new Error(\"invalid kernel shape\");\n        }, go = (e, t) => {\n          let r = e.kernelShape.slice();\n          r.length < t[1].dims.length - 2 && r.push(...Array(t[1].dims.length - 2 - r.length).fill(0));\n          for (let i = 2; i < t[1].dims.length; ++i) r[i - 2] === 0 && (r[i - 2] = t[1].dims[i]);\n          let n = e.pads.slice();\n          Tt.adjustPadsBasedOnAutoPad(t[0].dims, e.strides, e.dilations, r, n, e.format === \"NHWC\", e.autoPad);\n          let o = Object.assign({}, e);\n          return Object.assign(o, { kernelShape: r, pads: n }), o;\n        }, bo = (e) => {\n          let t = Kr(e), r = e.format, n = [\"NOTSET\", \"VALID\", \"SAME_UPPER\", \"SAME_LOWER\"][e.auto_pad], o = e.dilations, i = e.group, a = e.kernel_shape, u = e.pads, d = e.strides, c = e.w_is_const();\n          return { autoPad: n, format: r, dilations: o, group: i, kernelShape: a, pads: u, strides: d, wIsConst: c, ...t, cacheKey: `${e.format};${t.activation};` };\n        }, Ku = (e, t, r, n) => {\n          let o = r.format === \"NHWC\", i = gf(t[0].dims, t[1].dims, r.dilations, r.pads, r.strides, o);\n          if (r.group !== 1) {\n            let I = [t[0]];\n            if (o) {\n              let O = e.kernelCustomData.wT ?? e.compute(Ee(t[1], ho), { inputs: [1], outputs: [r.wIsConst ? -2 : -1] })[0];\n              r.wIsConst && !e.kernelCustomData.wT && (e.kernelCustomData.wT = O), I.push(O);\n            } else I.push(t[1]);\n            t.length === 3 && I.push(t[2]), !e.adapterInfo.isArchitecture(\"ampere\") && o && t[1].dims[0] === r.group && t[1].dims[1] === 1 && r.dilations[0] === 1 && r.dilations[1] === 1 ? e.compute(qu(I, r, i, n), { inputs: I }) : e.compute(Fu(I, r, i, n), { inputs: I });\n            return;\n          }\n          let a = t.length === 3, u = t[0].dims[o ? 1 : 2], d = t[0].dims[o ? 2 : 3], c = t[0].dims[o ? 3 : 1], p = t[1].dims[2], m = t[1].dims[3], f = i[o ? 1 : 2], b = i[o ? 2 : 3], g = i[o ? 3 : 1], _ = o && p === u && m === d && r.pads[0] === 0 && r.pads[1] === 0;\n          if (_ || p === 1 && m === 1 && r.dilations[0] === 1 && r.dilations[1] === 1 && r.strides[0] === 1 && r.strides[1] === 1 && r.pads[0] === 0 && r.pads[1] === 0) {\n            let I = i[0], z, O, D, L = [];\n            if (o) {\n              let W = e.kernelCustomData.wT ?? e.compute(Ee(t[1], ho), { inputs: [1], outputs: [r.wIsConst ? -2 : -1] })[0];\n              if (r.wIsConst && !e.kernelCustomData.wT && (e.kernelCustomData.wT = W), _) {\n                let Z = u * d * c;\n                z = t[0].reshape([1, I, Z]), O = W.reshape([1, Z, g]), D = [1, I, g];\n              } else z = t[0].reshape([I, u * d, c]), O = W.reshape([1, c, g]), D = [I, f * b, g];\n              L.push(z), L.push(O);\n            } else z = t[0].reshape([I, c, u * d]), O = t[1].reshape([1, g, c]), D = [I, g, f * b], L.push(O), L.push(z);\n            a && L.push(t[2]);\n            let q = D[2], Q = L[0].dims[L[0].dims.length - 1];\n            q < 8 && Q < 8 ? e.compute(Qr(L, r, i, D, o, n), { inputs: L }) : e.compute(Jt(L, r, i, D, o, n), { inputs: L });\n            return;\n          }\n          let S = true, $ = e.kernelCustomData.wT ?? e.compute(Ee(t[1], ho), { inputs: [1], outputs: [r.wIsConst ? -2 : -1] })[0];\n          r.wIsConst && !e.kernelCustomData.wT && (e.kernelCustomData.wT = $);\n          let v = [t[0], $];\n          a && v.push(t[2]);\n          let x = o ? f * b : g, T = o ? g : f * b, E = p * m * c;\n          e.compute(Uu(v, r, i, x, T, E, a, S, n), { inputs: v });\n        }, yf = (e, t) => {\n          let r = t.format === \"NHWC\", n = [e.inputs[0].reshape(r ? [e.inputs[0].dims[0], 1, e.inputs[0].dims[1], e.inputs[0].dims[2]] : [e.inputs[0].dims[0], e.inputs[0].dims[1], 1, e.inputs[0].dims[2]]), e.inputs[1].reshape([e.inputs[1].dims[0], e.inputs[1].dims[1], 1, e.inputs[1].dims[2]])];\n          e.inputs.length === 3 && n.push(e.inputs[2]);\n          let o = [0, t.pads[0], 0, t.pads[1]], i = [1].concat(t.strides), a = [1].concat(t.dilations), u = [1].concat(t.kernelShape), d = go({ ...t, pads: o, strides: i, dilations: a, kernelShape: u }, n);\n          Ku(e, n, d, (c) => r ? [c[0], c[2], c[3]] : [c[0], c[1], c[3]]);\n        }, _f = (e, t, r) => {\n          let n = r.format === \"NHWC\" ? \"channelsLast\" : \"channelsFirst\", o = go(r, t), i = r.autoPad === \"NOTSET\" ? r.pads : r.autoPad, a = Lu(t[0].dims, t[1].dims, r.strides, r.dilations, i, false, n);\n          e.compute(Gu(t, o, a.outShape, [a.filterDepth, a.filterHeight, a.filterWidth], [a.padInfo.front, a.padInfo.top, a.padInfo.left], n));\n        }, yo = (e, t) => {\n          if (bf(e.inputs, t), e.inputs[0].dims.length === 3) yf(e, t);\n          else if (e.inputs[0].dims.length === 5) _f(e, e.inputs, t);\n          else {\n            let r = go(t, e.inputs);\n            Ku(e, e.inputs, r);\n          }\n        };\n      });\n      Yu = U(() => {\n        \"use strict\";\n        ee();\n        Xe();\n        ne();\n        ie();\n        Qu = (e, t, r) => {\n          let n = e.length > 2, o = t.outputShape, i = t.format === \"NHWC\", a = t.group, u = e[1].dims, d = u[2] / a, c = u[3], p = i ? ce(d) : 1, m = i && c === 1 && d >= 4, f = m ? Math.floor(d / 4) * 4 : Math.floor(d / p) * p, b = d - f, g = i ? ce(c) : 1, _ = i ? c === 1 ? p : g : 1, S = k.size(o) / g, $ = [Math.ceil(S / 64), 1, 1];\n          se(\"verbose\", () => `[conv2d_backprop_webgpu] dispatch = ${$}`);\n          let v = [\"rank\", \"rank\"], x = [t.strides[0], t.strides[1]], T = [t.kernelShape[i ? 1 : 2], t.kernelShape[i ? 2 : 3]], E = [t.dilations[0], t.dilations[1]], I = [T[0] + (t.dilations[0] <= 1 ? 0 : (t.kernelShape[i ? 1 : 2] - 1) * (t.dilations[0] - 1)), T[1] + (t.dilations[1] <= 1 ? 0 : (t.kernelShape[i ? 2 : 3] - 1) * (t.dilations[1] - 1))], z = [I[0] - 1 - Math.floor((t.pads[0] + t.pads[2]) / 2), I[1] - 1 - Math.floor((t.pads[1] + t.pads[3]) / 2)], O = [{ type: 12, data: S }, { type: 12, data: x }, { type: 12, data: T }, { type: 12, data: E }, { type: 12, data: I }, { type: 6, data: z }, { type: 12, data: f }, { type: 12, data: d }, { type: 12, data: c }, ...N(e[0].dims, e[1].dims)];\n          n && (O.push(...N(e[2].dims)), v.push(\"rank\")), O.push(...N(o));\n          let D = (L) => {\n            let q = [{ name: \"output_size\", type: \"u32\" }, { name: \"strides\", type: \"u32\", length: x.length }, { name: \"filter_dims\", type: \"u32\", length: T.length }, { name: \"dilations\", type: \"u32\", length: T.length }, { name: \"effective_filter_dims\", type: \"u32\", length: I.length }, { name: \"pads\", type: \"i32\", length: z.length }, { name: \"input_channels_per_group_int\", type: \"u32\" }, { name: \"input_channels_per_group\", type: \"u32\" }, { name: \"output_channels_per_group\", type: \"u32\" }], Q = be(e[0].dataType), W = i ? 1 : 2, Z = i ? 2 : 3, we = i ? 3 : 1, H = P(\"W\", e[1].dataType, e[1].dims.length, _), j = P(\"Dy\", e[0].dataType, e[0].dims.length, p), te = [j, H];\n            n && te.push(P(\"bias\", e[2].dataType, [o[we]].length, g));\n            let X = M(\"result\", e[0].dataType, o.length, g), ue = () => {\n              let re = \"\";\n              if (m) p === 4 ? re += `\n        let xValue = ${j.getByOffset(\"x_offset\")};\n        let wValue = ${H.getByOffset(\"w_offset\")};\n        dotProd = dotProd + dot(xValue, wValue);\n        x_offset += 1u;\n        w_offset += 1u;` : p === 2 ? re += `\n          dotProd = dotProd + dot(vec4<${Q}>(${j.getByOffset(\"x_offset\")}, ${j.getByOffset(\"x_offset + 1u\")}), vec4<${Q}>(${H.getByOffset(\"w_offset\")}, ${H.getByOffset(\"w_offset + 1u\")}));\n          x_offset += 2u;\n          w_offset += 2u;` : p === 1 && (re += `\n          dotProd = dotProd + dot(vec4<${Q}>(${j.getByOffset(\"x_offset\")}, ${j.getByOffset(\"x_offset + 1u\")}, ${j.getByOffset(\"x_offset + 2u\")}, ${j.getByOffset(\"x_offset + 3u\")}), vec4<${Q}>(${H.getByOffset(\"w_offset\")}, ${H.getByOffset(\"w_offset + 1u\")}, ${H.getByOffset(\"w_offset + 2u\")}, ${H.getByOffset(\"w_offset + 3u\")}));\n          x_offset += 4u;\n          w_offset += 4u;`);\n              else if (re += `\n                  let xValue = ${i ? j.getByOffset(`${j.indicesToOffset(`${j.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${p}`) : j.get(\"batch\", \"inputChannel\", \"idyR\", \"idyC\")};\n        `, p === 1) re += `\n          let w_offset = ${H.indicesToOffset(`${H.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};\n          let wValue = ${H.getByOffset(`w_offset / ${_}`)};\n          dotProd = dotProd + xValue * wValue;`;\n              else for (let C = 0; C < p; C++) re += `\n            let wValue${C} = ${H.getByOffset(`${H.indicesToOffset(`${H.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel + ${C}, wOutChannel)`)} / ${_}`)};\n            dotProd = dotProd + xValue[${C}] * wValue${C};`;\n              return re;\n            }, he = () => {\n              if (b === 0) return \"\";\n              if (!m) throw new Error(`packInputAs4 ${m} is not true.`);\n              let re = \"\";\n              if (p === 1) {\n                re += \"dotProd = dotProd\";\n                for (let C = 0; C < b; C++) re += `\n            + ${j.getByOffset(`x_offset + ${C}`)} * ${H.getByOffset(`w_offset + ${C}`)}`;\n                re += \";\";\n              } else if (p === 2) {\n                if (b !== 2) throw new Error(`Invalid inputChannelsRemainder ${b}.`);\n                re += `\n          let xValue = ${j.getByOffset(\"x_offset\")};\n          let wValue = ${H.getByOffset(\"w_offset\")};\n          dotProd = dotProd + dot(xValue, wValue);`;\n              }\n              return re;\n            }, ye = `\n            let outputIndices = ${X.offsetToIndices(`global_idx * ${g}`)};\n            let batch = ${X.indicesGet(\"outputIndices\", 0)};\n            let d1 = ${X.indicesGet(\"outputIndices\", we)};\n            let r = ${X.indicesGet(\"outputIndices\", W)};\n            let c = ${X.indicesGet(\"outputIndices\", Z)};\n            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;\n            let dyRCorner = dyCorner.x;\n            let dyCCorner = dyCorner.y;\n            let groupId = d1 / uniforms.output_channels_per_group;\n            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;\n            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n            // ? = to be determined. : = across all values in that axis.\n            var dotProd = ${X.type.value}(0.0);\n            var wR: u32 = 0;\n            if (uniforms.dilations.x == 1) {\n              // Minimum wR >= 0 that satisfies (dyRCorner + wR) % (uniforms.strides.x) == 0\n              wR = u32(((dyRCorner + i32(uniforms.strides.x) - 1) / i32(uniforms.strides.x)) * i32(uniforms.strides.x) - dyRCorner);\n            }\n            for (; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {\n              if (wR % uniforms.dilations.x != 0) {\n                continue;\n              }\n              let dyR = (${Q}(dyRCorner) + ${Q}(wR)) / ${Q}(uniforms.strides[0]);\n              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;\n              if (dyR < 0.0 || dyR >= ${Q}(uniforms.Dy_shape[${W}]) || fract(dyR) > 0.0 ||\n                  wRPerm < 0) {\n                continue;\n              }\n              let idyR: u32 = u32(dyR);\n              var wC: u32 = 0;\n              if (uniforms.dilations.y == 1) {\n                // Minimum wC >= 0 that satisfies (dyCCorner + wC) % (uniforms.strides.y) == 0\n                wC = u32(((dyCCorner + i32(uniforms.strides.y) - 1) / i32(uniforms.strides.y)) * i32(uniforms.strides.y) - dyCCorner);\n              }\n              for (; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {\n                if (wC % uniforms.dilations.y != 0) {\n                  continue;\n                }\n                let dyC = (${Q}(dyCCorner) + ${Q}(wC)) / ${Q}(uniforms.strides.y);\n                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;\n                if (dyC < 0.0 || dyC >= ${Q}(uniforms.Dy_shape[${Z}]) ||\n                    fract(dyC) > 0.0 || wCPerm < 0) {\n                  continue;\n                }\n                let idyC: u32 = u32(dyC);\n                var inputChannel = groupId * uniforms.input_channels_per_group;\n                ${m ? `\n                var x_offset = ${j.indicesToOffset(`${j.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${p};\n                var w_offset = ${H.indicesToOffset(`${H.type.indices}(wRPerm, wCPerm, inputChannel, wOutChannel)`)} / ${_};\n                  ` : \"\"}\n                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group_int; d2 = d2 + ${m ? 4 : p}) {\n                  ${ue()}\n                  inputChannel = inputChannel + ${m ? 4 : p};\n                }\n                ${he()}\n                wC = wC + uniforms.strides.y - 1;\n              }\n              wR = wR + uniforms.strides[0] - 1;\n            }\n            let value = dotProd${n ? ` + bias[d1 / ${g}]` : \"\"};\n            ${X.setByOffset(\"global_idx\", \"value\")};\n          `;\n            return `\n    ${L.registerUniforms(q).declareVariables(...te, X)}\n      ${L.mainStart()}\n      ${L.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")};\n    ${ye}}`;\n          };\n          return { name: \"ConvTranspose2D\", shaderCache: { hint: `${t.cacheKey};${p}${_}${g}${m}${b}`, inputDependencies: v }, getRunData: () => ({ dispatchGroup: { x: $[0], y: $[1], z: $[2] }, outputs: [{ dims: r ? r(o) : o, dataType: e[0].dataType }], programUniforms: O }), getShaderSource: D };\n        };\n      });\n      rd = U(() => {\n        \"use strict\";\n        Yu();\n        bt();\n        st();\n        wf = (e, t, r, n, o, i) => (e - 1) * t + r + (n - 1) * o + 1 - i, vf = (e, t, r, n, o) => {\n          let i = Math.floor(e / 2);\n          t === \"SAME_UPPER\" ? (r[n] = i, r[o] = e - i) : t === \"SAME_LOWER\" && (r[n] = e - i, r[o] = i);\n        }, $f = (e, t, r, n, o, i, a, u, d, c) => {\n          let p = e.length - 2, m = c.length === 0;\n          d.length < p && d.push(...Array(p - d.length).fill(0));\n          let f = e[0], b = t[u ? 3 : 1] * o;\n          for (let g = 0, _ = e.length - p - (u ? 1 : 0); g < p; ++g, ++_) {\n            let S = e[_], $ = m ? S * a[g] : c[g], v = wf(S, a[g], i[g], t[_], r[g], $);\n            vf(v, n, i, g, g + p), m && c.push(a[g] * (S - 1) + d[g] + (t[_] - 1) * r[g] + 1 - i[g] - i[g + p]);\n          }\n          c.splice(0, 0, f), c.splice(u ? 3 : 1, 0, b);\n        }, Xu = (e, t) => {\n          let r = e.kernelShape.slice();\n          if (e.kernelShape.length === 0 || e.kernelShape.reduce((m, f) => m * f, 1) === 0) {\n            r.length = 0;\n            for (let m = 2; m < t[1].dims.length; ++m) r.push(t[1].dims[m]);\n          }\n          let n = e.format === \"NHWC\";\n          r.splice(0, 0, t[1].dims[0]), r.splice(n ? 3 : 1, 0, t[1].dims[1]);\n          let o = e.pads.slice(), i = e.outputShape.slice(), a = e.outputPadding.slice(), u = t[0].dims, d = e.dilations.slice();\n          if (d.reduce((m, f) => m + f, 0) === 0) {\n            let m = t[0].dims.length - 2;\n            d = new Array(m).fill(1);\n          }\n          let c = e.strides.slice();\n          if (c.reduce((m, f) => m + f, 0) === 0) {\n            let m = t[0].dims.length - 2;\n            c = new Array(m).fill(1);\n          }\n          $f(u, r, d, e.autoPad, e.group, o, c, n, a, i);\n          let p = Object.assign({}, e);\n          return Object.assign(p, { kernelShape: r, pads: o, outputPadding: a, outputShape: i, dilations: d, strides: c }), p;\n        }, Ju = (e) => {\n          let t = Kr(e), r = e.format, n = [\"NOTSET\", \"VALID\", \"SAME_UPPER\", \"SAME_LOWER\"][typeof e.autoPad > \"u\" ? 0 : e.autoPad], o = e.dilations, i = e.group, a = e.kernelShape, u = e.pads, d = e.strides, c = e.wIsConst(), p = e.outputPadding, m = e.outputShape;\n          return { autoPad: n, format: r, dilations: o, group: i, kernelShape: a, outputPadding: p, outputShape: m, pads: u, strides: d, wIsConst: c, ...t, cacheKey: `${e.format};${t.activation};` };\n        }, xf = (e, t) => {\n          if (!e || e.length !== 2 && e.length !== 3) throw new Error(\"Conv requires 2 or 3 inputs\");\n          if (e[0].dims.length !== 4 && e[0].dims.length !== 3) throw new Error(\"currently only support 2-dimensional conv\");\n          if (e[0].dims.length !== e[1].dims.length) throw new Error(\"filter does not have same dimension as input\");\n          let r = e[0].dims[t.format === \"NHWC\" ? e[0].dims.length - 1 : 1], n = e[1].dims[0];\n          if (r !== n) throw new Error(\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\");\n          let o = e[1].dims[1] * t.group;\n          if (e.length === 3 && (e[2].dims.length !== 1 || e[2].dims[0] !== o)) throw new Error(\"invalid bias\");\n          let i = e[0].dims.length - 2;\n          if (t.dilations.reduce((p, m) => p + m, 0) > 0 && t.dilations.length !== i) throw new Error(`dilations should be ${i}D`);\n          if (t.strides.reduce((p, m) => p + m, 0) > 0 && t.strides.length !== i) throw new Error(`strides should be ${i}D`);\n          if (t.pads.reduce((p, m) => p + m, 0) > 0 && t.pads.length !== i * 2) throw new Error(`pads should be ${i * 2}D`);\n          if (t.outputPadding.length !== i && t.outputPadding.length !== 0) throw new Error(`output_padding should be ${i}D`);\n          if (t.kernelShape.reduce((p, m) => p + m, 0) > 0 && t.kernelShape.length !== 0 && t.kernelShape.length !== e[1].dims.length - 2) throw new Error(\"invalid kernel shape\");\n          if (t.outputShape.length !== 0 && t.outputShape.length !== e[0].dims.length - 2) throw new Error(\"invalid output shape\");\n        }, ed = (e, t, r, n) => {\n          let o = e.kernelCustomData.wT ?? e.compute(Ee(t[1], [2, 3, 0, 1]), { inputs: [1], outputs: [r.wIsConst ? -2 : -1] })[0];\n          r.wIsConst && !e.kernelCustomData.wT && (e.kernelCustomData.wT = o);\n          let i = [t[0], o];\n          t.length === 3 && i.push(t[2]), e.compute(Qu(i, r, n), { inputs: i });\n        }, Sf = (e, t) => {\n          let r = t.format === \"NHWC\", n = [e.inputs[0].reshape(r ? [e.inputs[0].dims[0], 1, e.inputs[0].dims[1], e.inputs[0].dims[2]] : [e.inputs[0].dims[0], e.inputs[0].dims[1], 1, e.inputs[0].dims[2]]), e.inputs[1].reshape([e.inputs[1].dims[0], e.inputs[1].dims[1], 1, e.inputs[1].dims[2]])];\n          e.inputs.length === 3 && n.push(e.inputs[2]);\n          let o = t.kernelShape;\n          (o.length === 0 || o[0] === 0) && (o = [e.inputs[1].dims[2]]);\n          let i = t.dilations;\n          (i.length === 0 || i[0] === 0) && (i = [1]);\n          let a = t.strides;\n          (a.length === 0 || a[0] === 0) && (a = [1]);\n          let u = t.pads;\n          u.length === 0 && (u = [0, 0]), u = [0, u[0], 0, u[1]], a = [1].concat(a), i = [1].concat(i), o = [1].concat(o);\n          let d = t.outputPadding;\n          d = [0].concat(d);\n          let c = Xu({ ...t, pads: u, strides: a, dilations: i, kernelShape: o, outputPadding: d }, n);\n          ed(e, n, c, (p) => r ? [p[0], p[2], p[3]] : [p[0], p[1], p[3]]);\n        }, td = (e, t) => {\n          if (xf(e.inputs, t), e.inputs[0].dims.length === 3) Sf(e, t);\n          else {\n            let r = Xu(t, e.inputs);\n            ed(e, e.inputs, r);\n          }\n        };\n      });\n      id = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        Tf = (e, t, r, n) => {\n          let o = k.size(t), i = t.length, a = P(\"input\", e, i), u = M(\"output\", e, i), d = r.dataType === 6 ? r.getInt32Array()[0] : Number(r.getBigInt64Array()[0]), c = k.normalizeAxis(d, i), p = (m) => {\n            let f = ` i32(${a.indicesGet(\"inputIndices\", \"uniforms.axis\")}) `, b = F(\"uniforms.input_shape\", \"uniforms.axis\", i), g = n.reverse ? f + (n.exclusive ? \" + 1\" : \"\") : \"0\", _ = n.reverse ? b : f + (n.exclusive ? \"\" : \" + 1\");\n            return `\n                ${m.registerUniform(\"outputSize\", \"u32\").registerUniform(\"axis\", \"u32\").declareVariables(a, u)}\n                ${m.mainStart()}\n                  ${m.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n                  var inputIndices = ${u.offsetToIndices(\"global_idx\")};\n                  var sum = ${u.type.value}(0);\n                  let first : i32 = ${g};\n                  let last : i32 = ${_};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${a.indicesSet(\"inputIndices\", \"uniforms.axis\", \"u32(i)\")};\n                    sum = sum + ${a.getByIndices(\"inputIndices\")};\n                  }\n                  ${u.setByOffset(\"global_idx\", \"sum\")};\n                }`;\n          };\n          return { name: \"CumSum\", shaderCache: { hint: n.cacheKey, inputDependencies: [\"rank\"] }, getRunData: () => ({ outputs: [{ dims: t, dataType: e }], dispatchGroup: { x: Math.ceil(o / 64) }, programUniforms: [{ type: 12, data: o }, { type: 12, data: c }, ...N(t, t)] }), getShaderSource: p };\n        }, nd = (e, t) => {\n          let r = e.inputs[0].dims, n = e.inputs[0].dataType, o = e.inputs[1];\n          e.compute(Tf(n, r, o, t), { inputs: [0] });\n        }, od = (e) => {\n          let t = e.exclusive === 1, r = e.reverse === 1;\n          return J({ exclusive: t, reverse: r });\n        };\n      });\n      ud = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        If = (e) => {\n          if (!e || e.length !== 1) throw new Error(\"DepthToSpace requires 1 input.\");\n          if (e[0].dims.length !== 4) throw new Error(\"DepthToSpace requires 4D input.\");\n        }, Cf = (e, t, r, n) => {\n          let o = [];\n          o.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);\n          for (let i = 0; i < t; ++i) o.push(r.indicesSet(\"a\", e[i], `i[${i}]`));\n          return o.push(\"return a;}\"), o.join(`\n`);\n        }, Af = (e, t) => {\n          let r, n, o, i, a, u, d = t.format === \"NHWC\", c = t.blocksize, p = t.mode === \"DCR\";\n          d ? ([r, n, o, i] = e.dims, a = p ? [r, n, o, c, c, i / c ** 2] : [r, n, o, i / c ** 2, c, c], u = p ? [0, 1, 3, 2, 4, 5] : [0, 1, 4, 2, 5, 3]) : ([r, n, o, i] = [e.dims[0], e.dims[2], e.dims[3], e.dims[1]], a = p ? [r, c, c, i / c ** 2, n, o] : [r, i / c ** 2, c, c, n, o], u = p ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3]);\n          let m = e.reshape(a), f = m.dims.length, b = e.dataType, g = P(\"a\", b, f), _ = M(\"output\", b, f), S = ($) => `\n  ${$.registerUniform(\"output_size\", \"u32\").declareVariables(g, _)}\n\n  ${Cf(u, f, g, _)}\n\n  ${$.mainStart()}\n    ${$.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n\n    let indices = ${_.offsetToIndices(\"global_idx\")};\n    let aIndices = perm(indices);\n\n    ${_.setByOffset(\"global_idx\", g.getByIndices(\"aIndices\"))}\n  }`;\n          return { name: \"DepthToSpace\", shaderCache: { hint: `${e.dims};${t.blocksize};${t.mode}`, inputDependencies: [\"rank\"] }, getRunData: ($) => {\n            let v = d ? [r, n * c, o * c, i / c ** 2] : [r, i / c ** 2, n * c, o * c], x = k.size(v), T = m.dims, E = k.sortBasedOnPerm(T, u);\n            return { outputs: [{ dims: v, dataType: $[0].dataType }], dispatchGroup: { x: Math.ceil(x / 64) }, programUniforms: [{ type: 12, data: x }, ...N(T, E)] };\n          }, getShaderSource: S };\n        }, ad = (e, t) => {\n          If(e.inputs), e.compute(Af(e.inputs[0], t));\n        }, sd = (e) => J({ blocksize: e.blocksize, mode: e.mode, format: e.format });\n      });\n      md = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        _o = \"[a-zA-Z]|\\\\.\\\\.\\\\.\", en = \"(\" + _o + \")+\", dd = \"^\" + en + \"$\", Ef = \"(\" + en + \",)*\" + en, kf = \"^\" + Ef + \"$\", wo = class {\n          constructor(t = -1) {\n            this.symbolToIndices = /* @__PURE__ */ new Map(), this.inputIndex = t;\n          }\n          addSymbol(t, r) {\n            let n = this.symbolToIndices.get(t);\n            n === void 0 ? n = [r] : n.push(r), this.symbolToIndices.set(t, n);\n          }\n        }, vo = class {\n          constructor(t, r) {\n            this.equation = r;\n            this.hasEllipsis = false, this.symbolToInfo = /* @__PURE__ */ new Map(), this.lhs = new Array(), this.outputDims = [];\n            let [n, o] = r.includes(\"->\") ? r.split(\"->\", 2) : [r, \"\"];\n            if (!n.match(RegExp(kf))) throw new Error(\"Invalid LHS term\");\n            if (n.split(\",\").forEach((u, d) => {\n              let c = t[d].dims.slice();\n              if (!u.match(RegExp(dd))) throw new Error(\"Invalid LHS term\");\n              let p = this.processTerm(u, true, c, d);\n              this.lhs.push(p);\n            }), o === \"\") o += [...this.symbolToInfo.entries()].filter(([u, d]) => d.count === 1 || u === \"...\").map(([u]) => u).join(\"\");\n            else if (!o.match(RegExp(en))) throw new Error(\"Invalid RHS\");\n            o.match(RegExp(_o, \"g\"))?.forEach((u) => {\n              if (u === \"...\") this.outputDims = this.outputDims.concat(this.ellipsisDims);\n              else {\n                let d = this.symbolToInfo.get(u);\n                if (d === void 0) throw new Error(\"Invalid RHS symbol\");\n                this.outputDims.push(d.dimValue);\n              }\n            }), this.rhs = this.processTerm(o, false, this.outputDims);\n          }\n          addSymbol(t, r, n) {\n            let o = this.symbolToInfo.get(t);\n            if (o !== void 0) {\n              if (o.dimValue !== r && o.count !== 1) throw new Error(\"Dimension mismatch\");\n              o.count++, o.inputIndices.push(n);\n            } else o = { count: 1, dimValue: r, inputIndices: [n] };\n            this.symbolToInfo.set(t, o);\n          }\n          processTerm(t, r, n, o = -1) {\n            let i = n.length, a = false, u = [], d = 0;\n            if (!t.match(RegExp(dd)) && !r && t !== \"\") throw new Error(\"Invalid LHS term\");\n            let c = t.match(RegExp(_o, \"g\")), p = new wo(o);\n            return c?.forEach((m, f) => {\n              if (m === \"...\") {\n                if (a) throw new Error(\"Only one ellipsis is allowed per input term\");\n                a = true;\n                let b = i - c.length + 1;\n                if (b < 0) throw new Error(\"Ellipsis out of bounds\");\n                if (u = n.slice(d, d + b), this.hasEllipsis) {\n                  if (this.ellipsisDims.length !== u.length || this.ellipsisDims.toString() !== u.toString()) throw new Error(\"Ellipsis dimensions mismatch\");\n                } else if (r) this.hasEllipsis = true, this.ellipsisDims = u;\n                else throw new Error(\"Ellipsis must be specified in the LHS\");\n                for (let g = 0; g < u.length; g++) {\n                  let _ = String.fromCharCode(48 + g);\n                  p.addSymbol(_, f + g), this.addSymbol(_, n[d++], o);\n                }\n              } else p.addSymbol(m, f + (this.hasEllipsis ? this.ellipsisDims.length - 1 : 0)), this.addSymbol(m, n[d++], o);\n            }), p;\n          }\n        }, ld = (e) => e + \"_max\", Pf = (e, t, r, n) => {\n          let i = e.map((p) => p.length).map((p, m) => P(`input${m}`, t, p)), a = k.size(n), u = M(\"output\", t, n.length), d = [...r.symbolToInfo.keys()].filter((p) => !r.rhs.symbolToIndices.has(p)), c = (p) => {\n            let m = [], f = \"var prod = 1.0;\", b = \"var sum = 0.0;\", g = \"sum += prod;\", _ = [], S = [], $ = [], v = [], x = r.symbolToInfo.size === r.rhs.symbolToIndices.size;\n            r.symbolToInfo.forEach((E, I) => {\n              if (r.rhs.symbolToIndices.has(I)) {\n                let z = r.rhs.symbolToIndices.get(I)?.[0];\n                z !== void 0 && r.lhs.forEach((O, D) => {\n                  if (E.inputIndices.includes(D)) {\n                    let L = O.symbolToIndices.get(I);\n                    if (L === void 0) throw new Error(\"Invalid symbol error\");\n                    L.forEach((q) => {\n                      m.push(`${i[D].indicesSet(`input${D}Indices`, q, u.indicesGet(\"outputIndices\", z))}`);\n                    });\n                  }\n                });\n              } else r.lhs.forEach((z, O) => {\n                if (E.inputIndices.includes(O)) {\n                  let D = z.symbolToIndices.get(I);\n                  if (D === void 0) throw new Error(\"Invalid symbol error\");\n                  D.forEach((L) => {\n                    _.push(`${i[O].indicesSet(`input${O}Indices`, L, `${I}`)}`);\n                  }), v.push(`prod *= ${i[O].getByIndices(`input${O}Indices`)};`);\n                }\n              }), S.push(`for(var ${I}: u32 = 0; ${I} < uniforms.${ld(I)}; ${I}++) {`), $.push(\"}\");\n            });\n            let T = x ? [...m, `let sum = ${i.map((E, I) => E.getByIndices(`input${I}Indices`)).join(\" * \")};`] : [...m, b, ...S, ..._, f, ...v, g, ...$];\n            return `\n            ${p.registerUniforms(d.map((E) => ({ name: `${ld(E)}`, type: \"u32\" }))).registerUniform(\"outputSize\", \"u32\").declareVariables(...i, u)}\n\n            ${p.mainStart()}\n            ${p.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n            var outputIndices = ${u.offsetToIndices(\"global_idx\")};\n            ${i.map((E, I) => `var input${I}Indices: ${i[I].type.indices};`).join(`\n`)}\n            ${T.join(`\n`)};\n            ${u.setByOffset(\"global_idx\", \"sum\")};\n          }`;\n          };\n          return { name: \"Einsum\", shaderCache: { hint: r.equation, inputDependencies: e.map(() => \"rank\") }, getRunData: () => {\n            let p = d.filter((f) => r.symbolToInfo.has(f)).map((f) => ({ type: 12, data: r.symbolToInfo.get(f)?.dimValue || 0 }));\n            p.push({ type: 12, data: a });\n            let m = e.map((f, b) => [...N(f)]).reduce((f, b) => f.concat(b), p);\n            return m.push(...N(n)), { outputs: [{ dims: n, dataType: t }], dispatchGroup: { x: Math.ceil(a / 64) }, programUniforms: m };\n          }, getShaderSource: c };\n        }, cd = (e, t) => {\n          let r = new vo(e.inputs, t.equation), n = r.outputDims, o = e.inputs.map((i, a) => i.dims);\n          e.compute(Pf(o, e.inputs[0].dataType, r, n));\n        }, pd = (e) => {\n          let t = e.equation.replace(/\\s+/g, \"\");\n          return J({ equation: t });\n        };\n      });\n      gd = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        ie();\n        zf = (e) => {\n          if (!e || e.length !== 2) throw new Error(\"Expand requires 2 input.\");\n          let t = e[0].dims, r = Array.from(e[1].getBigInt64Array(), Number), n = r.length < t.length ? 0 : r.length - t.length, o = t.length < r.length ? 0 : t.length - r.length;\n          for (; n < r.length && o < t.length; ++n, ++o) if (r[n] !== t[o] && r[n] !== 1 && t[o] !== 1) throw new Error(\"Expand requires shape to be broadcastable to input\");\n        }, fd = (e, t) => {\n          let r = e.length - t.length, n = [];\n          for (let o = 0; o < r; ++o) n.push(e[o]);\n          for (let o = 0; o < t.length; ++o) n.push(t[o] === 1 ? e[o + r] : t[o]);\n          return n;\n        }, Of = (e, t) => e.length > t.length ? fd(e, t) : fd(t, e), Bf = (e) => {\n          let t = e[0].dims, r = Array.from(e[1].getBigInt64Array(), Number), n = Of(t, r), o = e[0].dataType, i = o === 9 || k.size(t) === 1, a = o === 9 || t.length > 0 && t[t.length - 1] % 4 === 0 ? 4 : 1, u = i || n.length > 0 && n[n.length - 1] % 4 === 0 ? 4 : 1, d = Math.ceil(k.size(n) / u), c = (m) => {\n            let f = P(\"input\", o, t.length, a), b = M(\"output\", o, n.length, u), g;\n            if (o === 9) {\n              let _ = (S, $, v = \"\") => `\n          let outputIndices${$} = ${b.offsetToIndices(`outputOffset + ${$}u`)};\n          let offset${$} = ${f.broadcastedIndicesToOffset(`outputIndices${$}`, b)};\n          let index${$} = offset${$} / 4u;\n          let component${$} = offset${$} % 4u;\n          ${S}[${$}] = ${v}(${f.getByOffset(`index${$}`)}[component${$}]);\n        `;\n              g = `\n        let outputOffset = global_idx * ${u};\n        var data = vec4<u32>(0);\n        ${_(\"data\", 0, \"u32\")}\n        ${_(\"data\", 1, \"u32\")}\n        ${_(\"data\", 2, \"u32\")}\n        ${_(\"data\", 3, \"u32\")}\n        ${b.setByOffset(\"global_idx\", \"data\")}\n      }`;\n            } else g = `\n        let outputIndices = ${b.offsetToIndices(`global_idx * ${u}`)};\n        let inputOffset = ${f.broadcastedIndicesToOffset(\"outputIndices\", b)};\n        let data = ${b.type.value}(${f.getByOffset(`inputOffset / ${a}`)});\n        ${b.setByOffset(\"global_idx\", \"data\")}\n      }`;\n            return `\n    ${m.registerUniform(\"vec_size\", \"u32\").declareVariables(f, b)}\n    ${m.mainStart()}\n    ${m.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.vec_size\")}\n    ${g}`;\n          }, p = [{ type: 12, data: d }, ...N(t, n)];\n          return { name: \"Expand\", shaderCache: { hint: `${n.length};${a}${u}`, inputDependencies: [\"rank\"] }, getShaderSource: c, getRunData: () => ({ outputs: [{ dims: n, dataType: e[0].dataType }], dispatchGroup: { x: Math.ceil(d / 64) }, programUniforms: p }) };\n        }, hd = (e) => {\n          zf(e.inputs), e.compute(Bf(e.inputs), { inputs: [0] });\n        };\n      });\n      yd = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        ie();\n        jr();\n        Df = (e) => {\n          let t = e[0].dataType, r = k.size(e[0].dims), n = k.size(e[1].dims), o = n % 4 === 0, i = (a) => {\n            let u = P(\"x\", t, [1], 4), d = P(\"bias\", t, [1], 4), c = M(\"y\", t, [1], 4), p = [{ name: \"output_vec_size\", type: \"u32\" }, { name: \"bias_size\", type: \"u32\" }], m = (b) => `\n      let bias${b}_offset: u32 = (global_idx * 4 + ${b}) % uniforms.bias_size;\n      let bias${b} = ${d.getByOffset(`bias${b}_offset / 4`)}[bias${b}_offset % 4];`, f = o ? `\n      let bias = ${d.getByOffset(\"global_idx % (uniforms.bias_size / 4)\")};` : `${m(0)}${m(1)}${m(2)}${m(3)}\n      let bias = ${u.type.value}(bias0, bias1, bias2, bias3);`;\n            return `${a.registerUniforms(p).declareVariables(u, d, c)}\n\n    ${co(Ae(t))}\n\n    ${a.mainStart(It)}\n      ${a.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_vec_size\")}\n\n      let x = ${u.getByOffset(\"global_idx\")};\n      ${f}\n      let x_in = x + bias;\n      ${c.setByOffset(\"global_idx\", po(\"x_in\"))}\n    }`;\n          };\n          return { name: \"FastGeluWithBias\", shaderCache: { hint: `${o}`, inputDependencies: [\"type\", \"type\"] }, getShaderSource: i, getRunData: (a) => ({ outputs: [{ dims: a[0].dims, dataType: a[0].dataType }], programUniforms: [{ type: 12, data: Math.ceil(r / 4) }, { type: 12, data: n }], dispatchGroup: { x: Math.ceil(r / It / 4) } }) };\n        }, bd = (e) => {\n          e.inputs.length < 2 || k.size(e.inputs[1].dims) === 0 ? mu(e) : e.compute(Df(e.inputs));\n        };\n      });\n      vd = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        Mf = (e) => {\n          if (!e || e.length !== 2) throw new Error(\"Gather requires 2 inputs.\");\n        }, Rf = (e, t) => {\n          let r = e[0].dims, n = e[1].dims, o = r.length, i = k.normalizeAxis(t.axis, o), a = r.slice(0);\n          a.splice(i, 1, ...n);\n          let u = r[i], d = e[0].dataType === 9 ? 4 : 1, c = Math.ceil(k.size(a) / d), p = [{ type: 12, data: c }, { type: 6, data: u }, { type: 12, data: i }, ...N(e[0].dims, e[1].dims, a)], m = (f) => {\n            let b = P(\"data\", e[0].dataType, e[0].dims.length, d), g = P(\"inputIndices\", e[1].dataType, e[1].dims.length), _ = M(\"output\", e[0].dataType, a.length, d), S = (v) => {\n              let x = n.length, T = `var indicesIndices${v}  = ${g.type.indices}(0);`;\n              for (let E = 0; E < x; E++) T += `${x > 1 ? `indicesIndices${v}[${E}]` : `indicesIndices${v}`} = ${a.length > 1 ? `outputIndices${v}[uniforms.axis + ${E}]` : `outputIndices${v}`};`;\n              T += `\n          var idx${v} = ${g.getByIndices(`indicesIndices${v}`)};\n          if (idx${v} < 0) {\n            idx${v} = idx${v} + uniforms.axisDimLimit;\n          }\n          var dataIndices${v} : ${b.type.indices};\n        `;\n              for (let E = 0, I = 0; E < o; E++) E === i ? (T += `${o > 1 ? `dataIndices${v}[${E}]` : `dataIndices${v}`} = u32(idx${v});`, I += x) : (T += `${o > 1 ? `dataIndices${v}[${E}]` : `dataIndices${v}`} = ${a.length > 1 ? `outputIndices${v}[${I}]` : `outputIndices${v}`};`, I++);\n              return T;\n            }, $;\n            if (e[0].dataType === 9) {\n              let v = (x, T, E = \"\") => `\n          let outputIndices${T} = ${_.offsetToIndices(`outputOffset + ${T}u`)};\n          ${S(T)};\n          let offset${T} = ${b.indicesToOffset(`dataIndices${T}`)};\n          let index${T} = offset${T} / 4u;\n          let component${T} = offset${T} % 4u;\n          ${x}[${T}] = ${E}(${b.getByOffset(`index${T}`)}[component${T}]);\n        `;\n              $ = `\n        let outputOffset = global_idx * ${d};\n        var value = vec4<u32>(0);\n        ${v(\"value\", 0, \"u32\")}\n        ${v(\"value\", 1, \"u32\")}\n        ${v(\"value\", 2, \"u32\")}\n        ${v(\"value\", 3, \"u32\")}\n        ${_.setByOffset(\"global_idx\", \"value\")}\n      `;\n            } else $ = `\n      let outputIndices = ${_.offsetToIndices(\"global_idx\")};\n      ${S(\"\")};\n      let value = ${b.getByIndices(\"dataIndices\")};\n      ${_.setByOffset(\"global_idx\", \"value\")};\n      `;\n            return `\n      ${f.registerUniform(\"outputSize\", \"u32\").registerUniform(\"axisDimLimit\", \"i32\").registerUniform(\"axis\", \"u32\").declareVariables(b, g, _)}\n      ${f.mainStart()}\n        ${f.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n        ${$}\n      }`;\n          };\n          return { name: \"Gather\", shaderCache: { hint: t.cacheKey, inputDependencies: [\"rank\", \"rank\"] }, getRunData: () => ({ outputs: [{ dims: a, dataType: e[0].dataType }], dispatchGroup: { x: Math.ceil(c / 64) }, programUniforms: p }), getShaderSource: m };\n        }, _d = (e) => J({ axis: e.axis }), wd = (e, t) => {\n          let r = e.inputs;\n          Mf(r), e.compute(Rf(e.inputs, t));\n        };\n      });\n      Sd = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        ie();\n        Uf = (e, t, r, n, o, i, a, u, d) => {\n          let c = [{ type: 12, data: i }, { type: 12, data: n }, { type: 12, data: o }, { type: 12, data: r }, { type: 12, data: a }, { type: 12, data: u }, { type: 12, data: d }], p = [i];\n          c.push(...N(t.dims, p));\n          let m = (f) => {\n            let b = P(\"indices_data\", t.dataType, t.dims.length), g = M(\"input_slice_offsets_data\", 12, 1, 1), _ = [b, g], S = [{ name: \"output_size\", type: \"u32\" }, { name: \"batch_dims\", type: \"u32\" }, { name: \"input_dims\", type: \"u32\", length: o.length }, { name: \"sizes_from_slice_dims_data\", type: \"u32\", length: r.length }, { name: \"num_slices_per_batch\", type: \"u32\" }, { name: \"input_batch_stride\", type: \"u32\" }, { name: \"num_slice_dims\", type: \"u32\" }];\n            return `\n  ${f.registerUniforms(S).declareVariables(..._)}\n  ${f.mainStart()}\n    ${f.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n    let batch_idx = global_idx / uniforms.num_slices_per_batch;\n    let base_offset = batch_idx * uniforms.input_batch_stride;\n\n    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;\n    var relative_slice_offset = 0;\n    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {\n      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);\n      let input_dim_idx = uniforms.batch_dims + dim_idx;\n      if (index < 0) {\n        ${o.length === 1 ? \"index += i32(uniforms.input_dims);\" : \"index += i32(uniforms.input_dims[input_dim_idx]);\"}\n      }\n      ${r.length === 1 ? \"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);\" : \"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);\"}\n    }\n\n    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);\n  }`;\n          };\n          return e.compute({ name: \"computeSliceOffsets\", shaderCache: { hint: `${o.length}_${r.length}`, inputDependencies: [\"rank\"] }, getRunData: () => ({ outputs: [{ dims: p, dataType: e.inputs[1].dataType }], dispatchGroup: { x: Math.ceil(i / 64) }, programUniforms: c }), getShaderSource: m }, { inputs: [t], outputs: [-1] })[0];\n        }, $d = (e, t) => {\n          let r = e.inputs, n = r[0].dims, o = r[0].dataType, i = r[1].dims, a = i[i.length - 1], u = k.sizeToDimension(i, i.length - 1), d = k.sizeFromDimension(n, t.batchDims + a), c = k.sizeToDimension(n, t.batchDims), p = k.sizeFromDimension(n, t.batchDims), m = u / c, f = new Array(a), b = d;\n          for (let T = 0; T < a; ++T) f[a - 1 - T] = b, b *= n[t.batchDims + a - 1 - T];\n          let g = Uf(e, r[1], f, t.batchDims, n, u, m, p, a), _ = t.batchDims + a;\n          if (_ > n.length) throw new Error(\"last dimension of indices must not be larger than rank of input tensor\");\n          let S = i.slice(0, -1).concat(n.slice(_)), $ = k.size(S), v = [{ type: 12, data: $ }, { type: 12, data: d }, ...N(r[0].dims, g.dims, S)], x = (T) => {\n            let E = P(\"data\", r[0].dataType, r[0].dims.length), I = P(\"slice_offsets\", 12, g.dims.length), z = M(\"output\", r[0].dataType, S.length);\n            return `\n          ${T.registerUniform(\"output_size\", \"u32\").registerUniform(\"slice_size\", \"u32\").declareVariables(E, I, z)}\n            ${T.mainStart()}\n            ${T.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];\n          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];\n        }`;\n          };\n          e.compute({ name: \"GatherND\", shaderCache: { hint: t.cacheKey, inputDependencies: [\"rank\", \"rank\"] }, getRunData: () => ({ outputs: [{ dims: S, dataType: o }], dispatchGroup: { x: Math.ceil($ / 64) }, programUniforms: v }), getShaderSource: x }, { inputs: [r[0], g] });\n        }, xd = (e) => ({ batchDims: e.batch_dims, cacheKey: \"\" });\n      });\n      Cd = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        Nf = (e, t) => {\n          if (e.length < 3 || e.length > 4) throw new Error(\"GatherBlockQuantized requires 3 or 4 inputs.\");\n          let r = k.normalizeAxis(t.quantizeAxis, e[0].dims.length), n = t.blockSize, o = e[0], i = e[2], a = e.length === 4 ? e[3] : void 0;\n          if (i.dims.length !== o.dims.length || !o.dims.map((u, d) => d === r ? Math.ceil(u / n) === i.dims[d] : u === i.dims[d]).reduce((u, d) => u && d, true)) throw new Error(\"Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.\");\n          if (a) {\n            if (a.dataType !== o.dataType) throw new Error(\"Zero point must have the same data type as the input tensor.\");\n            if (a.dims.length !== i.dims.length || !a.dims.map((u, d) => u === i.dims[d]).reduce((u, d) => u && d, true)) throw new Error(\"Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.\");\n          }\n        }, Vf = (e, t) => {\n          let r = e[0].dims, n = e[1].dims, o = r.length, i = k.normalizeAxis(t.gatherAxis, o), a = k.normalizeAxis(t.quantizeAxis, o), u = r.slice(0);\n          u.splice(i, 1, ...n);\n          let d = k.size(u), c = e[2].dataType, m = e[0].dataType === 22, f = [{ type: 12, data: d }, { type: 12, data: a }, { type: 12, data: i }, { type: 12, data: t.blockSize }, ...N(...e.map((g, _) => g.dims), u)], b = (g) => {\n            let _ = P(\"data\", e[0].dataType, e[0].dims.length), S = P(\"inputIndices\", e[1].dataType, e[1].dims.length), $ = P(\"scales\", e[2].dataType, e[2].dims.length), v = e.length > 3 ? P(\"zeroPoint\", e[3].dataType, e[3].dims.length) : void 0, x = M(\"output\", c, u.length), T = [_, S, $];\n            v && T.push(v);\n            let E = [{ name: \"output_size\", type: \"u32\" }, { name: \"quantize_axis\", type: \"u32\" }, { name: \"gather_axis\", type: \"u32\" }, { name: \"block_size\", type: \"u32\" }];\n            return `\n        ${g.registerUniforms(E).declareVariables(...T, x)}\n        ${g.mainStart()}\n        let output_indices = ${x.offsetToIndices(\"global_idx\")};\n        var indices_indices = ${S.type.indices}(0);\n        ${n.length > 1 ? `\n          for (var i: u32 = 0; i < ${n.length}; i++) {\n            let index = ${x.indicesGet(\"output_indices\", \"uniforms.gather_axis + i\")};\n            ${S.indicesSet(\"indices_indices\", \"i\", \"index\")};\n          }` : `indices_indices = ${x.indicesGet(\"output_indices\", \"uniforms.gather_axis\")};`};\n        var data_indices = ${_.type.indices}(0);\n        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {\n          let index = ${x.indicesGet(\"output_indices\", \"i\")};\n          ${_.indicesSet(\"data_indices\", \"i\", \"index\")};\n        }\n        var index_from_indices = ${S.getByIndices(\"indices_indices\")};\n        if (index_from_indices < 0) {\n          index_from_indices += ${r[i]};\n        }\n        ${_.indicesSet(\"data_indices\", \"uniforms.gather_axis\", \"u32(index_from_indices)\")};\n        for (var i = uniforms.gather_axis + 1; i < ${u.length}; i++) {\n          let index = ${x.indicesGet(\"output_indices\", `i + ${n.length} - 1`)};\n          ${_.indicesSet(\"data_indices\", \"i\", \"index\")};\n        }\n        let data_offset = ${_.indicesToOffset(\"data_indices\")};\n        let data_index = data_offset % 8;\n        // Convert 4-bit packed data to 8-bit packed data.\n        let packed_4bit_quantized_data = ${_.getByOffset(\"data_offset / 8\")};\n        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;\n        let quantized_data_vec = ${m ? \"unpack4xI8\" : \"unpack4xU8\"}(u32(packed_8bit_quantized_data));\n        let quantized_data = quantized_data_vec[data_index / 2];\n        var scale_indices = data_indices;\n        let quantize_axis_index = ${$.indicesGet(\"data_indices\", \"uniforms.quantize_axis\")} / uniforms.block_size;\n        ${$.indicesSet(\"scale_indices\", \"uniforms.quantize_axis\", \"quantize_axis_index\")};\n        var scale = ${$.getByIndices(\"scale_indices\")};\n        ${v ? `\n              let zero_point_indices = scale_indices;\n              let zero_point_offset = ${v.indicesToOffset(\"zero_point_indices\")};\n              let zero_point_index = zero_point_offset % 8;\n              let packed_4bit_zero_points = ${v.getByOffset(\"zero_point_offset / 8\")};\n              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;\n              let zero_point_vec = ${m ? \"unpack4xI8\" : \"unpack4xU8\"}(u32(packed_8bit_zero_points));\n              let zero_point = zero_point_vec[zero_point_index / 2];` : \"var zero_point = 0\"};\n        let dequantized_data = ${Ae(c)}(quantized_data - zero_point) * scale;\n        ${x.setByOffset(\"global_idx\", \"dequantized_data\")};\n    }`;\n          };\n          return { name: \"GatherBlockQuantized\", shaderCache: { hint: `${t.cacheKey};${e.filter((g, _) => _ !== 1).map((g) => g.dims.join(\"_\")).join(\";\")}`, inputDependencies: Array.from({ length: e.length }, (g, _) => \"rank\") }, getRunData: () => ({ outputs: [{ dims: u, dataType: c }], dispatchGroup: { x: Math.ceil(d / 64) }, programUniforms: f }), getShaderSource: b };\n        }, Td = (e, t) => {\n          let r = e.inputs;\n          Nf(r, t), e.compute(Vf(e.inputs, t));\n        }, Id = (e) => J({ blockSize: e.blockSize, gatherAxis: e.gatherAxis, quantizeAxis: e.quantizeAxis });\n      });\n      kd = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        Wf = (e) => {\n          if (!e || e.length !== 2) throw new Error(\"GatherElements requires 2 inputs.\");\n          if (e[0].dims.length < 1) throw new Error(\"GatherElements requires that the data input be rank >= 1.\");\n          if (e[0].dims.length !== e[1].dims.length) throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`);\n        }, Lf = (e, t) => {\n          let r = e[0].dims, n = e[0].dataType, o = r.length, i = e[1].dims, a = e[1].dataType, u = k.normalizeAxis(t.axis, o), d = r[u], c = i.slice(0), p = k.size(c), m = P(\"input\", n, o), f = P(\"indicesInput\", a, i.length), b = M(\"output\", n, c.length), g = [{ type: 12, data: p }, { type: 6, data: d }, { type: 12, data: u }];\n          return g.push(...N(r, i, c)), { name: \"GatherElements\", shaderCache: { inputDependencies: [\"rank\", \"rank\"] }, getRunData: () => ({ outputs: [{ dims: c, dataType: e[0].dataType }], dispatchGroup: { x: Math.ceil(p / 64) }, programUniforms: g }), getShaderSource: ($) => `\n      ${$.registerUniform(\"outputSize\", \"u32\").registerUniform(\"axisDimLimit\", \"i32\").registerUniform(\"axis\", \"u32\").declareVariables(m, f, b)}\n      ${$.mainStart()}\n      ${$.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n\n      let outputIndices = ${b.offsetToIndices(\"global_idx\")};\n\n      var idx = ${f.getByOffset(\"global_idx\")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${m.type.indices}(outputIndices);\n      ${m.indicesSet(\"inputIndices\", \"uniforms.axis\", \"u32(idx)\")};\n      let value = ${m.getByIndices(\"inputIndices\")};\n\n      ${b.setByOffset(\"global_idx\", \"value\")};\n  }` };\n        }, Ad = (e) => J({ axis: e.axis }), Ed = (e, t) => {\n          let r = e.inputs;\n          Wf(r), e.compute(Lf(e.inputs, t));\n        };\n      });\n      Od = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        ie();\n        Gf = (e) => {\n          if (!e) throw new Error(\"Input is missing\");\n          if (e.length < 2 || e.length > 3) throw new Error(\"Invaid input number.\");\n          if (e.length === 3 && e[2].dims.length > 2) throw new Error(\"Invalid input shape of C\");\n          if (e[0].dataType !== e[1].dataType || e.length === 3 && e[0].dataType !== e[2].dataType) throw new Error(\"Input types are mismatched\");\n        }, Hf = (e, t) => {\n          let r = e[0].dims.slice(), n = e[1].dims.slice(), [o, i, a] = Dr.getShapeOfGemmResult(r, t.transA, n, t.transB, e.length === 3 ? e[2].dims : void 0), u = [o, i];\n          if (!u) throw new Error(\"Can't use gemm on the given tensors\");\n          let d = 16, c = Math.ceil(i / d), p = Math.ceil(o / d), m = true, f = k.size(u), b = [{ type: 12, data: m ? c : f }, { type: 12, data: o }, { type: 12, data: i }, { type: 12, data: a }, { type: 1, data: t.alpha }, { type: 1, data: t.beta }], g = [\"type\", \"type\"];\n          e.length === 3 && (b.push(...N(e[2].dims)), g.push(\"rank\")), b.push(...N(u));\n          let _ = ($) => {\n            let v = \"\";\n            t.transA && t.transB ? v = \"value += a[k * uniforms.M + m] * b[n * uniforms.K + k];\" : t.transA && !t.transB ? v = \"value += a[k * uniforms.M + m] * b[k * uniforms.N + n];\" : !t.transA && t.transB ? v = \"value += a[m * uniforms.K + k] * b[n * uniforms.K + k];\" : !t.transA && !t.transB && (v = \"value += a[m * uniforms.K + k] * b[k * uniforms.N + n];\");\n            let x = t.alpha === 1 ? \"\" : \"value *= uniforms.alpha;\", T = P(\"a\", e[0].dataType, e[0].dims), E = P(\"b\", e[1].dataType, e[1].dims), I = T.type.value, z = null, O = [T, E];\n            e.length === 3 && (z = P(\"c\", e[2].dataType, e[2].dims.length), O.push(z));\n            let D = M(\"output\", e[0].dataType, u.length);\n            O.push(D);\n            let L = [{ name: \"output_size\", type: \"u32\" }, { name: \"M\", type: \"u32\" }, { name: \"N\", type: \"u32\" }, { name: \"K\", type: \"u32\" }, { name: \"alpha\", type: \"f32\" }, { name: \"beta\", type: \"f32\" }];\n            return `\n  ${$.registerUniforms(L).declareVariables(...O)}\n\n  ${$.mainStart()}\n    ${$.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${I}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${v}\n    }\n\n    ${x}\n    ${z != null ? `let cOffset = ${z.broadcastedIndicesToOffset(\"vec2(m, n)\", D)}; value += ${I}(uniforms.beta) * ${z.getByOffset(\"cOffset\")};` : \"\"}\n    output[global_idx] = value;\n  }`;\n          }, S = ($) => {\n            let v = P(\"a\", e[0].dataType, e[0].dims), x = P(\"b\", e[1].dataType, e[1].dims), T = null, E = [v, x];\n            e.length === 3 && (T = P(\"c\", e[2].dataType, e[2].dims.length), E.push(T));\n            let I = M(\"output\", e[0].dataType, u.length);\n            E.push(I);\n            let z = [{ name: \"num_tile_n\", type: \"u32\" }, { name: \"M\", type: \"u32\" }, { name: \"N\", type: \"u32\" }, { name: \"K\", type: \"u32\" }, { name: \"alpha\", type: \"f32\" }, { name: \"beta\", type: \"f32\" }], O = \"\", D = \"\";\n            t.transA && t.transB ? (D = `\n      var col = tile_row_start + local_id.x;\n      var row = k_start + local_id.y;\n      if (col < uniforms.M && row < uniforms.K) {\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];\n      } else {\n        tile_a[local_id.y][local_id.x] = ${v.type.value}(0);\n      }\n\n      col = k_start + local_id.x;\n      row = tile_col_start + local_id.y;\n      if (col < uniforms.K && row < uniforms.N) {\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];\n      } else {\n        tile_b[local_id.y][local_id.x] = ${x.type.value}(0);\n      }\n      `, O = \"value += tile_a[k][local_id.y] * tile_b[local_id.x][k];\") : t.transA && !t.transB ? (D = `\n      var col = tile_row_start + local_id.x;\n      var row = k_start + local_id.y;\n      if (col < uniforms.M && row < uniforms.K) {\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];\n      } else {\n        tile_a[local_id.y][local_id.x] = ${v.type.value}(0);\n      }\n\n      col = tile_col_start + local_id.x;\n      row = k_start + local_id.y;\n      if (col < uniforms.N && row < uniforms.K) {\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];\n      } else {\n        tile_b[local_id.y][local_id.x] = ${x.type.value}(0);\n      }\n      `, O = \"value += tile_a[k][local_id.y] * tile_b[k][local_id.x];\") : !t.transA && t.transB ? (D = `\n      var col = k_start + local_id.x;\n      var row = tile_row_start + local_id.y;\n      if (col < uniforms.K && row < uniforms.M) {\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];\n      } else {\n        tile_a[local_id.y][local_id.x] = ${v.type.value}(0);\n      }\n\n      col = k_start + local_id.x;\n      row = tile_col_start + local_id.y;\n      if (col < uniforms.K && row < uniforms.N) {\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];\n      } else {\n        tile_b[local_id.y][local_id.x] = ${x.type.value}(0);\n      }\n      `, O = \"value += tile_a[local_id.y][k] * tile_b[local_id.x][k];\") : !t.transA && !t.transB && (D = `\n      var col = k_start + local_id.x;\n      var row = tile_row_start + local_id.y;\n      if (col < uniforms.K && row < uniforms.M) {\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];\n      } else {\n        tile_a[local_id.y][local_id.x] = ${v.type.value}(0);\n      }\n\n      col = tile_col_start + local_id.x;\n      row = k_start + local_id.y;\n      if (col < uniforms.N && row < uniforms.K) {\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];\n      } else {\n        tile_b[local_id.y][local_id.x] = ${x.type.value}(0);\n      }\n      `, O = \"value += tile_a[local_id.y][k] * tile_b[k][local_id.x];\");\n            let L = t.alpha === 1 ? \"\" : \"value *= uniforms.alpha;\";\n            return `\n  ${$.registerUniforms(z).declareVariables(...E)}\n  var<workgroup> tile_a: array<array<${v.type.storage}, ${d}>, ${d}>;\n  var<workgroup> tile_b: array<array<${x.type.storage}, ${d}>, ${d}>;\n  ${$.mainStart([d, d, 1])}\n    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * ${d};\n    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * ${d};\n    let num_tiles = (uniforms.K - 1) / ${d} + 1;\n    var k_start = 0u;\n    var value = ${I.type.value}(0);\n    for (var t: u32 = 0u; t < num_tiles; t++) {\n      ${D}\n      k_start = k_start + ${d};\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k < ${d}; k++) {\n        ${O}\n      }\n      workgroupBarrier();\n    }\n\n    ${L}\n    let m = tile_row_start + local_id.y;\n    let n = tile_col_start + local_id.x;\n    ${T != null ? `let cOffset = ${T.broadcastedIndicesToOffset(\"vec2(m, n)\", I)}; value += ${I.type.value}(uniforms.beta) * ${T.getByOffset(\"cOffset\")};` : \"\"}\n    if (m < uniforms.M && n < uniforms.N) {\n      output[m * uniforms.N + n] = value;\n    }\n  }`;\n          };\n          return m ? { name: \"GemmShared\", shaderCache: { hint: `${t.cacheKey}`, inputDependencies: g }, getRunData: () => ({ outputs: [{ dims: u, dataType: e[0].dataType }], dispatchGroup: { x: c * p }, programUniforms: b }), getShaderSource: S } : { name: \"Gemm\", shaderCache: { hint: `${t.cacheKey}`, inputDependencies: g }, getRunData: () => ({ outputs: [{ dims: u, dataType: e[0].dataType }], dispatchGroup: { x: Math.ceil(f / 64) }, programUniforms: b }), getShaderSource: _ };\n        }, Pd = (e) => {\n          let t = e.transA, r = e.transB, n = e.alpha, o = e.beta;\n          return { transA: t, transB: r, alpha: n, beta: o, cacheKey: `${e.transA};${e.transB};${e.alpha === 1}` };\n        }, zd = (e, t) => {\n          Gf(e.inputs), e.compute(Hf(e.inputs, t));\n        };\n      });\n      Md = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        [ut, yt, Ut, Nt] = [0, 1, 2, 3], Ff = (e) => {\n          if (e[0].dims.length !== 4) throw new Error(\"only 4-D tensor is supported.\");\n          if (e[0].dims.length !== e[1].dims.length) throw new Error(\"input dimensions must be equal to grid dimensions\");\n          if (e[0].dims.length - 2 !== e[1].dims[e[1].dims.length - 1]) throw new Error(`last dimension of grid must be equal to ${e[0].dims.length - 2}`);\n          if (e[0].dims[0] !== e[1].dims[0]) throw new Error(\"grid batch size must match input batch size\");\n        }, qf = `\n  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {\n    let cubic_alpha = -0.75f;\n    let x_abs = abs(x);\n    var coeffs: vec4<f32>;\n    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);\n    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);\n    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);\n    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);\n    return coeffs;\n  }\n`, jf = (e) => `\n  fn gs_bicubic_interpolate(p: mat4x4<${e}>, x: f32, y: f32) -> ${e} {\n    var v: vec4<f32>;\n    var coeffs = gs_get_cubic_coeffs(x);\n    for (var i = 0; i < 4; i++) {\n      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];\n    }\n    coeffs = gs_get_cubic_coeffs(y);\n    let pixel = ${e}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);\n    return pixel;\n  }\n`, Kf = (e) => `\n  fn gs_denormalize(n: f32, length: i32) -> f32 {\n    ${e.alignCorners === 0 ? `\n    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]\n    return ((n + 1.0) * f32(length) - 1.0) / 2.0;\n    ` : `\n    // alignCorners: true => [-1, 1] to [0, length - 1]\n    return (n + 1.0) / 2.0 * (f32(length - 1));\n    `}\n  }\n`, Zf = (e) => `\n  ${e.paddingMode === \"reflection\" ? `\n      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {\n        var dx = 0.0;\n        var fx = f32(x);\n        let range = x_max - x_min;\n        if (fx < x_min) {\n          dx = x_min - fx;\n          let n = u32(dx / range);\n          let r = dx - f32(n) * range;\n          if (n % 2 == 0) {\n            fx = x_min + r;\n          } else {\n            fx = x_max - r;\n          }\n        } else if (fx > x_max) {\n          dx = fx - x_max;\n          let n = u32(dx / range);\n          let r = dx - f32(n) * range;\n          if (n % 2 == 0) {\n            fx = x_max - r;\n          } else {\n            fx = x_min + r;\n          }\n        }\n        return u32(fx);\n      }` : \"\"}\n`, Qf = (e, t, r) => `\n  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${t} {\n     var pixel = ${t}(0);\n     var indices = vec4<u32>(0);\n     indices[${ut}] = batch;\n     indices[${yt}] = channel;` + (() => {\n          switch (r.paddingMode) {\n            case \"zeros\":\n              return `\n          if (r >= 0 && r < H && c >=0 && c < W) {\n            indices[${Ut}] = u32(r);\n            indices[${Nt}] = u32(c);\n          } else {\n            return ${t}(0);\n          }\n        `;\n            case \"border\":\n              return `\n          indices[${Ut}] = u32(clamp(r, 0, H - 1));\n          indices[${Nt}] = u32(clamp(c, 0, W - 1));\n        `;\n            case \"reflection\":\n              return `\n          indices[${Ut}] = gs_reflect(r, border[1], border[3]);\n          indices[${Nt}] = gs_reflect(c, border[0], border[2]);\n        `;\n            default:\n              throw new Error(`padding mode ${r.paddingMode} is not supported`);\n          }\n        })() + `\n    return ${e.getByIndices(\"indices\")};\n  }\n`, Yf = (e, t, r) => (() => {\n          switch (r.mode) {\n            case \"nearest\":\n              return `\n          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${ut}], indices[${yt}], border);\n        `;\n            case \"bilinear\":\n              return `\n          let x1 = i32(floor(x));\n          let y1 = i32(floor(y));\n          let x2 = x1 + 1;\n          let y2 = y1 + 1;\n\n          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${ut}], indices[${yt}], border);\n          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${ut}], indices[${yt}], border);\n          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${ut}], indices[${yt}], border);\n          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${ut}], indices[${yt}], border);\n\n          let dx2 = ${t}(f32(x2) - x);\n          let dx1 = ${t}(x - f32(x1));\n          let dy2 = ${t}(f32(y2) - y);\n          let dy1 = ${t}(y - f32(y1));\n          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);\n        `;\n            case \"bicubic\":\n              return `\n          let x0 = i32(floor(x)) - 1;\n          let y0 = i32(floor(y)) - 1;\n          var p: mat4x4<${t}>;\n          for (var h = 0; h < 4; h++) {\n            for (var w = 0; w < 4; w++) {\n              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${ut}], indices[${yt}], border);\n            }\n          }\n\n          let dx = x - f32(x0 + 1);\n          let dy = y - f32(y0 + 1);\n          let result = gs_bicubic_interpolate(p, dx, dy);\n        `;\n            default:\n              throw new Error(`mode ${r.mode} is not supported`);\n          }\n        })() + `${e.setByOffset(\"global_idx\", \"result\")}`, Xf = (e, t) => {\n          let r = P(\"x\", e[0].dataType, e[0].dims.length), n = [e[1].dims[0], e[1].dims[1], e[1].dims[2]], o = P(\"grid\", e[1].dataType, n.length, 2), i = [e[0].dims[0], e[0].dims[1], e[1].dims[1], e[1].dims[2]];\n          t.format === \"NHWC\" && (i = [e[0].dims[0], e[1].dims[1], e[1].dims[2], e[0].dims[3]], [ut, yt, Ut, Nt] = [0, 3, 1, 2]);\n          let a = M(\"output\", e[0].dataType, i.length), u = r.type.value, d = k.size(i), c = [{ type: 12, data: d }, ...N(e[0].dims, n, i)], p = (m) => `\n  ${m.registerUniform(\"output_size\", \"u32\").declareVariables(r, o, a)}\n  ${qf}\n  ${jf(u)}\n  ${Kf(t)}\n  ${Zf(t)}\n  ${Qf(r, u, t)}\n\n  ${m.mainStart()}\n    ${m.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n      let H_in = i32(uniforms.x_shape[${Ut}]);\n      let W_in = i32(uniforms.x_shape[${Nt}]);\n\n      ${t.alignCorners === 0 ? `\n      let x_min = -0.5;\n      let x_max = f32(W_in) - 0.5;\n      let y_min = -0.5;\n      let y_max = f32(H_in) - 0.5;\n      ` : `\n      let x_min = 0.0;\n      let x_max = f32(W_in) - 1.0;\n      let y_min = 0.0;\n      let y_max = f32(H_in) - 1.0;\n      `};\n      let border = vec4<f32>(x_min, y_min, x_max, y_max);\n\n      let indices = ${a.offsetToIndices(\"global_idx\")};\n      var grid_indices = vec3<u32>(indices[${ut}], indices[${Ut}], indices[${Nt}]);\n      let nxy = ${o.getByIndices(\"grid_indices\")};\n      var x = gs_denormalize(f32(nxy[0]), W_in);\n      var y = gs_denormalize(f32(nxy[1]), H_in);\n\n      ${Yf(a, u, t)}\n  }`;\n          return { name: \"GridSample\", shaderCache: { hint: `${t.cacheKey}`, inputDependencies: [\"type\", \"type\"] }, getRunData: (m) => {\n            let f = k.size(i);\n            return { outputs: [{ dims: i, dataType: m[0].dataType }], dispatchGroup: { x: Math.ceil(f / 64) }, programUniforms: c };\n          }, getShaderSource: p };\n        }, Bd = (e, t) => {\n          Ff(e.inputs), e.compute(Xf(e.inputs, t));\n        }, Dd = (e) => J({ alignCorners: e.align_corners, mode: e.mode, paddingMode: e.padding_mode, format: e.format });\n      });\n      $o = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        Vr();\n        Fr();\n        ie();\n        st();\n        Be = (e, t) => e.length > t && e[t].dims.length > 0 ? e[t] : void 0, th = (e, t) => {\n          let r = e[0], n = Be(e, 1), o = Be(e, 2), i = Be(e, 3), a = Be(e, 4), u = Be(e, 5), d = Be(e, 6), c = Be(e, 7);\n          if (r.dims.length !== 3 && r.dims.length !== 5) throw new Error(\"Input query is expected to have 3 or 5 dimensions\");\n          let p = r.dims[0], m = r.dims[1], f = r.dims.length === 3 ? r.dims[2] : t.numHeads * r.dims[4], b = m, g = 0, _ = 0, S = Math.floor(f / t.numHeads);\n          if (d && c && k.size(d.dims) && k.size(c.dims)) {\n            if (d.dims.length !== 4) throw new Error('Input \"past_key\" is expected to have 4 dimensions');\n            if (d.dims[0] !== p || d.dims[1] !== t.numHeads || d.dims[3] !== S) throw new Error('Input \"past_key\" shape (batch_size, num_heads, past_sequence_length, head_size)');\n            if (c.dims[0] !== p || c.dims[1] !== t.numHeads || c.dims[3] !== S) throw new Error('Input \"past_value\" shape (batch_size, num_heads, past_sequence_length, head_size)');\n            if (d.dims[2] !== c.dims[2]) throw new Error('Input \"past_key\" and \"past_value\" shall have same dim 2 (past_sequence_length)');\n            if (c.dims.length !== 4) throw new Error('Input \"past_value\" is expected to have 4 dimensions');\n            g = d.dims[2], _ = d.dims[2];\n          } else if (d && k.size(d.dims) || c && k.size(c.dims)) throw new Error('Input \"past_key\" and \"past_value\" shall be both present or both absent');\n          let $;\n          if (n && k.size(n.dims) > 0) {\n            if (r.dims.length !== 3) throw new Error('Input \"query\" is expected to have 3 dimensions when key is given');\n            if (n.dims.length < 3 || n.dims.length > 5) throw new Error('Input \"key\" is expected to have 3, 4, or 5 dimensions');\n            if (r.dims[0] !== n.dims[0]) throw new Error('Input \"query\" and \"key\" shall have same dim 0 (batch size)');\n            if (n.dims.length === 3) {\n              if (n.dims[2] !== r.dims[2]) throw new Error('Input \"query\" and \"key\" shall have same dim 2 (hidden_size)');\n              $ = 2, b = n.dims[1];\n            } else if (n.dims.length === 5) {\n              if (n.dims[2] !== t.numHeads || n.dims[3] !== 2 || n.dims[4] !== S) throw new Error('Expect \"key\" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');\n              if (o) throw new Error('Expect \"value\" be none when \"key\" has packed kv format.');\n              $ = 5, b = n.dims[1];\n            } else {\n              if (n.dims[1] !== t.numHeads || n.dims[3] !== S) throw new Error('Expect \"key\" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');\n              $ = 0, b = n.dims[2];\n            }\n          } else {\n            if (r.dims.length !== 5) throw new Error('Input \"query\" is expected to have 5 dimensions when key is empty');\n            if (r.dims[2] !== t.numHeads || r.dims[3] !== 3) throw new Error('Expect \"query\" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');\n            $ = 3;\n          }\n          if (i && k.size(i.dims) > 0) {\n            if (i.dims.length !== 1) throw new Error('Input \"bias\" is expected to have 1 dimension');\n            if (n && n.dims.length === 5 && n.dims[3] === 2) throw new Error(\"bias is not allowed for packed kv.\");\n          }\n          let v = g + b, x = 0;\n          if (a && k.size(a.dims) > 0) {\n            x = 8;\n            let z = a.dims;\n            throw z.length === 1 ? z[0] === p ? x = 1 : z[0] === 3 * p + 2 && (x = 3) : z.length === 2 && z[0] === p && z[1] === v && (x = 5), x === 8 ? new Error('Input \"key_padding_mask\" shape shall be (batch_size) or (batch_size, total_sequence_length)') : new Error(\"Mask not supported\");\n          }\n          let T = false, E = f;\n          if (o && k.size(o.dims) > 0) {\n            if (o.dims.length !== 3 && o.dims.length !== 4) throw new Error('Input \"value\" is expected to have 3 or 4 dimensions');\n            if (r.dims[0] !== o.dims[0]) throw new Error('Input \"query\" and \"value\" shall have same dim 0 (batch_size)');\n            if (o.dims.length === 3) {\n              if (b !== o.dims[1]) throw new Error('Input \"key\" and \"value\" shall have the same dim 1 (kv_sequence_length)');\n              E = o.dims[2];\n            } else {\n              if (b !== o.dims[2]) throw new Error('Input \"key\" and \"value\" shall have the same dim 2 (kv_sequence_length)');\n              E = o.dims[1] * o.dims[3], T = true;\n            }\n          }\n          let I = false;\n          if (a && k.size(a.dims) > 0) throw new Error(\"Key padding mask is not supported\");\n          if (u && k.size(u.dims) > 0) {\n            if (u.dims.length !== 4) throw new Error('Input \"attention_bias\" is expected to have 4 dimensions');\n            if (u.dims[0] !== p || u.dims[1] !== t.numHeads || u.dims[2] !== m || u.dims[3] !== v) throw new Error('Expect \"attention_bias\" shape (batch_size, num_heads, sequence_length, total_sequence_length)');\n          }\n          return { batchSize: p, sequenceLength: m, pastSequenceLength: g, kvSequenceLength: b, totalSequenceLength: v, maxSequenceLength: _, inputHiddenSize: 0, hiddenSize: f, vHiddenSize: E, headSize: S, vHeadSize: Math.floor(E / t.numHeads), numHeads: t.numHeads, isUnidirectional: false, pastPresentShareBuffer: false, maskFilterValue: t.maskFilterValue, maskType: x, scale: t.scale, broadcastResPosBias: I, passPastInKv: T, qkvFormat: $ };\n        }, Ud = (e) => J({ ...e }), Rd = J({ perm: [0, 2, 1, 3] }), rh = (e, t, r, n, o, i, a) => {\n          let u = [n, o, i], d = k.size(u), c = [{ type: 12, data: d }, { type: 12, data: a }, { type: 12, data: i }], p = (m) => {\n            let f = M(\"qkv_with_bias\", t.dataType, u), b = P(\"qkv\", t.dataType, u), g = P(\"bias\", r.dataType, u), _ = [{ name: \"output_size\", type: \"u32\" }, { name: \"bias_offset\", type: \"u32\" }, { name: \"hidden_size\", type: \"u32\" }];\n            return `\n  ${m.registerUniforms(_).declareVariables(b, g, f)}\n  ${m.mainStart()}\n    ${m.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`;\n          };\n          return e.compute({ name: \"MultiHeadAttentionAddBias\", shaderCache: { inputDependencies: [\"type\", \"type\"] }, getRunData: () => ({ outputs: [{ dims: u, dataType: t.dataType, gpuDataType: 0 }], dispatchGroup: { x: Math.ceil(d / 64) }, programUniforms: c }), getShaderSource: p }, { inputs: [t, r], outputs: [-1] })[0];\n        }, er = (e, t, r, n, o, i, a, u) => {\n          let d = i;\n          if (a && k.size(a.dims) > 0) {\n            if (n === 1) throw new Error(\"AddBiasReshape is not implemented. Please export your model with packed QKV or KV\");\n            return d = rh(e, i, a, t, n, r * o, u), d = d.reshape([t, n, r, o]), r === 1 || n === 1 ? d : e.compute(Ee(d, Rd.perm), { inputs: [d], outputs: [-1] })[0];\n          } else return i.dims.length === 3 && (d = i.reshape([t, n, r, o])), r === 1 || n === 1 ? d : e.compute(Ee(d, Rd.perm), { inputs: [d], outputs: [-1] })[0];\n        }, Nd = (e, t) => {\n          let r = th(e.inputs, t), n = e.inputs[0], o = Be(e.inputs, 1), i = Be(e.inputs, 2), a = Be(e.inputs, 3), u = Be(e.inputs, 4), d = Be(e.inputs, 5), c = Be(e.inputs, 6), p = Be(e.inputs, 7);\n          if (n.dims.length === 5) throw new Error(\"Packed QKV is not implemented\");\n          if (o?.dims.length === 5) throw new Error(\"Packed KV is not implemented\");\n          let m = o && i && o.dims.length === 4 && i.dims.length === 4, f = er(e, r.batchSize, r.numHeads, r.sequenceLength, r.headSize, n, a, 0);\n          if (m) return Rt(e, f, o, i, u, void 0, c, p, d, r);\n          if (!o || !i) throw new Error(\"key and value must be provided\");\n          let b = er(e, r.batchSize, r.numHeads, r.kvSequenceLength, r.headSize, o, a, r.hiddenSize), g = er(e, r.batchSize, r.numHeads, r.kvSequenceLength, r.vHeadSize, i, a, 2 * r.hiddenSize);\n          Rt(e, f, b, g, u, void 0, c, p, d, r);\n        };\n      });\n      So = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        nh = (e) => {\n          if (!e || e.length < 1) throw new Error(\"too few inputs\");\n        }, oh = (e, t) => {\n          let r = [], n = t.numOutputs;\n          return e[1].dims[0] > 0 && (e[1].getBigInt64Array().forEach((o) => r.push(Number(o))), n = r.length), J({ numOutputs: n, axis: t.axis, splitSizes: r });\n        }, ih = (e) => `\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${F(\"uniforms.size_in_split_axis\", \"i\", e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`, ah = (e) => {\n          let t = e.length, r = [];\n          for (let n = 0; n < t; ++n) {\n            let o = e[n].setByIndices(\"indices\", \"input[global_idx]\");\n            t === 1 ? r.push(o) : n === 0 ? r.push(`if (output_number == ${n}u) { ${o} }`) : n === t - 1 ? r.push(`else { ${o} }`) : r.push(`else if (output_number == ${n}) { ${o} }`);\n          }\n          return `\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`;\n        }, xo = (e, t) => {\n          let r = e[0].dims, n = k.size(r), o = e[0].dataType, i = k.normalizeAxis(t.axis, r.length), a = new Array(t.numOutputs), u = P(\"input\", o, r.length), d = new Array(t.numOutputs), c = [], p = [], m = 0, f = [{ type: 12, data: n }];\n          for (let g = 0; g < t.numOutputs; g++) {\n            m += t.splitSizes[g], d[g] = m;\n            let _ = r.slice();\n            _[i] = t.splitSizes[g], p.push(_), a[g] = M(`output${g}`, o, _.length), c.push({ dims: p[g], dataType: e[0].dataType });\n          }\n          f.push({ type: 12, data: d }, ...N(r, ...p));\n          let b = (g) => `\n  ${g.registerUniform(\"input_size\", \"u32\").registerUniform(\"size_in_split_axis\", \"u32\", d.length).declareVariables(u, ...a)}\n  ${ih(d.length)}\n  ${ah(a)}\n\n  ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.input_size\")}\n\n    var indices = ${u.offsetToIndices(\"global_idx\")};\n    var index = ${u.indicesGet(\"indices\", i)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${F(\"uniforms.size_in_split_axis\", \"output_number - 1u\", d.length)};\n      ${u.indicesSet(\"indices\", i, \"index\")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`;\n          return { name: \"Split\", shaderCache: { hint: t.cacheKey, inputDependencies: [\"rank\"] }, getShaderSource: b, getRunData: () => ({ outputs: c, dispatchGroup: { x: Math.ceil(n / 64) }, programUniforms: f }) };\n        }, Vd = (e, t) => {\n          nh(e.inputs);\n          let r = e.inputs.length === 1 ? t : oh(e.inputs, t);\n          e.compute(xo(e.inputs, r), { inputs: [0] });\n        }, Wd = (e) => {\n          let t = e.axis, r = e.splitSizes, n = e.numOutputs < 0 ? r.length : e.numOutputs;\n          if (n !== r.length) throw new Error(\"numOutputs and splitSizes lengh must be equal\");\n          return J({ axis: t, numOutputs: n, splitSizes: r });\n        };\n      });\n      To = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        sh = (e, t) => {\n          let [r, n, o, i] = e, { numHeads: a, rotaryEmbeddingDim: u } = t;\n          if (r.dims.length !== 3 && r.dims.length !== 4) throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${r.dims.length}`);\n          if (!k.areEqual(n.dims, []) && !k.areEqual(n.dims, [1]) && n.dims.length !== 2) throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${n.dims.length}`);\n          if (o.dims.length !== 2) throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${o.dims.length}`);\n          if (i.dims.length !== 2) throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${i.dims.length}`);\n          if (!k.areEqual(o.dims, i.dims)) throw new Error(\"Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape\");\n          if (u > 0 && a === 0) throw new Error(\"num_heads must be provided if rotary_embedding_dim is specified\");\n          let d = r.dims[0], c = r.dims[r.dims.length - 2], p = o.dims[0], m = k.sizeFromDimension(r.dims, 1) / c, f = u === 0 ? o.dims[1] * 2 : m / a;\n          if (u > f) throw new Error(\"rotary_embedding_dim must be less than or equal to head_size\");\n          if (n.dims.length === 2) {\n            if (d !== n.dims[0]) throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${n.dims[0]}`);\n            if (c !== n.dims[1]) throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${n.dims[1]}`);\n          }\n          if (f / 2 !== o.dims[1] && u / 2 !== o.dims[1]) throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${o.dims[1]}`);\n          if (c > p) throw new Error(\"Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported\");\n        }, tn = (e, t) => {\n          let { interleaved: r, numHeads: n, rotaryEmbeddingDim: o, scale: i } = t, a = e[0].dims[0], u = k.sizeFromDimension(e[0].dims, 1), d = e[0].dims[e[0].dims.length - 2], c = u / d, p = e[2].dims[1], m = o === 0 ? p * 2 : c / n, f = new Array(a, d, c / m, m - p), b = k.computeStrides(f), g = [{ type: 1, data: i }, { type: 12, data: f }, { type: 12, data: b }, ...e[0].dims.length === 3 ? new Array({ type: 12, data: [u, c, m, 1] }) : [], ...e[0].dims.length === 4 ? new Array({ type: 12, data: [u, m, d * m, 1] }) : [], ...N(e[0].dims, e[1].dims, e[2].dims, e[3].dims, e[0].dims)], _ = (S) => {\n            let $ = P(\"input\", e[0].dataType, e[0].dims.length), v = P(\"position_ids\", e[1].dataType, e[1].dims.length), x = P(\"cos_cache\", e[2].dataType, e[2].dims.length), T = P(\"sin_cache\", e[3].dataType, e[3].dims.length), E = M(\"output\", e[0].dataType, e[0].dims.length);\n            return S.registerUniforms([{ name: \"scale\", type: \"f32\" }, { name: \"global_shape\", type: \"u32\", length: f.length }, { name: \"global_strides\", type: \"u32\", length: b.length }, { name: \"input_output_strides\", type: \"u32\", length: b.length }]), `\n        ${S.declareVariables($, v, x, T, E)}\n\n        ${S.mainStart(It)}\n          let half_rotary_emb_dim = uniforms.${x.name}_shape[1];\n          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;\n          let size = uniforms.global_shape[0] * uniforms.global_strides[0];\n          ${S.guardAgainstOutOfBoundsWorkgroupSizes(\"size\")}\n\n          if (bsnh[3] < half_rotary_emb_dim) {\n            let position_ids_idx =\n                ${v.broadcastedIndicesToOffset(\"bsnh.xy\", M(\"\", v.type.tensor, 2))};\n            let position_id =\n                u32(${v.getByOffset(\"position_ids_idx\")}) + select(0, bsnh[1], position_ids_idx == 0);\n            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${r});\n            let j = i + select(half_rotary_emb_dim, 1, ${r});\n            let re = ${$.getByOffset(\"i\")} * ${x.get(\"position_id\", \"bsnh[3]\")} -\n                ${$.getByOffset(\"j\")} * ${T.get(\"position_id\", \"bsnh[3]\")};\n            ${E.setByOffset(\"i\", \"re\")}\n            let im = ${$.getByOffset(\"i\")} * ${T.get(\"position_id\", \"bsnh[3]\")} +\n                ${$.getByOffset(\"j\")} * ${x.get(\"position_id\", \"bsnh[3]\")};\n            ${E.setByOffset(\"j\", \"im\")}\n          } else {\n            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;\n            ${E.setByOffset(\"k\", $.getByOffset(\"k\"))}\n          }\n        }`;\n          };\n          return { name: \"RotaryEmbedding\", shaderCache: { hint: J({ interleaved: r }).cacheKey, inputDependencies: [\"rank\", \"rank\", \"rank\", \"rank\"] }, getShaderSource: _, getRunData: () => ({ outputs: [{ dims: e[0].dims, dataType: e[0].dataType }], dispatchGroup: { x: Math.ceil(k.size(f) / It) }, programUniforms: g }) };\n        }, Ld = (e, t) => {\n          sh(e.inputs, t), e.compute(tn(e.inputs, t));\n        };\n      });\n      Fd = U(() => {\n        \"use strict\";\n        Se();\n        ee();\n        Fr();\n        $o();\n        So();\n        st();\n        To();\n        ie();\n        uh = (e, t) => {\n          if (t.doRotary && e.length <= 7) throw new Error(\"cos_cache and sin_cache inputs are required if do_rotary is specified\");\n          let r = e[0], n = e[1], o = e[2], i = e[3], a = e[4];\n          if (t.doRotary !== 0 && e.length <= 7) throw new Error(\"cos_cast and sin_cache are expected if do_rotary attribute is non-zero\");\n          if (t.localWindowSize !== -1) throw new Error(\"Local attention is not supported\");\n          if (t.softcap !== 0) throw new Error(\"Softcap is not supported\");\n          if (t.rotaryInterleaved !== 0) throw new Error(\"Rotary interleaved is not supported\");\n          if (t.smoothSoftmax) throw new Error(\"Smooth softmax is not supported\");\n          if (r.dims.length !== 3 && r.dims.length !== 5) throw new Error(\"Input query is expected to have 3 or 5 dimensions\");\n          let u = false, d = r.dims[0], c = r.dims[1], p = r.dims.length === 3 ? u ? r.dims[2] / 3 : r.dims[2] : t.numHeads * r.dims[4], m = c, f = 0, b = !n || n.dims.length === 0, g = Math.floor(b ? p / (t.numHeads + 2 * t.kvNumHeads) : p / t.numHeads);\n          b && (p = g * t.numHeads);\n          let _ = i && i.dims.length !== 0, S = a && a.dims.length !== 0;\n          if (_ && i.dims.length === 4 && i.dims[0] === d && i.dims[1] !== t.kvNumHeads && i.dims[2] === t.kvNumHeads && i.dims[3] === g) throw new Error(\"BSNH pastKey/pastValue is not supported\");\n          if (_ && S) {\n            if (i.dims.length !== 4) throw new Error('Input \"past_key\" is expected to have 4 dimensions');\n            if (a.dims.length !== 4) throw new Error('Input \"past_value\" is expected to have 4 dimensions');\n            f = i.dims[2];\n          } else if (_ || S) throw new Error('Input \"past_key\" and \"past_value\" shall be both present or both absent');\n          let v = 1;\n          if (n && n.dims.length > 0) {\n            if (r.dims.length !== 3) throw new Error('Input \"query\" is expected to have 3 dimensions when key is given');\n            if (n.dims.length < 3 || n.dims.length > 5) throw new Error('Input \"key\" is expected to have 3, 4, or 5 dimensions');\n            if (r.dims[0] !== n.dims[0]) throw new Error('Input \"query\" and \"key\" shall have same dim 0 (batch size)');\n            if (n.dims.length === 3) {\n              if (r.dims[2] % n.dims[2] !== 0) throw new Error('Dimension 2 of \"query\" should be a multiple of \"key\"');\n              m = n.dims[1];\n            } else if (n.dims.length === 5) {\n              if (n.dims[2] !== t.numHeads || n.dims[3] !== 2 || n.dims[4] !== g) throw new Error('Expect \"key\" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');\n              if (o) throw new Error('Expect \"value\" be none when \"key\" has packed kv format.');\n              m = n.dims[1];\n            } else {\n              if (n.dims[1] !== t.numHeads || n.dims[3] !== g) throw new Error('Expect \"key\" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');\n              m = n.dims[2];\n            }\n          } else {\n            if (r.dims.length !== 3 && r.dims.length !== 5) throw new Error('Input \"query\" is expected to have 3 or 5 dimensions when key is empty');\n            if (r.dims.length === 5 && (r.dims[2] !== t.numHeads || r.dims[3] !== 3)) throw new Error('Expect \"query\" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');\n            v = 3;\n          }\n          let x = 0, T = false, E = t.kvNumHeads ? g * t.kvNumHeads : p;\n          if (o && o.dims.length > 0) {\n            if (o.dims.length !== 3 && o.dims.length !== 4) throw new Error('Input \"value\" is expected to have 3 or 4 dimensions');\n            if (r.dims[0] !== o.dims[0]) throw new Error('Input \"query\" and \"value\" shall have same dim 0 (batch_size)');\n            if (o.dims.length === 3) {\n              if (m !== o.dims[1]) throw new Error('Input \"key\" and \"value\" shall have the same dim 1 (kv_sequence_length)');\n              E = o.dims[2];\n            } else {\n              if (m !== o.dims[2]) throw new Error('Input \"past_key\" and \"past_value\" shall have the same dim 2 (kv_sequence_length)');\n              E = o.dims[1] * o.dims[3], T = true;\n            }\n          }\n          let I = e.length > 4 ? e[5] : void 0;\n          if (I && I.dims.length !== 1 && I.dims[0] !== d) throw new Error('Input \"seqlens\" is expected to have 1 dimension and the same dim 0 as batch_size');\n          return { batchSize: d, sequenceLength: c, pastSequenceLength: f, kvSequenceLength: m, totalSequenceLength: -1, maxSequenceLength: -1, inputHiddenSize: 0, hiddenSize: p, vHiddenSize: E, headSize: g, vHeadSize: Math.floor(E / t.kvNumHeads), numHeads: t.numHeads, kvNumHeads: t.kvNumHeads, nReps: t.numHeads / t.kvNumHeads, pastPresentShareBuffer: false, maskType: x, scale: t.scale, broadcastResPosBias: false, passPastInKv: T, qkvFormat: v };\n        }, dh = J({ perm: [0, 2, 1, 3] }), Gd = (e, t, r) => {\n          let n = t, o = r.kvNumHeads;\n          return t.dims.length === 3 && r.kvSequenceLength !== 0 && (n = t.reshape([r.batchSize, r.kvSequenceLength, o, r.headSize]), n = e.compute(Ee(n, dh.perm), { inputs: [n], outputs: [-1] })[0]), n;\n        }, lh = (e, t, r, n) => {\n          let o = 7, i = [\"type\", \"type\"], a = [e * t], u = e * t, d = [{ type: 12, data: u }, { type: 12, data: t }, { type: 12, data: e }], c = (p) => {\n            let m = P(\"seq_lens\", r.dataType, r.dims), f = P(\"total_seq_lens\", n.dataType, n.dims), b = M(\"pos_ids\", o, a), g = [{ name: \"output_size\", type: \"u32\" }, { name: \"sequence_length\", type: \"u32\" }, { name: \"batch_size\", type: \"u32\" }];\n            return `\n  ${p.registerUniforms(g).declareVariables(m, f, b)}\n  ${p.mainStart()}\n    ${p.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n    let total_sequence_length = u32(${f.getByOffset(\"0\")});\n    let is_subsequent_prompt = uniforms.sequence_length > 1 && uniforms.sequence_length != total_sequence_length;\n    let is_first_prompt = !is_subsequent_prompt && uniforms.sequence_length == total_sequence_length;\n    let batch_idx = global_idx / uniforms.sequence_length;\n    let sequence_idx = i32(global_idx % uniforms.sequence_length);\n    var pos_id: i32 = 0;\n    let seqlen = ${m.getByOffset(\"batch_idx\")};\n    let total_seqlen = seqlen + 1;\n    if (is_first_prompt) {\n      if (sequence_idx < total_seqlen) {\n        pos_id = sequence_idx;\n      } else {\n        pos_id = 1;\n      }\n      ${b.setByOffset(\"global_idx\", \"pos_id\")}\n    } else if (is_subsequent_prompt) {\n      let past_seqlen = total_seqlen - i32(uniforms.sequence_length);\n      if (past_seqlen + sequence_idx < total_seqlen) {\n        pos_id = past_seqlen + sequence_idx;\n      } else {\n        pos_id = 1;\n      }\n      ${b.setByOffset(\"global_idx\", \"pos_id\")}\n    } else if (global_idx < uniforms.batch_size) {\n      ${b.setByOffset(\"global_idx\", \"seqlen\")}\n    };\n  }\n  `;\n          };\n          return { name: \"GeneratePositionIds\", shaderCache: { hint: `${e};${t}`, inputDependencies: i }, getRunData: () => ({ outputs: [{ dims: a, dataType: o }], dispatchGroup: { x: Math.ceil(u / 64) }, programUniforms: d }), getShaderSource: c };\n        }, Hd = (e, t) => {\n          let r = uh(e.inputs, t);\n          if (e.inputs[0].dims.length === 5) throw new Error(\"Packed QKV is not implemented\");\n          if (e.inputs[1]?.dims.length === 5) throw new Error(\"Packed KV is not implemented\");\n          let n = e.inputs[0], o = e.inputs[1] && e.inputs[1].dims.length > 0 ? e.inputs[1] : void 0, i = e.inputs[2] && e.inputs[2].dims.length > 0 ? e.inputs[2] : void 0, a = e.inputs[3] && e.inputs[3].dims.length !== 0 ? e.inputs[3] : void 0, u = e.inputs[4] && e.inputs[4].dims.length !== 0 ? e.inputs[4] : void 0, d = e.inputs.length > 4 ? e.inputs[5] : void 0, c = e.inputs.length > 5 ? e.inputs[6] : void 0, p = r.kvNumHeads ? r.kvNumHeads : r.numHeads, m = J({ axis: 2, numOutputs: 3, splitSizes: [r.numHeads * r.headSize, p * r.headSize, p * r.headSize] }), [f, b, g] = !o && !i ? e.compute(xo([n], m), { inputs: [n], outputs: [-1, -1, -1] }) : [n, o, i], _, S;\n          if (t.doRotary) {\n            let T = e.compute(lh(r.batchSize, r.sequenceLength, d, c), { inputs: [d, c], outputs: [-1] })[0], E = e.inputs[7], I = e.inputs[8], z = J({ interleaved: t.rotaryInterleaved !== 0, numHeads: r.numHeads, rotaryEmbeddingDim: 0, scale: t.scale }), O = [f, T, E, I], D = [-1];\n            _ = e.compute(tn(O, z), { inputs: O, outputs: D })[0], O.splice(0, 1, b);\n            let L = J({ interleaved: t.rotaryInterleaved !== 0, numHeads: r.kvNumHeads, rotaryEmbeddingDim: 0, scale: t.scale });\n            S = e.compute(tn(O, L), { inputs: O, outputs: D })[0];\n          }\n          let $ = er(e, r.batchSize, r.numHeads, r.sequenceLength, r.headSize, t.doRotary ? _ : f, void 0, 0), v = Gd(e, t.doRotary ? S : b, r), x = Gd(e, g, r);\n          Rt(e, $, v, x, void 0, void 0, a, u, void 0, r, d, c);\n        };\n      });\n      Kd = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        st();\n        ie();\n        qd = (e, t, r, n, o, i, a, u) => {\n          let d = ce(i), c = d === 1 ? \"f32\" : `vec${d}f`, p = d === 1 ? \"vec2f\" : `mat2x${d}f`, m = o * a, f = 64;\n          m === 1 && (f = 256);\n          let b = [o, a, i / d], g = [o, a, 2], _ = [\"rank\", \"type\", \"type\"], S = [];\n          S.push(...N(b, g));\n          let $ = (v) => {\n            let x = P(\"x\", t.dataType, 3, d), T = P(\"scale\", r.dataType, r.dims), E = P(\"bias\", n.dataType, n.dims), I = M(\"output\", 1, 3, 2), z = [x, T, E, I];\n            return `\n  var<workgroup> workgroup_shared : array<${p}, ${f}>;\n  const workgroup_size = ${f}u;\n  ${v.declareVariables(...z)}\n  ${v.mainStart(f)}\n    let batch = workgroup_index / uniforms.x_shape[1];\n    let channel = workgroup_index % uniforms.x_shape[1];\n    let hight = uniforms.x_shape[2];\n    // initialize workgroup memory\n    var sum = ${c}(0);\n    var squared_sum = ${c}(0);\n    for (var h = local_idx; h < hight; h += workgroup_size) {\n      let value = ${c}(${x.get(\"batch\", \"channel\", \"h\")});\n      sum += value;\n      squared_sum += value * value;\n    }\n    workgroup_shared[local_idx] = ${p}(sum, squared_sum);\n    workgroupBarrier();\n\n    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (local_idx < currSize) {\n        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (local_idx == 0) {\n      let sum_final = ${He(\"workgroup_shared[0][0]\", d)} / f32(hight * ${d});\n      let squared_sum_final = ${He(\"workgroup_shared[0][1]\", d)} / f32(hight * ${d});\n\n      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${u}));\n      let channel_scale = inv_std_dev * f32(scale[channel]);\n      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;\n      output[workgroup_index] = vec2f(channel_scale, channel_shift);\n    }\n  }`;\n          };\n          return e.compute({ name: \"InstanceNormComputeChannelScaleShift\", shaderCache: { hint: `${d};${u};${f}`, inputDependencies: _ }, getRunData: () => ({ outputs: [{ dims: g, dataType: 1 }], dispatchGroup: { x: m }, programUniforms: S }), getShaderSource: $ }, { inputs: [t, r, n], outputs: [-1] })[0];\n        }, ch = (e, t, r) => {\n          let n = t[0].dims, o = n, i = 2, a = n[0], u = n[1], d = k.sizeFromDimension(n, i), c = ce(d), p = k.size(o) / c, m = qd(e, t[0], t[1], t[2], a, d, u, r.epsilon), f = [a, u, d / c], b = [a, u], g = [\"type\", \"none\"], _ = (S) => {\n            let $ = P(\"x\", t[0].dataType, f.length, c), v = P(\"scale_shift\", 1, b.length, 2), x = M(\"output\", t[0].dataType, f.length, c), T = [$, v, x];\n            return `\n  ${S.registerUniform(\"output_size\", \"u32\").declareVariables(...T)}\n  ${S.mainStart()}\n  ${S.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n      let outputIndices = ${x.offsetToIndices(\"global_idx\")};\n      let batch = outputIndices[0];\n      let channel = outputIndices[1];\n      let scale_shift = ${v.getByIndices(\"vec2<u32>(batch, channel)\")};\n      let value = ${$.getByOffset(\"global_idx\")} * ${x.type.value}(scale_shift.x) + ${x.type.value}(scale_shift.y);\n      ${x.setByOffset(\"global_idx\", \"value\")};\n  }`;\n          };\n          e.compute({ name: \"InstanceNormalization\", shaderCache: { hint: `${c}`, inputDependencies: g }, getRunData: () => ({ outputs: [{ dims: o, dataType: t[0].dataType }], dispatchGroup: { x: Math.ceil(p / 64) }, programUniforms: [{ type: 12, data: p }, ...N(f, b, f)] }), getShaderSource: _ }, { inputs: [t[0], m] });\n        }, ph = (e, t, r) => {\n          let n = t[0].dims, o = n, i = n[0], a = n[n.length - 1], u = k.sizeFromDimension(n, 1) / a, d = ce(a), c = k.size(o) / d, p = [{ type: 12, data: u }, { type: 12, data: Math.floor(a / d) }], m = [\"type\", \"type\"], f = false, b = [0, n.length - 1];\n          for (let $ = 0; $ < n.length - 2; $++) f = f || n[$ + 1] !== 1, b.push($ + 1);\n          f = f && n[n.length - 1] !== 1;\n          let g = f ? e.compute(Ee(e.inputs[0], b), { inputs: [e.inputs[0]], outputs: [-1] })[0] : e.inputs[0].reshape(Array.from({ length: n.length }, ($, v) => n[b[v]])), _ = qd(e, g, t[1], t[2], i, u, a, r.epsilon), S = ($) => {\n            let v = be(t[0].dataType), x = d === 1 ? \"vec2f\" : `mat${d}x2f`, T = (z) => {\n              let O = z === 0 ? \"x\" : \"y\", D = d === 1 ? \"f32\" : `vec${d}f`;\n              switch (d) {\n                case 1:\n                  return `${v}(${D}(scale.${O}))`;\n                case 2:\n                  return `vec2<${v}>(${D}(scale[0].${O}, scale[1].${O}))`;\n                case 4:\n                  return `vec4<${v}>(${D}(scale[0].${O}, scale[1].${O}, scale[2].${O}, scale[3].${O}))`;\n                default:\n                  throw new Error(`Not supported compoents ${d}`);\n              }\n            }, E = P(\"input\", t[0].dataType, t[0].dims, d), I = M(\"output\", t[0].dataType, o, d);\n            return `\n  @group(0) @binding(0) var<storage, read> input : array<${E.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scale_input : array<${x}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${I.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${$.mainStart()}\n    let current_image_number = global_idx / (uniforms.C * uniforms.H);\n    let current_channel_number = global_idx % uniforms.C;\n\n    let scale_offset = current_image_number * uniforms.C + current_channel_number;\n    let scale = scale_input[scale_offset];\n    output[global_idx] = fma(input[global_idx], ${T(0)}, ${T(1)});\n  }`;\n          };\n          e.compute({ name: \"InstanceNormalizationNHWC\", shaderCache: { hint: `${d}`, inputDependencies: m }, getRunData: () => ({ outputs: [{ dims: o, dataType: t[0].dataType }], dispatchGroup: { x: Math.ceil(c / 64) }, programUniforms: p }), getShaderSource: S }, { inputs: [t[0], _] });\n        }, jd = (e, t) => {\n          t.format === \"NHWC\" ? ph(e, e.inputs, t) : ch(e, e.inputs, t);\n        };\n      });\n      Qd = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        ie();\n        mh = (e) => {\n          if (!e || e.length < 2) throw new Error(\"layerNorm requires at least 2 inputs.\");\n        }, fh = (e, t, r) => {\n          let n = t.simplified, o = e[0].dims, i = e[1], a = !n && e[2], u = o, d = k.normalizeAxis(t.axis, o.length), c = k.sizeToDimension(o, d), p = k.sizeFromDimension(o, d), m = k.size(i.dims), f = a ? k.size(a.dims) : 0;\n          if (m !== p || a && f !== p) throw new Error(`Size of X.shape()[axis:] == ${p}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${m} and bias size of ${f}`);\n          let b = [];\n          for (let E = 0; E < o.length; ++E) E < d ? b.push(o[E]) : b.push(1);\n          let g = ce(p), _ = [\"type\", \"type\"], S = [{ type: 12, data: c }, { type: 1, data: p }, { type: 12, data: Math.floor(p / g) }, { type: 1, data: t.epsilon }];\n          a && _.push(\"type\");\n          let $ = r > 1, v = r > 2, x = (E) => {\n            let I = be(e[0].dataType), z = [P(\"x\", e[0].dataType, e[0].dims, g), P(\"scale\", i.dataType, i.dims, g)];\n            a && z.push(P(\"bias\", a.dataType, a.dims, g)), z.push(M(\"output\", e[0].dataType, u, g)), $ && z.push(M(\"mean_data_output\", 1, b)), v && z.push(M(\"inv_std_output\", 1, b));\n            let O = [{ name: \"norm_count\", type: \"u32\" }, { name: \"norm_size\", type: \"f32\" }, { name: \"norm_size_vectorized\", type: \"u32\" }, { name: \"epsilon\", type: \"f32\" }];\n            return `\n  ${E.registerUniforms(O).declareVariables(...z)}\n  ${E.mainStart()}\n    ${E.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.norm_count\")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var mean_vector = ${ao(\"f32\", g)};\n    var mean_square_vector = ${ao(\"f32\", g)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${Ct(I, g, \"x[h + offset]\")};\n      mean_vector += value;\n      mean_square_vector += value * value;\n    }\n    let mean = ${He(\"mean_vector\", g)} / uniforms.norm_size;\n    let inv_std_dev = inverseSqrt(${He(\"mean_square_vector\", g)} / uniforms.norm_size ${n ? \"\" : \"- mean * mean\"} + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${Ct(I, g, \"x[j + offset]\")};\n      let f32scale = ${Ct(I, g, \"scale[j]\")};\n      output[j + offset] = ${z[0].type.value}((f32input ${n ? \"\" : \"- mean\"}) * inv_std_dev * f32scale\n        ${a ? `+ ${Ct(I, g, \"bias[j]\")}` : \"\"}\n      );\n    }\n\n    ${$ ? \"mean_data_output[global_idx] = mean\" : \"\"};\n    ${v ? \"inv_std_output[global_idx] = inv_std_dev\" : \"\"};\n  }`;\n          }, T = [{ dims: u, dataType: e[0].dataType }];\n          return $ && T.push({ dims: b, dataType: 1 }), v && T.push({ dims: b, dataType: 1 }), { name: \"LayerNormalization\", shaderCache: { hint: `${g};${r};${n}`, inputDependencies: _ }, getRunData: () => ({ outputs: T, dispatchGroup: { x: Math.ceil(c / 64) }, programUniforms: S }), getShaderSource: x };\n        }, Zd = (e, t) => {\n          mh(e.inputs), e.compute(fh(e.inputs, t, e.outputCount));\n        };\n      });\n      Xd = U(() => {\n        \"use strict\";\n        ne();\n        Yr();\n        Xr();\n        hh = (e) => {\n          if (!e || e.length !== 2) throw new Error(\"MatMul requires 2 inputs.\");\n          if (e[0].dims[e[0].dims.length - 1] !== e[1].dims[e[1].dims.length - 2]) throw new Error(\"shared dimension does not match.\");\n        }, Yd = (e) => {\n          hh(e.inputs);\n          let t = Je.calcShape(e.inputs[0].dims, e.inputs[1].dims, true);\n          if (!t) throw new Error(\"Can't use matmul on the given tensors\");\n          let r = t[t.length - 1], n = e.inputs[0].dims[e.inputs[0].dims.length - 1];\n          if (r < 8 && n < 8) e.compute(Qr(e.inputs, { activation: \"\" }, t));\n          else {\n            let o = t[t.length - 2], i = k.size(e.inputs[0].dims.slice(0, -2)), a = k.size(e.inputs[1].dims.slice(0, -2));\n            if (i !== 1 && o === 1 && a === 1) {\n              let u = e.inputs[0].reshape([1, i, n]), d = e.inputs[1].reshape([1, n, r]), c = [1, i, r], p = [u, d];\n              e.compute(Jt(p, { activation: \"\" }, t, c), { inputs: p });\n            } else e.compute(Jt(e.inputs, { activation: \"\" }, t));\n          }\n        };\n      });\n      tl = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        gh = (e, t) => {\n          if (e.length < 3 || e.length > 4) throw new Error(\"MatMulNBits requires 3 or 4 inputs\");\n          let r = e[0], n = r.dims.length;\n          if (r.dims[n - 1] !== t.k) throw new Error(\"The last dim of input shape does not match the k value\");\n          let o = Math.floor((t.k + t.blockSize - 1) / t.blockSize), i = t.blockSize / 8 * t.bits, a = e[1];\n          if (!k.areEqual(a.dims, [t.n, o, i])) throw new Error(\"The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize\");\n          let d = e[2].dims;\n          if (k.size(d) !== t.n * o) throw new Error(\"scales input size error.\");\n          if (e.length === 4) {\n            let p = e[3].dims, m = t.bits > 4 ? t.n * o : t.n * Math.floor((o + 1) / 2);\n            if (k.size(p) !== m) throw new Error(\"zeroPoints input size error.\");\n          }\n        }, bh = (e, t) => {\n          let r = e[0].dims, n = r.length, o = r[n - 2], i = t.k, a = t.n, u = r.slice(0, n - 2), d = k.size(u), p = e[1].dims[2] / 4, m = e[0].dataType, f = ce(t.k), b = ce(p), g = ce(a), _ = u.concat([o, a]), S = o > 1 && a / g % 2 === 0 ? 2 : 1, $ = k.size(_) / g / S, v = 64, x = [], T = [d, o, i / f], E = k.convertShape(e[1].dims).slice();\n          E.splice(-1, 1, p / b), x.push(...N(T)), x.push(...N(E)), x.push(...N(e[2].dims)), e.length === 4 && x.push(...N(k.convertShape(e[3].dims)));\n          let I = [d, o, a / g];\n          x.push(...N(I));\n          let z = (O) => {\n            let D = T.length, L = P(\"a\", e[0].dataType, D, f), q = P(\"b\", 12, E.length, b), Q = P(\"scales\", e[2].dataType, e[2].dims.length), W = [L, q, Q], Z = e.length === 4 ? P(\"zero_points\", 12, e[3].dims.length) : void 0;\n            Z && W.push(Z);\n            let we = I.length, H = M(\"output\", e[0].dataType, we, g), j = be(e[0].dataType), te = (() => {\n              switch (f) {\n                case 1:\n                  return `array<${j}, 8>`;\n                case 2:\n                  return `mat4x2<${j}>`;\n                case 4:\n                  return `mat2x4<${j}>`;\n                default:\n                  throw new Error(`${f}-component is not supported.`);\n              }\n            })(), X = () => {\n              let ye = `\n          // reuse a data\n            var input_offset = ${L.indicesToOffset(`${L.type.indices}(batch, row, word_offset)`)};\n            var a_data: ${te};\n            for (var j: u32 = 0; j < ${8 / f}; j++) {\n              a_data[j] = ${L.getByOffset(\"input_offset\")};\n              input_offset++;\n            }\n          `;\n              for (let re = 0; re < g * S; re++) ye += `\n            b_value = ${b === 1 ? `b${re}_data` : `b${re}_data[i]`};\n            b_value_lower = unpack4xU8(b_value & b_mask);\n            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);\n            b_quantized_values = ${te}(${Array.from({ length: 4 }, (C, V) => `${j}(b_value_lower[${V}]), ${j}(b_value_upper[${V}])`).join(\", \")});\n            b_dequantized_values = ${f === 1 ? `${te}(${Array.from({ length: 8 }, (C, V) => `(b_quantized_values[${V}] - ${Z ? `zero_point${re}` : \"zero_point\"}) * scale${re}`).join(\", \")});` : `(b_quantized_values - ${te}(${Array(8).fill(`${Z ? `zero_point${re}` : \"zero_point\"}`).join(\",\")})) * scale${re};`};\n            workgroup_shared[local_id.x * ${S} + ${Math.floor(re / g)}]${g > 1 ? `[${re % g}]` : \"\"} += ${Array.from({ length: 8 / f }, (C, V) => `${f === 1 ? `a_data[${V}] * b_dequantized_values[${V}]` : `dot(a_data[${V}], b_dequantized_values[${V}])`}`).join(\" + \")};\n          `;\n              return ye;\n            }, ue = () => {\n              let ye = `\n            var col_index = col * ${g};\n            ${Z ? `\n            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;\n            var zero_point_byte_count: u32;\n            var zero_point_word_index: u32;\n            var zero_point_byte_offset: u32;\n            let zero_point_nibble_offset: u32 = block & 0x1u;\n            var zero_point_bits_offset: u32;\n            var zero_point_word: u32;` : `\n            // The default zero point is 8 for unsigned 4-bit quantization.\n            let zero_point = ${j}(8);`}\n            `;\n              for (let re = 0; re < g * S; re++) ye += `\n            let scale${re} = ${Q.getByOffset(\"col_index * nBlocksPerCol + block\")};\n            ${Z ? `\n            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);\n            zero_point_word_index = zero_point_byte_count >> 0x2u;\n            zero_point_byte_offset = zero_point_byte_count & 0x3u;\n            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);\n            zero_point_word = ${Z.getByOffset(\"zero_point_word_index\")} >> zero_point_bits_offset;\n            let zero_point${re} = ${j}((zero_point_word) & 0xFu);` : \"\"}\n            col_index += 1;`;\n              return ye;\n            }, he = () => {\n              let ye = `col_index = col * ${g};`;\n              for (let re = 0; re < g * S; re++) ye += `\n            let b${re}_data = ${q.getByIndices(`${q.type.indices}(col_index, block, word)`)};\n            col_index += 1;`;\n              return ye += `\n            var b_value: u32;\n            let b_mask: u32 = 0x0F0F0F0Fu;\n            var b_value_lower: vec4<u32>;\n            var b_value_upper: vec4<u32>;\n            var b_quantized_values: ${te};\n            var b_dequantized_values: ${te};`, ye;\n            };\n            return `\n        var<workgroup> workgroup_shared: array<${H.type.value}, ${S * v}>;\n        ${O.declareVariables(...W, H)}\n        ${O.mainStart([v, 1, 1])}\n          let output_indices = ${H.offsetToIndices(`(global_idx / ${v}) * ${S}`)};\n          let col = output_indices[2];\n          let row = output_indices[1];\n          let batch = output_indices[0];\n          let nBlocksPerCol = uniforms.b_shape[1];\n\n          for (var block = local_id.x; block < nBlocksPerCol; block += ${v}) {\n            //process one block\n            var word_offset: u32 = block * ${t.blockSize / f};\n            ${ue()}\n            for (var word: u32 = 0; word < ${p}; word += ${b}) {\n              ${he()}\n              for (var i: u32 = 0; i < ${b}; i++) {\n                ${X()}\n                word_offset += ${8 / f};\n              }\n            }\n          }\n          workgroupBarrier();\n\n          if (local_id.x < ${S}) {\n            var output_value: ${H.type.value} = ${H.type.value}(0);\n            var workgroup_shared_offset: u32 = local_id.x;\n            for (var b: u32 = 0u; b < ${v}u; b++) {\n              output_value += workgroup_shared[workgroup_shared_offset];\n              workgroup_shared_offset += ${S};\n            }\n            ${H.setByIndices(`${H.type.indices}(batch, row, col + local_id.x)`, \"output_value\")};\n          }\n        }`;\n          };\n          return { name: \"MatMulNBits\", shaderCache: { hint: `${t.blockSize};${t.bits};${f};${b};${g};${S};${v}`, inputDependencies: Array(e.length).fill(\"rank\") }, getRunData: () => ({ outputs: [{ dims: _, dataType: m }], dispatchGroup: { x: $ }, programUniforms: x }), getShaderSource: z };\n        }, yh = (e, t) => {\n          let r = e[0].dims, n = r.length, o = r[n - 2], i = t.k, a = t.n, u = r.slice(0, n - 2), d = k.size(u), p = e[1].dims[2] / 4, m = e[0].dataType, f = ce(t.k), b = ce(p), g = u.concat([o, a]), _ = 128, S = a % 8 === 0 ? 8 : a % 4 === 0 ? 4 : 1, $ = _ / S, v = $ * b * 8, x = v / f, T = v / t.blockSize, E = k.size(g) / S, I = [], z = [d, o, i / f], O = k.convertShape(e[1].dims).slice();\n          O.splice(-1, 1, p / b), I.push(...N(z)), I.push(...N(O)), I.push(...N(e[2].dims)), e.length === 4 && I.push(...N(k.convertShape(e[3].dims)));\n          let D = [d, o, a];\n          I.push(...N(D));\n          let L = (q) => {\n            let Q = z.length, W = P(\"a\", e[0].dataType, Q, f), Z = P(\"b\", 12, O.length, b), we = P(\"scales\", e[2].dataType, e[2].dims.length), H = [W, Z, we], j = e.length === 4 ? P(\"zero_points\", 12, e[3].dims.length) : void 0;\n            j && H.push(j);\n            let te = D.length, X = M(\"output\", e[0].dataType, te), ue = be(e[0].dataType), he = () => {\n              switch (f) {\n                case 1:\n                  return `\n          let a_data0 = vec4<${ue}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);\n          let a_data1 = vec4<${ue}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;\n                case 2:\n                  return `\n          let a_data0 = vec4<${ue}>(sub_a[word_offset], sub_a[word_offset + 1]);\n          let a_data1 = vec4<${ue}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;\n                case 4:\n                  return `\n          let a_data0 = sub_a[word_offset];\n          let a_data1 = sub_a[word_offset + 1];`;\n                default:\n                  throw new Error(`${f}-component is not supported.`);\n              }\n            };\n            return `\n        var<workgroup> sub_a: array<${W.type.value}, ${x}>;\n        var<workgroup> inter_results: array<array<${X.type.value}, ${$}>, ${S}>;\n        ${q.declareVariables(...H, X)}\n        ${q.mainStart([$, S, 1])}\n          let output_indices = ${X.offsetToIndices(`workgroup_index * ${S}`)};\n          let col = output_indices[2];\n          let row = output_indices[1];\n          let batch = output_indices[0];\n          let n_blocks_per_col = uniforms.b_shape[1];\n          let num_tiles =  (n_blocks_per_col - 1) / ${T} + 1;\n\n          // Loop over shared dimension.\n          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {\n            let a_col_start = tile * ${x};\n            // load one tile A data into shared memory.\n            for (var a_offset = local_idx; a_offset < ${x}; a_offset += ${_})\n            {\n              let a_col = a_col_start + a_offset;\n              if (a_col < uniforms.a_shape[2])\n              {\n                sub_a[a_offset] = ${W.getByIndices(`${W.type.indices}(batch, row, a_col)`)};\n              } else {\n                sub_a[a_offset] = ${W.type.value}(0);\n              }\n            }\n            workgroupBarrier();\n\n            // each thread process one block\n            let b_row = col + local_id.y;\n            let block = tile * ${T} + local_id.x;\n            ${j ? `\n            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;\n            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);\n            let zero_point_word_index = zero_point_byte_count >> 0x2u;\n            let zero_point_byte_offset = zero_point_byte_count & 0x3u;\n            let zero_point_nibble_offset: u32 = block & 0x1u;\n            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);\n            let zero_point_word = ${j.getByOffset(\"zero_point_word_index\")} >> zero_point_bits_offset;\n            let zero_point = ${ue}((zero_point_word) & 0xFu);` : `\n            // The default zero point is 8 for unsigned 4-bit quantization.\n            let zero_point = ${ue}(8);`}\n            let scale = ${we.getByOffset(\"b_row * n_blocks_per_col + block\")};\n            let b_data = ${Z.getByIndices(`${Z.type.indices}(b_row, block, 0)`)};\n            var word_offset = local_id.x * ${t.blockSize / f};\n            for (var i: u32 = 0; i < ${b}; i++) {\n              ${he()}\n              let b_value = ${b === 1 ? \"b_data\" : \"b_data[i]\"};\n              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);\n              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);\n              let b_quantized_values = mat2x4<${ue}>(${Array.from({ length: 4 }, (ye, re) => `${ue}(b_value_lower[${re}]), ${ue}(b_value_upper[${re}])`).join(\", \")});\n              let b_dequantized_values = (b_quantized_values - mat2x4<${ue}>(${Array(8).fill(\"zero_point\").join(\",\")})) * scale;\n              inter_results[local_id.y][local_id.x] += ${Array.from({ length: 2 }, (ye, re) => `${`dot(a_data${re}, b_dequantized_values[${re}])`}`).join(\" + \")};\n              word_offset += ${8 / f};\n            }\n            workgroupBarrier();\n          }\n\n          if (local_idx < ${S}) {\n            var output_value: ${X.type.value} = ${X.type.value}(0);\n            for (var b = 0u; b < ${$}; b++) {\n              output_value += inter_results[local_idx][b];\n            }\n            if (col + local_idx < uniforms.output_shape[2])\n            {\n              ${X.setByIndices(`${X.type.indices}(batch, row, col + local_idx)`, \"output_value\")}\n            }\n          }\n        }`;\n          };\n          return { name: \"BlockwiseMatMulNBits32\", shaderCache: { hint: `${t.blockSize};${f};${b};${$};${S}`, inputDependencies: Array(e.length).fill(\"rank\") }, getRunData: () => ({ outputs: [{ dims: g, dataType: m }], dispatchGroup: { x: E }, programUniforms: I }), getShaderSource: L };\n        }, Jd = (e, t) => {\n          gh(e.inputs, t), t.blockSize === 32 && e.adapterInfo.isVendor(\"intel\") && e.adapterInfo.isArchitecture(\"gen-12lp\") ? e.compute(yh(e.inputs, t)) : e.compute(bh(e.inputs, t));\n        }, el = (e) => J(e);\n      });\n      nl = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        ie();\n        _h = (e) => {\n          if (!e || e.length < 1) throw new Error(\"Too few inputs\");\n          if (e[0].dataType !== 1 && e[0].dataType !== 10) throw new Error(\"Input type must be float or float16.\");\n          if (e.length >= 2) {\n            let t = e[0].dims.length * 2 === e[1].dims[0];\n            if (e.length === 4 && (t = e[3].dims[0] * 2 === e[1].dims[0]), !t) throw new Error(\"The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].\");\n          }\n        }, wh = (e, t, r) => {\n          let n = \"\";\n          for (let o = t - 1; o >= 0; --o) n += `\n            k = i32(${e.indicesGet(\"indices\", o)}) - ${F(\"uniforms.pads\", o, r)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${F(\"uniforms.x_shape\", o, t)})) {\n              break;\n            }\n            offset += k * i32(${F(\"uniforms.x_strides\", o, t)});\n        `;\n          return `\n          value = ${e.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${n}\n            value = x[offset];\n          }\n      `;\n        }, vh = (e, t, r) => {\n          let n = \"\";\n          for (let o = t - 1; o >= 0; --o) n += `\n                k = i32(${e.indicesGet(\"indices\", o)}) - ${F(\"uniforms.pads\", o, r)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${F(\"uniforms.x_shape\", o, t)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${F(\"uniforms.x_shape\", o, t)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${F(\"uniforms.x_strides\", o, t)});\n            `;\n          return `\n              var offset = 0;\n              var k = 0;\n              ${n}\n              value = x[offset];\n          `;\n        }, $h = (e, t, r) => {\n          let n = \"\";\n          for (let o = t - 1; o >= 0; --o) n += `\n                k = i32(${e.indicesGet(\"indices\", o)}) - ${F(\"uniforms.pads\", o, r)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${F(\"uniforms.x_shape\", o, t)})) {\n                  k = i32(${F(\"uniforms.x_shape\", o, t)}) - 1;\n                }\n                offset += k * i32(${F(\"uniforms.x_strides\", o, t)});\n            `;\n          return `\n              var offset = 0;\n              var k = 0;\n              ${n}\n              value = x[offset];\n          `;\n        }, xh = (e, t, r) => {\n          let n = \"\";\n          for (let o = t - 1; o >= 0; --o) n += `\n                k = i32(${e.indicesGet(\"indices\", o)}) - ${F(\"uniforms.pads\", o, r)};\n                if (k < 0)  {\n                  k += i32(${F(\"uniforms.x_shape\", o, t)}]);\n                }\n                if (k >= i32(${F(\"uniforms.x_shape\", o, t)})) {\n                  k -= i32(${F(\"uniforms.x_shape\", o, t)});\n                }\n                offset += k * i32(${F(\"uniforms.x_strides\", o, t)});\n            `;\n          return `\n              var offset = 0;\n              var k = 0;\n              ${n}\n              value = x[offset];\n          `;\n        }, Sh = (e, t, r) => {\n          switch (r.mode) {\n            case 0:\n              return wh(e, t, r.pads.length);\n            case 1:\n              return vh(e, t, r.pads.length);\n            case 2:\n              return $h(e, t, r.pads.length);\n            case 3:\n              return xh(e, t, r.pads.length);\n            default:\n              throw new Error(\"Invalid mode\");\n          }\n        }, Th = (e, t) => {\n          let r = k.padShape(e[0].dims.slice(), t.pads), n = e[0].dims, o = k.size(r), i = [{ type: 12, data: o }, { type: 6, data: t.pads }], a = e.length >= 3 && e[2].data;\n          t.mode === 0 && i.push({ type: a ? e[2].dataType : 1, data: t.value }), i.push(...N(e[0].dims, r));\n          let u = [\"rank\"], d = (c) => {\n            let p = M(\"output\", e[0].dataType, r.length), m = P(\"x\", e[0].dataType, n.length), f = m.type.value, b = Sh(p, n.length, t), g = [{ name: \"output_size\", type: \"u32\" }, { name: \"pads\", type: \"i32\", length: t.pads.length }];\n            return t.mode === 0 && g.push({ name: \"constant_value\", type: a ? f : \"f32\" }), `\n            ${c.registerUniforms(g).declareVariables(m, p)}\n            ${c.mainStart()}\n            ${c.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n\n            let indices = ${p.offsetToIndices(\"global_idx\")};\n\n            var value = ${f}(0);\n            ${b}\n            output[global_idx] = value;\n        }`;\n          };\n          return { name: \"Pad\", shaderCache: { hint: `${t.mode}${a}`, inputDependencies: u }, getRunData: () => ({ outputs: [{ dims: r, dataType: e[0].dataType }], dispatchGroup: { x: Math.ceil(k.size(r) / 64) }, programUniforms: i }), getShaderSource: d };\n        }, Ih = (e, t) => {\n          if (e.length > 1) {\n            let r = e[1].getBigInt64Array(), n = e.length >= 3 && e[2].data ? e[2].dataType === 10 ? e[2].getUint16Array()[0] : e[2].getFloat32Array()[0] : 0, o = e[0].dims.length, i = new Int32Array(2 * o).fill(0);\n            if (e.length >= 4) {\n              let u = e[3].getBigInt64Array();\n              for (let d = 0; d < u.length; d++) i[Number(u[d])] = Number(r[d]), i[Number(u[d]) + o] = Number(r[d + u.length]);\n            } else r.forEach((u, d) => i[Number(d)] = Number(u));\n            let a = [];\n            return i.forEach((u) => a.push(u)), { mode: t.mode, value: n, pads: a };\n          } else return t;\n        }, rl = (e, t) => {\n          _h(e.inputs);\n          let r = Ih(e.inputs, t);\n          e.compute(Th(e.inputs, r), { inputs: [0] });\n        };\n      });\n      wl = U(() => {\n        \"use strict\";\n        We();\n        ee();\n        ne();\n        ie();\n        rn = (e) => {\n          if (ge.webgpu.validateInputContent && (!e || e.length !== 1)) throw new Error(\"Pool ops requires 1 input.\");\n        }, ol = (e, t, r) => {\n          let n = t.format === \"NHWC\", o = e.dims.slice();\n          n && o.splice(1, 0, o.pop());\n          let i = Object.hasOwnProperty.call(t, \"dilations\"), a = t.kernelShape.slice(), u = t.strides.slice(), d = i ? t.dilations.slice() : [], c = t.pads.slice();\n          Tt.adjustPoolAttributes(r, o, a, u, d, c);\n          let p = Tt.computePoolOutputShape(r, o, u, d, a, c, t.autoPad), m = Object.assign({}, t);\n          i ? Object.assign(m, { kernelShape: a, strides: u, pads: c, dilations: d, cacheKey: t.cacheKey }) : Object.assign(m, { kernelShape: a, strides: u, pads: c, cacheKey: t.cacheKey });\n          let f = p.slice();\n          return f.push(f.splice(1, 1)[0]), [m, n ? f : p];\n        }, il = (e, t) => {\n          let r = t.format === \"NHWC\", n = k.size(e), o = k.size(t.kernelShape), i = [{ type: 12, data: n }, { type: 12, data: o }], a = [{ name: \"outputSize\", type: \"u32\" }, { name: \"kernelSize\", type: \"u32\" }];\n          if (t.kernelShape.length <= 2) {\n            let u = t.kernelShape[t.kernelShape.length - 1], d = t.strides[t.strides.length - 1], c = t.pads[t.pads.length / 2 - 1], p = t.pads[t.pads.length - 1], m = !!(c + p);\n            i.push({ type: 12, data: u }, { type: 12, data: d }, { type: 12, data: c }, { type: 12, data: p }), a.push({ name: \"kw\", type: \"u32\" }, { name: \"sw\", type: \"u32\" }, { name: \"pwStart\", type: \"u32\" }, { name: \"pwEnd\", type: \"u32\" });\n            let f = false;\n            if (t.kernelShape.length === 2) {\n              let b = t.kernelShape[t.kernelShape.length - 2], g = t.strides[t.strides.length - 2], _ = t.pads[t.pads.length / 2 - 2], S = t.pads[t.pads.length - 2];\n              f = !!(_ + S), i.push({ type: 12, data: b }, { type: 12, data: g }, { type: 12, data: _ }, { type: 12, data: S }), a.push({ name: \"kh\", type: \"u32\" }, { name: \"sh\", type: \"u32\" }, { name: \"phStart\", type: \"u32\" }, { name: \"phEnd\", type: \"u32\" });\n            }\n            return [i, a, true, m, f];\n          } else {\n            if (r) throw new Error(\"Pooling with kernelShape.length > 2 is not supported for NHWC format.\");\n            let u = k.computeStrides(t.kernelShape);\n            i.push({ type: 12, data: u }, { type: 12, data: t.pads }, { type: 12, data: t.strides }), a.push({ name: \"kernelStrides\", type: \"u32\", length: u.length }, { name: \"pads\", type: \"u32\", length: t.pads.length }, { name: \"strides\", type: \"u32\", length: t.strides.length });\n            let d = t.pads.reduce((c, p) => c + p);\n            return [i, a, !!d, false, false];\n          }\n        }, al = (e, t, r, n, o, i, a, u, d, c, p, m) => {\n          let f = o.format === \"NHWC\", b = t.type.value, g = M(\"output\", t.type.tensor, n);\n          if (o.kernelShape.length <= 2) {\n            let _ = \"\", S = \"\", $ = \"\", v = r - (f ? 2 : 1);\n            if (p ? _ = `\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${v}] = indices[${v}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${v}] < 0 || xIndices[${v}]\n                      >= uniforms.x_shape[${v}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset(\"xIndices\")}];\n                  ${i}\n                }` : _ = `\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${v}] = indices[${v}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset(\"xIndices\")}];\n                  ${i}\n                }`, o.kernelShape.length === 2) {\n              let T = r - (f ? 3 : 2);\n              m ? S = `\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${T}] = indices[${T}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${T}] < 0 || xIndices[${T}] >= uniforms.x_shape[${T}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              ` : S = `\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${T}] = indices[${T}] * uniforms.sh - uniforms.phStart + j;\n                `, $ = `\n              }\n            `;\n            }\n            return `\n            ${e.registerUniforms(d).declareVariables(t, g)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n\n              let indices = ${g.offsetToIndices(\"global_idx\")};\n              var xIndices = ${g.offsetToIndices(\"global_idx\")};\n\n              var value = ${b}(${u});\n              var pad = 0;\n              ${S}\n              ${_}\n              ${$}\n              ${a}\n\n              output[global_idx] = value;\n            }`;\n          } else {\n            if (f) throw new Error(\"Pooling with kernelShape.length > 2 is not supported for NHWC format.\");\n            let _ = o.kernelShape.length, S = o.pads.length, $ = \"\";\n            return c ? $ = `\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset(\"xIndices\")}];\n                ${i}\n              }` : $ = `\n              }\n              let x_val = x[${t.indicesToOffset(\"xIndices\")}];\n              ${i}\n            `, `\n            ${e.registerUniforms(d).declareVariables(t, g)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n              let indices = ${g.offsetToIndices(\"global_idx\")};\n              var xIndices = ${g.offsetToIndices(\"global_idx\")};\n\n              var offsets: array<u32, ${_}>;\n\n              var value = ${b}(${u});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${_ - 1}u; j++) {\n                  offsets[j] = offset / ${F(\"uniforms.kernelStrides\", \"j\", _)};\n                  offset -= offsets[j] * ${F(\"uniforms.kernelStrides\", \"j\", _)};\n                }\n                offsets[${_ - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${r - _}u; j < ${r}u; j++) {\n                  xIndices[j] = indices[j] * ${F(\"uniforms.strides\", `j - ${r - _}u`, _)}\n                    + offsets[j - ${r - _}u] - ${F(\"uniforms.pads\", \"j - 2u\", S)};\n                  ${$}\n              }\n              ${a}\n\n              output[global_idx] = value;\n            }`;\n          }\n        }, sl = (e) => `${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`, Ch = (e) => `${sl(e)};${e.countIncludePad}`, Ah = (e) => `${sl(e)};${e.storageOrder};${e.dilations}`, ul = (e) => ({ format: e.format, autoPad: [\"NOTSET\", \"VALID\", \"SAME_UPPER\", \"SAME_LOWER\"][e.auto_pad], ceilMode: e.ceil_mode, kernelShape: e.kernel_shape, strides: e.strides, pads: e.pads }), dl = (e, t, r, n) => {\n          let [o, i] = ol(t, n, r), a = P(\"x\", t.dataType, t.dims.length), u = a.type.value, d = \"value += x_val;\", c = \"\";\n          o.countIncludePad ? c += `value /= ${u}(uniforms.kernelSize);` : c += `value /= ${u}(i32(uniforms.kernelSize) - pad);`;\n          let [p, m, f, b, g] = il(i, o);\n          p.push(...N(t.dims, i));\n          let _ = [\"rank\"];\n          return { name: e, shaderCache: { hint: `${n.cacheKey};${f};${b};${g}`, inputDependencies: _ }, getRunData: () => ({ outputs: [{ dims: i, dataType: t.dataType }], dispatchGroup: { x: Math.ceil(k.size(i) / 64) }, programUniforms: p }), getShaderSource: (S) => al(S, a, t.dims.length, i.length, o, d, c, 0, m, f, b, g) };\n        }, ll = (e) => {\n          let t = e.count_include_pad !== 0, r = ul(e);\n          if (r.ceilMode !== 0) throw new Error(\"using ceil() in shape computation is not yet supported for AveragePool\");\n          let n = { countIncludePad: t, ...r, cacheKey: \"\" };\n          return { ...n, cacheKey: Ch(n) };\n        }, cl = (e, t) => {\n          rn(e.inputs), e.compute(dl(\"AveragePool\", e.inputs[0], false, t));\n        }, pl = { autoPad: \"\", ceilMode: 0, countIncludePad: false, kernelShape: [], strides: [], pads: [], storageOrder: 0, dilations: [] }, ml = (e) => {\n          let t = e.format;\n          return { format: t, ...pl, cacheKey: t };\n        }, fl = (e, t) => {\n          rn(e.inputs), e.compute(dl(\"GlobalAveragePool\", e.inputs[0], true, t));\n        }, hl = (e, t, r, n) => {\n          let [o, i] = ol(t, n, r), a = `\n      value = max(x_val, value);\n    `, u = \"\", d = P(\"x\", t.dataType, t.dims.length), c = [\"rank\"], [p, m, f, b, g] = il(i, o);\n          return p.push(...N(t.dims, i)), { name: e, shaderCache: { hint: `${n.cacheKey};${f};${b};${g}`, inputDependencies: c }, getRunData: () => ({ outputs: [{ dims: i, dataType: t.dataType }], dispatchGroup: { x: Math.ceil(k.size(i) / 64) }, programUniforms: p }), getShaderSource: (_) => al(_, d, t.dims.length, i.length, o, a, u, t.dataType === 10 ? -65504 : -1e5, m, f, b, g) };\n        }, gl = (e, t) => {\n          rn(e.inputs), e.compute(hl(\"MaxPool\", e.inputs[0], false, t));\n        }, bl = (e) => {\n          let t = e.storage_order, r = e.dilations, n = ul(e);\n          if (t !== 0) throw new Error(\"column major storage order is not yet supported for MaxPool\");\n          if (n.ceilMode !== 0) throw new Error(\"using ceil() in shape computation is not yet supported for MaxPool\");\n          let o = { storageOrder: t, dilations: r, ...n, cacheKey: \"\" };\n          return { ...o, cacheKey: Ah(o) };\n        }, yl = (e) => {\n          let t = e.format;\n          return { format: t, ...pl, cacheKey: t };\n        }, _l = (e, t) => {\n          rn(e.inputs), e.compute(hl(\"GlobalMaxPool\", e.inputs[0], true, t));\n        };\n      });\n      xl = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        kh = (e, t) => {\n          if (e.length < 2 || e.length > 3) throw new Error(\"DequantizeLinear requires 2 or 3 inputs.\");\n          if (e.length === 3 && e[1].dims === e[2].dims) throw new Error(\"x-scale and x-zero-point must have the same shape.\");\n          if (e.length === 3 && e[0].dataType !== e[2].dataType) throw new Error(\"x and x-zero-point must have the same data type.\");\n          if (e[0].dataType === 6 && e.length > 2) throw new Error(\"In the case of dequantizing int32 there is no zero point.\");\n          if (e[1].dims.length !== 0 && e[1].dims.length !== 1 && e[1].dims.length !== e[0].dims.length) throw new Error(\"scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.\");\n          if (e.length > 2) {\n            if (e[0].dataType !== e[2].dataType) throw new Error(\"x and x-zero-point must have the same data type.\");\n            if (e[1].dims.length !== e[2].dims.length) throw new Error(\"scale and zero-point inputs must have the same rank.\");\n            if (!e[1].dims.map((r, n) => r === e[2].dims[n]).reduce((r, n) => r && n, true)) throw new Error(\"scale and zero-point inputs must have the same shape.\");\n          }\n          if (t.blockSize > 0) {\n            if (e[1].dims.length === 0 || e[1].dims.length === 1 && e[1].dims[0] === 1) throw new Error(\"blockSize must be set only for block quantization.\");\n            if (!e[1].dims.map((o, i) => i === t.axis || o === e[0].dims[i]).reduce((o, i) => o && i, true)) throw new Error(\"For block qunatization, scale input shape to match the input shape except for the axis\");\n            if (e[1].dims.length !== e[0].dims.length) throw new Error(\"For block qunatization the scale input rank must be the same as the x rank.\");\n            let r = e[0].dims[t.axis], n = e[1].dims[t.axis];\n            if (t.blockSize < Math.ceil(r / n) || t.blockSize > Math.ceil(r / (n - 1) - 1)) throw new Error(\"blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].\");\n          }\n        }, Ph = (e, t) => {\n          let r = k.normalizeAxis(t.axis, e[0].dims.length), n = e[0].dataType, o = n === 3, i = e[0].dims, a = e[1].dataType, u = k.size(i), d = n === 3 || n === 2, c = d ? [Math.ceil(k.size(e[0].dims) / 4)] : e[0].dims, p = e[1].dims, m = e.length > 2 ? e[2] : void 0, f = m ? d ? [Math.ceil(k.size(m.dims) / 4)] : m.dims : void 0, b = p.length === 0 || p.length === 1 && p[0] === 1, g = b === false && p.length === 1, _ = ce(u), S = b && (!d || _ === 4), $ = S ? _ : 1, v = S && !d ? _ : 1, x = P(\"input\", d ? 12 : n, c.length, v), T = P(\"scale\", a, p.length), E = m ? P(\"zero_point\", d ? 12 : n, f.length) : void 0, I = M(\"output\", a, i.length, $), z = [x, T];\n          E && z.push(E);\n          let O = [c, p];\n          m && O.push(f);\n          let D = [{ type: 12, data: u / $ }, { type: 12, data: r }, { type: 12, data: t.blockSize }, ...N(...O, i)], L = (q) => {\n            let Q = [{ name: \"output_size\", type: \"u32\" }, { name: \"axis\", type: \"u32\" }, { name: \"block_size\", type: \"u32\" }];\n            return `\n      ${q.registerUniforms(Q).declareVariables(...z, I)}\n      ${q.mainStart()}\n          ${q.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n          let output_indices = ${I.offsetToIndices(\"global_idx\")};\n\n          // Set input x\n          ${d ? `\n            let input = ${x.getByOffset(\"global_idx / 4\")};\n            let x_vec = ${o ? \"unpack4xI8(input)\" : \"unpack4xU8(input)\"};\n            let x_value = ${$ === 1 ? \"x_vec[global_idx % 4]\" : \"x_vec\"};` : `let x_value = ${x.getByOffset(\"global_idx\")};`};\n\n          // Set scale input\n          ${b ? `let scale_value= ${T.getByOffset(\"0\")}` : g ? `\n            let scale_index = ${I.indicesGet(\"output_indices\", \"uniforms.axis\")};\n            let scale_value= ${T.getByOffset(\"scale_index\")};` : `\n            var scale_indices: ${T.type.indices} = output_indices;\n            let index = ${T.indicesGet(\"scale_indices\", \"uniforms.axis\")} / uniforms.block_size;\n            ${T.indicesSet(\"scale_indices\", \"uniforms.axis\", \"index\")};\n            let scale_value= ${T.getByIndices(\"scale_indices\")};`};\n\n          // Set zero-point input\n          ${E ? b ? d ? `\n                let zero_point_input = ${E.getByOffset(\"0\")};\n                let zero_point_vec =  ${o ? \"unpack4xI8(zero_point_input)\" : \"unpack4xU8(zero_point_input)\"};\n                let zero_point_value= zero_point_vec[0]` : `let zero_point_value = ${E.getByOffset(\"0\")}` : g ? d ? `\n                let zero_point_index = ${I.indicesGet(\"output_indices\", \"uniforms.axis\")};\n                let zero_point_input = ${E.getByOffset(\"zero_point_index / 4\")};\n                let zero_point_vec =  ${o ? \"unpack4xI8(zero_point_input)\" : \"unpack4xU8(zero_point_input)\"};\n                let zero_point_value = zero_point_vec[zero_point_index % 4]` : `\n                let zero_point_index = ${I.indicesGet(\"output_indices\", \"uniforms.axis\")};\n                let zero_point_value = ${E.getByOffset(\"zero_point_index\")};` : d ? `\n                let zero_point_offset = ${T.indicesToOffset(\"scale_indices\")};\n                let zero_point_input = ${E.getByOffset(\"zero_point_offset / 4\")};\n                let zero_point_vec = ${o ? \"unpack4xI8(zero_point_input)\" : \"unpack4xU8(zero_point_input)\"};\n                let zero_point_value = zero_point_vec[zero_point_offset % 4];` : `let zero_point_value = ${E.getByIndices(\"scale_indices\")};` : `let zero_point_value = ${d ? o ? \"i32\" : \"u32\" : x.type.value}(0);`};\n      // Compute and write output\n      ${I.setByOffset(\"global_idx\", `${I.type.value}(x_value - zero_point_value) * scale_value`)};\n      }`;\n          };\n          return { name: \"DequantizeLinear\", shaderCache: { hint: t.cacheKey, inputDependencies: E ? [\"rank\", \"rank\", \"rank\"] : [\"rank\", \"rank\"] }, getShaderSource: L, getRunData: () => ({ outputs: [{ dims: i, dataType: a }], dispatchGroup: { x: Math.ceil(u / $ / 64), y: 1, z: 1 }, programUniforms: D }) };\n        }, vl = (e, t) => {\n          kh(e.inputs, t), e.compute(Ph(e.inputs, t));\n        }, $l = (e) => J({ axis: e.axis, blockSize: e.blockSize });\n      });\n      Tl = U(() => {\n        \"use strict\";\n        We();\n        ee();\n        ie();\n        zh = (e, t, r) => {\n          let n = e === t, o = e < t && r < 0, i = e > t && r > 0;\n          if (n || o || i) throw new Error(\"Range these inputs' contents are invalid.\");\n        }, Oh = (e, t, r, n) => {\n          let o = Math.abs(Math.ceil((t - e) / r)), i = [o], a = o, u = [{ type: 12, data: a }, { type: n, data: e }, { type: n, data: r }, ...N(i)], d = (c) => {\n            let p = M(\"output\", n, i.length), m = p.type.value, f = [{ name: \"outputSize\", type: \"u32\" }, { name: \"start\", type: m }, { name: \"delta\", type: m }];\n            return `\n        ${c.registerUniforms(f).declareVariables(p)}\n        ${c.mainStart()}\n        ${c.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n        output[global_idx] = uniforms.start + ${m}(global_idx) * uniforms.delta;\n      }`;\n          };\n          return { name: \"Range\", shaderCache: { hint: `${n}` }, getShaderSource: d, getRunData: () => ({ outputs: [{ dims: i, dataType: n }], dispatchGroup: { x: Math.ceil(a / 64) }, programUniforms: u }) };\n        }, Sl = (e) => {\n          let t = 0, r = 0, n = 0;\n          e.inputs[0].dataType === 6 ? (t = e.inputs[0].getInt32Array()[0], r = e.inputs[1].getInt32Array()[0], n = e.inputs[2].getInt32Array()[0]) : e.inputs[0].dataType === 1 && (t = e.inputs[0].getFloat32Array()[0], r = e.inputs[1].getFloat32Array()[0], n = e.inputs[2].getFloat32Array()[0]), ge.webgpu.validateInputContent && zh(t, r, n), e.compute(Oh(t, r, n, e.inputs[0].dataType), { inputs: [] });\n        };\n      });\n      kl = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        Bh = (e, t, r, n) => {\n          if (e !== \"none\" && n !== \"i32\" && n !== \"u32\" && n !== \"f32\") throw new Error(`Input ${n} is not supported with reduction ${e}.`);\n          let o = `{\n                var oldValue = 0;\n                loop {\n                  let newValueF32 =`, i = `;\n                  let newValue = bitcast<i32>(newValueF32);\n                  let res = atomicCompareExchangeWeak(&${t}, oldValue, newValue);\n                  if res.exchanged {\n                    break;\n                  }\n                  oldValue = res.old_value;\n                }\n              }`;\n          switch (e) {\n            case \"none\":\n              return `${t}=${r};`;\n            case \"add\":\n              return n === \"i32\" || n === \"u32\" ? `atomicAdd(&${t}, bitcast<${n}>(${r}));` : `\n              ${o}bitcast<${n}>(oldValue) + (${r})${i}`;\n            case \"max\":\n              return n === \"i32\" || n === \"u32\" ? `atomicMax(&${t}, bitcast<${n}>(${r}));` : `\n                ${o}max(bitcast<f32>(oldValue), (${r}))${i}`;\n            case \"min\":\n              return n === \"i32\" || n === \"u32\" ? `atomicMin(&${t}, bitcast<${n}>(${r}));` : `${o}min(bitcast<${n}>(oldValue), (${r}))${i}`;\n            case \"mul\":\n              return `${o}(bitcast<${n}>(oldValue) * (${r}))${i}`;\n            default:\n              throw new Error(`Reduction ${e} is not supported.`);\n          }\n        }, Il = (e, t) => `${e === 1 ? `\n    let element_count_dim = uniforms.output_strides;\n    let dim_value = uniforms.output_shape;` : `\n    let element_count_dim = uniforms.output_strides[${t ? \"i - indices_start\" : \"i\"}];\n    let dim_value = uniforms.output_shape[${t ? \"i - indices_start\" : \"i\"} + uniforms.last_index_dimension];`}\n    \n    if (index >= 0) {\n      if (index >= i32(dim_value)) {\n        index = i32(dim_value - 1);\n      }\n    } else {\n      if (index < -i32(dim_value)) {\n        index = 0;\n      } else {\n        index += i32(dim_value);\n      }\n    }\n    data_offset += u32((u32(index) * element_count_dim));`, Cl = (e, t, r) => `for (var i = 0u; i < uniforms.num_updates_elements; i++) {\n        let value = updates[uniforms.num_updates_elements * ${r ? \"global_idx\" : \"idx\"} + i];\n        ${Bh(e.reduction, \"output[data_offset + i]\", \"value\", t)}\n      }`, Dh = (e, t) => {\n          let r = e[0].dims, n = e[1].dims, o = r, i = 1, a = Math.ceil(k.size(n) / i), u = n[n.length - 1], d = k.sizeFromDimension(r, u), c = k.sizeFromDimension(n, 0) / u, p = [{ type: 12, data: a }, { type: 12, data: u }, { type: 12, data: d }, ...N(e[1].dims, e[2].dims, o)], m = (f) => {\n            let b = P(\"indices\", e[1].dataType, e[1].dims.length), g = P(\"updates\", e[2].dataType, e[2].dims.length, i), _ = t.reduction !== \"none\" && t.reduction !== \"\" ? es(\"output\", e[0].dataType, o.length) : M(\"output\", e[0].dataType, o.length, i);\n            return `\n      ${f.registerUniform(\"output_size\", \"u32\").registerUniform(\"last_index_dimension\", \"u32\").registerUniform(\"num_updates_elements\", \"u32\").declareVariables(b, g, _)}\n      ${f.mainStart()}\n        ${f.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n  var hasDuplicates = false;\n  if (${t.reduction === \"none\"}) {\n    for (var i = 0; i < ${c}; i = i + 1) {\n      for (var j = i + 1; j < ${c}; j = j + 1) {\n        var index_i = i32(indices[i].x);\n        var index_j = i32(indices[j].x);\n        if (index_i == index_j) {\n          hasDuplicates = true;\n          break;\n        }\n      }\n      if (hasDuplicates) {\n        break;\n      }\n    }\n  }\n\n  if (${t.reduction === \"none\"} && hasDuplicates) {\n    if (global_idx != 0u) {\n      return;\n    }\n    // Process each index-update pair individually when duplicates exist\n    for (var idx = 0u; idx < ${c}u; idx++) {\n      var data_offset = 0u;\n      for (var i = 0u; i < uniforms.last_index_dimension; i++) {\n        var index = i32(indices[idx * uniforms.last_index_dimension + i].x);\n        ${Il(r.length, false)}\n      }\n      ${Cl(t, _.type.value, false)}\n    }\n    return;\n  }\n\n  var data_offset = 0u;\n  var indices_start = uniforms.last_index_dimension * global_idx;\n  var indices_end = indices_start + uniforms.last_index_dimension;\n  for (var i = indices_start; i < indices_end; i++) {\n    var index = i32(indices[i].x);\n    ${Il(r.length, true)}\n  }\n  ${Cl(t, _.type.value, true)}\n  }`;\n          };\n          return { name: \"ScatterND\", shaderCache: { hint: `${t.cacheKey}_${t.reduction}`, inputDependencies: [\"rank\", \"rank\"] }, getRunData: () => ({ outputs: [{ dims: o, dataType: e[0].dataType }], dispatchGroup: { x: Math.ceil(a / 64) }, programUniforms: p }), getShaderSource: m };\n        }, Al = (e) => J({ reduction: e.reduction }), El = (e, t) => {\n          e.compute(Dh(e.inputs, t), { inputs: [e.inputs[1], e.inputs[2]], outputs: [] });\n        };\n      });\n      Dl = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        Mh = (e, t) => {\n          if (e.every((r) => r > 0 || (() => {\n            throw new Error(\"Resize requires scales input values to be positive\");\n          })), e.length > 0) {\n            if (t.mode === \"linear\") {\n              if (!(e.length === 2 || e.length === 3 || e.length === 4 && e[0] === 1 && e[1] === 1 || e.length === 4 && e[0] === 1 && e[3] === 1 || e.length === 5 && e[0] === 1 && e[1] === 1)) throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`);\n            } else if (t.mode === \"cubic\" && !(e.length === 2 || e.length === 4 && e[0] === 1 && e[1] === 1 || e.length === 4 && e[0] === 1 && e[3] === 1)) throw new Error(\"Resize requires scales input size to be 2 or 4 for cubic mode\");\n          }\n        }, Rh = (e, t, r) => {\n          t.every((o) => o >= 0 && o < r || (() => {\n            throw new Error(\"Resize requires axes input values to be positive and less than rank\");\n          }));\n          let n = new Array(r).fill(1);\n          return t.forEach((o, i) => n[o] = e[i]), n;\n        }, Uh = (e, t, r, n, o, i) => {\n          let [a, u, d] = r > 10 ? [1, 2, 3] : [-1, e.length > 1 ? 1 : -1, -1], c = e[0].dims.length;\n          if (a > 0 && e.length > a && e[a].dims.length > 0) e[a].getFloat32Array().forEach((p) => i.push(p));\n          else if (t.coordinateTransformMode === \"tf_crop_and_resize\") throw new Error(\"Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize\");\n          if (u > 0 && e.length > u && e[u].dims.length === 1 && e[u].dims[0] > 0) {\n            if (e[u].getFloat32Array().forEach((p) => n.push(p)), n.length !== 0 && n.length !== c && r >= 18 && n.length !== t.axes.length) throw new Error(\"Resize requires scales input size to be same as input rank or axes size for opset 18 and up\");\n            Mh(n, t), t.axes.length > 0 && Rh(n, t.axes, c).forEach((p, m) => n[m] = p);\n          }\n          if (d > 0 && e.length > d && e[d].dims.length === 1 && e[d].dims[0] > 0 && (e[d].getBigInt64Array().forEach((p) => o.push(Number(p))), o.length !== 0 && o.length !== c && r >= 18 && o.length !== t.axes.length)) throw new Error(\"Resize requires sizes input size to be same as input rank or axes size for opset 18 and up\");\n          if (t.axes.length > 0) {\n            if (n.length !== 0 && n.length !== t.axes.length) throw new Error('Resize requires \"scales\" input size to be of axes rank when axes attributes is specified');\n            if (o.length !== 0 && o.length !== t.axes.length) throw new Error('Resize requires \"sizes\" input size to be of rank axes rank when axes attributes is specified');\n          }\n          if (typeof n < \"u\" && typeof o < \"u\" && n.length > 0 && o.length > c) throw new Error(\"Resize requires only of scales or sizes to be specified\");\n        }, Pl = (e, t, r, n) => `\n  // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n  // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n  // offset-by-one error later in floor().\n  let big = (${e}) * (${t});\n  let whole = ${n}(big / (${r}));\n  let fract = ${n}(big % (${r})) / ${n}(${r});\n  return whole + fract;\n`, Nh = (e, t) => `fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { ` + (() => {\n          switch (e) {\n            case \"asymmetric\":\n              return `\n          if (xScale < 1.0 || floor(xScale) != xScale) {\n            return ${t}(xResized) / ${t}(xScale);\n          } else {\n            ${Pl(\"xResized\", \"lengthOriginal\", \"lengthResized\", t)}\n          }\n        `;\n            case \"pytorch_half_pixel\":\n              return `if (lengthResized > 1) {\n                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;\n            case \"tf_half_pixel_for_nn\":\n              return `return (${t}(xResized) + 0.5) / ${t}(xScale);`;\n            case \"align_corners\":\n              return `if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    ${Pl(\"xResized\", \"lengthOriginal - 1\", \"lengthResized - 1\", t)}\n                  }`;\n            case \"tf_crop_and_resize\":\n              return `if (lengthResized > 1) {\n                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +\n                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /\n                        ${t}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);\n                  }`;\n            case \"half_pixel_symmetric\":\n              return `const outputWidth = ${t}xScale * ${t}(lengthResized);\n                  const adjustment = ${t}(lengthResized) / outputWidth;\n                  const center = ${t}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;\n            case \"half_pixel\":\n              return `return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;\n            default:\n              throw new Error(`Coordinate transform mode ${e} is not supported`);\n          }\n        })() + \"}\", Vh = (e, t, r) => `fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {` + (() => {\n          switch (e) {\n            case \"round_prefer_ceil\":\n              return \"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }\";\n            case \"floor\":\n              return \"return floor(xOriginal);\";\n            case \"ceil\":\n              return \"return ceil(xOriginal);\";\n            case \"round_prefer_floor\":\n              return \"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }\";\n            case \"simple\":\n            default:\n              if (t < 11) return \"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }\";\n              throw new Error(`Nearest mode ${e} is not supported`);\n          }\n        })() + \"}\", Wh = (e, t, r) => {\n          let n = new Array(r).fill(0).concat(new Array(r).fill(1)), o = e.length === 0 ? n : e.slice();\n          return t.length > 0 ? (t.forEach((i, a) => {\n            n[i] = o[a], n[a + r] = o[t.length + a];\n          }), n) : o;\n        }, Lh = (e, t, r, n) => {\n          let o = [];\n          if (r.length > 0) if (n.length > 0) {\n            if (e.forEach((i) => o.push(i)), Math.max(...n) > e.length) throw new Error(\"axes is out of bound\");\n            n.forEach((i, a) => o[i] = r[a]);\n          } else r.forEach((i) => o.push(i));\n          else {\n            if (t.length === 0) throw new Error(\"Resize requires either scales or sizes.\");\n            o = e.map((i, a) => Math.round(i * t[a]));\n          }\n          return o;\n        }, Gh = (e, t, r) => {\n          let n = (() => {\n            switch (r.keepAspectRatioPolicy) {\n              case \"not_larger\":\n                return r.axes.length > 0 ? Math.min(...r.axes.map((i) => t[i]), Number.MAX_VALUE) : Math.min(...t, Number.MAX_VALUE);\n              case \"not_smaller\":\n                return r.axes.length > 0 ? Math.max(...r.axes.map((i) => t[i]), Number.MIN_VALUE) : Math.max(...t, Number.MIN_VALUE);\n              default:\n                throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`);\n            }\n          })();\n          t.fill(1, 0, t.length);\n          let o = e.slice();\n          return r.axes.length > 0 ? (r.axes.forEach((i) => t[i] = n), r.axes.forEach((i) => o[i] = Math.round(e[i] * t[i]))) : (t.fill(n, 0, t.length), o.forEach((i, a) => o[a] = Math.round(i * t[a]))), o;\n        }, Hh = (e, t, r, n, o) => `\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      var original_indices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${e.indicesGet(\"output_indices\", \"i\")};\n        var scale = ${F(\"uniforms.scales\", \"i\", n)};\n        var roi_low = ${F(\"uniforms.roi\", \"i\", o)};\n        var roi_hi = ${F(\"uniforms.roi\", `i + ${t.length}`, o)};\n        if (scale == 1.0) {\n          original_indices[i] = ${e.type.value}(output_index);\n        } else {\n          var input_shape_i = ${F(\"uniforms.input_shape\", \"i\", t.length)};\n          var output_shape_i = ${F(\"uniforms.output_shape\", \"i\", r.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`, Fh = (e, t, r, n, o, i, a) => `\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${n.length}; i++) {\n        var output_index = ${t.indicesGet(\"output_indices\", \"i\")};\n        var input_index: u32;\n        var scale = ${F(\"uniforms.scales\", \"i\", o)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${F(\"uniforms.roi\", \"i\", i)};\n          var roi_hi = ${F(\"uniforms.roi\", `i + ${r.length}`, i)};\n          var input_shape_i = ${F(\"uniforms.input_shape\", \"i\", r.length)};\n          var output_shape_i = ${F(\"uniforms.output_shape\", \"i\", n.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${a} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet(\"input_indices\", \"i\", \"input_index\")}\n      }\n      return input_indices;\n    }`, qh = (e, t) => `\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var input_index = ${e.indicesGet(\"input_indices\", \"i\")};\n        if (input_index < 0 || input_index >= ${F(\"uniforms.input_shape\", \"i\", t.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`, zl = (e, t, r, n) => e.rank > n ? `\n    ${e.indicesSet(\"input_indices\", t, \"channel\")};\n    ${e.indicesSet(\"input_indices\", r, \"batch\")};\n` : \"\", jh = (e, t, r, n, o) => {\n          let [a, u, d, c] = r.length === 2 ? [-1, 0, 1, -1] : [0, 2, 3, 1], p = e.type.value;\n          return `\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${p} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet(\"input_indices\", u, `max(0, min(row, ${r[u]} - 1))`)};\n      ${e.indicesSet(\"input_indices\", d, `max(0, min(col, ${r[d]} - 1))`)};\n      ${zl(e, c, a, 2)}\n      return ${e.getByIndices(\"input_indices\")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${p} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${p} = originalIndices[${u}];\n      var col:${p} = originalIndices[${d}];\n      ${n ? `if (row < 0 || row > (${r[u]} - 1) || col < 0 || col > (${r[d]} - 1)) {\n        return ${o};\n      }` : \"\"};\n      row = max(0, min(row, ${r[u]} - 1));\n      col = max(0, min(col, ${r[d]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${r.length > 2 ? `u32(originalIndices[${c}])` : \"0\"};\n      var batch: u32 =  ${r.length > 2 ? `u32(originalIndices[${a}])` : \"0\"};\n      var x11: ${p} = getInputValue(batch, channel, row1, col1);\n      var x12: ${p} = getInputValue(batch, channel, row1, col2);\n      var x21: ${p} = getInputValue(batch, channel, row2, col1);\n      var x22: ${p} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${p} = abs(row - ${p}(row1));\n      var dx2: ${p} = abs(${p}(row2) - row);\n      var dy1: ${p} = abs(col - ${p}(col1));\n      var dy2: ${p} = abs(${p}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`;\n        }, Kh = (e, t, r, n, o, i, a, u, d, c) => {\n          let p = r.length === 2, m = true, [f, b] = p ? [0, 1] : m ? [2, 3] : [1, 2], g = e.type.value, _ = (S) => {\n            let $ = S === f ? \"row\" : \"col\";\n            return `\n      fn ${$}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${g} {\n        var output_index = ${t.indicesGet(\"output_indices\", S)};\n        var originalIdx: ${g} = getOriginalCoordinateFromResizedCoordinate(output_index, ${o[S]},\n        ${n[S]}, ${r[S]}, ${i[S]}, ${i[S]} + ${r.length});\n        var fractOriginalIdx: ${g} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${u} && (originalIdx < 0 || originalIdx > (${r[S]} - 1))) {\n          return ${d};\n        }\n        var data: array<${g}, 4> = array<${g}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${$}: ${g} = originalIdx + ${g}(i);\n          if (${$} < 0 || ${$} >= ${r[S]}) {\n            ${c ? `coefs[i + 1] = 0.0;\n                        continue;` : u ? `return ${d};` : `${$} = max(0, min(${$}, ${r[S]} - 1));`};\n          }\n        var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet(\"input_indices_copy\", S, `u32(${$})`)};\n          data[i + 1] = ${S === f ? e.getByIndices(\"input_indices_copy\") : \"rowCubicInterpolation(input_indices_copy, output_indices)\"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`;\n          };\n          return `\n    ${_(f)};\n    ${_(b)};\n  fn getCubicInterpolationCoefs(s: ${g}) -> array<${g}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${g}, 4> = array<${g}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${g} = 1.0 - absS;\n    var twoMinusAbsS: ${g} = 2.0 - absS;\n    var onePlusAbsS: ${g} = 1.0 + absS;\n    coeffs[0] = ((${a} * onePlusAbsS - 5 * ${a}) * onePlusAbsS + 8 * ${a}) * onePlusAbsS - 4 * ${a};\n    coeffs[1] = ((${a} + 2) * absS - (${a} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${a} + 2) * oneMinusAbsS - (${a} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${a} * twoMinusAbsS - 5 * ${a}) * twoMinusAbsS + 8 * ${a}) * twoMinusAbsS - 4 * ${a};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${g}, 4>, coefs: array<${g}, 4>) -> ${g} {\n    var coefsSum: ${g} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${g} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `;\n        }, Zh = (e, t, r, n, o) => {\n          let [a, u, d, c, p] = r.length === 3 ? [-1, 0, 1, 2, -1] : [0, 2, 3, 4, 1], m = e.type.value;\n          return `\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${m} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet(\"input_indices\", u, `max(0, min(depth, ${r[u]} - 1))`)};\n      ${e.indicesSet(\"input_indices\", d, `max(0, min(height, ${r[d]} - 1))`)};\n      ${e.indicesSet(\"input_indices\", c, `max(0, min(width, ${r[c]} - 1))`)};\n      ${zl(e, p, a, 3)}\n      return ${e.getByIndices(\"input_indices\")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${m} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${m} = originalIndices[${u}];\n      var height:${m} = originalIndices[${d}];\n      var width:${m} = originalIndices[${c}];\n      ${n ? `if (depth < 0 || depth > (${r[u]} - 1) || height < 0 || height > (${r[d]} - 1) || width < 0 || (width > ${r[c]} - 1)) {\n      return ${o};\n        }` : \"\"};\n\n    depth = max(0, min(depth, ${r[u]} - 1));\n      height = max(0, min(height, ${r[d]} - 1));\n      width = max(0, min(width, ${r[c]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${r.length > 3 ? `u32(originalIndices[${p}])` : \"0\"};\n      var batch: u32 =  ${r.length > 3 ? `u32(originalIndices[${a}])` : \"0\"};\n\n      var x111: ${m} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${m} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${m} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${m} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${m} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${m} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${m} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${m} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${m} = abs(depth - ${m}(depth1));\n      var dx2: ${m} = abs(${m}(depth2) - depth);\n      var dy1: ${m} = abs(height - ${m}(height1));\n      var dy2: ${m} = abs(${m}(height2) - height);\n      var dz1: ${m} = abs(width - ${m}(width1));\n      var dz2: ${m} = abs(${m}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`;\n        }, Qh = (e, t, r, n, o, i) => {\n          let a = e.dims, u = Wh(i, t.axes, a.length), d = Lh(a, n, o, t.axes), c = n.slice();\n          n.length === 0 && (c = a.map((v, x) => v === 0 ? 1 : d[x] / v), t.keepAspectRatioPolicy !== \"stretch\" && (d = Gh(a, c, t)));\n          let p = M(\"output\", e.dataType, d.length), m = P(\"input\", e.dataType, a.length), f = k.size(d), b = a.length === d.length && a.every((v, x) => v === d[x]), g = t.coordinateTransformMode === \"tf_crop_and_resize\", _ = t.extrapolationValue, S = m.type.value, $ = (v) => `\n      ${b ? \"\" : `\n      ${Nh(t.coordinateTransformMode, S)};\n      ${(() => {\n            switch (t.mode) {\n              case \"nearest\":\n                return `\n              ${qh(m, a)};\n              ${Vh(t.nearestMode, r, S)};\n              ${Fh(m, p, a, d, c.length, u.length, g)};\n              `;\n              case \"linear\":\n                return `\n              ${Hh(p, a, d, c.length, u.length)};\n              ${(() => {\n                  if (a.length === 2 || a.length === 4) return `${jh(m, p, a, g, _)}`;\n                  if (a.length === 3 || a.length === 5) return `${Zh(m, p, a, g, _)}`;\n                  throw Error(\"Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.\");\n                })()};\n            `;\n              case \"cubic\":\n                return `\n            ${(() => {\n                  if (a.length === 2 || a.length === 4) return `${Kh(m, p, a, d, c, u, t.cubicCoeffA, g, t.extrapolationValue, t.excludeOutside)}`;\n                  throw Error(\"Cubic mode only supports input dims 2 and 4 are supported in linear mode.\");\n                })()};\n            `;\n              default:\n                throw Error(\"Invalid resize mode\");\n            }\n          })()};\n      `}\n      ${v.registerUniform(\"output_size\", \"u32\").registerUniform(\"scales\", \"f32\", c.length).registerUniform(\"roi\", \"f32\", u.length).declareVariables(m, p)}\n      ${v.mainStart()}\n        ${v.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n        ${b ? \"output[global_idx] = input[global_idx];\" : `\n        let output_indices = ${p.offsetToIndices(\"global_idx\")};\n        var input_indices: ${m.type.indices};\n        ${(() => {\n            switch (t.mode) {\n              case \"nearest\":\n                return `input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${m.getByIndices(\"input_indices\")};\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;\n              case \"linear\":\n                return `output[global_idx] = ${a.length === 2 || a.length === 4 ? \"bilinearInterpolation\" : \"trilinearInterpolation\"}(output_indices);`;\n              case \"cubic\":\n                return \"output[global_idx] = bicubicInterpolation(output_indices);\";\n              default:\n                throw Error(`Unsupported resize mode: ${t.mode}`);\n            }\n          })()};\n`}\n      }`;\n          return { name: \"Resize\", shaderCache: { hint: `${t.cacheKey}|${r}|${c.length > 0 ? t.mode === \"cubic\" ? c : c.length : \"\"}|${o.length > 0 ? o : \"\"}|${u.length > 0 ? u : \"\"}|${b}|${t.mode === \"nearest\" ? a.length : a}`, inputDependencies: [\"rank\"] }, getShaderSource: $, getRunData: () => ({ outputs: [{ dims: d, dataType: e.dataType }], dispatchGroup: { x: Math.ceil(f / 64) }, programUniforms: [{ type: 12, data: f }, { type: 1, data: c }, { type: 1, data: u }, ...N(a, d)] }) };\n        }, Yh = (e) => {\n          let t = e.customDataBuffer;\n          return new Uint32Array(t, t.byteOffset, 1)[0];\n        }, Ol = (e, t) => {\n          let r = [], n = [], o = [], i = Yh(e);\n          if (t.antialias !== 0) throw Error(\"Only default value (0) for Antialias attribute is supported\");\n          Uh(e.inputs, t, i, r, n, o), e.compute(Qh(e.inputs[0], t, i, r, n, o), { inputs: [0] });\n        }, Bl = (e) => {\n          let t = e.antialias, r = e.axes, n = e.coordinateTransformMode, o = e.cubicCoeffA, i = e.excludeOutside !== 0, a = e.extrapolationValue, u = e.keepAspectRatioPolicy, d = e.mode, c = e.nearestMode === \"\" ? \"simple\" : e.nearestMode;\n          return J({ antialias: t, axes: r, coordinateTransformMode: n, cubicCoeffA: o, excludeOutside: i, extrapolationValue: a, keepAspectRatioPolicy: u, mode: d, nearestMode: c });\n        };\n      });\n      Rl = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        ie();\n        Xh = (e) => {\n          if (!e || e.length < 3) throw new Error(\"layerNorm requires at least 3 inputs.\");\n          let t = e[0], r = e[1], n = e[2];\n          if (t.dataType !== r.dataType || t.dataType !== n.dataType) throw new Error(\"All inputs must have the same data type\");\n          if (t.dims.length !== 3 && t.dims.length !== 2) throw new Error(\"Input must be 2D or 3D\");\n          if (r.dims.length !== 3 && r.dims.length !== 2) throw new Error(\"Skip must be 2D or 3D\");\n          let o = t.dims[t.dims.length - 1], i = t.dims[t.dims.length - 2];\n          if (r.dims[r.dims.length - 1] !== o) throw new Error(\"Skip must have the same hidden size as input\");\n          if (r.dims[r.dims.length - 2] !== i) throw new Error(\"Skip must have the same sequence length as input\");\n          if (n.dims.length !== 1) throw new Error(\"Gamma must be 1D\");\n          if (n.dims[n.dims.length - 1] !== o) throw new Error(\"Gamma must have the same hidden size as input\");\n          if (e.length > 3) {\n            let a = e[3];\n            if (a.dims.length !== 1) throw new Error(\"Beta must be 1D\");\n            if (a.dims[a.dims.length - 1] !== o) throw new Error(\"Beta must have the same hidden size as input\");\n          }\n          if (e.length > 4) {\n            let a = e[4];\n            if (a.dims.length !== 1) throw new Error(\"Bias must be 1D\");\n            if (a.dims[a.dims.length - 1] !== o) throw new Error(\"Bias must have the same hidden size as input\");\n          }\n        }, Jh = (e, t, r, n) => {\n          let o = t.simplified, i = e[0].dims, a = k.size(i), u = i, d = a, c = i.slice(-1)[0], p = n ? i.slice(0, -1).concat(1) : [], m = !o && e.length > 3, f = e.length > 4, b = n && r > 1, g = n && r > 2, _ = r > 3, S = 64, $ = ce(c), v = [{ type: 12, data: d }, { type: 12, data: $ }, { type: 12, data: c }, { type: 1, data: t.epsilon }], x = (E) => {\n            let I = [{ name: \"output_size\", type: \"u32\" }, { name: \"components\", type: \"u32\" }, { name: \"hidden_size\", type: \"u32\" }, { name: \"epsilon\", type: \"f32\" }], z = [P(\"x\", e[0].dataType, e[0].dims, $), P(\"skip\", e[1].dataType, e[1].dims, $), P(\"gamma\", e[2].dataType, e[2].dims, $)];\n            m && z.push(P(\"beta\", e[3].dataType, e[3].dims, $)), f && z.push(P(\"bias\", e[4].dataType, e[4].dims, $)), z.push(M(\"output\", e[0].dataType, u, $)), b && z.push(M(\"mean_output\", 1, p)), g && z.push(M(\"inv_std_output\", 1, p)), _ && z.push(M(\"input_skip_bias_sum\", e[0].dataType, u, $));\n            let O = be(e[0].dataType), D = be(1, $);\n            return `\n\n      ${E.registerUniforms(I).declareVariables(...z)}\n      var<workgroup> sum_shared : array<${D}, ${S}>;\n      var<workgroup> sum_squared_shared : array<${D}, ${S}>;\n\n      ${E.mainStart([S, 1, 1])}\n        let ix = local_id.x;\n        let iy = global_id.x / ${S};\n\n        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;\n        var stride = hidden_size_vectorized / ${S};\n        let offset = ix * stride + iy * hidden_size_vectorized;\n        let offset1d = stride * ix;\n        if (ix == ${S - 1}) {\n          stride = hidden_size_vectorized - stride * ix;\n        }\n        for (var i: u32 = 0; i < stride; i++) {\n          let skip_value = skip[offset + i];\n          let bias_value = ${f ? \"bias[offset1d + i]\" : O + \"(0.0)\"};\n          let input_value = x[offset + i];\n          let value = input_value + skip_value + bias_value;\n          ${_ ? \"input_skip_bias_sum[offset + i] = value;\" : \"\"}\n          output[offset + i] = value;\n          let f32_value = ${Ct(O, $, \"value\")};\n          sum_shared[ix] += f32_value;\n          sum_squared_shared[ix] += f32_value * f32_value;\n        }\n        workgroupBarrier();\n\n        var reduce_size : u32 = ${S};\n        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {\n          reduce_size = curr_size + (reduce_size & 1);\n          if (ix < curr_size) {\n            sum_shared[ix] += sum_shared[ix + reduce_size];\n            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];\n          }\n          workgroupBarrier();\n        }\n\n        let sum = sum_shared[0];\n        let square_sum = sum_squared_shared[0];\n        let mean = ${He(\"sum\", $)} / f32(uniforms.hidden_size);\n        let inv_std_dev = inverseSqrt(${He(\"square_sum\", $)} / f32(uniforms.hidden_size) ${o ? \"\" : \"- mean * mean\"} + uniforms.epsilon);\n        ${b ? \"mean_output[global_idx] = mean;\" : \"\"}\n        ${g ? \"inv_std_output[global_idx] = inv_std_dev;\" : \"\"}\n\n        for (var i: u32 = 0; i < stride; i++) {\n          output[offset + i] = (output[offset + i] ${o ? \"\" : `- ${O}(mean)`}) *\n            ${O}(inv_std_dev) * gamma[offset1d + i]\n            ${m ? \"+ beta[offset1d + i]\" : \"\"};\n        }\n      }`;\n          }, T = [{ dims: u, dataType: e[0].dataType }];\n          return r > 1 && T.push({ dims: p, dataType: 1 }), r > 2 && T.push({ dims: p, dataType: 1 }), r > 3 && T.push({ dims: i, dataType: e[0].dataType }), { name: \"SkipLayerNormalization\", shaderCache: { hint: `${$};${b};${g};${_}`, inputDependencies: e.map((E, I) => \"type\") }, getShaderSource: x, getRunData: () => ({ outputs: T, dispatchGroup: { x: Math.ceil(d / c) }, programUniforms: v }) };\n        }, Ml = (e, t) => {\n          Xh(e.inputs);\n          let n = [0];\n          e.outputCount > 1 && n.push(-3), e.outputCount > 2 && n.push(-3), e.outputCount > 3 && n.push(3), e.compute(Jh(e.inputs, t, e.outputCount, false), { outputs: n });\n        };\n      });\n      Wl = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        ie();\n        eg = (e, t) => {\n          if (!e || e.length < 1) throw new Error(\"too few inputs\");\n          if (t.axes.length !== 0) {\n            if (t.axes.length !== t.starts.length || t.axes.length !== t.ends.length) throw new Error(\"axes, starts and ends must have the same length\");\n          } else if (t.starts.length !== t.ends.length) throw new Error(\"starts and ends must have the same length\");\n          e.slice(1).forEach((r, n) => {\n            if (e[n + 1].dataType !== 6 && e[n + 1].dataType !== 7) throw new Error(`Input ${n} must be an array of int32 or int64`);\n          });\n        }, nn = (e, t) => {\n          let r = [];\n          if (e.length > t) if (e[t].dataType === 7) e[t].getBigInt64Array().forEach((n) => r.push(Number(n)));\n          else if (e[t].dataType === 6) e[t].getInt32Array().forEach((n) => r.push(Number(n)));\n          else throw new Error(`Input ${t} must be an array of int32 or int64`);\n          return r;\n        }, tg = (e, t) => {\n          if (e.length > 1) {\n            let r = nn(e, 1), n = nn(e, 2), o = nn(e, 3);\n            return o.length === 0 && (o = [...Array(e[0].dims.length).keys()]), J({ starts: r, ends: n, axes: o });\n          } else return t;\n        }, Ul = (e, t, r, n, o) => {\n          let i = e;\n          return e < 0 && (i += r[n[t]]), o[t] < 0 ? Math.max(0, Math.min(i, r[n[t]] - 1)) : Math.max(0, Math.min(i, r[n[t]]));\n        }, rg = (e, t, r) => `fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${F(\"uniforms.input_shape\", \"i\", r.length)};\n            let steps_i = ${F(\"uniforms.steps\", \"i\", r.length)};\n            let signs_i = ${F(\"uniforms.signs\", \"i\", r.length)};\n            let starts_i = ${F(\"uniforms.starts\", \"i\", r.length)};\n            var output_index = ${t.indicesGet(\"output_indices\", \"i\")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet(\"input_indices\", \"i\", \"input_index\")};\n          }\n          return input_indices;\n      }`, ng = (e, t) => {\n          let r = e[0].dims, n = k.size(r), o = t.axes.length > 0 ? k.normalizeAxes(t.axes, r.length) : [...Array(r.length).keys()], i = nn(e, 4);\n          i.forEach(($) => $ !== 0 || (() => {\n            throw new Error(\"step cannot be 0\");\n          })), i.length === 0 && (i = Array(o.length).fill(1));\n          let a = t.starts.map(($, v) => Ul($, v, r, o, i)), u = t.ends.map(($, v) => Ul($, v, r, o, i));\n          if (o.length !== a.length || o.length !== u.length) throw new Error(\"start, ends and axes should have the same number of elements\");\n          if (o.length !== r.length) for (let $ = 0; $ < r.length; ++$) o.includes($) || (a.splice($, 0, 0), u.splice($, 0, r[$]), i.splice($, 0, 1));\n          let d = i.map(($) => Math.sign($));\n          i.forEach(($, v, x) => {\n            if ($ < 0) {\n              let T = (u[v] - a[v]) / $, E = a[v], I = E + T * i[v];\n              a[v] = I, u[v] = E, x[v] = -$;\n            }\n          });\n          let c = r.slice(0);\n          o.forEach(($, v) => {\n            c[$] = Math.ceil((u[$] - a[$]) / i[$]);\n          });\n          let p = { dims: c, dataType: e[0].dataType }, m = M(\"output\", e[0].dataType, c.length), f = P(\"input\", e[0].dataType, e[0].dims.length), b = k.size(c), g = [{ name: \"outputSize\", type: \"u32\" }, { name: \"starts\", type: \"u32\", length: a.length }, { name: \"signs\", type: \"i32\", length: d.length }, { name: \"steps\", type: \"u32\", length: i.length }], _ = [{ type: 12, data: b }, { type: 12, data: a }, { type: 6, data: d }, { type: 12, data: i }, ...N(e[0].dims, c)], S = ($) => `\n      ${$.registerUniforms(g).declareVariables(f, m)}\n        ${rg(f, m, r)}\n        ${$.mainStart()}\n          ${$.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n          let output_indices = ${m.offsetToIndices(\"global_idx\")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${m.setByOffset(\"global_idx\", f.getByIndices(\"input_indices\"))}\n      }`;\n          return { name: \"Slice\", shaderCache: { hint: `${d.length}_${a.length}_${i.length}`, inputDependencies: [\"rank\"] }, getShaderSource: S, getRunData: () => ({ outputs: [p], dispatchGroup: { x: Math.ceil(n / 64) }, programUniforms: _ }) };\n        }, Nl = (e, t) => {\n          eg(e.inputs, t);\n          let r = tg(e.inputs, t);\n          e.compute(ng(e.inputs, r), { inputs: [0] });\n        }, Vl = (e) => {\n          let t = e.starts, r = e.ends, n = e.axes;\n          return J({ starts: t, ends: r, axes: n });\n        };\n      });\n      Hl = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        Se();\n        st();\n        ie();\n        og = (e) => {\n          if (!e || e.length !== 1) throw new Error(\"Softmax op requires 1 input.\");\n        }, ig = (e, t) => {\n          let r = e.inputs[0], n = r.dims, o = k.size(n), i = n.length, a = k.normalizeAxis(t.axis, i), u = a < n.length - 1, d, c = [];\n          u ? (c = Array.from({ length: i }, (z, O) => O), c[a] = i - 1, c[i - 1] = a, d = e.compute(Ee(r, c), { inputs: [r], outputs: [-1] })[0]) : d = r;\n          let p = d.dims, m = p[i - 1], f = o / m, b = ce(m), g = m / b, _ = 64;\n          f === 1 && (_ = 256);\n          let S = (z, O) => O === 4 ? `max(max(${z}.x, ${z}.y), max(${z}.z, ${z}.w))` : O === 2 ? `max(${z}.x, ${z}.y)` : O === 3 ? `max(max(${z}.x, ${z}.y), ${z}.z)` : z, $ = P(\"x\", d.dataType, d.dims, b), v = M(\"result\", d.dataType, d.dims, b), x = $.type.value, T = be(d.dataType) === \"f32\" ? `var threadMax = ${x}(-3.402823e+38f);` : `var threadMax = ${x}(-65504.0h);`, E = (z) => `\n      var<workgroup> rowMaxShared : ${x};\n      var<workgroup> rowSumShared : ${x};\n      var<workgroup> threadShared : array<${x}, ${_}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${x} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${x}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${z.registerUniform(\"packedCols\", \"i32\").declareVariables($, v)}\n      ${z.mainStart(_)}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = ${_};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${T}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${x}(${S(\"threadShared[0]\", b)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${x}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${x}(${He(\"threadShared[0]\", b)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`, I = e.compute({ name: \"Softmax\", shaderCache: { hint: `${b};${_}`, inputDependencies: [\"type\"] }, getRunData: () => ({ outputs: [{ dims: p, dataType: d.dataType }], dispatchGroup: { x: f }, programUniforms: [{ type: 6, data: g }] }), getShaderSource: E }, { inputs: [d], outputs: [u ? -1 : 0] })[0];\n          u && e.compute(Ee(I, c), { inputs: [I] });\n        }, Ll = (e, t) => {\n          og(e.inputs), ig(e, t);\n        }, Gl = (e) => J({ axis: e.axis });\n      });\n      jl = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        ie();\n        Fl = (e) => Array.from(e.getBigInt64Array(), Number), ag = (e) => {\n          if (!e || e.length !== 2) throw new Error(\"Tile requires 2 inputs.\");\n          if (e[0].dataType !== 1 && e[0].dataType !== 10 && e[0].dataType !== 6 && e[0].dataType !== 12) throw new Error(\"Tile only support float, float16, int32, and uint32 data types\");\n          if (e[1].dataType !== 7) throw new Error(\"Tile `repeats` input should be of int64 data type\");\n          if (e[1].dims.length !== 1) throw new Error(\"Tile `repeats` input should be 1-D\");\n          if (Fl(e[1]).length !== e[0].dims.length) throw new Error(\"Tile `repeats` input should have same number of elements as rank of input data tensor\");\n        }, sg = (e, t) => {\n          let r = [];\n          for (let n = 0; n < e.length; ++n) r.push(e[n] * t[n]);\n          return r;\n        }, ug = (e, t) => {\n          let r = e[0].dims, n = t ?? Fl(e[1]), o = sg(r, n), i = k.size(o), a = e[0].dataType, u = P(\"input\", a, r.length), d = M(\"output\", a, o.length), c = (p) => `\n      const inputShape = ${u.indices(...r)};\n      ${p.registerUniform(\"output_size\", \"u32\").declareVariables(u, d)}\n      ${p.mainStart()}\n      ${p.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n      let output_indices = ${d.offsetToIndices(\"global_idx\")};\n      var input_indices: ${u.type.indices};\n      for (var i = 0; i < ${r.length}; i++) {\n        let input_dim_i = ${u.indicesGet(\"uniforms.input_shape\", \"i\")};\n        let input_dim_value = ${d.indicesGet(\"output_indices\", \"i\")}  % input_dim_i;\n\n        ${u.indicesSet(\"input_indices\", \"i\", \"input_dim_value\")}\n      }\n      ${d.setByOffset(\"global_idx\", u.getByIndices(\"input_indices\"))}\n    }`;\n          return { name: \"Tile\", shaderCache: { hint: `${n}`, inputDependencies: [\"rank\"] }, getRunData: () => ({ outputs: [{ dims: o, dataType: e[0].dataType }], dispatchGroup: { x: Math.ceil(i / 64) }, programUniforms: [{ type: 12, data: i }, ...N(e[0].dims, o)] }), getShaderSource: c };\n        }, ql = (e) => {\n          ag(e.inputs), e.compute(ug(e.inputs), { inputs: [0] });\n        };\n      });\n      Zl = U(() => {\n        \"use strict\";\n        ee();\n        ne();\n        ie();\n        dg = (e, t, r, n, o) => {\n          let i = M(\"output_data\", o, r.length, 4), a = P(\"a_data\", t[1].dataType, t[1].dims.length, 4), u = P(\"b_data\", t[2].dataType, t[2].dims.length, 4), d = P(\"c_data\", t[0].dataType, t[0].dims.length, 4), c, p = (m, f, b) => `select(${f}, ${m}, ${b})`;\n          if (!n) c = i.setByOffset(\"global_idx\", p(a.getByOffset(\"global_idx\"), u.getByOffset(\"global_idx\"), d.getByOffset(\"global_idx\")));\n          else {\n            let m = (f, b, g = \"\") => {\n              let _ = `a_data[index_a${b}][component_a${b}]`, S = `b_data[index_b${b}][component_b${b}]`, $ = `bool(c_data[index_c${b}] & (0xffu << (component_c${b} * 8)))`;\n              return `\n            let output_indices${b} = ${i.offsetToIndices(`global_idx * 4u + ${b}u`)};\n            let offset_a${b} = ${a.broadcastedIndicesToOffset(`output_indices${b}`, i)};\n            let offset_b${b} = ${u.broadcastedIndicesToOffset(`output_indices${b}`, i)};\n            let offset_c${b} = ${d.broadcastedIndicesToOffset(`output_indices${b}`, i)};\n            let index_a${b} = offset_a${b} / 4u;\n            let index_b${b} = offset_b${b} / 4u;\n            let index_c${b} = offset_c${b} / 4u;\n            let component_a${b} = offset_a${b} % 4u;\n            let component_b${b} = offset_b${b} % 4u;\n            let component_c${b} = offset_c${b} % 4u;\n            ${f}[${b}] = ${g}(${p(_, S, $)});\n          `;\n            };\n            o === 9 ? c = `\n            var data = vec4<u32>(0);\n            ${m(\"data\", 0, \"u32\")}\n            ${m(\"data\", 1, \"u32\")}\n            ${m(\"data\", 2, \"u32\")}\n            ${m(\"data\", 3, \"u32\")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));` : c = `\n            ${m(\"output_data[global_idx]\", 0)}\n            ${m(\"output_data[global_idx]\", 1)}\n            ${m(\"output_data[global_idx]\", 2)}\n            ${m(\"output_data[global_idx]\", 3)}\n          `;\n          }\n          return `\n        ${e.registerUniform(\"vec_size\", \"u32\").declareVariables(d, a, u, i)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.vec_size\")}\n        ${c}\n      }`;\n        }, lg = (e) => {\n          let t = e[1].dims, r = e[2].dims, n = e[0].dims, o = e[1].dataType, i = !(k.areEqual(t, r) && k.areEqual(r, n)), a = t, u = k.size(t);\n          if (i) {\n            let c = Je.calcShape(Je.calcShape(t, r, false), n, false);\n            if (!c) throw new Error(\"Can't perform where op on the given tensors\");\n            a = c, u = k.size(a);\n          }\n          let d = Math.ceil(u / 4);\n          return { name: \"Where\", shaderCache: { inputDependencies: [\"rank\", \"rank\", \"rank\"] }, getShaderSource: (c) => dg(c, e, a, i, o), getRunData: () => ({ outputs: [{ dims: a, dataType: o }], dispatchGroup: { x: Math.ceil(u / 64 / 4) }, programUniforms: [{ type: 12, data: d }, ...N(n, t, r, a)] }) };\n        }, Kl = (e) => {\n          e.compute(lg(e.inputs));\n        };\n      });\n      Yl = U(() => {\n        \"use strict\";\n        Es();\n        Fr();\n        zs();\n        Bs();\n        _u();\n        ku();\n        Ou();\n        Zu();\n        rd();\n        id();\n        ud();\n        md();\n        gd();\n        yd();\n        vd();\n        Sd();\n        Cd();\n        kd();\n        Od();\n        Md();\n        Fd();\n        Kd();\n        Qd();\n        Xd();\n        tl();\n        $o();\n        nl();\n        wl();\n        xl();\n        Tl();\n        kl();\n        Gr();\n        Dl();\n        To();\n        Rl();\n        Wl();\n        Hl();\n        So();\n        jl();\n        st();\n        jr();\n        Zl();\n        Ql = /* @__PURE__ */ new Map([[\"Abs\", [Ds]], [\"Acos\", [Ms]], [\"Acosh\", [Rs]], [\"Add\", [wu]], [\"ArgMax\", [As, uo]], [\"ArgMin\", [Cs, uo]], [\"Asin\", [Us]], [\"Asinh\", [Ns]], [\"Atan\", [Vs]], [\"Atanh\", [Ws]], [\"Attention\", [ks]], [\"AveragePool\", [cl, ll]], [\"BatchNormalization\", [Ps]], [\"BiasAdd\", [Os]], [\"BiasSplitGelu\", [yu]], [\"Cast\", [Gs, Ls]], [\"Ceil\", [Fs]], [\"Clip\", [Hs]], [\"Concat\", [Pu, zu]], [\"Conv\", [yo, bo]], [\"ConvTranspose\", [td, Ju]], [\"Cos\", [qs]], [\"Cosh\", [js]], [\"CumSum\", [nd, od]], [\"DepthToSpace\", [ad, sd]], [\"DequantizeLinear\", [vl, $l]], [\"Div\", [vu]], [\"Einsum\", [cd, pd]], [\"Elu\", [Ks, Yt]], [\"Equal\", [$u]], [\"Erf\", [Zs]], [\"Exp\", [Qs]], [\"Expand\", [hd]], [\"FastGelu\", [bd]], [\"Floor\", [Ys]], [\"FusedConv\", [yo, bo]], [\"Gather\", [wd, _d]], [\"GatherElements\", [Ed, Ad]], [\"GatherBlockQuantized\", [Td, Id]], [\"GatherND\", [$d, xd]], [\"Gelu\", [Xs]], [\"Gemm\", [zd, Pd]], [\"GlobalAveragePool\", [fl, ml]], [\"GlobalMaxPool\", [_l, yl]], [\"Greater\", [Iu]], [\"GreaterOrEqual\", [Au]], [\"GridSample\", [Bd, Dd]], [\"GroupQueryAttention\", [Hd]], [\"HardSigmoid\", [au, iu]], [\"InstanceNormalization\", [jd]], [\"LayerNormalization\", [Zd]], [\"LeakyRelu\", [Js, Yt]], [\"Less\", [Cu]], [\"LessOrEqual\", [Eu]], [\"Log\", [hu]], [\"MatMul\", [Yd]], [\"MatMulNBits\", [Jd, el]], [\"MaxPool\", [gl, bl]], [\"Mul\", [xu]], [\"MultiHeadAttention\", [Nd, Ud]], [\"Neg\", [tu]], [\"Not\", [eu]], [\"Pad\", [rl]], [\"Pow\", [Su]], [\"QuickGelu\", [gu, Yt]], [\"Range\", [Sl]], [\"Reciprocal\", [ru]], [\"ReduceMin\", [vs]], [\"ReduceMean\", [gs]], [\"ReduceMax\", [ws]], [\"ReduceSum\", [xs]], [\"ReduceProd\", [$s]], [\"ReduceL1\", [bs]], [\"ReduceL2\", [ys]], [\"ReduceLogSum\", [Ts]], [\"ReduceLogSumExp\", [_s]], [\"ReduceSumSquare\", [Ss]], [\"Relu\", [nu]], [\"Resize\", [Ol, Bl]], [\"RotaryEmbedding\", [Ld]], [\"ScatterND\", [El, Al]], [\"Sigmoid\", [ou]], [\"Sin\", [su]], [\"Sinh\", [uu]], [\"Slice\", [Nl, Vl]], [\"SkipLayerNormalization\", [Ml]], [\"Split\", [Vd, Wd]], [\"Sqrt\", [du]], [\"Softmax\", [Ll, Gl]], [\"Sub\", [Tu]], [\"Tan\", [lu]], [\"Tanh\", [pu]], [\"ThresholdedRelu\", [fu, Yt]], [\"Tile\", [ql]], [\"Transpose\", [ns, os]], [\"Where\", [Kl]]]);\n      });\n      Xl = U(() => {\n        \"use strict\";\n        We();\n        Xe();\n        ie();\n        on = class {\n          constructor(t) {\n            this.backend = t;\n            this.repo = /* @__PURE__ */ new Map(), this.attributesBound = false;\n          }\n          getArtifact(t) {\n            return this.repo.get(t);\n          }\n          setArtifact(t, r) {\n            this.repo.set(t, r);\n          }\n          run(t, r, n, o, i) {\n            Re(t.programInfo.name);\n            let a = this.backend.device, u = this.backend.getComputePassEncoder();\n            this.backend.writeTimestamp(this.backend.pendingDispatchNumber * 2);\n            let d = [];\n            for (let p of r) d.push({ binding: d.length, resource: { buffer: p.buffer } });\n            for (let p of n) d.push({ binding: d.length, resource: { buffer: p.buffer } });\n            i && d.push({ binding: d.length, resource: i });\n            let c = a.createBindGroup({ layout: t.computePipeline.getBindGroupLayout(0), entries: d, label: t.programInfo.name });\n            if (this.backend.sessionStatus === \"capturing\") {\n              let p = { kernelId: this.backend.currentKernelId, computePipeline: t.computePipeline, bindGroup: c, dispatchGroup: o };\n              this.backend.capturedCommandList.get(this.backend.currentSessionId).push(p);\n            }\n            u.setPipeline(t.computePipeline), u.setBindGroup(0, c), u.dispatchWorkgroups(...o), this.backend.writeTimestamp(this.backend.pendingDispatchNumber * 2 + 1), this.backend.pendingDispatchNumber++, (this.backend.pendingDispatchNumber >= this.backend.maxDispatchNumber || this.backend.queryType === \"at-passes\") && this.backend.endComputePass(), this.backend.pendingDispatchNumber >= this.backend.maxDispatchNumber && this.backend.flush(), Oe(t.programInfo.name);\n          }\n          dispose() {\n          }\n          build(t, r) {\n            Re(t.name);\n            let n = this.backend.device, o = [];\n            [{ feature: \"shader-f16\", extension: \"f16\" }, { feature: \"subgroups\", extension: \"subgroups\" }].forEach((m) => {\n              n.features.has(m.feature) && o.push(`enable ${m.extension};`);\n            });\n            let a = ts(r, this.backend.device.limits), u = t.getShaderSource(a), d = `${o.join(`\n`)}\n${a.additionalImplementations}\n${u}`, c = n.createShaderModule({ code: d, label: t.name });\n            se(\"verbose\", () => `[WebGPU] ${t.name} shader code: ${d}`);\n            let p = n.createComputePipeline({ compute: { module: c, entryPoint: \"main\" }, layout: \"auto\", label: t.name });\n            return Oe(t.name), { programInfo: t, computePipeline: p, uniformVariablesInfo: a.variablesInfo };\n          }\n          normalizeDispatchGroupSize(t) {\n            let r = typeof t == \"number\" ? t : t.x, n = typeof t == \"number\" ? 1 : t.y || 1, o = typeof t == \"number\" ? 1 : t.z || 1, i = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n            if (r <= i && n <= i && o <= i) return [r, n, o];\n            let a = r * n * o, u = Math.ceil(Math.sqrt(a));\n            if (u > i) {\n              if (u = Math.ceil(Math.cbrt(a)), u > i) throw new Error(\"Total dispatch size exceeds WebGPU maximum.\");\n              return [u, u, u];\n            } else return [u, u, 1];\n          }\n        };\n      });\n      Jl = {};\n      Dt(Jl, { WebGpuBackend: () => Co });\n      ec = U(() => {\n        \"use strict\";\n        We();\n        ee();\n        Xe();\n        Zn();\n        Ja();\n        Yl();\n        Xl();\n        cg = (e, t) => {\n          if (t.length !== e.length) throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);\n          let r = [];\n          for (let n = 0; n < e.length; ++n) {\n            let o = e[n].dataType;\n            switch (t[n]) {\n              case \"none\": {\n                r.push(\"\");\n                break;\n              }\n              case \"type\": {\n                r.push(`${o}`);\n                break;\n              }\n              case \"rank\": {\n                let i = e[n].dims.length;\n                r.push(`${o};${i}`);\n                break;\n              }\n              case \"dims\": {\n                let i = e[n].dims.join(\",\");\n                r.push(`${o};${i}`);\n                break;\n              }\n              default:\n                throw new Error(`unsupported input dependency: ${t[n]}`);\n            }\n          }\n          return r.join(\"|\");\n        }, pg = (e, t, r) => {\n          let n = e.name;\n          return e.shaderCache?.hint && (n += \"[\" + e.shaderCache.hint + \"]\"), n += \":\" + r + `:${cg(t, e.shaderCache?.inputDependencies ?? new Array(t.length).fill(\"dims\"))}`, n;\n        }, Io = class {\n          constructor(t) {\n            t && (this.architecture = t.architecture, this.vendor = t.vendor);\n          }\n          isArchitecture(t) {\n            return this.architecture === t;\n          }\n          isVendor(t) {\n            return this.vendor === t;\n          }\n        }, Co = class {\n          constructor() {\n            this.currentSessionId = null;\n            this.currentKernelId = null;\n            this.commandEncoder = null;\n            this.computePassEncoder = null;\n            this.maxDispatchNumber = 16;\n            this.pendingDispatchNumber = 0;\n            this.pendingKernels = [];\n            this.pendingQueries = /* @__PURE__ */ new Map();\n            this.sessionStatus = \"default\";\n            this.capturedCommandList = /* @__PURE__ */ new Map();\n            this.capturedPendingKernels = /* @__PURE__ */ new Map();\n            this.sessionExternalDataMapping = /* @__PURE__ */ new Map();\n          }\n          get currentKernelCustomData() {\n            if (this.currentKernelId === null) throw new Error(\"currentKernelCustomData(): currentKernelId is null. (should not happen)\");\n            let t = this.kernelCustomData.get(this.currentKernelId);\n            return t || (t = {}, this.kernelCustomData.set(this.currentKernelId, t)), t;\n          }\n          async initialize(t, r) {\n            this.env = t;\n            let n = [], o = { requiredLimits: { maxComputeWorkgroupStorageSize: r.limits.maxComputeWorkgroupStorageSize, maxComputeWorkgroupsPerDimension: r.limits.maxComputeWorkgroupsPerDimension, maxStorageBufferBindingSize: r.limits.maxStorageBufferBindingSize, maxBufferSize: r.limits.maxBufferSize, maxComputeInvocationsPerWorkgroup: r.limits.maxComputeInvocationsPerWorkgroup, maxComputeWorkgroupSizeX: r.limits.maxComputeWorkgroupSizeX, maxComputeWorkgroupSizeY: r.limits.maxComputeWorkgroupSizeY, maxComputeWorkgroupSizeZ: r.limits.maxComputeWorkgroupSizeZ }, requiredFeatures: n }, i = (a) => r.features.has(a) && n.push(a) && true;\n            i(\"chromium-experimental-timestamp-query-inside-passes\") || i(\"timestamp-query\"), i(\"shader-f16\"), i(\"subgroups\"), this.device = await r.requestDevice(o), this.adapterInfo = new Io(r.info || await r.requestAdapterInfo()), this.gpuDataManager = Xa(this), this.programManager = new on(this), this.kernels = /* @__PURE__ */ new Map(), this.kernelPersistentData = /* @__PURE__ */ new Map(), this.kernelCustomData = /* @__PURE__ */ new Map(), Br(t.logLevel, !!t.debug), this.device.onuncapturederror = (a) => {\n              a.error instanceof GPUValidationError && console.error(`An uncaught WebGPU validation error was raised: ${a.error.message}`);\n            }, Object.defineProperty(this.env.webgpu, \"device\", { value: this.device, writable: false, enumerable: true, configurable: false }), Object.defineProperty(this.env.webgpu, \"adapter\", { value: r, writable: false, enumerable: true, configurable: false }), this.setQueryType();\n          }\n          dispose() {\n            typeof this.querySet < \"u\" && this.querySet.destroy(), this.gpuDataManager.dispose();\n          }\n          getCommandEncoder() {\n            return this.commandEncoder || (this.commandEncoder = this.device.createCommandEncoder()), this.commandEncoder;\n          }\n          getComputePassEncoder() {\n            if (!this.computePassEncoder) {\n              let t = this.getCommandEncoder(), r = {};\n              this.queryType === \"at-passes\" && (r.timestampWrites = { querySet: this.querySet, beginningOfPassWriteIndex: this.pendingDispatchNumber * 2, endOfPassWriteIndex: this.pendingDispatchNumber * 2 + 1 }), this.computePassEncoder = t.beginComputePass(r);\n            }\n            return this.computePassEncoder;\n          }\n          endComputePass() {\n            this.computePassEncoder && (this.computePassEncoder.end(), this.computePassEncoder = null);\n          }\n          flush() {\n            if (!this.commandEncoder) return;\n            Re(), this.endComputePass();\n            let t;\n            this.queryType !== \"none\" && (this.commandEncoder.resolveQuerySet(this.querySet, 0, this.pendingDispatchNumber * 2, this.queryResolveBuffer, 0), t = this.device.createBuffer({ size: this.pendingDispatchNumber * 2 * 8, usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST }), this.pendingQueries.set(t, this.pendingKernels), this.pendingKernels = [], this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer, 0, t, 0, this.pendingDispatchNumber * 2 * 8)), this.device.queue.submit([this.commandEncoder.finish()]), this.gpuDataManager.refreshPendingBuffers(), this.commandEncoder = null, this.pendingDispatchNumber = 0, this.queryType !== \"none\" && t.mapAsync(GPUMapMode.READ).then(() => {\n              let r = new BigUint64Array(t.getMappedRange()), n = this.pendingQueries.get(t);\n              for (let o = 0; o < r.length / 2; o++) {\n                let i = n[o], a = i.kernelId, u = this.kernels.get(a), d = u.kernelType, c = u.kernelName, p = i.programName, m = i.inputTensorViews, f = i.outputTensorViews, b = r[o * 2], g = r[o * 2 + 1];\n                typeof this.queryTimeBase > \"u\" && (this.queryTimeBase = b);\n                let _ = Number(b - this.queryTimeBase), S = Number(g - this.queryTimeBase);\n                if (!Number.isSafeInteger(_) || !Number.isSafeInteger(S)) throw new RangeError(\"incorrect timestamp range\");\n                if (this.env.webgpu.profiling?.ondata) this.env.webgpu.profiling.ondata({ version: 1, inputsMetadata: m.map(($) => ({ dims: $.dims, dataType: Ye($.dataType) })), outputsMetadata: f.map(($) => ({ dims: $.dims, dataType: Ye($.dataType) })), kernelId: a, kernelType: d, kernelName: c, programName: p, startTime: _, endTime: S });\n                else {\n                  let $ = \"\";\n                  m.forEach((x, T) => {\n                    $ += `input[${T}]: [${x.dims}] | ${Ye(x.dataType)}, `;\n                  });\n                  let v = \"\";\n                  f.forEach((x, T) => {\n                    v += `output[${T}]: [${x.dims}] | ${Ye(x.dataType)}, `;\n                  }), console.log(`[profiling] kernel \"${a}|${d}|${c}|${p}\" ${$}${v}execution time: ${S - _} ns`);\n                }\n                gr(\"GPU\", `${p}::${b}::${g}`);\n              }\n              t.unmap(), this.pendingQueries.delete(t);\n            }), Oe();\n          }\n          run(t, r, n, o, i, a) {\n            Re(t.name);\n            let u = [];\n            for (let x = 0; x < r.length; ++x) {\n              let T = r[x].data;\n              if (T === 0) continue;\n              let E = this.gpuDataManager.get(T);\n              if (!E) throw new Error(`no GPU data for input: ${T}`);\n              u.push(E);\n            }\n            let { outputs: d, dispatchGroup: c, programUniforms: p } = t.getRunData(r), m = n.length === 0 ? d.map((x, T) => T) : n;\n            if (m.length !== d.length) throw new Error(`Output size ${m.length} must be equal to ${d.length}.`);\n            let f = [], b = [];\n            for (let x = 0; x < d.length; ++x) {\n              if (!Number.isInteger(m[x]) || m[x] < -3 || m[x] >= a) throw new Error(`Invalid output index: ${m[x]}`);\n              if (m[x] === -3) continue;\n              let T = m[x] === -1, E = m[x] === -2, I = T || E ? i(d[x].dataType, d[x].dims) : o(m[x], d[x].dataType, d[x].dims);\n              if (f.push(I), I.data === 0) continue;\n              let z = this.gpuDataManager.get(I.data);\n              if (!z) throw new Error(`no GPU data for output: ${I.data}`);\n              if (T && this.temporaryData.push(z), E) {\n                let O = this.kernelPersistentData.get(this.currentKernelId);\n                O || (O = [], this.kernelPersistentData.set(this.currentKernelId, O)), O.push(z);\n              }\n              b.push(z);\n            }\n            if (u.length !== r.length || b.length !== f.length) {\n              if (b.length === 0) return Oe(t.name), f;\n              throw new Error(`Program ${t.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`);\n            }\n            let g;\n            if (p) {\n              let x = 0, T = [];\n              p.forEach((O) => {\n                let D = typeof O.data == \"number\" ? [O.data] : O.data;\n                if (D.length === 0) return;\n                let L = O.type === 10 ? 2 : 4, q, Q;\n                O.type === 10 ? (Q = D.length > 4 ? 16 : D.length > 2 ? 8 : D.length * L, q = D.length > 4 ? 16 : L * D.length) : (Q = D.length <= 2 ? D.length * L : 16, q = 16), x = Math.ceil(x / Q) * Q, T.push(x);\n                let W = O.type === 10 ? 8 : 4;\n                x += D.length > 4 ? Math.ceil(D.length / W) * q : D.length * L;\n              });\n              let E = 16;\n              x = Math.ceil(x / E) * E;\n              let I = new ArrayBuffer(x);\n              p.forEach((O, D) => {\n                let L = T[D], q = typeof O.data == \"number\" ? [O.data] : O.data;\n                if (O.type === 6) new Int32Array(I, L, q.length).set(q);\n                else if (O.type === 12) new Uint32Array(I, L, q.length).set(q);\n                else if (O.type === 10) new Uint16Array(I, L, q.length).set(q);\n                else if (O.type === 1) new Float32Array(I, L, q.length).set(q);\n                else throw new Error(`Unsupported uniform type: ${Ye(O.type)}`);\n              });\n              let z = this.gpuDataManager.create(x, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\n              this.device.queue.writeBuffer(z.buffer, 0, I, 0, x), this.gpuDataManager.release(z.id), g = { offset: 0, size: x, buffer: z.buffer };\n            }\n            let _ = this.programManager.normalizeDispatchGroupSize(c), S = _[1] === 1 && _[2] === 1, $ = pg(t, r, S), v = this.programManager.getArtifact($);\n            if (v || (v = this.programManager.build(t, _), this.programManager.setArtifact($, v), se(\"info\", () => `[artifact] key: ${$}, programName: ${t.name}`)), p && v.uniformVariablesInfo) {\n              if (p.length !== v.uniformVariablesInfo.length) throw new Error(`Uniform variables count mismatch: expect ${v.uniformVariablesInfo.length}, got ${p.length} in program \"${v.programInfo.name}\".`);\n              for (let x = 0; x < p.length; x++) {\n                let T = p[x], E = T.type, I = typeof T.data == \"number\" ? 1 : T.data.length, [z, O] = v.uniformVariablesInfo[x];\n                if (E !== z || I !== O) throw new Error(`Uniform variable ${x} mismatch: expect type ${z} with size ${O}, got type ${E} with size ${I} in program \"${v.programInfo.name}\".`);\n              }\n            }\n            if (se(\"info\", () => `[ProgramManager] run \"${t.name}\" (key=${$}) with ${_[0]}x${_[1]}x${_[2]}`), this.queryType !== \"none\" || this.sessionStatus === \"capturing\") {\n              let x = { kernelId: this.currentKernelId, programName: v.programInfo.name, inputTensorViews: r, outputTensorViews: f };\n              this.pendingKernels.push(x), this.sessionStatus === \"capturing\" && this.capturedPendingKernels.get(this.currentSessionId).push(x);\n            }\n            return this.programManager.run(v, u, b, _, g), Oe(t.name), f;\n          }\n          upload(t, r) {\n            this.gpuDataManager.upload(t, r);\n          }\n          memcpy(t, r) {\n            this.gpuDataManager.memcpy(t, r);\n          }\n          async download(t, r) {\n            await this.gpuDataManager.download(t, r);\n          }\n          alloc(t) {\n            return this.gpuDataManager.create(t).id;\n          }\n          free(t) {\n            return this.gpuDataManager.release(t);\n          }\n          createKernel(t, r, n, o) {\n            let i = Ql.get(t);\n            if (!i) throw new Error(`kernel not implemented: ${t}`);\n            let a = { kernelType: t, kernelName: o, kernelEntry: i[0], attributes: [i[1], n] };\n            this.kernels.set(r, a);\n          }\n          releaseKernel(t) {\n            let r = this.kernelPersistentData.get(t);\n            if (r) {\n              for (let n of r) this.gpuDataManager.release(n.id);\n              this.kernelPersistentData.delete(t);\n            }\n            this.kernelCustomData.delete(t), this.kernels.delete(t);\n          }\n          computeKernel(t, r, n) {\n            let o = this.kernels.get(t);\n            if (!o) throw new Error(`kernel not created: ${t}`);\n            let i = o.kernelType, a = o.kernelName, u = o.kernelEntry, d = o.attributes;\n            if (this.currentKernelId !== null) throw new Error(`kernel \"[${i}] ${a}\" is not allowed to be called recursively`);\n            this.currentKernelId = t, d[0] && (d[1] = d[0](d[1]), d[0] = void 0), se(\"info\", () => `[WebGPU] Start to run kernel \"[${i}] ${a}\"...`);\n            let c = this.env.debug;\n            this.temporaryData = [];\n            try {\n              return c && this.device.pushErrorScope(\"validation\"), u(r, d[1]), 0;\n            } catch (p) {\n              return n.push(Promise.resolve(`[WebGPU] Kernel \"[${i}] ${a}\" failed. ${p}`)), 1;\n            } finally {\n              c && n.push(this.device.popErrorScope().then((p) => p ? `GPU validation error for kernel \"[${i}] ${a}\": ${p.message}` : null));\n              for (let p of this.temporaryData) this.gpuDataManager.release(p.id);\n              this.temporaryData = [], this.currentKernelId = null;\n            }\n          }\n          registerBuffer(t, r, n, o) {\n            let i = this.sessionExternalDataMapping.get(t);\n            i || (i = /* @__PURE__ */ new Map(), this.sessionExternalDataMapping.set(t, i));\n            let a = i.get(r), u = this.gpuDataManager.registerExternalBuffer(n, o, a);\n            return i.set(r, [u, n]), u;\n          }\n          unregisterBuffers(t) {\n            let r = this.sessionExternalDataMapping.get(t);\n            r && (r.forEach((n) => this.gpuDataManager.unregisterExternalBuffer(n[0])), this.sessionExternalDataMapping.delete(t));\n          }\n          getBuffer(t) {\n            let r = this.gpuDataManager.get(t);\n            if (!r) throw new Error(`no GPU data for buffer: ${t}`);\n            return r.buffer;\n          }\n          createDownloader(t, r, n) {\n            return async () => {\n              let o = await ro(this, t, r);\n              return Mr(o.buffer, n);\n            };\n          }\n          writeTimestamp(t) {\n            this.queryType === \"inside-passes\" && this.computePassEncoder.writeTimestamp(this.querySet, t);\n          }\n          setQueryType() {\n            this.queryType = \"none\", (this.env.webgpu.profiling?.mode === \"default\" || (typeof this.env.trace > \"u\" ? this.env.wasm.trace : this.env.trace)) && (this.device.features.has(\"chromium-experimental-timestamp-query-inside-passes\") ? this.queryType = \"inside-passes\" : this.device.features.has(\"timestamp-query\") && (this.queryType = \"at-passes\"), this.queryType !== \"none\" && typeof this.querySet > \"u\" && (this.querySet = this.device.createQuerySet({ type: \"timestamp\", count: this.maxDispatchNumber * 2 }), this.queryResolveBuffer = this.device.createBuffer({ size: this.maxDispatchNumber * 2 * 8, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE })));\n          }\n          captureBegin() {\n            se(\"info\", \"captureBegin\"), this.capturedCommandList.get(this.currentSessionId) || this.capturedCommandList.set(this.currentSessionId, []), this.capturedPendingKernels.get(this.currentSessionId) || this.capturedPendingKernels.set(this.currentSessionId, []), this.flush(), this.sessionStatus = \"capturing\";\n          }\n          captureEnd() {\n            se(\"info\", \"captureEnd\"), this.flush(), this.sessionStatus = \"default\";\n          }\n          replay() {\n            se(\"info\", \"replay\"), this.sessionStatus = \"replaying\";\n            let t = this.capturedCommandList.get(this.currentSessionId), r = this.capturedPendingKernels.get(this.currentSessionId), n = t.length;\n            this.pendingKernels = [];\n            for (let o = 0; o < n; o++) {\n              let i = this.getComputePassEncoder(), a = t[o];\n              this.writeTimestamp(this.pendingDispatchNumber * 2), i.setPipeline(a.computePipeline), i.setBindGroup(0, a.bindGroup), i.dispatchWorkgroups(...a.dispatchGroup), this.writeTimestamp(this.pendingDispatchNumber * 2 + 1), this.pendingDispatchNumber++, this.queryType !== \"none\" && this.pendingKernels.push(r[o]), (this.pendingDispatchNumber >= this.maxDispatchNumber || this.queryType === \"at-passes\") && this.endComputePass(), this.pendingDispatchNumber >= this.maxDispatchNumber && this.flush();\n            }\n            this.flush(), this.sessionStatus = \"default\";\n          }\n          onCreateSession() {\n            this.gpuDataManager.onCreateSession();\n          }\n          onReleaseSession(t) {\n            this.unregisterBuffers(t), this.capturedCommandList.has(t) && this.capturedCommandList.delete(t), this.capturedPendingKernels.has(t) && this.capturedPendingKernels.delete(t), this.gpuDataManager.onReleaseSession(t);\n          }\n          onRunStart(t) {\n            this.currentSessionId = t, this.setQueryType();\n          }\n        };\n      });\n      tc = {};\n      Dt(tc, { init: () => mg });\n      rc = U(() => {\n        \"use strict\";\n        ee();\n        Xe();\n        ne();\n        Ka();\n        tr = class e {\n          constructor(t, r, n, o) {\n            this.module = t;\n            this.dataType = r;\n            this.data = n;\n            this.dims = o;\n          }\n          getFloat32Array() {\n            if (this.dataType !== 1) throw new Error(\"Invalid data type\");\n            let t = k.size(this.dims);\n            return t === 0 ? new Float32Array() : new Float32Array(this.module.HEAP8.buffer, this.data, t);\n          }\n          getBigInt64Array() {\n            if (this.dataType !== 7) throw new Error(\"Invalid data type\");\n            let t = k.size(this.dims);\n            return t === 0 ? new BigInt64Array() : new BigInt64Array(this.module.HEAP8.buffer, this.data, t);\n          }\n          getInt32Array() {\n            if (this.dataType !== 6) throw new Error(\"Invalid data type\");\n            let t = k.size(this.dims);\n            return t === 0 ? new Int32Array() : new Int32Array(this.module.HEAP8.buffer, this.data, t);\n          }\n          getUint16Array() {\n            if (this.dataType !== 10 && this.dataType !== 4) throw new Error(\"Invalid data type\");\n            let t = k.size(this.dims);\n            return t === 0 ? new Uint16Array() : new Uint16Array(this.module.HEAP8.buffer, this.data, t);\n          }\n          reshape(t) {\n            if (k.size(t) !== k.size(this.dims)) throw new Error(\"Invalid new shape\");\n            return new e(this.module, this.dataType, this.data, t);\n          }\n        }, Ao = class {\n          constructor(t, r, n) {\n            this.module = t;\n            this.backend = r;\n            this.customDataOffset = 0;\n            this.customDataSize = 0;\n            this.adapterInfo = r.adapterInfo;\n            let o = t.PTR_SIZE, i = n / t.PTR_SIZE, a = o === 4 ? \"i32\" : \"i64\";\n            this.opKernelContext = Number(t.getValue(o * i++, a));\n            let u = Number(t.getValue(o * i++, a));\n            this.outputCount = Number(t.getValue(o * i++, a)), this.customDataOffset = Number(t.getValue(o * i++, \"*\")), this.customDataSize = Number(t.getValue(o * i++, a));\n            let d = [];\n            for (let c = 0; c < u; c++) {\n              let p = Number(t.getValue(o * i++, a)), m = Number(t.getValue(o * i++, \"*\")), f = Number(t.getValue(o * i++, a)), b = [];\n              for (let g = 0; g < f; g++) b.push(Number(t.getValue(o * i++, a)));\n              d.push(new tr(t, p, m, b));\n            }\n            this.inputs = d;\n          }\n          get kernelCustomData() {\n            return this.backend.currentKernelCustomData;\n          }\n          get customDataBuffer() {\n            return this.module.HEAPU8.subarray(this.customDataOffset, this.customDataOffset + this.customDataSize);\n          }\n          compute(t, r) {\n            let n = r?.inputs?.map((u) => typeof u == \"number\" ? this.inputs[u] : u) ?? this.inputs, o = r?.outputs ?? [], i = (u, d, c) => new tr(this.module, d, this.output(u, c), c), a = (u, d) => {\n              let c = gt(u, d);\n              if (!c) throw new Error(`Unsupported data type: ${u}`);\n              let p = c > 0 ? this.backend.gpuDataManager.create(c).id : 0;\n              return new tr(this.module, u, p, d);\n            };\n            return this.backend.run(t, n, o, i, a, this.outputCount);\n          }\n          output(t, r) {\n            let n = this.module.stackSave();\n            try {\n              let o = this.module.PTR_SIZE, i = o === 4 ? \"i32\" : \"i64\", a = this.module.stackAlloc((1 + r.length) * o);\n              this.module.setValue(a, r.length, i);\n              for (let u = 0; u < r.length; u++) this.module.setValue(a + o * (u + 1), r[u], i);\n              return this.module._JsepOutput(this.opKernelContext, t, a);\n            } catch (o) {\n              throw new Error(`Failed to generate kernel's output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${o}`);\n            } finally {\n              this.module.stackRestore(n);\n            }\n          }\n        }, mg = async (e, t, r, n) => {\n          let o = t.jsepInit;\n          if (!o) throw new Error(\"Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.\");\n          if (e === \"webgpu\") {\n            let i = (ec(), Ft(Jl)).WebGpuBackend, a = new i();\n            await a.initialize(r, n), o(\"webgpu\", [a, (u) => a.alloc(Number(u)), (u) => a.free(u), (u, d, c, p = false) => {\n              if (p) se(\"verbose\", () => `[WebGPU] jsepCopyGpuToGpu: src=${Number(u)}, dst=${Number(d)}, size=${Number(c)}`), a.memcpy(Number(u), Number(d));\n              else {\n                se(\"verbose\", () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(u)}, gpuDataId=${Number(d)}, size=${Number(c)}`);\n                let m = t.HEAPU8.subarray(Number(u >>> 0), Number(u >>> 0) + Number(c));\n                a.upload(Number(d), m);\n              }\n            }, async (u, d, c) => {\n              se(\"verbose\", () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${u}, dataOffset=${d}, size=${c}`), await a.download(Number(u), () => t.HEAPU8.subarray(Number(d) >>> 0, Number(d + c) >>> 0));\n            }, (u, d, c) => a.createKernel(u, Number(d), c, t.UTF8ToString(t._JsepGetNodeName(Number(d)))), (u) => a.releaseKernel(u), (u, d, c, p) => {\n              se(\"verbose\", () => `[WebGPU] jsepRun: sessionHandle=${c}, kernel=${u}, contextDataOffset=${d}`);\n              let m = new Ao(t, a, Number(d));\n              return a.computeKernel(Number(u), m, p);\n            }, () => a.captureBegin(), () => a.captureEnd(), () => a.replay()]);\n          } else {\n            let i = new Nr(r);\n            o(\"webnn\", [i, () => i.reserveTensorId(), (a) => i.releaseTensorId(a), async (a, u, d, c, p) => i.ensureTensor(a, u, d, c, p), (a, u) => {\n              i.uploadTensor(a, u);\n            }, async (a, u) => i.downloadTensor(a, u)]);\n          }\n        };\n      });\n      Vn = U(() => {\n        \"use strict\";\n        Ma();\n        Ua();\n        ee();\n        ht();\n        Er();\n        jn();\n        fg = (e, t) => {\n          fe()._OrtInit(e, t) !== 0 && pe(\"Can't initialize onnxruntime.\");\n        }, vr = async (e) => {\n          fg(e.wasm.numThreads, Zt(e.logLevel));\n        }, $r = async (e, t) => {\n          fe().asyncInit?.();\n          {\n            let r = (rc(), Ft(tc)).init;\n            if (t === \"webgpu\") {\n              if (typeof navigator > \"u\" || !navigator.gpu) throw new Error(\"WebGPU is not supported in current environment\");\n              let n = e.webgpu.adapter;\n              if (n) {\n                if (typeof n.limits != \"object\" || typeof n.features != \"object\" || typeof n.requestDevice != \"function\") throw new Error(\"Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.\");\n              } else {\n                let o = e.webgpu.powerPreference;\n                if (o !== void 0 && o !== \"low-power\" && o !== \"high-performance\") throw new Error(`Invalid powerPreference setting: \"${o}\"`);\n                let i = e.webgpu.forceFallbackAdapter;\n                if (i !== void 0 && typeof i != \"boolean\") throw new Error(`Invalid forceFallbackAdapter setting: \"${i}\"`);\n                if (n = await navigator.gpu.requestAdapter({ powerPreference: o, forceFallbackAdapter: i }), !n) throw new Error('Failed to get GPU adapter. You may need to enable flag \"--enable-unsafe-webgpu\" if you are using Chrome.');\n              }\n              await r(\"webgpu\", fe(), e, n);\n            }\n            if (t === \"webnn\") {\n              if (typeof navigator > \"u\" || !navigator.ml) throw new Error(\"WebNN is not supported in current environment\");\n              await r(\"webnn\", fe(), e);\n            }\n          }\n        }, At = /* @__PURE__ */ new Map(), hg = (e) => {\n          let t = fe(), r = t.stackSave();\n          try {\n            let n = t.PTR_SIZE, o = t.stackAlloc(2 * n);\n            t._OrtGetInputOutputCount(e, o, o + n) !== 0 && pe(\"Can't get session input/output count.\");\n            let a = n === 4 ? \"i32\" : \"i64\";\n            return [Number(t.getValue(o, a)), Number(t.getValue(o + n, a))];\n          } finally {\n            t.stackRestore(r);\n          }\n        }, nc = (e, t) => {\n          let r = fe(), n = r.stackSave(), o = 0;\n          try {\n            let i = r.PTR_SIZE, a = r.stackAlloc(2 * i);\n            r._OrtGetInputOutputMetadata(e, t, a, a + i) !== 0 && pe(\"Can't get session input/output metadata.\");\n            let d = Number(r.getValue(a, \"*\"));\n            o = Number(r.getValue(a + i, \"*\"));\n            let c = r.HEAP32[o / 4];\n            if (c === 0) return [d, 0];\n            let p = r.HEAPU32[o / 4 + 1], m = [];\n            for (let f = 0; f < p; f++) {\n              let b = Number(r.getValue(o + 8 + f * i, \"*\"));\n              m.push(b !== 0 ? r.UTF8ToString(b) : Number(r.getValue(o + 8 + (f + p) * i, \"*\")));\n            }\n            return [d, c, m];\n          } finally {\n            r.stackRestore(n), o !== 0 && r._OrtFree(o);\n          }\n        }, jt = (e) => {\n          let t = fe(), r = t._malloc(e.byteLength);\n          if (r === 0) throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);\n          return t.HEAPU8.set(e, r), [r, e.byteLength];\n        }, xr = async (e, t) => {\n          let r, n, o = fe();\n          Array.isArray(e) ? [r, n] = e : e.buffer === o.HEAPU8.buffer ? [r, n] = [e.byteOffset, e.byteLength] : [r, n] = jt(e);\n          let i = 0, a = 0, u = 0, d = [], c = [], p = [];\n          try {\n            if ([a, d] = await Ra(t), t?.externalData && o.mountExternalData) {\n              let T = [];\n              for (let E of t.externalData) {\n                let I = typeof E == \"string\" ? E : E.path;\n                T.push(Qt(typeof E == \"string\" ? E : E.data).then((z) => {\n                  o.mountExternalData(I, z);\n                }));\n              }\n              await Promise.all(T);\n            }\n            for (let T of t?.executionProviders ?? []) if ((typeof T == \"string\" ? T : T.name) === \"webnn\") {\n              if (o.shouldTransferToMLTensor = false, typeof T != \"string\") {\n                let I = T, z = I?.context, O = I?.gpuDevice, D = I?.deviceType, L = I?.powerPreference;\n                z ? o.currentContext = z : O ? o.currentContext = await o.webnnCreateMLContext(O) : o.currentContext = await o.webnnCreateMLContext({ deviceType: D, powerPreference: L });\n              } else o.currentContext = await o.webnnCreateMLContext();\n              break;\n            }\n            i = await o._OrtCreateSession(r, n, a), o.webgpuOnCreateSession?.(i), i === 0 && pe(\"Can't create a session.\"), o.jsepOnCreateSession?.(), o.currentContext && (o.webnnRegisterMLContext(i, o.currentContext), o.currentContext = void 0, o.shouldTransferToMLTensor = true);\n            let [m, f] = hg(i), b = !!t?.enableGraphCapture, g = [], _ = [], S = [], $ = [], v = [];\n            for (let T = 0; T < m; T++) {\n              let [E, I, z] = nc(i, T);\n              E === 0 && pe(\"Can't get an input name.\"), c.push(E);\n              let O = o.UTF8ToString(E);\n              g.push(O), S.push(I === 0 ? { name: O, isTensor: false } : { name: O, isTensor: true, type: Ye(I), shape: z });\n            }\n            for (let T = 0; T < f; T++) {\n              let [E, I, z] = nc(i, T + m);\n              E === 0 && pe(\"Can't get an output name.\"), p.push(E);\n              let O = o.UTF8ToString(E);\n              _.push(O), $.push(I === 0 ? { name: O, isTensor: false } : { name: O, isTensor: true, type: Ye(I), shape: z });\n              {\n                if (b && t?.preferredOutputLocation === void 0) {\n                  v.push(\"gpu-buffer\");\n                  continue;\n                }\n                let D = typeof t?.preferredOutputLocation == \"string\" ? t.preferredOutputLocation : t?.preferredOutputLocation?.[O] ?? \"cpu\";\n                if (D !== \"cpu\" && D !== \"cpu-pinned\" && D !== \"gpu-buffer\" && D !== \"ml-tensor\") throw new Error(`Not supported preferred output location: ${D}.`);\n                if (b && D !== \"gpu-buffer\") throw new Error(`Not supported preferred output location: ${D}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);\n                v.push(D);\n              }\n            }\n            let x = null;\n            return v.some((T) => T === \"gpu-buffer\" || T === \"ml-tensor\") && (u = o._OrtCreateBinding(i), u === 0 && pe(\"Can't create IO binding.\"), x = { handle: u, outputPreferredLocations: v, outputPreferredLocationsEncoded: v.map((T) => qn(T)) }), At.set(i, [i, c, p, x, b, false]), [i, g, _, S, $];\n          } catch (m) {\n            throw c.forEach((f) => o._OrtFree(f)), p.forEach((f) => o._OrtFree(f)), u !== 0 && o._OrtReleaseBinding(u) !== 0 && pe(\"Can't release IO binding.\"), i !== 0 && o._OrtReleaseSession(i) !== 0 && pe(\"Can't release session.\"), m;\n          } finally {\n            o._free(r), a !== 0 && o._OrtReleaseSessionOptions(a) !== 0 && pe(\"Can't release session options.\"), d.forEach((m) => o._free(m)), o.unmountExternalData?.();\n          }\n        }, Sr = (e) => {\n          let t = fe(), r = At.get(e);\n          if (!r) throw new Error(`cannot release session. invalid session id: ${e}`);\n          let [n, o, i, a, u] = r;\n          a && (u && t._OrtClearBoundOutputs(a.handle) !== 0 && pe(\"Can't clear bound outputs.\"), t._OrtReleaseBinding(a.handle) !== 0 && pe(\"Can't release IO binding.\")), t.jsepOnReleaseSession?.(e), t.webnnOnReleaseSession?.(e), t.webgpuOnReleaseSession?.(e), o.forEach((d) => t._OrtFree(d)), i.forEach((d) => t._OrtFree(d)), t._OrtReleaseSession(n) !== 0 && pe(\"Can't release session.\"), At.delete(e);\n        }, oc = async (e, t, r, n, o, i, a = false) => {\n          if (!e) {\n            t.push(0);\n            return;\n          }\n          let u = fe(), d = u.PTR_SIZE, c = e[0], p = e[1], m = e[3], f = m, b, g;\n          if (c === \"string\" && (m === \"gpu-buffer\" || m === \"ml-tensor\")) throw new Error(\"String tensor is not supported on GPU.\");\n          if (a && m !== \"gpu-buffer\") throw new Error(`External buffer must be provided for input/output index ${i} when enableGraphCapture is true.`);\n          if (m === \"gpu-buffer\") {\n            let $ = e[2].gpuBuffer;\n            g = gt(Mt(c), p);\n            {\n              let v = u.jsepRegisterBuffer;\n              if (!v) throw new Error('Tensor location \"gpu-buffer\" is not supported without using WebGPU.');\n              b = v(n, i, $, g);\n            }\n          } else if (m === \"ml-tensor\") {\n            let $ = e[2].mlTensor;\n            g = gt(Mt(c), p);\n            let v = u.webnnRegisterMLTensor;\n            if (!v) throw new Error('Tensor location \"ml-tensor\" is not supported without using WebNN.');\n            b = v(n, $, Mt(c), p);\n          } else {\n            let $ = e[2];\n            if (Array.isArray($)) {\n              g = d * $.length, b = u._malloc(g), r.push(b);\n              for (let v = 0; v < $.length; v++) {\n                if (typeof $[v] != \"string\") throw new TypeError(`tensor data at index ${v} is not a string`);\n                u.setValue(b + v * d, Ne($[v], r), \"*\");\n              }\n            } else {\n              let v = u.webnnIsGraphInput;\n              if (c !== \"string\" && v) {\n                let x = u.UTF8ToString(o);\n                if (v(n, x)) {\n                  let T = Mt(c);\n                  g = gt(T, p), f = \"ml-tensor\";\n                  let E = u.webnnCreateTemporaryTensor, I = u.webnnUploadTensor;\n                  if (!E || !I) throw new Error('Tensor location \"ml-tensor\" is not supported without using WebNN.');\n                  let z = await E(n, T, p);\n                  I(z, new Uint8Array($.buffer, $.byteOffset, $.byteLength)), b = z;\n                } else g = $.byteLength, b = u._malloc(g), r.push(b), u.HEAPU8.set(new Uint8Array($.buffer, $.byteOffset, g), b);\n              } else g = $.byteLength, b = u._malloc(g), r.push(b), u.HEAPU8.set(new Uint8Array($.buffer, $.byteOffset, g), b);\n            }\n          }\n          let _ = u.stackSave(), S = u.stackAlloc(4 * p.length);\n          try {\n            p.forEach((v, x) => u.setValue(S + x * d, v, d === 4 ? \"i32\" : \"i64\"));\n            let $ = u._OrtCreateTensor(Mt(c), b, g, S, p.length, qn(f));\n            $ === 0 && pe(`Can't create tensor for input/output. session=${n}, index=${i}.`), t.push($);\n          } finally {\n            u.stackRestore(_);\n          }\n        }, Tr = async (e, t, r, n, o, i) => {\n          let a = fe(), u = a.PTR_SIZE, d = At.get(e);\n          if (!d) throw new Error(`cannot run inference. invalid session id: ${e}`);\n          let c = d[0], p = d[1], m = d[2], f = d[3], b = d[4], g = d[5], _ = t.length, S = n.length, $ = 0, v = [], x = [], T = [], E = [], I = a.stackSave(), z = a.stackAlloc(_ * u), O = a.stackAlloc(_ * u), D = a.stackAlloc(S * u), L = a.stackAlloc(S * u);\n          try {\n            [$, v] = Da(i);\n            for (let W = 0; W < _; W++) await oc(r[W], x, E, e, p[t[W]], t[W], b);\n            for (let W = 0; W < S; W++) await oc(o[W], T, E, e, m[n[W]], _ + n[W], b);\n            for (let W = 0; W < _; W++) a.setValue(z + W * u, x[W], \"*\"), a.setValue(O + W * u, p[t[W]], \"*\");\n            for (let W = 0; W < S; W++) a.setValue(D + W * u, T[W], \"*\"), a.setValue(L + W * u, m[n[W]], \"*\");\n            if (f && !g) {\n              let { handle: W, outputPreferredLocations: Z, outputPreferredLocationsEncoded: we } = f;\n              if (p.length !== _) throw new Error(`input count from feeds (${_}) is expected to be always equal to model's input count (${p.length}).`);\n              for (let H = 0; H < _; H++) {\n                let j = t[H];\n                await a._OrtBindInput(W, p[j], x[H]) !== 0 && pe(`Can't bind input[${H}] for session=${e}.`);\n              }\n              for (let H = 0; H < S; H++) {\n                let j = n[H];\n                o[H]?.[3] ? a._OrtBindOutput(W, m[j], T[H], 0) !== 0 && pe(`Can't bind pre-allocated output[${H}] for session=${e}.`) : a._OrtBindOutput(W, m[j], 0, we[j]) !== 0 && pe(`Can't bind output[${H}] to ${Z[H]} for session=${e}.`);\n              }\n              At.set(e, [c, p, m, f, b, true]);\n            }\n            a.jsepOnRunStart?.(c), a.webnnOnRunStart?.(c);\n            let q;\n            f ? q = await a._OrtRunWithBinding(c, f.handle, S, D, $) : q = await a._OrtRun(c, O, z, _, L, S, D, $), q !== 0 && pe(\"failed to call OrtRun().\");\n            let Q = [];\n            for (let W = 0; W < S; W++) {\n              let Z = Number(a.getValue(D + W * u, \"*\"));\n              if (Z === T[W]) {\n                Q.push(o[W]);\n                continue;\n              }\n              let we = a.stackSave(), H = a.stackAlloc(4 * u), j = false, te, X = 0;\n              try {\n                a._OrtGetTensorData(Z, H, H + u, H + 2 * u, H + 3 * u) !== 0 && pe(`Can't access output tensor data on index ${W}.`);\n                let he = u === 4 ? \"i32\" : \"i64\", ye = Number(a.getValue(H, he));\n                X = a.getValue(H + u, \"*\");\n                let re = a.getValue(H + u * 2, \"*\"), C = Number(a.getValue(H + u * 3, he)), V = [];\n                for (let ve = 0; ve < C; ve++) V.push(Number(a.getValue(re + ve * u, he)));\n                a._OrtFree(re) !== 0 && pe(\"Can't free memory for tensor dims.\");\n                let de = V.reduce((ve, $e) => ve * $e, 1);\n                te = Ye(ye);\n                let ze = f?.outputPreferredLocations[n[W]];\n                if (te === \"string\") {\n                  if (ze === \"gpu-buffer\" || ze === \"ml-tensor\") throw new Error(\"String tensor is not supported on GPU.\");\n                  let ve = [];\n                  for (let $e = 0; $e < de; $e++) {\n                    let Ce = a.getValue(X + $e * u, \"*\"), _t = a.getValue(X + ($e + 1) * u, \"*\"), kt = $e === de - 1 ? void 0 : _t - Ce;\n                    ve.push(a.UTF8ToString(Ce, kt));\n                  }\n                  Q.push([te, V, ve, \"cpu\"]);\n                } else if (ze === \"gpu-buffer\" && de > 0) {\n                  let ve = a.jsepGetBuffer;\n                  if (!ve) throw new Error('preferredLocation \"gpu-buffer\" is not supported without using WebGPU.');\n                  let $e = ve(X), Ce = gt(ye, de);\n                  if (Ce === void 0 || !zr(te)) throw new Error(`Unsupported data type: ${te}`);\n                  j = true, Q.push([te, V, { gpuBuffer: $e, download: a.jsepCreateDownloader($e, Ce, te), dispose: () => {\n                    a._OrtReleaseTensor(Z) !== 0 && pe(\"Can't release tensor.\");\n                  } }, \"gpu-buffer\"]);\n                } else if (ze === \"ml-tensor\" && de > 0) {\n                  let ve = a.webnnEnsureTensor, $e = a.webnnIsInt64Supported;\n                  if (!ve || !$e) throw new Error('preferredLocation \"ml-tensor\" is not supported without using WebNN.');\n                  if (gt(ye, de) === void 0 || !Or(te)) throw new Error(`Unsupported data type: ${te}`);\n                  if (te === \"int64\" && !$e(e)) throw new Error('preferredLocation \"ml-tensor\" for int64 output is not supported by current WebNN Context.');\n                  let _t = await ve(e, X, ye, V, false);\n                  j = true, Q.push([te, V, { mlTensor: _t, download: a.webnnCreateMLTensorDownloader(X, te), dispose: () => {\n                    a.webnnReleaseTensorId(X), a._OrtReleaseTensor(Z);\n                  } }, \"ml-tensor\"]);\n                } else {\n                  let ve = Pr(te), $e = new ve(de);\n                  new Uint8Array($e.buffer, $e.byteOffset, $e.byteLength).set(a.HEAPU8.subarray(X, X + $e.byteLength)), Q.push([te, V, $e, \"cpu\"]);\n                }\n              } finally {\n                a.stackRestore(we), te === \"string\" && X && a._free(X), j || a._OrtReleaseTensor(Z), a.webnnOnRunEnd?.(c);\n              }\n            }\n            return f && !b && (a._OrtClearBoundOutputs(f.handle) !== 0 && pe(\"Can't clear bound outputs.\"), At.set(e, [c, p, m, f, b, false])), Q;\n          } finally {\n            a.stackRestore(I), x.forEach((q) => a._OrtReleaseTensor(q)), T.forEach((q) => a._OrtReleaseTensor(q)), E.forEach((q) => a._free(q)), $ !== 0 && a._OrtReleaseRunOptions($), v.forEach((q) => a._free(q));\n          }\n        }, Ir = (e) => {\n          let t = fe(), r = At.get(e);\n          if (!r) throw new Error(\"invalid session id\");\n          let n = r[0], o = t._OrtEndProfiling(n);\n          o === 0 && pe(\"Can't get an profile file name.\"), t._OrtFree(o);\n        }, Cr = (e) => {\n          let t = [];\n          for (let r of e) {\n            let n = r[2];\n            !Array.isArray(n) && \"buffer\" in n && t.push(n.buffer);\n          }\n          return t;\n        };\n      });\n      Po = U(() => {\n        \"use strict\";\n        We();\n        Vn();\n        ht();\n        _r();\n        Et = () => !!ge.wasm.proxy && typeof document < \"u\", rr = false, sn = false, un = false, ko = /* @__PURE__ */ new Map(), Vt = (e, t) => {\n          let r = ko.get(e);\n          r ? r.push(t) : ko.set(e, [t]);\n        }, Wt = () => {\n          if (rr || !sn || un || !Le) throw new Error(\"worker not ready\");\n        }, bg = (e) => {\n          switch (e.data.type) {\n            case \"init-wasm\":\n              rr = false, e.data.err ? (un = true, Eo[1](e.data.err)) : (sn = true, Eo[0]()), an && (URL.revokeObjectURL(an), an = void 0);\n              break;\n            case \"init-ep\":\n            case \"copy-from\":\n            case \"create\":\n            case \"release\":\n            case \"run\":\n            case \"end-profiling\": {\n              let t = ko.get(e.data.type);\n              e.data.err ? t.shift()[1](e.data.err) : t.shift()[0](e.data.out);\n              break;\n            }\n            default:\n          }\n        }, ic = async () => {\n          if (!sn) {\n            if (rr) throw new Error(\"multiple calls to 'initWasm()' detected.\");\n            if (un) throw new Error(\"previous call to 'initWasm()' failed.\");\n            if (rr = true, Et()) return new Promise((e, t) => {\n              Le?.terminate(), za().then(([r, n]) => {\n                try {\n                  Le = n, Le.onerror = (i) => t(i), Le.onmessage = bg, Eo = [e, t];\n                  let o = { type: \"init-wasm\", in: ge };\n                  !o.in.wasm.wasmPaths && (r || Gn) && (o.in.wasm.wasmPaths = { wasm: new URL(\"ort-wasm-simd-threaded.jsep.wasm\", import_meta.url).href }), Le.postMessage(o), an = r;\n                } catch (o) {\n                  t(o);\n                }\n              }, t);\n            });\n            try {\n              await wr(ge.wasm), await vr(ge), sn = true;\n            } catch (e) {\n              throw un = true, e;\n            } finally {\n              rr = false;\n            }\n          }\n        }, ac = async (e) => {\n          if (Et()) return Wt(), new Promise((t, r) => {\n            Vt(\"init-ep\", [t, r]);\n            let n = { type: \"init-ep\", in: { epName: e, env: ge } };\n            Le.postMessage(n);\n          });\n          await $r(ge, e);\n        }, sc = async (e) => Et() ? (Wt(), new Promise((t, r) => {\n          Vt(\"copy-from\", [t, r]);\n          let n = { type: \"copy-from\", in: { buffer: e } };\n          Le.postMessage(n, [e.buffer]);\n        })) : jt(e), uc = async (e, t) => {\n          if (Et()) {\n            if (t?.preferredOutputLocation) throw new Error('session option \"preferredOutputLocation\" is not supported for proxy.');\n            return Wt(), new Promise((r, n) => {\n              Vt(\"create\", [r, n]);\n              let o = { type: \"create\", in: { model: e, options: { ...t } } }, i = [];\n              e instanceof Uint8Array && i.push(e.buffer), Le.postMessage(o, i);\n            });\n          } else return xr(e, t);\n        }, dc = async (e) => {\n          if (Et()) return Wt(), new Promise((t, r) => {\n            Vt(\"release\", [t, r]);\n            let n = { type: \"release\", in: e };\n            Le.postMessage(n);\n          });\n          Sr(e);\n        }, lc = async (e, t, r, n, o, i) => {\n          if (Et()) {\n            if (r.some((a) => a[3] !== \"cpu\")) throw new Error(\"input tensor on GPU is not supported for proxy.\");\n            if (o.some((a) => a)) throw new Error(\"pre-allocated output tensor is not supported for proxy.\");\n            return Wt(), new Promise((a, u) => {\n              Vt(\"run\", [a, u]);\n              let d = r, c = { type: \"run\", in: { sessionId: e, inputIndices: t, inputs: d, outputIndices: n, options: i } };\n              Le.postMessage(c, Cr(d));\n            });\n          } else return Tr(e, t, r, n, o, i);\n        }, cc = async (e) => {\n          if (Et()) return Wt(), new Promise((t, r) => {\n            Vt(\"end-profiling\", [t, r]);\n            let n = { type: \"end-profiling\", in: e };\n            Le.postMessage(n);\n          });\n          Ir(e);\n        };\n      });\n      mc = U(() => {\n        \"use strict\";\n        We();\n        Po();\n        ee();\n        yr();\n        jn();\n        pc = (e, t) => {\n          switch (e.location) {\n            case \"cpu\":\n              return [e.type, e.dims, e.data, \"cpu\"];\n            case \"gpu-buffer\":\n              return [e.type, e.dims, { gpuBuffer: e.gpuBuffer }, \"gpu-buffer\"];\n            case \"ml-tensor\":\n              return [e.type, e.dims, { mlTensor: e.mlTensor }, \"ml-tensor\"];\n            default:\n              throw new Error(`invalid data location: ${e.location} for ${t()}`);\n          }\n        }, yg = (e) => {\n          switch (e[3]) {\n            case \"cpu\":\n              return new Ge(e[0], e[2], e[1]);\n            case \"gpu-buffer\": {\n              let t = e[0];\n              if (!zr(t)) throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);\n              let { gpuBuffer: r, download: n, dispose: o } = e[2];\n              return Ge.fromGpuBuffer(r, { dataType: t, dims: e[1], download: n, dispose: o });\n            }\n            case \"ml-tensor\": {\n              let t = e[0];\n              if (!Or(t)) throw new Error(`not supported data type: ${t} for deserializing MLTensor tensor`);\n              let { mlTensor: r, download: n, dispose: o } = e[2];\n              return Ge.fromMLTensor(r, { dataType: t, dims: e[1], download: n, dispose: o });\n            }\n            default:\n              throw new Error(`invalid data location: ${e[3]}`);\n          }\n        }, dn = class {\n          async fetchModelAndCopyToWasmMemory(t) {\n            return sc(await Qt(t));\n          }\n          async loadModel(t, r) {\n            Re();\n            let n;\n            typeof t == \"string\" ? n = await this.fetchModelAndCopyToWasmMemory(t) : n = t, [this.sessionId, this.inputNames, this.outputNames, this.inputMetadata, this.outputMetadata] = await uc(n, r), Oe();\n          }\n          async dispose() {\n            return dc(this.sessionId);\n          }\n          async run(t, r, n) {\n            Re();\n            let o = [], i = [];\n            Object.entries(t).forEach((f) => {\n              let b = f[0], g = f[1], _ = this.inputNames.indexOf(b);\n              if (_ === -1) throw new Error(`invalid input '${b}'`);\n              o.push(g), i.push(_);\n            });\n            let a = [], u = [];\n            Object.entries(r).forEach((f) => {\n              let b = f[0], g = f[1], _ = this.outputNames.indexOf(b);\n              if (_ === -1) throw new Error(`invalid output '${b}'`);\n              a.push(g), u.push(_);\n            });\n            let d = o.map((f, b) => pc(f, () => `input \"${this.inputNames[i[b]]}\"`)), c = a.map((f, b) => f ? pc(f, () => `output \"${this.outputNames[u[b]]}\"`) : null), p = await lc(this.sessionId, i, d, u, c, n), m = {};\n            for (let f = 0; f < p.length; f++) m[this.outputNames[u[f]]] = a[f] ?? yg(p[f]);\n            return Oe(), m;\n          }\n          startProfiling() {\n          }\n          endProfiling() {\n            cc(this.sessionId);\n          }\n        };\n      });\n      hc = {};\n      Dt(hc, { OnnxruntimeWebAssemblyBackend: () => ln, initializeFlags: () => fc, wasmBackend: () => _g });\n      gc = U(() => {\n        \"use strict\";\n        We();\n        Po();\n        mc();\n        fc = () => {\n          (typeof ge.wasm.initTimeout != \"number\" || ge.wasm.initTimeout < 0) && (ge.wasm.initTimeout = 0);\n          let e = ge.wasm.simd;\n          if (typeof e != \"boolean\" && e !== void 0 && e !== \"fixed\" && e !== \"relaxed\" && (console.warn(`Property \"env.wasm.simd\" is set to unknown value \"${e}\". Reset it to \\`false\\` and ignore SIMD feature checking.`), ge.wasm.simd = false), typeof ge.wasm.proxy != \"boolean\" && (ge.wasm.proxy = false), typeof ge.wasm.trace != \"boolean\" && (ge.wasm.trace = false), typeof ge.wasm.numThreads != \"number\" || !Number.isInteger(ge.wasm.numThreads) || ge.wasm.numThreads <= 0) if (typeof self < \"u\" && !self.crossOriginIsolated) ge.wasm.numThreads = 1;\n          else {\n            let t = typeof navigator > \"u\" ? On(\"node:os\").cpus().length : navigator.hardwareConcurrency;\n            ge.wasm.numThreads = Math.min(4, Math.ceil((t || 1) / 2));\n          }\n        }, ln = class {\n          async init(t) {\n            fc(), await ic(), await ac(t);\n          }\n          async createInferenceSessionHandler(t, r) {\n            let n = new dn();\n            return await n.loadModel(t, r), n;\n          }\n        }, _g = new ln();\n      });\n      We();\n      We();\n      We();\n      _a = \"1.22.0-dev.20250409-89f8206ba4\";\n      IS = Nn;\n      {\n        let e = (gc(), Ft(hc)).wasmBackend;\n        $t(\"webgpu\", e, 5), $t(\"webnn\", e, 5), $t(\"cpu\", e, 10), $t(\"wasm\", e, 10);\n      }\n      Object.defineProperty(ge.versions, \"web\", { value: _a, enumerable: true });\n    }\n  });\n\n  // node_modules/@huggingface/transformers/dist/transformers.web.js\n  var transformers_web_exports = {};\n  __export(transformers_web_exports, {\n    ASTFeatureExtractor: () => __webpack_exports__ASTFeatureExtractor,\n    ASTForAudioClassification: () => __webpack_exports__ASTForAudioClassification,\n    ASTModel: () => __webpack_exports__ASTModel,\n    ASTPreTrainedModel: () => __webpack_exports__ASTPreTrainedModel,\n    AlbertForMaskedLM: () => __webpack_exports__AlbertForMaskedLM,\n    AlbertForQuestionAnswering: () => __webpack_exports__AlbertForQuestionAnswering,\n    AlbertForSequenceClassification: () => __webpack_exports__AlbertForSequenceClassification,\n    AlbertModel: () => __webpack_exports__AlbertModel,\n    AlbertPreTrainedModel: () => __webpack_exports__AlbertPreTrainedModel,\n    AlbertTokenizer: () => __webpack_exports__AlbertTokenizer,\n    AudioClassificationPipeline: () => __webpack_exports__AudioClassificationPipeline,\n    AutoConfig: () => __webpack_exports__AutoConfig,\n    AutoFeatureExtractor: () => __webpack_exports__AutoFeatureExtractor,\n    AutoImageProcessor: () => __webpack_exports__AutoImageProcessor,\n    AutoModel: () => __webpack_exports__AutoModel,\n    AutoModelForAudioClassification: () => __webpack_exports__AutoModelForAudioClassification,\n    AutoModelForAudioFrameClassification: () => __webpack_exports__AutoModelForAudioFrameClassification,\n    AutoModelForAudioTextToText: () => __webpack_exports__AutoModelForAudioTextToText,\n    AutoModelForCTC: () => __webpack_exports__AutoModelForCTC,\n    AutoModelForCausalLM: () => __webpack_exports__AutoModelForCausalLM,\n    AutoModelForDepthEstimation: () => __webpack_exports__AutoModelForDepthEstimation,\n    AutoModelForDocumentQuestionAnswering: () => __webpack_exports__AutoModelForDocumentQuestionAnswering,\n    AutoModelForImageClassification: () => __webpack_exports__AutoModelForImageClassification,\n    AutoModelForImageFeatureExtraction: () => __webpack_exports__AutoModelForImageFeatureExtraction,\n    AutoModelForImageMatting: () => __webpack_exports__AutoModelForImageMatting,\n    AutoModelForImageSegmentation: () => __webpack_exports__AutoModelForImageSegmentation,\n    AutoModelForImageTextToText: () => __webpack_exports__AutoModelForImageTextToText,\n    AutoModelForImageToImage: () => __webpack_exports__AutoModelForImageToImage,\n    AutoModelForMaskGeneration: () => __webpack_exports__AutoModelForMaskGeneration,\n    AutoModelForMaskedLM: () => __webpack_exports__AutoModelForMaskedLM,\n    AutoModelForNormalEstimation: () => __webpack_exports__AutoModelForNormalEstimation,\n    AutoModelForObjectDetection: () => __webpack_exports__AutoModelForObjectDetection,\n    AutoModelForPoseEstimation: () => __webpack_exports__AutoModelForPoseEstimation,\n    AutoModelForQuestionAnswering: () => __webpack_exports__AutoModelForQuestionAnswering,\n    AutoModelForSemanticSegmentation: () => __webpack_exports__AutoModelForSemanticSegmentation,\n    AutoModelForSeq2SeqLM: () => __webpack_exports__AutoModelForSeq2SeqLM,\n    AutoModelForSequenceClassification: () => __webpack_exports__AutoModelForSequenceClassification,\n    AutoModelForSpeechSeq2Seq: () => __webpack_exports__AutoModelForSpeechSeq2Seq,\n    AutoModelForTextToSpectrogram: () => __webpack_exports__AutoModelForTextToSpectrogram,\n    AutoModelForTextToWaveform: () => __webpack_exports__AutoModelForTextToWaveform,\n    AutoModelForTokenClassification: () => __webpack_exports__AutoModelForTokenClassification,\n    AutoModelForUniversalSegmentation: () => __webpack_exports__AutoModelForUniversalSegmentation,\n    AutoModelForVision2Seq: () => __webpack_exports__AutoModelForVision2Seq,\n    AutoModelForXVector: () => __webpack_exports__AutoModelForXVector,\n    AutoModelForZeroShotObjectDetection: () => __webpack_exports__AutoModelForZeroShotObjectDetection,\n    AutoProcessor: () => __webpack_exports__AutoProcessor,\n    AutoTokenizer: () => __webpack_exports__AutoTokenizer,\n    AutomaticSpeechRecognitionPipeline: () => __webpack_exports__AutomaticSpeechRecognitionPipeline,\n    BackgroundRemovalPipeline: () => __webpack_exports__BackgroundRemovalPipeline,\n    BartForConditionalGeneration: () => __webpack_exports__BartForConditionalGeneration,\n    BartForSequenceClassification: () => __webpack_exports__BartForSequenceClassification,\n    BartModel: () => __webpack_exports__BartModel,\n    BartPretrainedModel: () => __webpack_exports__BartPretrainedModel,\n    BartTokenizer: () => __webpack_exports__BartTokenizer,\n    BaseModelOutput: () => __webpack_exports__BaseModelOutput,\n    BaseStreamer: () => __webpack_exports__BaseStreamer,\n    BeitFeatureExtractor: () => __webpack_exports__BeitFeatureExtractor,\n    BeitForImageClassification: () => __webpack_exports__BeitForImageClassification,\n    BeitModel: () => __webpack_exports__BeitModel,\n    BeitPreTrainedModel: () => __webpack_exports__BeitPreTrainedModel,\n    BertForMaskedLM: () => __webpack_exports__BertForMaskedLM,\n    BertForQuestionAnswering: () => __webpack_exports__BertForQuestionAnswering,\n    BertForSequenceClassification: () => __webpack_exports__BertForSequenceClassification,\n    BertForTokenClassification: () => __webpack_exports__BertForTokenClassification,\n    BertModel: () => __webpack_exports__BertModel,\n    BertPreTrainedModel: () => __webpack_exports__BertPreTrainedModel,\n    BertTokenizer: () => __webpack_exports__BertTokenizer,\n    BitImageProcessor: () => __webpack_exports__BitImageProcessor,\n    BlenderbotForConditionalGeneration: () => __webpack_exports__BlenderbotForConditionalGeneration,\n    BlenderbotModel: () => __webpack_exports__BlenderbotModel,\n    BlenderbotPreTrainedModel: () => __webpack_exports__BlenderbotPreTrainedModel,\n    BlenderbotSmallForConditionalGeneration: () => __webpack_exports__BlenderbotSmallForConditionalGeneration,\n    BlenderbotSmallModel: () => __webpack_exports__BlenderbotSmallModel,\n    BlenderbotSmallPreTrainedModel: () => __webpack_exports__BlenderbotSmallPreTrainedModel,\n    BlenderbotSmallTokenizer: () => __webpack_exports__BlenderbotSmallTokenizer,\n    BlenderbotTokenizer: () => __webpack_exports__BlenderbotTokenizer,\n    BloomForCausalLM: () => __webpack_exports__BloomForCausalLM,\n    BloomModel: () => __webpack_exports__BloomModel,\n    BloomPreTrainedModel: () => __webpack_exports__BloomPreTrainedModel,\n    BloomTokenizer: () => __webpack_exports__BloomTokenizer,\n    CLIPFeatureExtractor: () => __webpack_exports__CLIPFeatureExtractor,\n    CLIPImageProcessor: () => __webpack_exports__CLIPImageProcessor,\n    CLIPModel: () => __webpack_exports__CLIPModel,\n    CLIPPreTrainedModel: () => __webpack_exports__CLIPPreTrainedModel,\n    CLIPSegForImageSegmentation: () => __webpack_exports__CLIPSegForImageSegmentation,\n    CLIPSegModel: () => __webpack_exports__CLIPSegModel,\n    CLIPSegPreTrainedModel: () => __webpack_exports__CLIPSegPreTrainedModel,\n    CLIPTextModel: () => __webpack_exports__CLIPTextModel,\n    CLIPTextModelWithProjection: () => __webpack_exports__CLIPTextModelWithProjection,\n    CLIPTokenizer: () => __webpack_exports__CLIPTokenizer,\n    CLIPVisionModel: () => __webpack_exports__CLIPVisionModel,\n    CLIPVisionModelWithProjection: () => __webpack_exports__CLIPVisionModelWithProjection,\n    CamembertForMaskedLM: () => __webpack_exports__CamembertForMaskedLM,\n    CamembertForQuestionAnswering: () => __webpack_exports__CamembertForQuestionAnswering,\n    CamembertForSequenceClassification: () => __webpack_exports__CamembertForSequenceClassification,\n    CamembertForTokenClassification: () => __webpack_exports__CamembertForTokenClassification,\n    CamembertModel: () => __webpack_exports__CamembertModel,\n    CamembertPreTrainedModel: () => __webpack_exports__CamembertPreTrainedModel,\n    CamembertTokenizer: () => __webpack_exports__CamembertTokenizer,\n    CausalLMOutput: () => __webpack_exports__CausalLMOutput,\n    CausalLMOutputWithPast: () => __webpack_exports__CausalLMOutputWithPast,\n    ChineseCLIPFeatureExtractor: () => __webpack_exports__ChineseCLIPFeatureExtractor,\n    ChineseCLIPModel: () => __webpack_exports__ChineseCLIPModel,\n    ChineseCLIPPreTrainedModel: () => __webpack_exports__ChineseCLIPPreTrainedModel,\n    ClapAudioModelWithProjection: () => __webpack_exports__ClapAudioModelWithProjection,\n    ClapFeatureExtractor: () => __webpack_exports__ClapFeatureExtractor,\n    ClapModel: () => __webpack_exports__ClapModel,\n    ClapPreTrainedModel: () => __webpack_exports__ClapPreTrainedModel,\n    ClapTextModelWithProjection: () => __webpack_exports__ClapTextModelWithProjection,\n    ClassifierFreeGuidanceLogitsProcessor: () => __webpack_exports__ClassifierFreeGuidanceLogitsProcessor,\n    CodeGenForCausalLM: () => __webpack_exports__CodeGenForCausalLM,\n    CodeGenModel: () => __webpack_exports__CodeGenModel,\n    CodeGenPreTrainedModel: () => __webpack_exports__CodeGenPreTrainedModel,\n    CodeGenTokenizer: () => __webpack_exports__CodeGenTokenizer,\n    CodeLlamaTokenizer: () => __webpack_exports__CodeLlamaTokenizer,\n    CohereForCausalLM: () => __webpack_exports__CohereForCausalLM,\n    CohereModel: () => __webpack_exports__CohereModel,\n    CoherePreTrainedModel: () => __webpack_exports__CoherePreTrainedModel,\n    CohereTokenizer: () => __webpack_exports__CohereTokenizer,\n    ConvBertForMaskedLM: () => __webpack_exports__ConvBertForMaskedLM,\n    ConvBertForQuestionAnswering: () => __webpack_exports__ConvBertForQuestionAnswering,\n    ConvBertForSequenceClassification: () => __webpack_exports__ConvBertForSequenceClassification,\n    ConvBertForTokenClassification: () => __webpack_exports__ConvBertForTokenClassification,\n    ConvBertModel: () => __webpack_exports__ConvBertModel,\n    ConvBertPreTrainedModel: () => __webpack_exports__ConvBertPreTrainedModel,\n    ConvBertTokenizer: () => __webpack_exports__ConvBertTokenizer,\n    ConvNextFeatureExtractor: () => __webpack_exports__ConvNextFeatureExtractor,\n    ConvNextForImageClassification: () => __webpack_exports__ConvNextForImageClassification,\n    ConvNextImageProcessor: () => __webpack_exports__ConvNextImageProcessor,\n    ConvNextModel: () => __webpack_exports__ConvNextModel,\n    ConvNextPreTrainedModel: () => __webpack_exports__ConvNextPreTrainedModel,\n    ConvNextV2ForImageClassification: () => __webpack_exports__ConvNextV2ForImageClassification,\n    ConvNextV2Model: () => __webpack_exports__ConvNextV2Model,\n    ConvNextV2PreTrainedModel: () => __webpack_exports__ConvNextV2PreTrainedModel,\n    DPTFeatureExtractor: () => __webpack_exports__DPTFeatureExtractor,\n    DPTForDepthEstimation: () => __webpack_exports__DPTForDepthEstimation,\n    DPTImageProcessor: () => __webpack_exports__DPTImageProcessor,\n    DPTModel: () => __webpack_exports__DPTModel,\n    DPTPreTrainedModel: () => __webpack_exports__DPTPreTrainedModel,\n    DacDecoderModel: () => __webpack_exports__DacDecoderModel,\n    DacDecoderOutput: () => __webpack_exports__DacDecoderOutput,\n    DacEncoderModel: () => __webpack_exports__DacEncoderModel,\n    DacEncoderOutput: () => __webpack_exports__DacEncoderOutput,\n    DacFeatureExtractor: () => __webpack_exports__DacFeatureExtractor,\n    DacModel: () => __webpack_exports__DacModel,\n    DacPreTrainedModel: () => __webpack_exports__DacPreTrainedModel,\n    DataTypeMap: () => __webpack_exports__DataTypeMap,\n    DebertaForMaskedLM: () => __webpack_exports__DebertaForMaskedLM,\n    DebertaForQuestionAnswering: () => __webpack_exports__DebertaForQuestionAnswering,\n    DebertaForSequenceClassification: () => __webpack_exports__DebertaForSequenceClassification,\n    DebertaForTokenClassification: () => __webpack_exports__DebertaForTokenClassification,\n    DebertaModel: () => __webpack_exports__DebertaModel,\n    DebertaPreTrainedModel: () => __webpack_exports__DebertaPreTrainedModel,\n    DebertaTokenizer: () => __webpack_exports__DebertaTokenizer,\n    DebertaV2ForMaskedLM: () => __webpack_exports__DebertaV2ForMaskedLM,\n    DebertaV2ForQuestionAnswering: () => __webpack_exports__DebertaV2ForQuestionAnswering,\n    DebertaV2ForSequenceClassification: () => __webpack_exports__DebertaV2ForSequenceClassification,\n    DebertaV2ForTokenClassification: () => __webpack_exports__DebertaV2ForTokenClassification,\n    DebertaV2Model: () => __webpack_exports__DebertaV2Model,\n    DebertaV2PreTrainedModel: () => __webpack_exports__DebertaV2PreTrainedModel,\n    DebertaV2Tokenizer: () => __webpack_exports__DebertaV2Tokenizer,\n    DecisionTransformerModel: () => __webpack_exports__DecisionTransformerModel,\n    DecisionTransformerPreTrainedModel: () => __webpack_exports__DecisionTransformerPreTrainedModel,\n    DeiTFeatureExtractor: () => __webpack_exports__DeiTFeatureExtractor,\n    DeiTForImageClassification: () => __webpack_exports__DeiTForImageClassification,\n    DeiTImageProcessor: () => __webpack_exports__DeiTImageProcessor,\n    DeiTModel: () => __webpack_exports__DeiTModel,\n    DeiTPreTrainedModel: () => __webpack_exports__DeiTPreTrainedModel,\n    DepthAnythingForDepthEstimation: () => __webpack_exports__DepthAnythingForDepthEstimation,\n    DepthAnythingPreTrainedModel: () => __webpack_exports__DepthAnythingPreTrainedModel,\n    DepthEstimationPipeline: () => __webpack_exports__DepthEstimationPipeline,\n    DepthProForDepthEstimation: () => __webpack_exports__DepthProForDepthEstimation,\n    DepthProPreTrainedModel: () => __webpack_exports__DepthProPreTrainedModel,\n    DetrFeatureExtractor: () => __webpack_exports__DetrFeatureExtractor,\n    DetrForObjectDetection: () => __webpack_exports__DetrForObjectDetection,\n    DetrForSegmentation: () => __webpack_exports__DetrForSegmentation,\n    DetrImageProcessor: () => __webpack_exports__DetrImageProcessor,\n    DetrModel: () => __webpack_exports__DetrModel,\n    DetrObjectDetectionOutput: () => __webpack_exports__DetrObjectDetectionOutput,\n    DetrPreTrainedModel: () => __webpack_exports__DetrPreTrainedModel,\n    DetrSegmentationOutput: () => __webpack_exports__DetrSegmentationOutput,\n    Dinov2ForImageClassification: () => __webpack_exports__Dinov2ForImageClassification,\n    Dinov2Model: () => __webpack_exports__Dinov2Model,\n    Dinov2PreTrainedModel: () => __webpack_exports__Dinov2PreTrainedModel,\n    Dinov2WithRegistersForImageClassification: () => __webpack_exports__Dinov2WithRegistersForImageClassification,\n    Dinov2WithRegistersModel: () => __webpack_exports__Dinov2WithRegistersModel,\n    Dinov2WithRegistersPreTrainedModel: () => __webpack_exports__Dinov2WithRegistersPreTrainedModel,\n    DistilBertForMaskedLM: () => __webpack_exports__DistilBertForMaskedLM,\n    DistilBertForQuestionAnswering: () => __webpack_exports__DistilBertForQuestionAnswering,\n    DistilBertForSequenceClassification: () => __webpack_exports__DistilBertForSequenceClassification,\n    DistilBertForTokenClassification: () => __webpack_exports__DistilBertForTokenClassification,\n    DistilBertModel: () => __webpack_exports__DistilBertModel,\n    DistilBertPreTrainedModel: () => __webpack_exports__DistilBertPreTrainedModel,\n    DistilBertTokenizer: () => __webpack_exports__DistilBertTokenizer,\n    DocumentQuestionAnsweringPipeline: () => __webpack_exports__DocumentQuestionAnsweringPipeline,\n    DonutFeatureExtractor: () => __webpack_exports__DonutFeatureExtractor,\n    DonutImageProcessor: () => __webpack_exports__DonutImageProcessor,\n    DonutSwinModel: () => __webpack_exports__DonutSwinModel,\n    DonutSwinPreTrainedModel: () => __webpack_exports__DonutSwinPreTrainedModel,\n    EfficientNetForImageClassification: () => __webpack_exports__EfficientNetForImageClassification,\n    EfficientNetImageProcessor: () => __webpack_exports__EfficientNetImageProcessor,\n    EfficientNetModel: () => __webpack_exports__EfficientNetModel,\n    EfficientNetPreTrainedModel: () => __webpack_exports__EfficientNetPreTrainedModel,\n    ElectraForMaskedLM: () => __webpack_exports__ElectraForMaskedLM,\n    ElectraForQuestionAnswering: () => __webpack_exports__ElectraForQuestionAnswering,\n    ElectraForSequenceClassification: () => __webpack_exports__ElectraForSequenceClassification,\n    ElectraForTokenClassification: () => __webpack_exports__ElectraForTokenClassification,\n    ElectraModel: () => __webpack_exports__ElectraModel,\n    ElectraPreTrainedModel: () => __webpack_exports__ElectraPreTrainedModel,\n    ElectraTokenizer: () => __webpack_exports__ElectraTokenizer,\n    EncodecFeatureExtractor: () => __webpack_exports__EncodecFeatureExtractor,\n    EosTokenCriteria: () => __webpack_exports__EosTokenCriteria,\n    EsmForMaskedLM: () => __webpack_exports__EsmForMaskedLM,\n    EsmForSequenceClassification: () => __webpack_exports__EsmForSequenceClassification,\n    EsmForTokenClassification: () => __webpack_exports__EsmForTokenClassification,\n    EsmModel: () => __webpack_exports__EsmModel,\n    EsmPreTrainedModel: () => __webpack_exports__EsmPreTrainedModel,\n    EsmTokenizer: () => __webpack_exports__EsmTokenizer,\n    ExaoneForCausalLM: () => __webpack_exports__ExaoneForCausalLM,\n    ExaoneModel: () => __webpack_exports__ExaoneModel,\n    ExaonePreTrainedModel: () => __webpack_exports__ExaonePreTrainedModel,\n    FFT: () => __webpack_exports__FFT,\n    FalconForCausalLM: () => __webpack_exports__FalconForCausalLM,\n    FalconModel: () => __webpack_exports__FalconModel,\n    FalconPreTrainedModel: () => __webpack_exports__FalconPreTrainedModel,\n    FalconTokenizer: () => __webpack_exports__FalconTokenizer,\n    FastViTForImageClassification: () => __webpack_exports__FastViTForImageClassification,\n    FastViTModel: () => __webpack_exports__FastViTModel,\n    FastViTPreTrainedModel: () => __webpack_exports__FastViTPreTrainedModel,\n    FeatureExtractionPipeline: () => __webpack_exports__FeatureExtractionPipeline,\n    FeatureExtractor: () => __webpack_exports__FeatureExtractor,\n    FillMaskPipeline: () => __webpack_exports__FillMaskPipeline,\n    Florence2ForConditionalGeneration: () => __webpack_exports__Florence2ForConditionalGeneration,\n    Florence2PreTrainedModel: () => __webpack_exports__Florence2PreTrainedModel,\n    Florence2Processor: () => __webpack_exports__Florence2Processor,\n    ForcedBOSTokenLogitsProcessor: () => __webpack_exports__ForcedBOSTokenLogitsProcessor,\n    ForcedEOSTokenLogitsProcessor: () => __webpack_exports__ForcedEOSTokenLogitsProcessor,\n    GLPNFeatureExtractor: () => __webpack_exports__GLPNFeatureExtractor,\n    GLPNForDepthEstimation: () => __webpack_exports__GLPNForDepthEstimation,\n    GLPNModel: () => __webpack_exports__GLPNModel,\n    GLPNPreTrainedModel: () => __webpack_exports__GLPNPreTrainedModel,\n    GPT2LMHeadModel: () => __webpack_exports__GPT2LMHeadModel,\n    GPT2Model: () => __webpack_exports__GPT2Model,\n    GPT2PreTrainedModel: () => __webpack_exports__GPT2PreTrainedModel,\n    GPT2Tokenizer: () => __webpack_exports__GPT2Tokenizer,\n    GPTBigCodeForCausalLM: () => __webpack_exports__GPTBigCodeForCausalLM,\n    GPTBigCodeModel: () => __webpack_exports__GPTBigCodeModel,\n    GPTBigCodePreTrainedModel: () => __webpack_exports__GPTBigCodePreTrainedModel,\n    GPTJForCausalLM: () => __webpack_exports__GPTJForCausalLM,\n    GPTJModel: () => __webpack_exports__GPTJModel,\n    GPTJPreTrainedModel: () => __webpack_exports__GPTJPreTrainedModel,\n    GPTNeoForCausalLM: () => __webpack_exports__GPTNeoForCausalLM,\n    GPTNeoModel: () => __webpack_exports__GPTNeoModel,\n    GPTNeoPreTrainedModel: () => __webpack_exports__GPTNeoPreTrainedModel,\n    GPTNeoXForCausalLM: () => __webpack_exports__GPTNeoXForCausalLM,\n    GPTNeoXModel: () => __webpack_exports__GPTNeoXModel,\n    GPTNeoXPreTrainedModel: () => __webpack_exports__GPTNeoXPreTrainedModel,\n    GPTNeoXTokenizer: () => __webpack_exports__GPTNeoXTokenizer,\n    Gemma2ForCausalLM: () => __webpack_exports__Gemma2ForCausalLM,\n    Gemma2Model: () => __webpack_exports__Gemma2Model,\n    Gemma2PreTrainedModel: () => __webpack_exports__Gemma2PreTrainedModel,\n    Gemma3ForCausalLM: () => __webpack_exports__Gemma3ForCausalLM,\n    Gemma3Model: () => __webpack_exports__Gemma3Model,\n    Gemma3PreTrainedModel: () => __webpack_exports__Gemma3PreTrainedModel,\n    GemmaForCausalLM: () => __webpack_exports__GemmaForCausalLM,\n    GemmaModel: () => __webpack_exports__GemmaModel,\n    GemmaPreTrainedModel: () => __webpack_exports__GemmaPreTrainedModel,\n    GemmaTokenizer: () => __webpack_exports__GemmaTokenizer,\n    GlmForCausalLM: () => __webpack_exports__GlmForCausalLM,\n    GlmModel: () => __webpack_exports__GlmModel,\n    GlmPreTrainedModel: () => __webpack_exports__GlmPreTrainedModel,\n    GraniteForCausalLM: () => __webpack_exports__GraniteForCausalLM,\n    GraniteModel: () => __webpack_exports__GraniteModel,\n    GranitePreTrainedModel: () => __webpack_exports__GranitePreTrainedModel,\n    Grok1Tokenizer: () => __webpack_exports__Grok1Tokenizer,\n    GroundingDinoForObjectDetection: () => __webpack_exports__GroundingDinoForObjectDetection,\n    GroundingDinoImageProcessor: () => __webpack_exports__GroundingDinoImageProcessor,\n    GroundingDinoPreTrainedModel: () => __webpack_exports__GroundingDinoPreTrainedModel,\n    GroundingDinoProcessor: () => __webpack_exports__GroundingDinoProcessor,\n    GroupViTModel: () => __webpack_exports__GroupViTModel,\n    GroupViTPreTrainedModel: () => __webpack_exports__GroupViTPreTrainedModel,\n    HeliumForCausalLM: () => __webpack_exports__HeliumForCausalLM,\n    HeliumModel: () => __webpack_exports__HeliumModel,\n    HeliumPreTrainedModel: () => __webpack_exports__HeliumPreTrainedModel,\n    HerbertTokenizer: () => __webpack_exports__HerbertTokenizer,\n    HieraForImageClassification: () => __webpack_exports__HieraForImageClassification,\n    HieraModel: () => __webpack_exports__HieraModel,\n    HieraPreTrainedModel: () => __webpack_exports__HieraPreTrainedModel,\n    HubertForCTC: () => __webpack_exports__HubertForCTC,\n    HubertForSequenceClassification: () => __webpack_exports__HubertForSequenceClassification,\n    HubertModel: () => __webpack_exports__HubertModel,\n    HubertPreTrainedModel: () => __webpack_exports__HubertPreTrainedModel,\n    IJepaForImageClassification: () => __webpack_exports__IJepaForImageClassification,\n    IJepaModel: () => __webpack_exports__IJepaModel,\n    IJepaPreTrainedModel: () => __webpack_exports__IJepaPreTrainedModel,\n    Idefics3ForConditionalGeneration: () => __webpack_exports__Idefics3ForConditionalGeneration,\n    Idefics3ImageProcessor: () => __webpack_exports__Idefics3ImageProcessor,\n    Idefics3PreTrainedModel: () => __webpack_exports__Idefics3PreTrainedModel,\n    Idefics3Processor: () => __webpack_exports__Idefics3Processor,\n    ImageClassificationPipeline: () => __webpack_exports__ImageClassificationPipeline,\n    ImageFeatureExtractionPipeline: () => __webpack_exports__ImageFeatureExtractionPipeline,\n    ImageFeatureExtractor: () => __webpack_exports__ImageFeatureExtractor,\n    ImageMattingOutput: () => __webpack_exports__ImageMattingOutput,\n    ImageProcessor: () => __webpack_exports__ImageProcessor,\n    ImageSegmentationPipeline: () => __webpack_exports__ImageSegmentationPipeline,\n    ImageToImagePipeline: () => __webpack_exports__ImageToImagePipeline,\n    ImageToTextPipeline: () => __webpack_exports__ImageToTextPipeline,\n    InterruptableStoppingCriteria: () => __webpack_exports__InterruptableStoppingCriteria,\n    JAISLMHeadModel: () => __webpack_exports__JAISLMHeadModel,\n    JAISModel: () => __webpack_exports__JAISModel,\n    JAISPreTrainedModel: () => __webpack_exports__JAISPreTrainedModel,\n    JinaCLIPImageProcessor: () => __webpack_exports__JinaCLIPImageProcessor,\n    JinaCLIPModel: () => __webpack_exports__JinaCLIPModel,\n    JinaCLIPPreTrainedModel: () => __webpack_exports__JinaCLIPPreTrainedModel,\n    JinaCLIPProcessor: () => __webpack_exports__JinaCLIPProcessor,\n    JinaCLIPTextModel: () => __webpack_exports__JinaCLIPTextModel,\n    JinaCLIPVisionModel: () => __webpack_exports__JinaCLIPVisionModel,\n    LiteWhisperForConditionalGeneration: () => __webpack_exports__LiteWhisperForConditionalGeneration,\n    LlamaForCausalLM: () => __webpack_exports__LlamaForCausalLM,\n    LlamaModel: () => __webpack_exports__LlamaModel,\n    LlamaPreTrainedModel: () => __webpack_exports__LlamaPreTrainedModel,\n    LlamaTokenizer: () => __webpack_exports__LlamaTokenizer,\n    LlavaForConditionalGeneration: () => __webpack_exports__LlavaForConditionalGeneration,\n    LlavaOnevisionForConditionalGeneration: () => __webpack_exports__LlavaOnevisionForConditionalGeneration,\n    LlavaOnevisionImageProcessor: () => __webpack_exports__LlavaOnevisionImageProcessor,\n    LlavaPreTrainedModel: () => __webpack_exports__LlavaPreTrainedModel,\n    LogitsProcessor: () => __webpack_exports__LogitsProcessor,\n    LogitsProcessorList: () => __webpack_exports__LogitsProcessorList,\n    LogitsWarper: () => __webpack_exports__LogitsWarper,\n    LongT5ForConditionalGeneration: () => __webpack_exports__LongT5ForConditionalGeneration,\n    LongT5Model: () => __webpack_exports__LongT5Model,\n    LongT5PreTrainedModel: () => __webpack_exports__LongT5PreTrainedModel,\n    M2M100ForConditionalGeneration: () => __webpack_exports__M2M100ForConditionalGeneration,\n    M2M100Model: () => __webpack_exports__M2M100Model,\n    M2M100PreTrainedModel: () => __webpack_exports__M2M100PreTrainedModel,\n    M2M100Tokenizer: () => __webpack_exports__M2M100Tokenizer,\n    MBart50Tokenizer: () => __webpack_exports__MBart50Tokenizer,\n    MBartForCausalLM: () => __webpack_exports__MBartForCausalLM,\n    MBartForConditionalGeneration: () => __webpack_exports__MBartForConditionalGeneration,\n    MBartForSequenceClassification: () => __webpack_exports__MBartForSequenceClassification,\n    MBartModel: () => __webpack_exports__MBartModel,\n    MBartPreTrainedModel: () => __webpack_exports__MBartPreTrainedModel,\n    MBartTokenizer: () => __webpack_exports__MBartTokenizer,\n    MPNetForMaskedLM: () => __webpack_exports__MPNetForMaskedLM,\n    MPNetForQuestionAnswering: () => __webpack_exports__MPNetForQuestionAnswering,\n    MPNetForSequenceClassification: () => __webpack_exports__MPNetForSequenceClassification,\n    MPNetForTokenClassification: () => __webpack_exports__MPNetForTokenClassification,\n    MPNetModel: () => __webpack_exports__MPNetModel,\n    MPNetPreTrainedModel: () => __webpack_exports__MPNetPreTrainedModel,\n    MPNetTokenizer: () => __webpack_exports__MPNetTokenizer,\n    MT5ForConditionalGeneration: () => __webpack_exports__MT5ForConditionalGeneration,\n    MT5Model: () => __webpack_exports__MT5Model,\n    MT5PreTrainedModel: () => __webpack_exports__MT5PreTrainedModel,\n    MarianMTModel: () => __webpack_exports__MarianMTModel,\n    MarianModel: () => __webpack_exports__MarianModel,\n    MarianPreTrainedModel: () => __webpack_exports__MarianPreTrainedModel,\n    MarianTokenizer: () => __webpack_exports__MarianTokenizer,\n    Mask2FormerImageProcessor: () => __webpack_exports__Mask2FormerImageProcessor,\n    MaskFormerFeatureExtractor: () => __webpack_exports__MaskFormerFeatureExtractor,\n    MaskFormerForInstanceSegmentation: () => __webpack_exports__MaskFormerForInstanceSegmentation,\n    MaskFormerImageProcessor: () => __webpack_exports__MaskFormerImageProcessor,\n    MaskFormerModel: () => __webpack_exports__MaskFormerModel,\n    MaskFormerPreTrainedModel: () => __webpack_exports__MaskFormerPreTrainedModel,\n    MaskedLMOutput: () => __webpack_exports__MaskedLMOutput,\n    MaxLengthCriteria: () => __webpack_exports__MaxLengthCriteria,\n    Metric3DForDepthEstimation: () => __webpack_exports__Metric3DForDepthEstimation,\n    Metric3DPreTrainedModel: () => __webpack_exports__Metric3DPreTrainedModel,\n    Metric3Dv2ForDepthEstimation: () => __webpack_exports__Metric3Dv2ForDepthEstimation,\n    Metric3Dv2PreTrainedModel: () => __webpack_exports__Metric3Dv2PreTrainedModel,\n    MgpstrForSceneTextRecognition: () => __webpack_exports__MgpstrForSceneTextRecognition,\n    MgpstrModelOutput: () => __webpack_exports__MgpstrModelOutput,\n    MgpstrPreTrainedModel: () => __webpack_exports__MgpstrPreTrainedModel,\n    MgpstrProcessor: () => __webpack_exports__MgpstrProcessor,\n    MgpstrTokenizer: () => __webpack_exports__MgpstrTokenizer,\n    MimiDecoderModel: () => __webpack_exports__MimiDecoderModel,\n    MimiDecoderOutput: () => __webpack_exports__MimiDecoderOutput,\n    MimiEncoderModel: () => __webpack_exports__MimiEncoderModel,\n    MimiEncoderOutput: () => __webpack_exports__MimiEncoderOutput,\n    MimiModel: () => __webpack_exports__MimiModel,\n    MimiPreTrainedModel: () => __webpack_exports__MimiPreTrainedModel,\n    MinLengthLogitsProcessor: () => __webpack_exports__MinLengthLogitsProcessor,\n    MinNewTokensLengthLogitsProcessor: () => __webpack_exports__MinNewTokensLengthLogitsProcessor,\n    MistralForCausalLM: () => __webpack_exports__MistralForCausalLM,\n    MistralModel: () => __webpack_exports__MistralModel,\n    MistralPreTrainedModel: () => __webpack_exports__MistralPreTrainedModel,\n    MobileBertForMaskedLM: () => __webpack_exports__MobileBertForMaskedLM,\n    MobileBertForQuestionAnswering: () => __webpack_exports__MobileBertForQuestionAnswering,\n    MobileBertForSequenceClassification: () => __webpack_exports__MobileBertForSequenceClassification,\n    MobileBertModel: () => __webpack_exports__MobileBertModel,\n    MobileBertPreTrainedModel: () => __webpack_exports__MobileBertPreTrainedModel,\n    MobileBertTokenizer: () => __webpack_exports__MobileBertTokenizer,\n    MobileLLMForCausalLM: () => __webpack_exports__MobileLLMForCausalLM,\n    MobileLLMModel: () => __webpack_exports__MobileLLMModel,\n    MobileLLMPreTrainedModel: () => __webpack_exports__MobileLLMPreTrainedModel,\n    MobileNetV1FeatureExtractor: () => __webpack_exports__MobileNetV1FeatureExtractor,\n    MobileNetV1ForImageClassification: () => __webpack_exports__MobileNetV1ForImageClassification,\n    MobileNetV1ForSemanticSegmentation: () => __webpack_exports__MobileNetV1ForSemanticSegmentation,\n    MobileNetV1ImageProcessor: () => __webpack_exports__MobileNetV1ImageProcessor,\n    MobileNetV1Model: () => __webpack_exports__MobileNetV1Model,\n    MobileNetV1PreTrainedModel: () => __webpack_exports__MobileNetV1PreTrainedModel,\n    MobileNetV2FeatureExtractor: () => __webpack_exports__MobileNetV2FeatureExtractor,\n    MobileNetV2ForImageClassification: () => __webpack_exports__MobileNetV2ForImageClassification,\n    MobileNetV2ForSemanticSegmentation: () => __webpack_exports__MobileNetV2ForSemanticSegmentation,\n    MobileNetV2ImageProcessor: () => __webpack_exports__MobileNetV2ImageProcessor,\n    MobileNetV2Model: () => __webpack_exports__MobileNetV2Model,\n    MobileNetV2PreTrainedModel: () => __webpack_exports__MobileNetV2PreTrainedModel,\n    MobileNetV3FeatureExtractor: () => __webpack_exports__MobileNetV3FeatureExtractor,\n    MobileNetV3ForImageClassification: () => __webpack_exports__MobileNetV3ForImageClassification,\n    MobileNetV3ForSemanticSegmentation: () => __webpack_exports__MobileNetV3ForSemanticSegmentation,\n    MobileNetV3ImageProcessor: () => __webpack_exports__MobileNetV3ImageProcessor,\n    MobileNetV3Model: () => __webpack_exports__MobileNetV3Model,\n    MobileNetV3PreTrainedModel: () => __webpack_exports__MobileNetV3PreTrainedModel,\n    MobileNetV4FeatureExtractor: () => __webpack_exports__MobileNetV4FeatureExtractor,\n    MobileNetV4ForImageClassification: () => __webpack_exports__MobileNetV4ForImageClassification,\n    MobileNetV4ForSemanticSegmentation: () => __webpack_exports__MobileNetV4ForSemanticSegmentation,\n    MobileNetV4ImageProcessor: () => __webpack_exports__MobileNetV4ImageProcessor,\n    MobileNetV4Model: () => __webpack_exports__MobileNetV4Model,\n    MobileNetV4PreTrainedModel: () => __webpack_exports__MobileNetV4PreTrainedModel,\n    MobileViTFeatureExtractor: () => __webpack_exports__MobileViTFeatureExtractor,\n    MobileViTForImageClassification: () => __webpack_exports__MobileViTForImageClassification,\n    MobileViTImageProcessor: () => __webpack_exports__MobileViTImageProcessor,\n    MobileViTModel: () => __webpack_exports__MobileViTModel,\n    MobileViTPreTrainedModel: () => __webpack_exports__MobileViTPreTrainedModel,\n    MobileViTV2ForImageClassification: () => __webpack_exports__MobileViTV2ForImageClassification,\n    MobileViTV2Model: () => __webpack_exports__MobileViTV2Model,\n    MobileViTV2PreTrainedModel: () => __webpack_exports__MobileViTV2PreTrainedModel,\n    ModelOutput: () => __webpack_exports__ModelOutput,\n    ModernBertForMaskedLM: () => __webpack_exports__ModernBertForMaskedLM,\n    ModernBertForSequenceClassification: () => __webpack_exports__ModernBertForSequenceClassification,\n    ModernBertForTokenClassification: () => __webpack_exports__ModernBertForTokenClassification,\n    ModernBertModel: () => __webpack_exports__ModernBertModel,\n    ModernBertPreTrainedModel: () => __webpack_exports__ModernBertPreTrainedModel,\n    Moondream1ForConditionalGeneration: () => __webpack_exports__Moondream1ForConditionalGeneration,\n    MoonshineFeatureExtractor: () => __webpack_exports__MoonshineFeatureExtractor,\n    MoonshineForConditionalGeneration: () => __webpack_exports__MoonshineForConditionalGeneration,\n    MoonshineModel: () => __webpack_exports__MoonshineModel,\n    MoonshinePreTrainedModel: () => __webpack_exports__MoonshinePreTrainedModel,\n    MoonshineProcessor: () => __webpack_exports__MoonshineProcessor,\n    MptForCausalLM: () => __webpack_exports__MptForCausalLM,\n    MptModel: () => __webpack_exports__MptModel,\n    MptPreTrainedModel: () => __webpack_exports__MptPreTrainedModel,\n    MultiModalityCausalLM: () => __webpack_exports__MultiModalityCausalLM,\n    MultiModalityPreTrainedModel: () => __webpack_exports__MultiModalityPreTrainedModel,\n    MusicgenForCausalLM: () => __webpack_exports__MusicgenForCausalLM,\n    MusicgenForConditionalGeneration: () => __webpack_exports__MusicgenForConditionalGeneration,\n    MusicgenModel: () => __webpack_exports__MusicgenModel,\n    MusicgenPreTrainedModel: () => __webpack_exports__MusicgenPreTrainedModel,\n    NllbTokenizer: () => __webpack_exports__NllbTokenizer,\n    NoBadWordsLogitsProcessor: () => __webpack_exports__NoBadWordsLogitsProcessor,\n    NoRepeatNGramLogitsProcessor: () => __webpack_exports__NoRepeatNGramLogitsProcessor,\n    NomicBertModel: () => __webpack_exports__NomicBertModel,\n    NomicBertPreTrainedModel: () => __webpack_exports__NomicBertPreTrainedModel,\n    NougatImageProcessor: () => __webpack_exports__NougatImageProcessor,\n    NougatTokenizer: () => __webpack_exports__NougatTokenizer,\n    OPTForCausalLM: () => __webpack_exports__OPTForCausalLM,\n    OPTModel: () => __webpack_exports__OPTModel,\n    OPTPreTrainedModel: () => __webpack_exports__OPTPreTrainedModel,\n    ObjectDetectionPipeline: () => __webpack_exports__ObjectDetectionPipeline,\n    Olmo2ForCausalLM: () => __webpack_exports__Olmo2ForCausalLM,\n    Olmo2Model: () => __webpack_exports__Olmo2Model,\n    Olmo2PreTrainedModel: () => __webpack_exports__Olmo2PreTrainedModel,\n    OlmoForCausalLM: () => __webpack_exports__OlmoForCausalLM,\n    OlmoModel: () => __webpack_exports__OlmoModel,\n    OlmoPreTrainedModel: () => __webpack_exports__OlmoPreTrainedModel,\n    OpenELMForCausalLM: () => __webpack_exports__OpenELMForCausalLM,\n    OpenELMModel: () => __webpack_exports__OpenELMModel,\n    OpenELMPreTrainedModel: () => __webpack_exports__OpenELMPreTrainedModel,\n    OwlViTFeatureExtractor: () => __webpack_exports__OwlViTFeatureExtractor,\n    OwlViTForObjectDetection: () => __webpack_exports__OwlViTForObjectDetection,\n    OwlViTImageProcessor: () => __webpack_exports__OwlViTImageProcessor,\n    OwlViTModel: () => __webpack_exports__OwlViTModel,\n    OwlViTPreTrainedModel: () => __webpack_exports__OwlViTPreTrainedModel,\n    OwlViTProcessor: () => __webpack_exports__OwlViTProcessor,\n    Owlv2ForObjectDetection: () => __webpack_exports__Owlv2ForObjectDetection,\n    Owlv2ImageProcessor: () => __webpack_exports__Owlv2ImageProcessor,\n    Owlv2Model: () => __webpack_exports__Owlv2Model,\n    Owlv2PreTrainedModel: () => __webpack_exports__Owlv2PreTrainedModel,\n    PaliGemmaForConditionalGeneration: () => __webpack_exports__PaliGemmaForConditionalGeneration,\n    PaliGemmaPreTrainedModel: () => __webpack_exports__PaliGemmaPreTrainedModel,\n    PaliGemmaProcessor: () => __webpack_exports__PaliGemmaProcessor,\n    PatchTSMixerForPrediction: () => __webpack_exports__PatchTSMixerForPrediction,\n    PatchTSMixerModel: () => __webpack_exports__PatchTSMixerModel,\n    PatchTSMixerPreTrainedModel: () => __webpack_exports__PatchTSMixerPreTrainedModel,\n    PatchTSTForPrediction: () => __webpack_exports__PatchTSTForPrediction,\n    PatchTSTModel: () => __webpack_exports__PatchTSTModel,\n    PatchTSTPreTrainedModel: () => __webpack_exports__PatchTSTPreTrainedModel,\n    Phi3ForCausalLM: () => __webpack_exports__Phi3ForCausalLM,\n    Phi3Model: () => __webpack_exports__Phi3Model,\n    Phi3PreTrainedModel: () => __webpack_exports__Phi3PreTrainedModel,\n    Phi3VForCausalLM: () => __webpack_exports__Phi3VForCausalLM,\n    Phi3VImageProcessor: () => __webpack_exports__Phi3VImageProcessor,\n    Phi3VPreTrainedModel: () => __webpack_exports__Phi3VPreTrainedModel,\n    Phi3VProcessor: () => __webpack_exports__Phi3VProcessor,\n    PhiForCausalLM: () => __webpack_exports__PhiForCausalLM,\n    PhiModel: () => __webpack_exports__PhiModel,\n    PhiPreTrainedModel: () => __webpack_exports__PhiPreTrainedModel,\n    Pipeline: () => __webpack_exports__Pipeline,\n    PreTrainedModel: () => __webpack_exports__PreTrainedModel,\n    PreTrainedTokenizer: () => __webpack_exports__PreTrainedTokenizer,\n    PretrainedConfig: () => __webpack_exports__PretrainedConfig,\n    PretrainedMixin: () => __webpack_exports__PretrainedMixin,\n    Processor: () => __webpack_exports__Processor,\n    PvtForImageClassification: () => __webpack_exports__PvtForImageClassification,\n    PvtImageProcessor: () => __webpack_exports__PvtImageProcessor,\n    PvtModel: () => __webpack_exports__PvtModel,\n    PvtPreTrainedModel: () => __webpack_exports__PvtPreTrainedModel,\n    PyAnnoteFeatureExtractor: () => __webpack_exports__PyAnnoteFeatureExtractor,\n    PyAnnoteForAudioFrameClassification: () => __webpack_exports__PyAnnoteForAudioFrameClassification,\n    PyAnnoteModel: () => __webpack_exports__PyAnnoteModel,\n    PyAnnotePreTrainedModel: () => __webpack_exports__PyAnnotePreTrainedModel,\n    PyAnnoteProcessor: () => __webpack_exports__PyAnnoteProcessor,\n    QuestionAnsweringModelOutput: () => __webpack_exports__QuestionAnsweringModelOutput,\n    QuestionAnsweringPipeline: () => __webpack_exports__QuestionAnsweringPipeline,\n    Qwen2ForCausalLM: () => __webpack_exports__Qwen2ForCausalLM,\n    Qwen2Model: () => __webpack_exports__Qwen2Model,\n    Qwen2PreTrainedModel: () => __webpack_exports__Qwen2PreTrainedModel,\n    Qwen2Tokenizer: () => __webpack_exports__Qwen2Tokenizer,\n    Qwen2VLForConditionalGeneration: () => __webpack_exports__Qwen2VLForConditionalGeneration,\n    Qwen2VLImageProcessor: () => __webpack_exports__Qwen2VLImageProcessor,\n    Qwen2VLPreTrainedModel: () => __webpack_exports__Qwen2VLPreTrainedModel,\n    Qwen2VLProcessor: () => __webpack_exports__Qwen2VLProcessor,\n    RFDetrForObjectDetection: () => __webpack_exports__RFDetrForObjectDetection,\n    RFDetrModel: () => __webpack_exports__RFDetrModel,\n    RFDetrObjectDetectionOutput: () => __webpack_exports__RFDetrObjectDetectionOutput,\n    RFDetrPreTrainedModel: () => __webpack_exports__RFDetrPreTrainedModel,\n    RTDetrForObjectDetection: () => __webpack_exports__RTDetrForObjectDetection,\n    RTDetrImageProcessor: () => __webpack_exports__RTDetrImageProcessor,\n    RTDetrModel: () => __webpack_exports__RTDetrModel,\n    RTDetrObjectDetectionOutput: () => __webpack_exports__RTDetrObjectDetectionOutput,\n    RTDetrPreTrainedModel: () => __webpack_exports__RTDetrPreTrainedModel,\n    RTDetrV2ForObjectDetection: () => __webpack_exports__RTDetrV2ForObjectDetection,\n    RTDetrV2Model: () => __webpack_exports__RTDetrV2Model,\n    RTDetrV2ObjectDetectionOutput: () => __webpack_exports__RTDetrV2ObjectDetectionOutput,\n    RTDetrV2PreTrainedModel: () => __webpack_exports__RTDetrV2PreTrainedModel,\n    RawAudio: () => __webpack_exports__RawAudio,\n    RawImage: () => __webpack_exports__RawImage,\n    RawVideo: () => __webpack_exports__RawVideo,\n    RawVideoFrame: () => __webpack_exports__RawVideoFrame,\n    RepetitionPenaltyLogitsProcessor: () => __webpack_exports__RepetitionPenaltyLogitsProcessor,\n    ResNetForImageClassification: () => __webpack_exports__ResNetForImageClassification,\n    ResNetModel: () => __webpack_exports__ResNetModel,\n    ResNetPreTrainedModel: () => __webpack_exports__ResNetPreTrainedModel,\n    RoFormerForMaskedLM: () => __webpack_exports__RoFormerForMaskedLM,\n    RoFormerForQuestionAnswering: () => __webpack_exports__RoFormerForQuestionAnswering,\n    RoFormerForSequenceClassification: () => __webpack_exports__RoFormerForSequenceClassification,\n    RoFormerForTokenClassification: () => __webpack_exports__RoFormerForTokenClassification,\n    RoFormerModel: () => __webpack_exports__RoFormerModel,\n    RoFormerPreTrainedModel: () => __webpack_exports__RoFormerPreTrainedModel,\n    RoFormerTokenizer: () => __webpack_exports__RoFormerTokenizer,\n    RobertaForMaskedLM: () => __webpack_exports__RobertaForMaskedLM,\n    RobertaForQuestionAnswering: () => __webpack_exports__RobertaForQuestionAnswering,\n    RobertaForSequenceClassification: () => __webpack_exports__RobertaForSequenceClassification,\n    RobertaForTokenClassification: () => __webpack_exports__RobertaForTokenClassification,\n    RobertaModel: () => __webpack_exports__RobertaModel,\n    RobertaPreTrainedModel: () => __webpack_exports__RobertaPreTrainedModel,\n    RobertaTokenizer: () => __webpack_exports__RobertaTokenizer,\n    SamImageProcessor: () => __webpack_exports__SamImageProcessor,\n    SamImageSegmentationOutput: () => __webpack_exports__SamImageSegmentationOutput,\n    SamModel: () => __webpack_exports__SamModel,\n    SamPreTrainedModel: () => __webpack_exports__SamPreTrainedModel,\n    SamProcessor: () => __webpack_exports__SamProcessor,\n    SapiensForDepthEstimation: () => __webpack_exports__SapiensForDepthEstimation,\n    SapiensForNormalEstimation: () => __webpack_exports__SapiensForNormalEstimation,\n    SapiensForSemanticSegmentation: () => __webpack_exports__SapiensForSemanticSegmentation,\n    SapiensPreTrainedModel: () => __webpack_exports__SapiensPreTrainedModel,\n    SeamlessM4TFeatureExtractor: () => __webpack_exports__SeamlessM4TFeatureExtractor,\n    SegformerFeatureExtractor: () => __webpack_exports__SegformerFeatureExtractor,\n    SegformerForImageClassification: () => __webpack_exports__SegformerForImageClassification,\n    SegformerForSemanticSegmentation: () => __webpack_exports__SegformerForSemanticSegmentation,\n    SegformerImageProcessor: () => __webpack_exports__SegformerImageProcessor,\n    SegformerModel: () => __webpack_exports__SegformerModel,\n    SegformerPreTrainedModel: () => __webpack_exports__SegformerPreTrainedModel,\n    Seq2SeqLMOutput: () => __webpack_exports__Seq2SeqLMOutput,\n    SequenceClassifierOutput: () => __webpack_exports__SequenceClassifierOutput,\n    SiglipImageProcessor: () => __webpack_exports__SiglipImageProcessor,\n    SiglipModel: () => __webpack_exports__SiglipModel,\n    SiglipPreTrainedModel: () => __webpack_exports__SiglipPreTrainedModel,\n    SiglipTextModel: () => __webpack_exports__SiglipTextModel,\n    SiglipTokenizer: () => __webpack_exports__SiglipTokenizer,\n    SiglipVisionModel: () => __webpack_exports__SiglipVisionModel,\n    SmolVLMForConditionalGeneration: () => __webpack_exports__SmolVLMForConditionalGeneration,\n    SmolVLMImageProcessor: () => __webpack_exports__SmolVLMImageProcessor,\n    SmolVLMProcessor: () => __webpack_exports__SmolVLMProcessor,\n    SnacDecoderModel: () => __webpack_exports__SnacDecoderModel,\n    SnacEncoderModel: () => __webpack_exports__SnacEncoderModel,\n    SnacFeatureExtractor: () => __webpack_exports__SnacFeatureExtractor,\n    SnacModel: () => __webpack_exports__SnacModel,\n    SnacPreTrainedModel: () => __webpack_exports__SnacPreTrainedModel,\n    SpeechT5FeatureExtractor: () => __webpack_exports__SpeechT5FeatureExtractor,\n    SpeechT5ForSpeechToText: () => __webpack_exports__SpeechT5ForSpeechToText,\n    SpeechT5ForTextToSpeech: () => __webpack_exports__SpeechT5ForTextToSpeech,\n    SpeechT5HifiGan: () => __webpack_exports__SpeechT5HifiGan,\n    SpeechT5Model: () => __webpack_exports__SpeechT5Model,\n    SpeechT5PreTrainedModel: () => __webpack_exports__SpeechT5PreTrainedModel,\n    SpeechT5Processor: () => __webpack_exports__SpeechT5Processor,\n    SpeechT5Tokenizer: () => __webpack_exports__SpeechT5Tokenizer,\n    SqueezeBertForMaskedLM: () => __webpack_exports__SqueezeBertForMaskedLM,\n    SqueezeBertForQuestionAnswering: () => __webpack_exports__SqueezeBertForQuestionAnswering,\n    SqueezeBertForSequenceClassification: () => __webpack_exports__SqueezeBertForSequenceClassification,\n    SqueezeBertModel: () => __webpack_exports__SqueezeBertModel,\n    SqueezeBertPreTrainedModel: () => __webpack_exports__SqueezeBertPreTrainedModel,\n    SqueezeBertTokenizer: () => __webpack_exports__SqueezeBertTokenizer,\n    StableLmForCausalLM: () => __webpack_exports__StableLmForCausalLM,\n    StableLmModel: () => __webpack_exports__StableLmModel,\n    StableLmPreTrainedModel: () => __webpack_exports__StableLmPreTrainedModel,\n    Starcoder2ForCausalLM: () => __webpack_exports__Starcoder2ForCausalLM,\n    Starcoder2Model: () => __webpack_exports__Starcoder2Model,\n    Starcoder2PreTrainedModel: () => __webpack_exports__Starcoder2PreTrainedModel,\n    StoppingCriteria: () => __webpack_exports__StoppingCriteria,\n    StoppingCriteriaList: () => __webpack_exports__StoppingCriteriaList,\n    StyleTextToSpeech2Model: () => __webpack_exports__StyleTextToSpeech2Model,\n    StyleTextToSpeech2PreTrainedModel: () => __webpack_exports__StyleTextToSpeech2PreTrainedModel,\n    SummarizationPipeline: () => __webpack_exports__SummarizationPipeline,\n    SuppressTokensAtBeginLogitsProcessor: () => __webpack_exports__SuppressTokensAtBeginLogitsProcessor,\n    Swin2SRForImageSuperResolution: () => __webpack_exports__Swin2SRForImageSuperResolution,\n    Swin2SRImageProcessor: () => __webpack_exports__Swin2SRImageProcessor,\n    Swin2SRModel: () => __webpack_exports__Swin2SRModel,\n    Swin2SRPreTrainedModel: () => __webpack_exports__Swin2SRPreTrainedModel,\n    SwinForImageClassification: () => __webpack_exports__SwinForImageClassification,\n    SwinForSemanticSegmentation: () => __webpack_exports__SwinForSemanticSegmentation,\n    SwinModel: () => __webpack_exports__SwinModel,\n    SwinPreTrainedModel: () => __webpack_exports__SwinPreTrainedModel,\n    T5ForConditionalGeneration: () => __webpack_exports__T5ForConditionalGeneration,\n    T5Model: () => __webpack_exports__T5Model,\n    T5PreTrainedModel: () => __webpack_exports__T5PreTrainedModel,\n    T5Tokenizer: () => __webpack_exports__T5Tokenizer,\n    TableTransformerForObjectDetection: () => __webpack_exports__TableTransformerForObjectDetection,\n    TableTransformerModel: () => __webpack_exports__TableTransformerModel,\n    TableTransformerObjectDetectionOutput: () => __webpack_exports__TableTransformerObjectDetectionOutput,\n    TableTransformerPreTrainedModel: () => __webpack_exports__TableTransformerPreTrainedModel,\n    TemperatureLogitsWarper: () => __webpack_exports__TemperatureLogitsWarper,\n    Tensor: () => __webpack_exports__Tensor,\n    Text2TextGenerationPipeline: () => __webpack_exports__Text2TextGenerationPipeline,\n    TextClassificationPipeline: () => __webpack_exports__TextClassificationPipeline,\n    TextGenerationPipeline: () => __webpack_exports__TextGenerationPipeline,\n    TextStreamer: () => __webpack_exports__TextStreamer,\n    TextToAudioPipeline: () => __webpack_exports__TextToAudioPipeline,\n    TokenClassificationPipeline: () => __webpack_exports__TokenClassificationPipeline,\n    TokenClassifierOutput: () => __webpack_exports__TokenClassifierOutput,\n    TokenizerModel: () => __webpack_exports__TokenizerModel,\n    TopKLogitsWarper: () => __webpack_exports__TopKLogitsWarper,\n    TopPLogitsWarper: () => __webpack_exports__TopPLogitsWarper,\n    TrOCRForCausalLM: () => __webpack_exports__TrOCRForCausalLM,\n    TrOCRPreTrainedModel: () => __webpack_exports__TrOCRPreTrainedModel,\n    TranslationPipeline: () => __webpack_exports__TranslationPipeline,\n    UltravoxModel: () => __webpack_exports__UltravoxModel,\n    UltravoxPreTrainedModel: () => __webpack_exports__UltravoxPreTrainedModel,\n    UltravoxProcessor: () => __webpack_exports__UltravoxProcessor,\n    UniSpeechForCTC: () => __webpack_exports__UniSpeechForCTC,\n    UniSpeechForSequenceClassification: () => __webpack_exports__UniSpeechForSequenceClassification,\n    UniSpeechModel: () => __webpack_exports__UniSpeechModel,\n    UniSpeechPreTrainedModel: () => __webpack_exports__UniSpeechPreTrainedModel,\n    UniSpeechSatForAudioFrameClassification: () => __webpack_exports__UniSpeechSatForAudioFrameClassification,\n    UniSpeechSatForCTC: () => __webpack_exports__UniSpeechSatForCTC,\n    UniSpeechSatForSequenceClassification: () => __webpack_exports__UniSpeechSatForSequenceClassification,\n    UniSpeechSatModel: () => __webpack_exports__UniSpeechSatModel,\n    UniSpeechSatPreTrainedModel: () => __webpack_exports__UniSpeechSatPreTrainedModel,\n    VLChatProcessor: () => __webpack_exports__VLChatProcessor,\n    VLMImageProcessor: () => __webpack_exports__VLMImageProcessor,\n    ViTFeatureExtractor: () => __webpack_exports__ViTFeatureExtractor,\n    ViTForImageClassification: () => __webpack_exports__ViTForImageClassification,\n    ViTImageProcessor: () => __webpack_exports__ViTImageProcessor,\n    ViTMAEModel: () => __webpack_exports__ViTMAEModel,\n    ViTMAEPreTrainedModel: () => __webpack_exports__ViTMAEPreTrainedModel,\n    ViTMSNForImageClassification: () => __webpack_exports__ViTMSNForImageClassification,\n    ViTMSNModel: () => __webpack_exports__ViTMSNModel,\n    ViTMSNPreTrainedModel: () => __webpack_exports__ViTMSNPreTrainedModel,\n    ViTModel: () => __webpack_exports__ViTModel,\n    ViTPreTrainedModel: () => __webpack_exports__ViTPreTrainedModel,\n    VisionEncoderDecoderModel: () => __webpack_exports__VisionEncoderDecoderModel,\n    VitMatteForImageMatting: () => __webpack_exports__VitMatteForImageMatting,\n    VitMatteImageProcessor: () => __webpack_exports__VitMatteImageProcessor,\n    VitMattePreTrainedModel: () => __webpack_exports__VitMattePreTrainedModel,\n    VitPoseForPoseEstimation: () => __webpack_exports__VitPoseForPoseEstimation,\n    VitPoseImageProcessor: () => __webpack_exports__VitPoseImageProcessor,\n    VitPosePreTrainedModel: () => __webpack_exports__VitPosePreTrainedModel,\n    VitsModel: () => __webpack_exports__VitsModel,\n    VitsModelOutput: () => __webpack_exports__VitsModelOutput,\n    VitsPreTrainedModel: () => __webpack_exports__VitsPreTrainedModel,\n    VitsTokenizer: () => __webpack_exports__VitsTokenizer,\n    Wav2Vec2BertForCTC: () => __webpack_exports__Wav2Vec2BertForCTC,\n    Wav2Vec2BertForSequenceClassification: () => __webpack_exports__Wav2Vec2BertForSequenceClassification,\n    Wav2Vec2BertModel: () => __webpack_exports__Wav2Vec2BertModel,\n    Wav2Vec2BertPreTrainedModel: () => __webpack_exports__Wav2Vec2BertPreTrainedModel,\n    Wav2Vec2CTCTokenizer: () => __webpack_exports__Wav2Vec2CTCTokenizer,\n    Wav2Vec2FeatureExtractor: () => __webpack_exports__Wav2Vec2FeatureExtractor,\n    Wav2Vec2ForAudioFrameClassification: () => __webpack_exports__Wav2Vec2ForAudioFrameClassification,\n    Wav2Vec2ForCTC: () => __webpack_exports__Wav2Vec2ForCTC,\n    Wav2Vec2ForSequenceClassification: () => __webpack_exports__Wav2Vec2ForSequenceClassification,\n    Wav2Vec2Model: () => __webpack_exports__Wav2Vec2Model,\n    Wav2Vec2PreTrainedModel: () => __webpack_exports__Wav2Vec2PreTrainedModel,\n    Wav2Vec2Processor: () => __webpack_exports__Wav2Vec2Processor,\n    Wav2Vec2ProcessorWithLM: () => __webpack_exports__Wav2Vec2ProcessorWithLM,\n    WavLMForAudioFrameClassification: () => __webpack_exports__WavLMForAudioFrameClassification,\n    WavLMForCTC: () => __webpack_exports__WavLMForCTC,\n    WavLMForSequenceClassification: () => __webpack_exports__WavLMForSequenceClassification,\n    WavLMForXVector: () => __webpack_exports__WavLMForXVector,\n    WavLMModel: () => __webpack_exports__WavLMModel,\n    WavLMPreTrainedModel: () => __webpack_exports__WavLMPreTrainedModel,\n    WeSpeakerFeatureExtractor: () => __webpack_exports__WeSpeakerFeatureExtractor,\n    WeSpeakerResNetModel: () => __webpack_exports__WeSpeakerResNetModel,\n    WeSpeakerResNetPreTrainedModel: () => __webpack_exports__WeSpeakerResNetPreTrainedModel,\n    WhisperFeatureExtractor: () => __webpack_exports__WhisperFeatureExtractor,\n    WhisperForConditionalGeneration: () => __webpack_exports__WhisperForConditionalGeneration,\n    WhisperModel: () => __webpack_exports__WhisperModel,\n    WhisperPreTrainedModel: () => __webpack_exports__WhisperPreTrainedModel,\n    WhisperProcessor: () => __webpack_exports__WhisperProcessor,\n    WhisperTextStreamer: () => __webpack_exports__WhisperTextStreamer,\n    WhisperTimeStampLogitsProcessor: () => __webpack_exports__WhisperTimeStampLogitsProcessor,\n    WhisperTokenizer: () => __webpack_exports__WhisperTokenizer,\n    XLMForQuestionAnswering: () => __webpack_exports__XLMForQuestionAnswering,\n    XLMForSequenceClassification: () => __webpack_exports__XLMForSequenceClassification,\n    XLMForTokenClassification: () => __webpack_exports__XLMForTokenClassification,\n    XLMModel: () => __webpack_exports__XLMModel,\n    XLMPreTrainedModel: () => __webpack_exports__XLMPreTrainedModel,\n    XLMRobertaForMaskedLM: () => __webpack_exports__XLMRobertaForMaskedLM,\n    XLMRobertaForQuestionAnswering: () => __webpack_exports__XLMRobertaForQuestionAnswering,\n    XLMRobertaForSequenceClassification: () => __webpack_exports__XLMRobertaForSequenceClassification,\n    XLMRobertaForTokenClassification: () => __webpack_exports__XLMRobertaForTokenClassification,\n    XLMRobertaModel: () => __webpack_exports__XLMRobertaModel,\n    XLMRobertaPreTrainedModel: () => __webpack_exports__XLMRobertaPreTrainedModel,\n    XLMRobertaTokenizer: () => __webpack_exports__XLMRobertaTokenizer,\n    XLMTokenizer: () => __webpack_exports__XLMTokenizer,\n    XLMWithLMHeadModel: () => __webpack_exports__XLMWithLMHeadModel,\n    XVectorOutput: () => __webpack_exports__XVectorOutput,\n    YolosFeatureExtractor: () => __webpack_exports__YolosFeatureExtractor,\n    YolosForObjectDetection: () => __webpack_exports__YolosForObjectDetection,\n    YolosImageProcessor: () => __webpack_exports__YolosImageProcessor,\n    YolosModel: () => __webpack_exports__YolosModel,\n    YolosObjectDetectionOutput: () => __webpack_exports__YolosObjectDetectionOutput,\n    YolosPreTrainedModel: () => __webpack_exports__YolosPreTrainedModel,\n    ZeroShotAudioClassificationPipeline: () => __webpack_exports__ZeroShotAudioClassificationPipeline,\n    ZeroShotClassificationPipeline: () => __webpack_exports__ZeroShotClassificationPipeline,\n    ZeroShotImageClassificationPipeline: () => __webpack_exports__ZeroShotImageClassificationPipeline,\n    ZeroShotObjectDetectionPipeline: () => __webpack_exports__ZeroShotObjectDetectionPipeline,\n    bankers_round: () => __webpack_exports__bankers_round,\n    cat: () => __webpack_exports__cat,\n    cos_sim: () => __webpack_exports__cos_sim,\n    dot: () => __webpack_exports__dot,\n    dynamic_time_warping: () => __webpack_exports__dynamic_time_warping,\n    env: () => __webpack_exports__env,\n    full: () => __webpack_exports__full,\n    full_like: () => __webpack_exports__full_like,\n    getKeyValueShapes: () => __webpack_exports__getKeyValueShapes,\n    hamming: () => __webpack_exports__hamming,\n    hanning: () => __webpack_exports__hanning,\n    interpolate: () => __webpack_exports__interpolate,\n    interpolate_4d: () => __webpack_exports__interpolate_4d,\n    interpolate_data: () => __webpack_exports__interpolate_data,\n    is_chinese_char: () => __webpack_exports__is_chinese_char,\n    layer_norm: () => __webpack_exports__layer_norm,\n    load_image: () => __webpack_exports__load_image,\n    load_video: () => __webpack_exports__load_video,\n    log_softmax: () => __webpack_exports__log_softmax,\n    magnitude: () => __webpack_exports__magnitude,\n    matmul: () => __webpack_exports__matmul,\n    max: () => __webpack_exports__max,\n    mean: () => __webpack_exports__mean,\n    mean_pooling: () => __webpack_exports__mean_pooling,\n    medianFilter: () => __webpack_exports__medianFilter,\n    mel_filter_bank: () => __webpack_exports__mel_filter_bank,\n    min: () => __webpack_exports__min,\n    ones: () => __webpack_exports__ones,\n    ones_like: () => __webpack_exports__ones_like,\n    permute: () => __webpack_exports__permute,\n    permute_data: () => __webpack_exports__permute_data,\n    pipeline: () => __webpack_exports__pipeline,\n    quantize_embeddings: () => __webpack_exports__quantize_embeddings,\n    rand: () => __webpack_exports__rand,\n    read_audio: () => __webpack_exports__read_audio,\n    rfft: () => __webpack_exports__rfft,\n    round: () => __webpack_exports__round,\n    slice: () => __webpack_exports__slice,\n    softmax: () => __webpack_exports__softmax,\n    spectrogram: () => __webpack_exports__spectrogram,\n    stack: () => __webpack_exports__stack,\n    std_mean: () => __webpack_exports__std_mean,\n    topk: () => __webpack_exports__topk,\n    window_function: () => __webpack_exports__window_function,\n    zeros: () => __webpack_exports__zeros,\n    zeros_like: () => __webpack_exports__zeros_like\n  });\n  function __webpack_require__(moduleId) {\n    var cachedModule = __webpack_module_cache__[moduleId];\n    if (cachedModule !== void 0) {\n      return cachedModule.exports;\n    }\n    var module = __webpack_module_cache__[moduleId] = {\n      /******/\n      // no module.id needed\n      /******/\n      // no module.loaded needed\n      /******/\n      exports: {}\n      /******/\n    };\n    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n    return module.exports;\n  }\n  var import_meta2, __webpack_modules__, __webpack_module_cache__, __webpack_exports__, __webpack_exports__ASTFeatureExtractor, __webpack_exports__ASTForAudioClassification, __webpack_exports__ASTModel, __webpack_exports__ASTPreTrainedModel, __webpack_exports__AlbertForMaskedLM, __webpack_exports__AlbertForQuestionAnswering, __webpack_exports__AlbertForSequenceClassification, __webpack_exports__AlbertModel, __webpack_exports__AlbertPreTrainedModel, __webpack_exports__AlbertTokenizer, __webpack_exports__AudioClassificationPipeline, __webpack_exports__AutoConfig, __webpack_exports__AutoFeatureExtractor, __webpack_exports__AutoImageProcessor, __webpack_exports__AutoModel, __webpack_exports__AutoModelForAudioClassification, __webpack_exports__AutoModelForAudioFrameClassification, __webpack_exports__AutoModelForAudioTextToText, __webpack_exports__AutoModelForCTC, __webpack_exports__AutoModelForCausalLM, __webpack_exports__AutoModelForDepthEstimation, __webpack_exports__AutoModelForDocumentQuestionAnswering, __webpack_exports__AutoModelForImageClassification, __webpack_exports__AutoModelForImageFeatureExtraction, __webpack_exports__AutoModelForImageMatting, __webpack_exports__AutoModelForImageSegmentation, __webpack_exports__AutoModelForImageTextToText, __webpack_exports__AutoModelForImageToImage, __webpack_exports__AutoModelForMaskGeneration, __webpack_exports__AutoModelForMaskedLM, __webpack_exports__AutoModelForNormalEstimation, __webpack_exports__AutoModelForObjectDetection, __webpack_exports__AutoModelForPoseEstimation, __webpack_exports__AutoModelForQuestionAnswering, __webpack_exports__AutoModelForSemanticSegmentation, __webpack_exports__AutoModelForSeq2SeqLM, __webpack_exports__AutoModelForSequenceClassification, __webpack_exports__AutoModelForSpeechSeq2Seq, __webpack_exports__AutoModelForTextToSpectrogram, __webpack_exports__AutoModelForTextToWaveform, __webpack_exports__AutoModelForTokenClassification, __webpack_exports__AutoModelForUniversalSegmentation, __webpack_exports__AutoModelForVision2Seq, __webpack_exports__AutoModelForXVector, __webpack_exports__AutoModelForZeroShotObjectDetection, __webpack_exports__AutoProcessor, __webpack_exports__AutoTokenizer, __webpack_exports__AutomaticSpeechRecognitionPipeline, __webpack_exports__BackgroundRemovalPipeline, __webpack_exports__BartForConditionalGeneration, __webpack_exports__BartForSequenceClassification, __webpack_exports__BartModel, __webpack_exports__BartPretrainedModel, __webpack_exports__BartTokenizer, __webpack_exports__BaseModelOutput, __webpack_exports__BaseStreamer, __webpack_exports__BeitFeatureExtractor, __webpack_exports__BeitForImageClassification, __webpack_exports__BeitModel, __webpack_exports__BeitPreTrainedModel, __webpack_exports__BertForMaskedLM, __webpack_exports__BertForQuestionAnswering, __webpack_exports__BertForSequenceClassification, __webpack_exports__BertForTokenClassification, __webpack_exports__BertModel, __webpack_exports__BertPreTrainedModel, __webpack_exports__BertTokenizer, __webpack_exports__BitImageProcessor, __webpack_exports__BlenderbotForConditionalGeneration, __webpack_exports__BlenderbotModel, __webpack_exports__BlenderbotPreTrainedModel, __webpack_exports__BlenderbotSmallForConditionalGeneration, __webpack_exports__BlenderbotSmallModel, __webpack_exports__BlenderbotSmallPreTrainedModel, __webpack_exports__BlenderbotSmallTokenizer, __webpack_exports__BlenderbotTokenizer, __webpack_exports__BloomForCausalLM, __webpack_exports__BloomModel, __webpack_exports__BloomPreTrainedModel, __webpack_exports__BloomTokenizer, __webpack_exports__CLIPFeatureExtractor, __webpack_exports__CLIPImageProcessor, __webpack_exports__CLIPModel, __webpack_exports__CLIPPreTrainedModel, __webpack_exports__CLIPSegForImageSegmentation, __webpack_exports__CLIPSegModel, __webpack_exports__CLIPSegPreTrainedModel, __webpack_exports__CLIPTextModel, __webpack_exports__CLIPTextModelWithProjection, __webpack_exports__CLIPTokenizer, __webpack_exports__CLIPVisionModel, __webpack_exports__CLIPVisionModelWithProjection, __webpack_exports__CamembertForMaskedLM, __webpack_exports__CamembertForQuestionAnswering, __webpack_exports__CamembertForSequenceClassification, __webpack_exports__CamembertForTokenClassification, __webpack_exports__CamembertModel, __webpack_exports__CamembertPreTrainedModel, __webpack_exports__CamembertTokenizer, __webpack_exports__CausalLMOutput, __webpack_exports__CausalLMOutputWithPast, __webpack_exports__ChineseCLIPFeatureExtractor, __webpack_exports__ChineseCLIPModel, __webpack_exports__ChineseCLIPPreTrainedModel, __webpack_exports__ClapAudioModelWithProjection, __webpack_exports__ClapFeatureExtractor, __webpack_exports__ClapModel, __webpack_exports__ClapPreTrainedModel, __webpack_exports__ClapTextModelWithProjection, __webpack_exports__ClassifierFreeGuidanceLogitsProcessor, __webpack_exports__CodeGenForCausalLM, __webpack_exports__CodeGenModel, __webpack_exports__CodeGenPreTrainedModel, __webpack_exports__CodeGenTokenizer, __webpack_exports__CodeLlamaTokenizer, __webpack_exports__CohereForCausalLM, __webpack_exports__CohereModel, __webpack_exports__CoherePreTrainedModel, __webpack_exports__CohereTokenizer, __webpack_exports__ConvBertForMaskedLM, __webpack_exports__ConvBertForQuestionAnswering, __webpack_exports__ConvBertForSequenceClassification, __webpack_exports__ConvBertForTokenClassification, __webpack_exports__ConvBertModel, __webpack_exports__ConvBertPreTrainedModel, __webpack_exports__ConvBertTokenizer, __webpack_exports__ConvNextFeatureExtractor, __webpack_exports__ConvNextForImageClassification, __webpack_exports__ConvNextImageProcessor, __webpack_exports__ConvNextModel, __webpack_exports__ConvNextPreTrainedModel, __webpack_exports__ConvNextV2ForImageClassification, __webpack_exports__ConvNextV2Model, __webpack_exports__ConvNextV2PreTrainedModel, __webpack_exports__DPTFeatureExtractor, __webpack_exports__DPTForDepthEstimation, __webpack_exports__DPTImageProcessor, __webpack_exports__DPTModel, __webpack_exports__DPTPreTrainedModel, __webpack_exports__DacDecoderModel, __webpack_exports__DacDecoderOutput, __webpack_exports__DacEncoderModel, __webpack_exports__DacEncoderOutput, __webpack_exports__DacFeatureExtractor, __webpack_exports__DacModel, __webpack_exports__DacPreTrainedModel, __webpack_exports__DataTypeMap, __webpack_exports__DebertaForMaskedLM, __webpack_exports__DebertaForQuestionAnswering, __webpack_exports__DebertaForSequenceClassification, __webpack_exports__DebertaForTokenClassification, __webpack_exports__DebertaModel, __webpack_exports__DebertaPreTrainedModel, __webpack_exports__DebertaTokenizer, __webpack_exports__DebertaV2ForMaskedLM, __webpack_exports__DebertaV2ForQuestionAnswering, __webpack_exports__DebertaV2ForSequenceClassification, __webpack_exports__DebertaV2ForTokenClassification, __webpack_exports__DebertaV2Model, __webpack_exports__DebertaV2PreTrainedModel, __webpack_exports__DebertaV2Tokenizer, __webpack_exports__DecisionTransformerModel, __webpack_exports__DecisionTransformerPreTrainedModel, __webpack_exports__DeiTFeatureExtractor, __webpack_exports__DeiTForImageClassification, __webpack_exports__DeiTImageProcessor, __webpack_exports__DeiTModel, __webpack_exports__DeiTPreTrainedModel, __webpack_exports__DepthAnythingForDepthEstimation, __webpack_exports__DepthAnythingPreTrainedModel, __webpack_exports__DepthEstimationPipeline, __webpack_exports__DepthProForDepthEstimation, __webpack_exports__DepthProPreTrainedModel, __webpack_exports__DetrFeatureExtractor, __webpack_exports__DetrForObjectDetection, __webpack_exports__DetrForSegmentation, __webpack_exports__DetrImageProcessor, __webpack_exports__DetrModel, __webpack_exports__DetrObjectDetectionOutput, __webpack_exports__DetrPreTrainedModel, __webpack_exports__DetrSegmentationOutput, __webpack_exports__Dinov2ForImageClassification, __webpack_exports__Dinov2Model, __webpack_exports__Dinov2PreTrainedModel, __webpack_exports__Dinov2WithRegistersForImageClassification, __webpack_exports__Dinov2WithRegistersModel, __webpack_exports__Dinov2WithRegistersPreTrainedModel, __webpack_exports__DistilBertForMaskedLM, __webpack_exports__DistilBertForQuestionAnswering, __webpack_exports__DistilBertForSequenceClassification, __webpack_exports__DistilBertForTokenClassification, __webpack_exports__DistilBertModel, __webpack_exports__DistilBertPreTrainedModel, __webpack_exports__DistilBertTokenizer, __webpack_exports__DocumentQuestionAnsweringPipeline, __webpack_exports__DonutFeatureExtractor, __webpack_exports__DonutImageProcessor, __webpack_exports__DonutSwinModel, __webpack_exports__DonutSwinPreTrainedModel, __webpack_exports__EfficientNetForImageClassification, __webpack_exports__EfficientNetImageProcessor, __webpack_exports__EfficientNetModel, __webpack_exports__EfficientNetPreTrainedModel, __webpack_exports__ElectraForMaskedLM, __webpack_exports__ElectraForQuestionAnswering, __webpack_exports__ElectraForSequenceClassification, __webpack_exports__ElectraForTokenClassification, __webpack_exports__ElectraModel, __webpack_exports__ElectraPreTrainedModel, __webpack_exports__ElectraTokenizer, __webpack_exports__EncodecFeatureExtractor, __webpack_exports__EosTokenCriteria, __webpack_exports__EsmForMaskedLM, __webpack_exports__EsmForSequenceClassification, __webpack_exports__EsmForTokenClassification, __webpack_exports__EsmModel, __webpack_exports__EsmPreTrainedModel, __webpack_exports__EsmTokenizer, __webpack_exports__ExaoneForCausalLM, __webpack_exports__ExaoneModel, __webpack_exports__ExaonePreTrainedModel, __webpack_exports__FFT, __webpack_exports__FalconForCausalLM, __webpack_exports__FalconModel, __webpack_exports__FalconPreTrainedModel, __webpack_exports__FalconTokenizer, __webpack_exports__FastViTForImageClassification, __webpack_exports__FastViTModel, __webpack_exports__FastViTPreTrainedModel, __webpack_exports__FeatureExtractionPipeline, __webpack_exports__FeatureExtractor, __webpack_exports__FillMaskPipeline, __webpack_exports__Florence2ForConditionalGeneration, __webpack_exports__Florence2PreTrainedModel, __webpack_exports__Florence2Processor, __webpack_exports__ForcedBOSTokenLogitsProcessor, __webpack_exports__ForcedEOSTokenLogitsProcessor, __webpack_exports__GLPNFeatureExtractor, __webpack_exports__GLPNForDepthEstimation, __webpack_exports__GLPNModel, __webpack_exports__GLPNPreTrainedModel, __webpack_exports__GPT2LMHeadModel, __webpack_exports__GPT2Model, __webpack_exports__GPT2PreTrainedModel, __webpack_exports__GPT2Tokenizer, __webpack_exports__GPTBigCodeForCausalLM, __webpack_exports__GPTBigCodeModel, __webpack_exports__GPTBigCodePreTrainedModel, __webpack_exports__GPTJForCausalLM, __webpack_exports__GPTJModel, __webpack_exports__GPTJPreTrainedModel, __webpack_exports__GPTNeoForCausalLM, __webpack_exports__GPTNeoModel, __webpack_exports__GPTNeoPreTrainedModel, __webpack_exports__GPTNeoXForCausalLM, __webpack_exports__GPTNeoXModel, __webpack_exports__GPTNeoXPreTrainedModel, __webpack_exports__GPTNeoXTokenizer, __webpack_exports__Gemma2ForCausalLM, __webpack_exports__Gemma2Model, __webpack_exports__Gemma2PreTrainedModel, __webpack_exports__Gemma3ForCausalLM, __webpack_exports__Gemma3Model, __webpack_exports__Gemma3PreTrainedModel, __webpack_exports__GemmaForCausalLM, __webpack_exports__GemmaModel, __webpack_exports__GemmaPreTrainedModel, __webpack_exports__GemmaTokenizer, __webpack_exports__GlmForCausalLM, __webpack_exports__GlmModel, __webpack_exports__GlmPreTrainedModel, __webpack_exports__GraniteForCausalLM, __webpack_exports__GraniteModel, __webpack_exports__GranitePreTrainedModel, __webpack_exports__Grok1Tokenizer, __webpack_exports__GroundingDinoForObjectDetection, __webpack_exports__GroundingDinoImageProcessor, __webpack_exports__GroundingDinoPreTrainedModel, __webpack_exports__GroundingDinoProcessor, __webpack_exports__GroupViTModel, __webpack_exports__GroupViTPreTrainedModel, __webpack_exports__HeliumForCausalLM, __webpack_exports__HeliumModel, __webpack_exports__HeliumPreTrainedModel, __webpack_exports__HerbertTokenizer, __webpack_exports__HieraForImageClassification, __webpack_exports__HieraModel, __webpack_exports__HieraPreTrainedModel, __webpack_exports__HubertForCTC, __webpack_exports__HubertForSequenceClassification, __webpack_exports__HubertModel, __webpack_exports__HubertPreTrainedModel, __webpack_exports__IJepaForImageClassification, __webpack_exports__IJepaModel, __webpack_exports__IJepaPreTrainedModel, __webpack_exports__Idefics3ForConditionalGeneration, __webpack_exports__Idefics3ImageProcessor, __webpack_exports__Idefics3PreTrainedModel, __webpack_exports__Idefics3Processor, __webpack_exports__ImageClassificationPipeline, __webpack_exports__ImageFeatureExtractionPipeline, __webpack_exports__ImageFeatureExtractor, __webpack_exports__ImageMattingOutput, __webpack_exports__ImageProcessor, __webpack_exports__ImageSegmentationPipeline, __webpack_exports__ImageToImagePipeline, __webpack_exports__ImageToTextPipeline, __webpack_exports__InterruptableStoppingCriteria, __webpack_exports__JAISLMHeadModel, __webpack_exports__JAISModel, __webpack_exports__JAISPreTrainedModel, __webpack_exports__JinaCLIPImageProcessor, __webpack_exports__JinaCLIPModel, __webpack_exports__JinaCLIPPreTrainedModel, __webpack_exports__JinaCLIPProcessor, __webpack_exports__JinaCLIPTextModel, __webpack_exports__JinaCLIPVisionModel, __webpack_exports__LiteWhisperForConditionalGeneration, __webpack_exports__LlamaForCausalLM, __webpack_exports__LlamaModel, __webpack_exports__LlamaPreTrainedModel, __webpack_exports__LlamaTokenizer, __webpack_exports__LlavaForConditionalGeneration, __webpack_exports__LlavaOnevisionForConditionalGeneration, __webpack_exports__LlavaOnevisionImageProcessor, __webpack_exports__LlavaPreTrainedModel, __webpack_exports__LogitsProcessor, __webpack_exports__LogitsProcessorList, __webpack_exports__LogitsWarper, __webpack_exports__LongT5ForConditionalGeneration, __webpack_exports__LongT5Model, __webpack_exports__LongT5PreTrainedModel, __webpack_exports__M2M100ForConditionalGeneration, __webpack_exports__M2M100Model, __webpack_exports__M2M100PreTrainedModel, __webpack_exports__M2M100Tokenizer, __webpack_exports__MBart50Tokenizer, __webpack_exports__MBartForCausalLM, __webpack_exports__MBartForConditionalGeneration, __webpack_exports__MBartForSequenceClassification, __webpack_exports__MBartModel, __webpack_exports__MBartPreTrainedModel, __webpack_exports__MBartTokenizer, __webpack_exports__MPNetForMaskedLM, __webpack_exports__MPNetForQuestionAnswering, __webpack_exports__MPNetForSequenceClassification, __webpack_exports__MPNetForTokenClassification, __webpack_exports__MPNetModel, __webpack_exports__MPNetPreTrainedModel, __webpack_exports__MPNetTokenizer, __webpack_exports__MT5ForConditionalGeneration, __webpack_exports__MT5Model, __webpack_exports__MT5PreTrainedModel, __webpack_exports__MarianMTModel, __webpack_exports__MarianModel, __webpack_exports__MarianPreTrainedModel, __webpack_exports__MarianTokenizer, __webpack_exports__Mask2FormerImageProcessor, __webpack_exports__MaskFormerFeatureExtractor, __webpack_exports__MaskFormerForInstanceSegmentation, __webpack_exports__MaskFormerImageProcessor, __webpack_exports__MaskFormerModel, __webpack_exports__MaskFormerPreTrainedModel, __webpack_exports__MaskedLMOutput, __webpack_exports__MaxLengthCriteria, __webpack_exports__Metric3DForDepthEstimation, __webpack_exports__Metric3DPreTrainedModel, __webpack_exports__Metric3Dv2ForDepthEstimation, __webpack_exports__Metric3Dv2PreTrainedModel, __webpack_exports__MgpstrForSceneTextRecognition, __webpack_exports__MgpstrModelOutput, __webpack_exports__MgpstrPreTrainedModel, __webpack_exports__MgpstrProcessor, __webpack_exports__MgpstrTokenizer, __webpack_exports__MimiDecoderModel, __webpack_exports__MimiDecoderOutput, __webpack_exports__MimiEncoderModel, __webpack_exports__MimiEncoderOutput, __webpack_exports__MimiModel, __webpack_exports__MimiPreTrainedModel, __webpack_exports__MinLengthLogitsProcessor, __webpack_exports__MinNewTokensLengthLogitsProcessor, __webpack_exports__MistralForCausalLM, __webpack_exports__MistralModel, __webpack_exports__MistralPreTrainedModel, __webpack_exports__MobileBertForMaskedLM, __webpack_exports__MobileBertForQuestionAnswering, __webpack_exports__MobileBertForSequenceClassification, __webpack_exports__MobileBertModel, __webpack_exports__MobileBertPreTrainedModel, __webpack_exports__MobileBertTokenizer, __webpack_exports__MobileLLMForCausalLM, __webpack_exports__MobileLLMModel, __webpack_exports__MobileLLMPreTrainedModel, __webpack_exports__MobileNetV1FeatureExtractor, __webpack_exports__MobileNetV1ForImageClassification, __webpack_exports__MobileNetV1ForSemanticSegmentation, __webpack_exports__MobileNetV1ImageProcessor, __webpack_exports__MobileNetV1Model, __webpack_exports__MobileNetV1PreTrainedModel, __webpack_exports__MobileNetV2FeatureExtractor, __webpack_exports__MobileNetV2ForImageClassification, __webpack_exports__MobileNetV2ForSemanticSegmentation, __webpack_exports__MobileNetV2ImageProcessor, __webpack_exports__MobileNetV2Model, __webpack_exports__MobileNetV2PreTrainedModel, __webpack_exports__MobileNetV3FeatureExtractor, __webpack_exports__MobileNetV3ForImageClassification, __webpack_exports__MobileNetV3ForSemanticSegmentation, __webpack_exports__MobileNetV3ImageProcessor, __webpack_exports__MobileNetV3Model, __webpack_exports__MobileNetV3PreTrainedModel, __webpack_exports__MobileNetV4FeatureExtractor, __webpack_exports__MobileNetV4ForImageClassification, __webpack_exports__MobileNetV4ForSemanticSegmentation, __webpack_exports__MobileNetV4ImageProcessor, __webpack_exports__MobileNetV4Model, __webpack_exports__MobileNetV4PreTrainedModel, __webpack_exports__MobileViTFeatureExtractor, __webpack_exports__MobileViTForImageClassification, __webpack_exports__MobileViTImageProcessor, __webpack_exports__MobileViTModel, __webpack_exports__MobileViTPreTrainedModel, __webpack_exports__MobileViTV2ForImageClassification, __webpack_exports__MobileViTV2Model, __webpack_exports__MobileViTV2PreTrainedModel, __webpack_exports__ModelOutput, __webpack_exports__ModernBertForMaskedLM, __webpack_exports__ModernBertForSequenceClassification, __webpack_exports__ModernBertForTokenClassification, __webpack_exports__ModernBertModel, __webpack_exports__ModernBertPreTrainedModel, __webpack_exports__Moondream1ForConditionalGeneration, __webpack_exports__MoonshineFeatureExtractor, __webpack_exports__MoonshineForConditionalGeneration, __webpack_exports__MoonshineModel, __webpack_exports__MoonshinePreTrainedModel, __webpack_exports__MoonshineProcessor, __webpack_exports__MptForCausalLM, __webpack_exports__MptModel, __webpack_exports__MptPreTrainedModel, __webpack_exports__MultiModalityCausalLM, __webpack_exports__MultiModalityPreTrainedModel, __webpack_exports__MusicgenForCausalLM, __webpack_exports__MusicgenForConditionalGeneration, __webpack_exports__MusicgenModel, __webpack_exports__MusicgenPreTrainedModel, __webpack_exports__NllbTokenizer, __webpack_exports__NoBadWordsLogitsProcessor, __webpack_exports__NoRepeatNGramLogitsProcessor, __webpack_exports__NomicBertModel, __webpack_exports__NomicBertPreTrainedModel, __webpack_exports__NougatImageProcessor, __webpack_exports__NougatTokenizer, __webpack_exports__OPTForCausalLM, __webpack_exports__OPTModel, __webpack_exports__OPTPreTrainedModel, __webpack_exports__ObjectDetectionPipeline, __webpack_exports__Olmo2ForCausalLM, __webpack_exports__Olmo2Model, __webpack_exports__Olmo2PreTrainedModel, __webpack_exports__OlmoForCausalLM, __webpack_exports__OlmoModel, __webpack_exports__OlmoPreTrainedModel, __webpack_exports__OpenELMForCausalLM, __webpack_exports__OpenELMModel, __webpack_exports__OpenELMPreTrainedModel, __webpack_exports__OwlViTFeatureExtractor, __webpack_exports__OwlViTForObjectDetection, __webpack_exports__OwlViTImageProcessor, __webpack_exports__OwlViTModel, __webpack_exports__OwlViTPreTrainedModel, __webpack_exports__OwlViTProcessor, __webpack_exports__Owlv2ForObjectDetection, __webpack_exports__Owlv2ImageProcessor, __webpack_exports__Owlv2Model, __webpack_exports__Owlv2PreTrainedModel, __webpack_exports__PaliGemmaForConditionalGeneration, __webpack_exports__PaliGemmaPreTrainedModel, __webpack_exports__PaliGemmaProcessor, __webpack_exports__PatchTSMixerForPrediction, __webpack_exports__PatchTSMixerModel, __webpack_exports__PatchTSMixerPreTrainedModel, __webpack_exports__PatchTSTForPrediction, __webpack_exports__PatchTSTModel, __webpack_exports__PatchTSTPreTrainedModel, __webpack_exports__Phi3ForCausalLM, __webpack_exports__Phi3Model, __webpack_exports__Phi3PreTrainedModel, __webpack_exports__Phi3VForCausalLM, __webpack_exports__Phi3VImageProcessor, __webpack_exports__Phi3VPreTrainedModel, __webpack_exports__Phi3VProcessor, __webpack_exports__PhiForCausalLM, __webpack_exports__PhiModel, __webpack_exports__PhiPreTrainedModel, __webpack_exports__Pipeline, __webpack_exports__PreTrainedModel, __webpack_exports__PreTrainedTokenizer, __webpack_exports__PretrainedConfig, __webpack_exports__PretrainedMixin, __webpack_exports__Processor, __webpack_exports__PvtForImageClassification, __webpack_exports__PvtImageProcessor, __webpack_exports__PvtModel, __webpack_exports__PvtPreTrainedModel, __webpack_exports__PyAnnoteFeatureExtractor, __webpack_exports__PyAnnoteForAudioFrameClassification, __webpack_exports__PyAnnoteModel, __webpack_exports__PyAnnotePreTrainedModel, __webpack_exports__PyAnnoteProcessor, __webpack_exports__QuestionAnsweringModelOutput, __webpack_exports__QuestionAnsweringPipeline, __webpack_exports__Qwen2ForCausalLM, __webpack_exports__Qwen2Model, __webpack_exports__Qwen2PreTrainedModel, __webpack_exports__Qwen2Tokenizer, __webpack_exports__Qwen2VLForConditionalGeneration, __webpack_exports__Qwen2VLImageProcessor, __webpack_exports__Qwen2VLPreTrainedModel, __webpack_exports__Qwen2VLProcessor, __webpack_exports__RFDetrForObjectDetection, __webpack_exports__RFDetrModel, __webpack_exports__RFDetrObjectDetectionOutput, __webpack_exports__RFDetrPreTrainedModel, __webpack_exports__RTDetrForObjectDetection, __webpack_exports__RTDetrImageProcessor, __webpack_exports__RTDetrModel, __webpack_exports__RTDetrObjectDetectionOutput, __webpack_exports__RTDetrPreTrainedModel, __webpack_exports__RTDetrV2ForObjectDetection, __webpack_exports__RTDetrV2Model, __webpack_exports__RTDetrV2ObjectDetectionOutput, __webpack_exports__RTDetrV2PreTrainedModel, __webpack_exports__RawAudio, __webpack_exports__RawImage, __webpack_exports__RawVideo, __webpack_exports__RawVideoFrame, __webpack_exports__RepetitionPenaltyLogitsProcessor, __webpack_exports__ResNetForImageClassification, __webpack_exports__ResNetModel, __webpack_exports__ResNetPreTrainedModel, __webpack_exports__RoFormerForMaskedLM, __webpack_exports__RoFormerForQuestionAnswering, __webpack_exports__RoFormerForSequenceClassification, __webpack_exports__RoFormerForTokenClassification, __webpack_exports__RoFormerModel, __webpack_exports__RoFormerPreTrainedModel, __webpack_exports__RoFormerTokenizer, __webpack_exports__RobertaForMaskedLM, __webpack_exports__RobertaForQuestionAnswering, __webpack_exports__RobertaForSequenceClassification, __webpack_exports__RobertaForTokenClassification, __webpack_exports__RobertaModel, __webpack_exports__RobertaPreTrainedModel, __webpack_exports__RobertaTokenizer, __webpack_exports__SamImageProcessor, __webpack_exports__SamImageSegmentationOutput, __webpack_exports__SamModel, __webpack_exports__SamPreTrainedModel, __webpack_exports__SamProcessor, __webpack_exports__SapiensForDepthEstimation, __webpack_exports__SapiensForNormalEstimation, __webpack_exports__SapiensForSemanticSegmentation, __webpack_exports__SapiensPreTrainedModel, __webpack_exports__SeamlessM4TFeatureExtractor, __webpack_exports__SegformerFeatureExtractor, __webpack_exports__SegformerForImageClassification, __webpack_exports__SegformerForSemanticSegmentation, __webpack_exports__SegformerImageProcessor, __webpack_exports__SegformerModel, __webpack_exports__SegformerPreTrainedModel, __webpack_exports__Seq2SeqLMOutput, __webpack_exports__SequenceClassifierOutput, __webpack_exports__SiglipImageProcessor, __webpack_exports__SiglipModel, __webpack_exports__SiglipPreTrainedModel, __webpack_exports__SiglipTextModel, __webpack_exports__SiglipTokenizer, __webpack_exports__SiglipVisionModel, __webpack_exports__SmolVLMForConditionalGeneration, __webpack_exports__SmolVLMImageProcessor, __webpack_exports__SmolVLMProcessor, __webpack_exports__SnacDecoderModel, __webpack_exports__SnacEncoderModel, __webpack_exports__SnacFeatureExtractor, __webpack_exports__SnacModel, __webpack_exports__SnacPreTrainedModel, __webpack_exports__SpeechT5FeatureExtractor, __webpack_exports__SpeechT5ForSpeechToText, __webpack_exports__SpeechT5ForTextToSpeech, __webpack_exports__SpeechT5HifiGan, __webpack_exports__SpeechT5Model, __webpack_exports__SpeechT5PreTrainedModel, __webpack_exports__SpeechT5Processor, __webpack_exports__SpeechT5Tokenizer, __webpack_exports__SqueezeBertForMaskedLM, __webpack_exports__SqueezeBertForQuestionAnswering, __webpack_exports__SqueezeBertForSequenceClassification, __webpack_exports__SqueezeBertModel, __webpack_exports__SqueezeBertPreTrainedModel, __webpack_exports__SqueezeBertTokenizer, __webpack_exports__StableLmForCausalLM, __webpack_exports__StableLmModel, __webpack_exports__StableLmPreTrainedModel, __webpack_exports__Starcoder2ForCausalLM, __webpack_exports__Starcoder2Model, __webpack_exports__Starcoder2PreTrainedModel, __webpack_exports__StoppingCriteria, __webpack_exports__StoppingCriteriaList, __webpack_exports__StyleTextToSpeech2Model, __webpack_exports__StyleTextToSpeech2PreTrainedModel, __webpack_exports__SummarizationPipeline, __webpack_exports__SuppressTokensAtBeginLogitsProcessor, __webpack_exports__Swin2SRForImageSuperResolution, __webpack_exports__Swin2SRImageProcessor, __webpack_exports__Swin2SRModel, __webpack_exports__Swin2SRPreTrainedModel, __webpack_exports__SwinForImageClassification, __webpack_exports__SwinForSemanticSegmentation, __webpack_exports__SwinModel, __webpack_exports__SwinPreTrainedModel, __webpack_exports__T5ForConditionalGeneration, __webpack_exports__T5Model, __webpack_exports__T5PreTrainedModel, __webpack_exports__T5Tokenizer, __webpack_exports__TableTransformerForObjectDetection, __webpack_exports__TableTransformerModel, __webpack_exports__TableTransformerObjectDetectionOutput, __webpack_exports__TableTransformerPreTrainedModel, __webpack_exports__TemperatureLogitsWarper, __webpack_exports__Tensor, __webpack_exports__Text2TextGenerationPipeline, __webpack_exports__TextClassificationPipeline, __webpack_exports__TextGenerationPipeline, __webpack_exports__TextStreamer, __webpack_exports__TextToAudioPipeline, __webpack_exports__TokenClassificationPipeline, __webpack_exports__TokenClassifierOutput, __webpack_exports__TokenizerModel, __webpack_exports__TopKLogitsWarper, __webpack_exports__TopPLogitsWarper, __webpack_exports__TrOCRForCausalLM, __webpack_exports__TrOCRPreTrainedModel, __webpack_exports__TranslationPipeline, __webpack_exports__UltravoxModel, __webpack_exports__UltravoxPreTrainedModel, __webpack_exports__UltravoxProcessor, __webpack_exports__UniSpeechForCTC, __webpack_exports__UniSpeechForSequenceClassification, __webpack_exports__UniSpeechModel, __webpack_exports__UniSpeechPreTrainedModel, __webpack_exports__UniSpeechSatForAudioFrameClassification, __webpack_exports__UniSpeechSatForCTC, __webpack_exports__UniSpeechSatForSequenceClassification, __webpack_exports__UniSpeechSatModel, __webpack_exports__UniSpeechSatPreTrainedModel, __webpack_exports__VLChatProcessor, __webpack_exports__VLMImageProcessor, __webpack_exports__ViTFeatureExtractor, __webpack_exports__ViTForImageClassification, __webpack_exports__ViTImageProcessor, __webpack_exports__ViTMAEModel, __webpack_exports__ViTMAEPreTrainedModel, __webpack_exports__ViTMSNForImageClassification, __webpack_exports__ViTMSNModel, __webpack_exports__ViTMSNPreTrainedModel, __webpack_exports__ViTModel, __webpack_exports__ViTPreTrainedModel, __webpack_exports__VisionEncoderDecoderModel, __webpack_exports__VitMatteForImageMatting, __webpack_exports__VitMatteImageProcessor, __webpack_exports__VitMattePreTrainedModel, __webpack_exports__VitPoseForPoseEstimation, __webpack_exports__VitPoseImageProcessor, __webpack_exports__VitPosePreTrainedModel, __webpack_exports__VitsModel, __webpack_exports__VitsModelOutput, __webpack_exports__VitsPreTrainedModel, __webpack_exports__VitsTokenizer, __webpack_exports__Wav2Vec2BertForCTC, __webpack_exports__Wav2Vec2BertForSequenceClassification, __webpack_exports__Wav2Vec2BertModel, __webpack_exports__Wav2Vec2BertPreTrainedModel, __webpack_exports__Wav2Vec2CTCTokenizer, __webpack_exports__Wav2Vec2FeatureExtractor, __webpack_exports__Wav2Vec2ForAudioFrameClassification, __webpack_exports__Wav2Vec2ForCTC, __webpack_exports__Wav2Vec2ForSequenceClassification, __webpack_exports__Wav2Vec2Model, __webpack_exports__Wav2Vec2PreTrainedModel, __webpack_exports__Wav2Vec2Processor, __webpack_exports__Wav2Vec2ProcessorWithLM, __webpack_exports__WavLMForAudioFrameClassification, __webpack_exports__WavLMForCTC, __webpack_exports__WavLMForSequenceClassification, __webpack_exports__WavLMForXVector, __webpack_exports__WavLMModel, __webpack_exports__WavLMPreTrainedModel, __webpack_exports__WeSpeakerFeatureExtractor, __webpack_exports__WeSpeakerResNetModel, __webpack_exports__WeSpeakerResNetPreTrainedModel, __webpack_exports__WhisperFeatureExtractor, __webpack_exports__WhisperForConditionalGeneration, __webpack_exports__WhisperModel, __webpack_exports__WhisperPreTrainedModel, __webpack_exports__WhisperProcessor, __webpack_exports__WhisperTextStreamer, __webpack_exports__WhisperTimeStampLogitsProcessor, __webpack_exports__WhisperTokenizer, __webpack_exports__XLMForQuestionAnswering, __webpack_exports__XLMForSequenceClassification, __webpack_exports__XLMForTokenClassification, __webpack_exports__XLMModel, __webpack_exports__XLMPreTrainedModel, __webpack_exports__XLMRobertaForMaskedLM, __webpack_exports__XLMRobertaForQuestionAnswering, __webpack_exports__XLMRobertaForSequenceClassification, __webpack_exports__XLMRobertaForTokenClassification, __webpack_exports__XLMRobertaModel, __webpack_exports__XLMRobertaPreTrainedModel, __webpack_exports__XLMRobertaTokenizer, __webpack_exports__XLMTokenizer, __webpack_exports__XLMWithLMHeadModel, __webpack_exports__XVectorOutput, __webpack_exports__YolosFeatureExtractor, __webpack_exports__YolosForObjectDetection, __webpack_exports__YolosImageProcessor, __webpack_exports__YolosModel, __webpack_exports__YolosObjectDetectionOutput, __webpack_exports__YolosPreTrainedModel, __webpack_exports__ZeroShotAudioClassificationPipeline, __webpack_exports__ZeroShotClassificationPipeline, __webpack_exports__ZeroShotImageClassificationPipeline, __webpack_exports__ZeroShotObjectDetectionPipeline, __webpack_exports__bankers_round, __webpack_exports__cat, __webpack_exports__cos_sim, __webpack_exports__dot, __webpack_exports__dynamic_time_warping, __webpack_exports__env, __webpack_exports__full, __webpack_exports__full_like, __webpack_exports__getKeyValueShapes, __webpack_exports__hamming, __webpack_exports__hanning, __webpack_exports__interpolate, __webpack_exports__interpolate_4d, __webpack_exports__interpolate_data, __webpack_exports__is_chinese_char, __webpack_exports__layer_norm, __webpack_exports__load_image, __webpack_exports__load_video, __webpack_exports__log_softmax, __webpack_exports__magnitude, __webpack_exports__matmul, __webpack_exports__max, __webpack_exports__mean, __webpack_exports__mean_pooling, __webpack_exports__medianFilter, __webpack_exports__mel_filter_bank, __webpack_exports__min, __webpack_exports__ones, __webpack_exports__ones_like, __webpack_exports__permute, __webpack_exports__permute_data, __webpack_exports__pipeline, __webpack_exports__quantize_embeddings, __webpack_exports__rand, __webpack_exports__read_audio, __webpack_exports__rfft, __webpack_exports__round, __webpack_exports__slice, __webpack_exports__softmax, __webpack_exports__spectrogram, __webpack_exports__stack, __webpack_exports__std_mean, __webpack_exports__topk, __webpack_exports__window_function, __webpack_exports__zeros, __webpack_exports__zeros_like;\n  var init_transformers_web = __esm({\n    \"node_modules/@huggingface/transformers/dist/transformers.web.js\"() {\n      init_esm();\n      init_ort_bundle_min();\n      import_meta2 = {};\n      __webpack_modules__ = {\n        /***/\n        \"onnxruntime-common\": (\n          /*!*************************************!*\\\n            !*** external \"onnxruntime-common\" ***!\n            \\*************************************/\n          /***/\n          (module) => {\n            module.exports = esm_exports;\n          }\n        ),\n        /***/\n        \"onnxruntime-web\": (\n          /*!**********************************!*\\\n            !*** external \"onnxruntime-web\" ***!\n            \\**********************************/\n          /***/\n          (module) => {\n            module.exports = ort_bundle_min_exports;\n          }\n        ),\n        /***/\n        \"?2ce3\": (\n          /*!**********************************!*\\\n            !*** onnxruntime-node (ignored) ***!\n            \\**********************************/\n          /***/\n          () => {\n          }\n        ),\n        /***/\n        \"?7a2c\": (\n          /*!********************!*\\\n            !*** fs (ignored) ***!\n            \\********************/\n          /***/\n          () => {\n          }\n        ),\n        /***/\n        \"?a42a\": (\n          /*!**********************!*\\\n            !*** path (ignored) ***!\n            \\**********************/\n          /***/\n          () => {\n          }\n        ),\n        /***/\n        \"?2b25\": (\n          /*!***********************!*\\\n            !*** sharp (ignored) ***!\n            \\***********************/\n          /***/\n          () => {\n          }\n        ),\n        /***/\n        \"?569f\": (\n          /*!********************!*\\\n            !*** fs (ignored) ***!\n            \\********************/\n          /***/\n          () => {\n          }\n        ),\n        /***/\n        \"?3f59\": (\n          /*!**********************!*\\\n            !*** path (ignored) ***!\n            \\**********************/\n          /***/\n          () => {\n          }\n        ),\n        /***/\n        \"?154a\": (\n          /*!*********************!*\\\n            !*** url (ignored) ***!\n            \\*********************/\n          /***/\n          () => {\n          }\n        ),\n        /***/\n        \"./node_modules/@huggingface/jinja/dist/index.js\": (\n          /*!*******************************************************!*\\\n            !*** ./node_modules/@huggingface/jinja/dist/index.js ***!\n            \\*******************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Environment: () => (\n                /* binding */\n                Environment\n              ),\n              /* harmony export */\n              Interpreter: () => (\n                /* binding */\n                Interpreter\n              ),\n              /* harmony export */\n              Template: () => (\n                /* binding */\n                Template\n              ),\n              /* harmony export */\n              parse: () => (\n                /* binding */\n                parse\n              ),\n              /* harmony export */\n              tokenize: () => (\n                /* binding */\n                tokenize\n              )\n              /* harmony export */\n            });\n            var TOKEN_TYPES = Object.freeze({\n              Text: \"Text\",\n              // The text between Jinja statements or expressions\n              NumericLiteral: \"NumericLiteral\",\n              // e.g., 123\n              BooleanLiteral: \"BooleanLiteral\",\n              // true or false\n              NullLiteral: \"NullLiteral\",\n              // none\n              StringLiteral: \"StringLiteral\",\n              // 'string'\n              Identifier: \"Identifier\",\n              // Variables, functions, etc.\n              Equals: \"Equals\",\n              // =\n              OpenParen: \"OpenParen\",\n              // (\n              CloseParen: \"CloseParen\",\n              // )\n              OpenStatement: \"OpenStatement\",\n              // {%\n              CloseStatement: \"CloseStatement\",\n              // %}\n              OpenExpression: \"OpenExpression\",\n              // {{\n              CloseExpression: \"CloseExpression\",\n              // }}\n              OpenSquareBracket: \"OpenSquareBracket\",\n              // [\n              CloseSquareBracket: \"CloseSquareBracket\",\n              // ]\n              OpenCurlyBracket: \"OpenCurlyBracket\",\n              // {\n              CloseCurlyBracket: \"CloseCurlyBracket\",\n              // }\n              Comma: \"Comma\",\n              // ,\n              Dot: \"Dot\",\n              // .\n              Colon: \"Colon\",\n              // :\n              Pipe: \"Pipe\",\n              // |\n              CallOperator: \"CallOperator\",\n              // ()\n              AdditiveBinaryOperator: \"AdditiveBinaryOperator\",\n              // + -\n              MultiplicativeBinaryOperator: \"MultiplicativeBinaryOperator\",\n              // * / %\n              ComparisonBinaryOperator: \"ComparisonBinaryOperator\",\n              // < > <= >= == !=\n              UnaryOperator: \"UnaryOperator\",\n              // ! - +\n              // Keywords\n              Set: \"Set\",\n              If: \"If\",\n              For: \"For\",\n              In: \"In\",\n              Is: \"Is\",\n              NotIn: \"NotIn\",\n              Else: \"Else\",\n              EndSet: \"EndSet\",\n              EndIf: \"EndIf\",\n              ElseIf: \"ElseIf\",\n              EndFor: \"EndFor\",\n              And: \"And\",\n              Or: \"Or\",\n              Not: \"UnaryOperator\",\n              Macro: \"Macro\",\n              EndMacro: \"EndMacro\"\n            });\n            var KEYWORDS = Object.freeze({\n              set: TOKEN_TYPES.Set,\n              for: TOKEN_TYPES.For,\n              in: TOKEN_TYPES.In,\n              is: TOKEN_TYPES.Is,\n              if: TOKEN_TYPES.If,\n              else: TOKEN_TYPES.Else,\n              endset: TOKEN_TYPES.EndSet,\n              endif: TOKEN_TYPES.EndIf,\n              elif: TOKEN_TYPES.ElseIf,\n              endfor: TOKEN_TYPES.EndFor,\n              and: TOKEN_TYPES.And,\n              or: TOKEN_TYPES.Or,\n              not: TOKEN_TYPES.Not,\n              \"not in\": TOKEN_TYPES.NotIn,\n              macro: TOKEN_TYPES.Macro,\n              endmacro: TOKEN_TYPES.EndMacro,\n              // Literals\n              true: TOKEN_TYPES.BooleanLiteral,\n              false: TOKEN_TYPES.BooleanLiteral,\n              none: TOKEN_TYPES.NullLiteral,\n              // NOTE: According to the Jinja docs: The special constants true, false, and none are indeed lowercase.\n              // Because that caused confusion in the past, (True used to expand to an undefined variable that was considered false),\n              // all three can now also be written in title case (True, False, and None). However, for consistency, (all Jinja identifiers are lowercase)\n              // you should use the lowercase versions.\n              True: TOKEN_TYPES.BooleanLiteral,\n              False: TOKEN_TYPES.BooleanLiteral,\n              None: TOKEN_TYPES.NullLiteral\n            });\n            var Token = class {\n              /**\n               * Constructs a new Token.\n               * @param {string} value The raw value as seen inside the source code.\n               * @param {TokenType} type The type of token.\n               */\n              constructor(value, type) {\n                this.value = value;\n                this.type = type;\n              }\n            };\n            function isWord(char) {\n              return /\\w/.test(char);\n            }\n            function isInteger(char) {\n              return /[0-9]/.test(char);\n            }\n            var ORDERED_MAPPING_TABLE = [\n              // Control sequences\n              [\"{%\", TOKEN_TYPES.OpenStatement],\n              [\"%}\", TOKEN_TYPES.CloseStatement],\n              [\"{{\", TOKEN_TYPES.OpenExpression],\n              [\"}}\", TOKEN_TYPES.CloseExpression],\n              // Single character tokens\n              [\"(\", TOKEN_TYPES.OpenParen],\n              [\")\", TOKEN_TYPES.CloseParen],\n              [\"{\", TOKEN_TYPES.OpenCurlyBracket],\n              [\"}\", TOKEN_TYPES.CloseCurlyBracket],\n              [\"[\", TOKEN_TYPES.OpenSquareBracket],\n              [\"]\", TOKEN_TYPES.CloseSquareBracket],\n              [\",\", TOKEN_TYPES.Comma],\n              [\".\", TOKEN_TYPES.Dot],\n              [\":\", TOKEN_TYPES.Colon],\n              [\"|\", TOKEN_TYPES.Pipe],\n              // Comparison operators\n              [\"<=\", TOKEN_TYPES.ComparisonBinaryOperator],\n              [\">=\", TOKEN_TYPES.ComparisonBinaryOperator],\n              [\"==\", TOKEN_TYPES.ComparisonBinaryOperator],\n              [\"!=\", TOKEN_TYPES.ComparisonBinaryOperator],\n              [\"<\", TOKEN_TYPES.ComparisonBinaryOperator],\n              [\">\", TOKEN_TYPES.ComparisonBinaryOperator],\n              // Arithmetic operators\n              [\"+\", TOKEN_TYPES.AdditiveBinaryOperator],\n              [\"-\", TOKEN_TYPES.AdditiveBinaryOperator],\n              [\"*\", TOKEN_TYPES.MultiplicativeBinaryOperator],\n              [\"/\", TOKEN_TYPES.MultiplicativeBinaryOperator],\n              [\"%\", TOKEN_TYPES.MultiplicativeBinaryOperator],\n              // Assignment operator\n              [\"=\", TOKEN_TYPES.Equals]\n            ];\n            var ESCAPE_CHARACTERS = /* @__PURE__ */ new Map([\n              [\"n\", \"\\n\"],\n              // New line\n              [\"t\", \"\t\"],\n              // Horizontal tab\n              [\"r\", \"\\r\"],\n              // Carriage return\n              [\"b\", \"\\b\"],\n              // Backspace\n              [\"f\", \"\\f\"],\n              // Form feed\n              [\"v\", \"\\v\"],\n              // Vertical tab\n              [\"'\", \"'\"],\n              // Single quote\n              ['\"', '\"'],\n              // Double quote\n              [\"\\\\\", \"\\\\\"]\n              // Backslash\n            ]);\n            function preprocess(template, options = {}) {\n              if (template.endsWith(\"\\n\")) {\n                template = template.slice(0, -1);\n              }\n              template = template.replace(/{#.*?#}/gs, \"{##}\");\n              if (options.lstrip_blocks) {\n                template = template.replace(/^[ \\t]*({[#%])/gm, \"$1\");\n              }\n              if (options.trim_blocks) {\n                template = template.replace(/([#%]})\\n/g, \"$1\");\n              }\n              return template.replace(/{##}/g, \"\").replace(/-%}\\s*/g, \"%}\").replace(/\\s*{%-/g, \"{%\").replace(/-}}\\s*/g, \"}}\").replace(/\\s*{{-/g, \"{{\");\n            }\n            function tokenize(source, options = {}) {\n              const tokens = [];\n              const src = preprocess(source, options);\n              let cursorPosition = 0;\n              const consumeWhile = (predicate) => {\n                let str = \"\";\n                while (predicate(src[cursorPosition])) {\n                  if (src[cursorPosition] === \"\\\\\") {\n                    ++cursorPosition;\n                    if (cursorPosition >= src.length)\n                      throw new SyntaxError(\"Unexpected end of input\");\n                    const escaped = src[cursorPosition++];\n                    const unescaped = ESCAPE_CHARACTERS.get(escaped);\n                    if (unescaped === void 0) {\n                      throw new SyntaxError(`Unexpected escaped character: ${escaped}`);\n                    }\n                    str += unescaped;\n                    continue;\n                  }\n                  str += src[cursorPosition++];\n                  if (cursorPosition >= src.length)\n                    throw new SyntaxError(\"Unexpected end of input\");\n                }\n                return str;\n              };\n              main:\n                while (cursorPosition < src.length) {\n                  const lastTokenType = tokens.at(-1)?.type;\n                  if (lastTokenType === void 0 || lastTokenType === TOKEN_TYPES.CloseStatement || lastTokenType === TOKEN_TYPES.CloseExpression) {\n                    let text = \"\";\n                    while (cursorPosition < src.length && // Keep going until we hit the next Jinja statement or expression\n                    !(src[cursorPosition] === \"{\" && (src[cursorPosition + 1] === \"%\" || src[cursorPosition + 1] === \"{\"))) {\n                      text += src[cursorPosition++];\n                    }\n                    if (text.length > 0) {\n                      tokens.push(new Token(text, TOKEN_TYPES.Text));\n                      continue;\n                    }\n                  }\n                  consumeWhile((char2) => /\\s/.test(char2));\n                  const char = src[cursorPosition];\n                  if (char === \"-\" || char === \"+\") {\n                    const lastTokenType2 = tokens.at(-1)?.type;\n                    if (lastTokenType2 === TOKEN_TYPES.Text || lastTokenType2 === void 0) {\n                      throw new SyntaxError(`Unexpected character: ${char}`);\n                    }\n                    switch (lastTokenType2) {\n                      case TOKEN_TYPES.Identifier:\n                      case TOKEN_TYPES.NumericLiteral:\n                      case TOKEN_TYPES.BooleanLiteral:\n                      case TOKEN_TYPES.NullLiteral:\n                      case TOKEN_TYPES.StringLiteral:\n                      case TOKEN_TYPES.CloseParen:\n                      case TOKEN_TYPES.CloseSquareBracket:\n                        break;\n                      default: {\n                        ++cursorPosition;\n                        const num = consumeWhile(isInteger);\n                        tokens.push(\n                          new Token(`${char}${num}`, num.length > 0 ? TOKEN_TYPES.NumericLiteral : TOKEN_TYPES.UnaryOperator)\n                        );\n                        continue;\n                      }\n                    }\n                  }\n                  for (const [char2, token] of ORDERED_MAPPING_TABLE) {\n                    const slice2 = src.slice(cursorPosition, cursorPosition + char2.length);\n                    if (slice2 === char2) {\n                      tokens.push(new Token(char2, token));\n                      cursorPosition += char2.length;\n                      continue main;\n                    }\n                  }\n                  if (char === \"'\" || char === '\"') {\n                    ++cursorPosition;\n                    const str = consumeWhile((c) => c !== char);\n                    tokens.push(new Token(str, TOKEN_TYPES.StringLiteral));\n                    ++cursorPosition;\n                    continue;\n                  }\n                  if (isInteger(char)) {\n                    const num = consumeWhile(isInteger);\n                    tokens.push(new Token(num, TOKEN_TYPES.NumericLiteral));\n                    continue;\n                  }\n                  if (isWord(char)) {\n                    const word = consumeWhile(isWord);\n                    const type = Object.hasOwn(KEYWORDS, word) ? KEYWORDS[word] : TOKEN_TYPES.Identifier;\n                    if (type === TOKEN_TYPES.In && tokens.at(-1)?.type === TOKEN_TYPES.Not) {\n                      tokens.pop();\n                      tokens.push(new Token(\"not in\", TOKEN_TYPES.NotIn));\n                    } else {\n                      tokens.push(new Token(word, type));\n                    }\n                    continue;\n                  }\n                  throw new SyntaxError(`Unexpected character: ${char}`);\n                }\n              return tokens;\n            }\n            var Statement = class {\n              constructor() {\n                __publicField(this, \"type\", \"Statement\");\n              }\n            };\n            var Program = class extends Statement {\n              constructor(body) {\n                super();\n                __publicField(this, \"type\", \"Program\");\n                this.body = body;\n              }\n            };\n            var If2 = class extends Statement {\n              constructor(test, body, alternate) {\n                super();\n                __publicField(this, \"type\", \"If\");\n                this.test = test;\n                this.body = body;\n                this.alternate = alternate;\n              }\n            };\n            var For = class extends Statement {\n              constructor(loopvar, iterable, body, defaultBlock) {\n                super();\n                __publicField(this, \"type\", \"For\");\n                this.loopvar = loopvar;\n                this.iterable = iterable;\n                this.body = body;\n                this.defaultBlock = defaultBlock;\n              }\n            };\n            var SetStatement = class extends Statement {\n              constructor(assignee, value, body) {\n                super();\n                __publicField(this, \"type\", \"Set\");\n                this.assignee = assignee;\n                this.value = value;\n                this.body = body;\n              }\n            };\n            var Macro = class extends Statement {\n              constructor(name, args, body) {\n                super();\n                __publicField(this, \"type\", \"Macro\");\n                this.name = name;\n                this.args = args;\n                this.body = body;\n              }\n            };\n            var Expression = class extends Statement {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"Expression\");\n              }\n            };\n            var MemberExpression = class extends Expression {\n              constructor(object, property, computed) {\n                super();\n                __publicField(this, \"type\", \"MemberExpression\");\n                this.object = object;\n                this.property = property;\n                this.computed = computed;\n              }\n            };\n            var CallExpression = class extends Expression {\n              constructor(callee, args) {\n                super();\n                __publicField(this, \"type\", \"CallExpression\");\n                this.callee = callee;\n                this.args = args;\n              }\n            };\n            var Identifier = class extends Expression {\n              /**\n               * @param {string} value The name of the identifier\n               */\n              constructor(value) {\n                super();\n                __publicField(this, \"type\", \"Identifier\");\n                this.value = value;\n              }\n            };\n            var Literal = class extends Expression {\n              constructor(value) {\n                super();\n                __publicField(this, \"type\", \"Literal\");\n                this.value = value;\n              }\n            };\n            var NumericLiteral = class extends Literal {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"NumericLiteral\");\n              }\n            };\n            var StringLiteral = class extends Literal {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"StringLiteral\");\n              }\n            };\n            var BooleanLiteral = class extends Literal {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"BooleanLiteral\");\n              }\n            };\n            var NullLiteral = class extends Literal {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"NullLiteral\");\n              }\n            };\n            var ArrayLiteral = class extends Literal {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"ArrayLiteral\");\n              }\n            };\n            var TupleLiteral = class extends Literal {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"TupleLiteral\");\n              }\n            };\n            var ObjectLiteral = class extends Literal {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"ObjectLiteral\");\n              }\n            };\n            var BinaryExpression = class extends Expression {\n              constructor(operator, left, right) {\n                super();\n                __publicField(this, \"type\", \"BinaryExpression\");\n                this.operator = operator;\n                this.left = left;\n                this.right = right;\n              }\n            };\n            var FilterExpression = class extends Expression {\n              constructor(operand, filter) {\n                super();\n                __publicField(this, \"type\", \"FilterExpression\");\n                this.operand = operand;\n                this.filter = filter;\n              }\n            };\n            var SelectExpression = class extends Expression {\n              constructor(iterable, test) {\n                super();\n                __publicField(this, \"type\", \"SelectExpression\");\n                this.iterable = iterable;\n                this.test = test;\n              }\n            };\n            var TestExpression = class extends Expression {\n              constructor(operand, negate, test) {\n                super();\n                __publicField(this, \"type\", \"TestExpression\");\n                this.operand = operand;\n                this.negate = negate;\n                this.test = test;\n              }\n            };\n            var UnaryExpression = class extends Expression {\n              constructor(operator, argument) {\n                super();\n                __publicField(this, \"type\", \"UnaryExpression\");\n                this.operator = operator;\n                this.argument = argument;\n              }\n            };\n            var SliceExpression = class extends Expression {\n              constructor(start = void 0, stop = void 0, step = void 0) {\n                super();\n                __publicField(this, \"type\", \"SliceExpression\");\n                this.start = start;\n                this.stop = stop;\n                this.step = step;\n              }\n            };\n            var KeywordArgumentExpression = class extends Expression {\n              constructor(key, value) {\n                super();\n                __publicField(this, \"type\", \"KeywordArgumentExpression\");\n                this.key = key;\n                this.value = value;\n              }\n            };\n            function parse(tokens) {\n              const program = new Program([]);\n              let current = 0;\n              function expect(type, error) {\n                const prev = tokens[current++];\n                if (!prev || prev.type !== type) {\n                  throw new Error(`Parser Error: ${error}. ${prev.type} !== ${type}.`);\n                }\n                return prev;\n              }\n              function parseAny() {\n                switch (tokens[current].type) {\n                  case TOKEN_TYPES.Text:\n                    return parseText();\n                  case TOKEN_TYPES.OpenStatement:\n                    return parseJinjaStatement();\n                  case TOKEN_TYPES.OpenExpression:\n                    return parseJinjaExpression();\n                  default:\n                    throw new SyntaxError(`Unexpected token type: ${tokens[current].type}`);\n                }\n              }\n              function not(...types) {\n                return current + types.length <= tokens.length && types.some((type, i) => type !== tokens[current + i].type);\n              }\n              function is2(...types) {\n                return current + types.length <= tokens.length && types.every((type, i) => type === tokens[current + i].type);\n              }\n              function parseText() {\n                return new StringLiteral(expect(TOKEN_TYPES.Text, \"Expected text token\").value);\n              }\n              function parseJinjaStatement() {\n                expect(TOKEN_TYPES.OpenStatement, \"Expected opening statement token\");\n                let result;\n                switch (tokens[current].type) {\n                  case TOKEN_TYPES.Set:\n                    ++current;\n                    result = parseSetStatement();\n                    expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n                    break;\n                  case TOKEN_TYPES.If:\n                    ++current;\n                    result = parseIfStatement();\n                    expect(TOKEN_TYPES.OpenStatement, \"Expected {% token\");\n                    expect(TOKEN_TYPES.EndIf, \"Expected endif token\");\n                    expect(TOKEN_TYPES.CloseStatement, \"Expected %} token\");\n                    break;\n                  case TOKEN_TYPES.Macro:\n                    ++current;\n                    result = parseMacroStatement();\n                    expect(TOKEN_TYPES.OpenStatement, \"Expected {% token\");\n                    expect(TOKEN_TYPES.EndMacro, \"Expected endmacro token\");\n                    expect(TOKEN_TYPES.CloseStatement, \"Expected %} token\");\n                    break;\n                  case TOKEN_TYPES.For:\n                    ++current;\n                    result = parseForStatement();\n                    expect(TOKEN_TYPES.OpenStatement, \"Expected {% token\");\n                    expect(TOKEN_TYPES.EndFor, \"Expected endfor token\");\n                    expect(TOKEN_TYPES.CloseStatement, \"Expected %} token\");\n                    break;\n                  default:\n                    throw new SyntaxError(`Unknown statement type: ${tokens[current].type}`);\n                }\n                return result;\n              }\n              function parseJinjaExpression() {\n                expect(TOKEN_TYPES.OpenExpression, \"Expected opening expression token\");\n                const result = parseExpression();\n                expect(TOKEN_TYPES.CloseExpression, \"Expected closing expression token\");\n                return result;\n              }\n              function parseSetStatement() {\n                const left = parseExpression();\n                if (is2(TOKEN_TYPES.Equals)) {\n                  ++current;\n                  const value = parseExpression();\n                  return new SetStatement(left, value, []);\n                } else {\n                  const body = [];\n                  expect(TOKEN_TYPES.CloseStatement, \"Expected %} token\");\n                  while (!(tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type === TOKEN_TYPES.EndSet)) {\n                    const another = parseAny();\n                    body.push(another);\n                  }\n                  expect(TOKEN_TYPES.OpenStatement, \"Expected {% token\");\n                  expect(TOKEN_TYPES.EndSet, \"Expected endset token\");\n                  return new SetStatement(left, null, body);\n                }\n              }\n              function parseIfStatement() {\n                const test = parseExpression();\n                expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n                const body = [];\n                const alternate = [];\n                while (!(tokens[current]?.type === TOKEN_TYPES.OpenStatement && (tokens[current + 1]?.type === TOKEN_TYPES.ElseIf || tokens[current + 1]?.type === TOKEN_TYPES.Else || tokens[current + 1]?.type === TOKEN_TYPES.EndIf))) {\n                  body.push(parseAny());\n                }\n                if (tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type !== TOKEN_TYPES.EndIf) {\n                  ++current;\n                  if (is2(TOKEN_TYPES.ElseIf)) {\n                    expect(TOKEN_TYPES.ElseIf, \"Expected elseif token\");\n                    alternate.push(parseIfStatement());\n                  } else {\n                    expect(TOKEN_TYPES.Else, \"Expected else token\");\n                    expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n                    while (!(tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type === TOKEN_TYPES.EndIf)) {\n                      alternate.push(parseAny());\n                    }\n                  }\n                }\n                return new If2(test, body, alternate);\n              }\n              function parseMacroStatement() {\n                const name = parsePrimaryExpression();\n                if (name.type !== \"Identifier\") {\n                  throw new SyntaxError(`Expected identifier following macro statement`);\n                }\n                const args = parseArgs();\n                expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n                const body = [];\n                while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndMacro)) {\n                  body.push(parseAny());\n                }\n                return new Macro(name, args, body);\n              }\n              function parseExpressionSequence(primary = false) {\n                const fn = primary ? parsePrimaryExpression : parseExpression;\n                const expressions = [fn()];\n                const isTuple = is2(TOKEN_TYPES.Comma);\n                while (isTuple) {\n                  ++current;\n                  expressions.push(fn());\n                  if (!is2(TOKEN_TYPES.Comma)) {\n                    break;\n                  }\n                }\n                return isTuple ? new TupleLiteral(expressions) : expressions[0];\n              }\n              function parseForStatement() {\n                const loopVariable = parseExpressionSequence(true);\n                if (!(loopVariable instanceof Identifier || loopVariable instanceof TupleLiteral)) {\n                  throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${loopVariable.type} instead`);\n                }\n                expect(TOKEN_TYPES.In, \"Expected `in` keyword following loop variable\");\n                const iterable = parseExpression();\n                expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n                const body = [];\n                while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndFor) && not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.Else)) {\n                  body.push(parseAny());\n                }\n                const alternative = [];\n                if (is2(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.Else)) {\n                  ++current;\n                  ++current;\n                  expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n                  while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndFor)) {\n                    alternative.push(parseAny());\n                  }\n                }\n                return new For(loopVariable, iterable, body, alternative);\n              }\n              function parseExpression() {\n                return parseIfExpression();\n              }\n              function parseIfExpression() {\n                const a = parseLogicalOrExpression();\n                if (is2(TOKEN_TYPES.If)) {\n                  ++current;\n                  const predicate = parseLogicalOrExpression();\n                  if (is2(TOKEN_TYPES.Else)) {\n                    ++current;\n                    const b = parseLogicalOrExpression();\n                    return new If2(predicate, [a], [b]);\n                  } else {\n                    return new SelectExpression(a, predicate);\n                  }\n                }\n                return a;\n              }\n              function parseLogicalOrExpression() {\n                let left = parseLogicalAndExpression();\n                while (is2(TOKEN_TYPES.Or)) {\n                  const operator = tokens[current];\n                  ++current;\n                  const right = parseLogicalAndExpression();\n                  left = new BinaryExpression(operator, left, right);\n                }\n                return left;\n              }\n              function parseLogicalAndExpression() {\n                let left = parseLogicalNegationExpression();\n                while (is2(TOKEN_TYPES.And)) {\n                  const operator = tokens[current];\n                  ++current;\n                  const right = parseLogicalNegationExpression();\n                  left = new BinaryExpression(operator, left, right);\n                }\n                return left;\n              }\n              function parseLogicalNegationExpression() {\n                let right;\n                while (is2(TOKEN_TYPES.Not)) {\n                  const operator = tokens[current];\n                  ++current;\n                  const arg = parseLogicalNegationExpression();\n                  right = new UnaryExpression(operator, arg);\n                }\n                return right ?? parseComparisonExpression();\n              }\n              function parseComparisonExpression() {\n                let left = parseAdditiveExpression();\n                while (is2(TOKEN_TYPES.ComparisonBinaryOperator) || is2(TOKEN_TYPES.In) || is2(TOKEN_TYPES.NotIn)) {\n                  const operator = tokens[current];\n                  ++current;\n                  const right = parseAdditiveExpression();\n                  left = new BinaryExpression(operator, left, right);\n                }\n                return left;\n              }\n              function parseAdditiveExpression() {\n                let left = parseMultiplicativeExpression();\n                while (is2(TOKEN_TYPES.AdditiveBinaryOperator)) {\n                  const operator = tokens[current];\n                  ++current;\n                  const right = parseMultiplicativeExpression();\n                  left = new BinaryExpression(operator, left, right);\n                }\n                return left;\n              }\n              function parseCallMemberExpression() {\n                const member = parseMemberExpression(parsePrimaryExpression());\n                if (is2(TOKEN_TYPES.OpenParen)) {\n                  return parseCallExpression(member);\n                }\n                return member;\n              }\n              function parseCallExpression(callee) {\n                let expression = new CallExpression(callee, parseArgs());\n                expression = parseMemberExpression(expression);\n                if (is2(TOKEN_TYPES.OpenParen)) {\n                  expression = parseCallExpression(expression);\n                }\n                return expression;\n              }\n              function parseArgs() {\n                expect(TOKEN_TYPES.OpenParen, \"Expected opening parenthesis for arguments list\");\n                const args = parseArgumentsList();\n                expect(TOKEN_TYPES.CloseParen, \"Expected closing parenthesis for arguments list\");\n                return args;\n              }\n              function parseArgumentsList() {\n                const args = [];\n                while (!is2(TOKEN_TYPES.CloseParen)) {\n                  let argument = parseExpression();\n                  if (is2(TOKEN_TYPES.Equals)) {\n                    ++current;\n                    if (!(argument instanceof Identifier)) {\n                      throw new SyntaxError(`Expected identifier for keyword argument`);\n                    }\n                    const value = parseExpression();\n                    argument = new KeywordArgumentExpression(argument, value);\n                  }\n                  args.push(argument);\n                  if (is2(TOKEN_TYPES.Comma)) {\n                    ++current;\n                  }\n                }\n                return args;\n              }\n              function parseMemberExpressionArgumentsList() {\n                const slices = [];\n                let isSlice = false;\n                while (!is2(TOKEN_TYPES.CloseSquareBracket)) {\n                  if (is2(TOKEN_TYPES.Colon)) {\n                    slices.push(void 0);\n                    ++current;\n                    isSlice = true;\n                  } else {\n                    slices.push(parseExpression());\n                    if (is2(TOKEN_TYPES.Colon)) {\n                      ++current;\n                      isSlice = true;\n                    }\n                  }\n                }\n                if (slices.length === 0) {\n                  throw new SyntaxError(`Expected at least one argument for member/slice expression`);\n                }\n                if (isSlice) {\n                  if (slices.length > 3) {\n                    throw new SyntaxError(`Expected 0-3 arguments for slice expression`);\n                  }\n                  return new SliceExpression(...slices);\n                }\n                return slices[0];\n              }\n              function parseMemberExpression(object) {\n                while (is2(TOKEN_TYPES.Dot) || is2(TOKEN_TYPES.OpenSquareBracket)) {\n                  const operator = tokens[current];\n                  ++current;\n                  let property;\n                  const computed = operator.type !== TOKEN_TYPES.Dot;\n                  if (computed) {\n                    property = parseMemberExpressionArgumentsList();\n                    expect(TOKEN_TYPES.CloseSquareBracket, \"Expected closing square bracket\");\n                  } else {\n                    property = parsePrimaryExpression();\n                    if (property.type !== \"Identifier\") {\n                      throw new SyntaxError(`Expected identifier following dot operator`);\n                    }\n                  }\n                  object = new MemberExpression(object, property, computed);\n                }\n                return object;\n              }\n              function parseMultiplicativeExpression() {\n                let left = parseTestExpression();\n                while (is2(TOKEN_TYPES.MultiplicativeBinaryOperator)) {\n                  const operator = tokens[current];\n                  ++current;\n                  const right = parseTestExpression();\n                  left = new BinaryExpression(operator, left, right);\n                }\n                return left;\n              }\n              function parseTestExpression() {\n                let operand = parseFilterExpression();\n                while (is2(TOKEN_TYPES.Is)) {\n                  ++current;\n                  const negate = is2(TOKEN_TYPES.Not);\n                  if (negate) {\n                    ++current;\n                  }\n                  let filter = parsePrimaryExpression();\n                  if (filter instanceof BooleanLiteral) {\n                    filter = new Identifier(filter.value.toString());\n                  } else if (filter instanceof NullLiteral) {\n                    filter = new Identifier(\"none\");\n                  }\n                  if (!(filter instanceof Identifier)) {\n                    throw new SyntaxError(`Expected identifier for the test`);\n                  }\n                  operand = new TestExpression(operand, negate, filter);\n                }\n                return operand;\n              }\n              function parseFilterExpression() {\n                let operand = parseCallMemberExpression();\n                while (is2(TOKEN_TYPES.Pipe)) {\n                  ++current;\n                  let filter = parsePrimaryExpression();\n                  if (!(filter instanceof Identifier)) {\n                    throw new SyntaxError(`Expected identifier for the filter`);\n                  }\n                  if (is2(TOKEN_TYPES.OpenParen)) {\n                    filter = parseCallExpression(filter);\n                  }\n                  operand = new FilterExpression(operand, filter);\n                }\n                return operand;\n              }\n              function parsePrimaryExpression() {\n                const token = tokens[current];\n                switch (token.type) {\n                  case TOKEN_TYPES.NumericLiteral:\n                    ++current;\n                    return new NumericLiteral(Number(token.value));\n                  case TOKEN_TYPES.StringLiteral:\n                    ++current;\n                    return new StringLiteral(token.value);\n                  case TOKEN_TYPES.BooleanLiteral:\n                    ++current;\n                    return new BooleanLiteral(token.value.toLowerCase() === \"true\");\n                  case TOKEN_TYPES.NullLiteral:\n                    ++current;\n                    return new NullLiteral(null);\n                  case TOKEN_TYPES.Identifier:\n                    ++current;\n                    return new Identifier(token.value);\n                  case TOKEN_TYPES.OpenParen: {\n                    ++current;\n                    const expression = parseExpressionSequence();\n                    if (tokens[current].type !== TOKEN_TYPES.CloseParen) {\n                      throw new SyntaxError(`Expected closing parenthesis, got ${tokens[current].type} instead`);\n                    }\n                    ++current;\n                    return expression;\n                  }\n                  case TOKEN_TYPES.OpenSquareBracket: {\n                    ++current;\n                    const values = [];\n                    while (!is2(TOKEN_TYPES.CloseSquareBracket)) {\n                      values.push(parseExpression());\n                      if (is2(TOKEN_TYPES.Comma)) {\n                        ++current;\n                      }\n                    }\n                    ++current;\n                    return new ArrayLiteral(values);\n                  }\n                  case TOKEN_TYPES.OpenCurlyBracket: {\n                    ++current;\n                    const values = /* @__PURE__ */ new Map();\n                    while (!is2(TOKEN_TYPES.CloseCurlyBracket)) {\n                      const key = parseExpression();\n                      expect(TOKEN_TYPES.Colon, \"Expected colon between key and value in object literal\");\n                      const value = parseExpression();\n                      values.set(key, value);\n                      if (is2(TOKEN_TYPES.Comma)) {\n                        ++current;\n                      }\n                    }\n                    ++current;\n                    return new ObjectLiteral(values);\n                  }\n                  default:\n                    throw new SyntaxError(`Unexpected token: ${token.type}`);\n                }\n              }\n              while (current < tokens.length) {\n                program.body.push(parseAny());\n              }\n              return program;\n            }\n            function range(start, stop, step = 1) {\n              if (stop === void 0) {\n                stop = start;\n                start = 0;\n              }\n              const result = [];\n              for (let i = start; i < stop; i += step) {\n                result.push(i);\n              }\n              return result;\n            }\n            function slice(array, start, stop, step = 1) {\n              const direction = Math.sign(step);\n              if (direction >= 0) {\n                start = (start ?? (start = 0)) < 0 ? Math.max(array.length + start, 0) : Math.min(start, array.length);\n                stop = (stop ?? (stop = array.length)) < 0 ? Math.max(array.length + stop, 0) : Math.min(stop, array.length);\n              } else {\n                start = (start ?? (start = array.length - 1)) < 0 ? Math.max(array.length + start, -1) : Math.min(start, array.length - 1);\n                stop = (stop ?? (stop = -1)) < -1 ? Math.max(array.length + stop, -1) : Math.min(stop, array.length - 1);\n              }\n              const result = [];\n              for (let i = start; direction * i < direction * stop; i += step) {\n                result.push(array[i]);\n              }\n              return result;\n            }\n            function titleCase(value) {\n              return value.replace(/\\b\\w/g, (c) => c.toUpperCase());\n            }\n            var RuntimeValue = class {\n              /**\n               * Creates a new RuntimeValue.\n               */\n              constructor(value = void 0) {\n                __publicField(this, \"type\", \"RuntimeValue\");\n                __publicField(this, \"value\");\n                /**\n                 * A collection of built-in functions for this type.\n                 */\n                __publicField(this, \"builtins\", /* @__PURE__ */ new Map());\n                this.value = value;\n              }\n              /**\n               * Determines truthiness or falsiness of the runtime value.\n               * This function should be overridden by subclasses if it has custom truthiness criteria.\n               * @returns {BooleanValue} BooleanValue(true) if the value is truthy, BooleanValue(false) otherwise.\n               */\n              __bool__() {\n                return new BooleanValue(!!this.value);\n              }\n            };\n            var NumericValue = class extends RuntimeValue {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"NumericValue\");\n              }\n            };\n            var StringValue = class extends RuntimeValue {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"StringValue\");\n                __publicField(this, \"builtins\", /* @__PURE__ */ new Map([\n                  [\n                    \"upper\",\n                    new FunctionValue(() => {\n                      return new StringValue(this.value.toUpperCase());\n                    })\n                  ],\n                  [\n                    \"lower\",\n                    new FunctionValue(() => {\n                      return new StringValue(this.value.toLowerCase());\n                    })\n                  ],\n                  [\n                    \"strip\",\n                    new FunctionValue(() => {\n                      return new StringValue(this.value.trim());\n                    })\n                  ],\n                  [\n                    \"title\",\n                    new FunctionValue(() => {\n                      return new StringValue(titleCase(this.value));\n                    })\n                  ],\n                  [\"length\", new NumericValue(this.value.length)],\n                  [\n                    \"rstrip\",\n                    new FunctionValue(() => {\n                      return new StringValue(this.value.trimEnd());\n                    })\n                  ],\n                  [\n                    \"lstrip\",\n                    new FunctionValue(() => {\n                      return new StringValue(this.value.trimStart());\n                    })\n                  ],\n                  [\n                    \"split\",\n                    // follows Python's `str.split(sep=None, maxsplit=-1)` function behavior\n                    // https://docs.python.org/3.13/library/stdtypes.html#str.split\n                    new FunctionValue((args) => {\n                      const sep = args[0] ?? new NullValue();\n                      if (!(sep instanceof StringValue || sep instanceof NullValue)) {\n                        throw new Error(\"sep argument must be a string or null\");\n                      }\n                      const maxsplit = args[1] ?? new NumericValue(-1);\n                      if (!(maxsplit instanceof NumericValue)) {\n                        throw new Error(\"maxsplit argument must be a number\");\n                      }\n                      let result = [];\n                      if (sep instanceof NullValue) {\n                        const text = this.value.trimStart();\n                        for (const { 0: match, index } of text.matchAll(/\\S+/g)) {\n                          if (maxsplit.value !== -1 && result.length >= maxsplit.value && index !== void 0) {\n                            result.push(match + text.slice(index + match.length));\n                            break;\n                          }\n                          result.push(match);\n                        }\n                      } else {\n                        if (sep.value === \"\") {\n                          throw new Error(\"empty separator\");\n                        }\n                        result = this.value.split(sep.value);\n                        if (maxsplit.value !== -1 && result.length > maxsplit.value) {\n                          result.push(result.splice(maxsplit.value).join(sep.value));\n                        }\n                      }\n                      return new ArrayValue(result.map((part) => new StringValue(part)));\n                    })\n                  ]\n                ]));\n              }\n            };\n            var BooleanValue = class extends RuntimeValue {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"BooleanValue\");\n              }\n            };\n            var ObjectValue = class extends RuntimeValue {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"ObjectValue\");\n                __publicField(this, \"builtins\", /* @__PURE__ */ new Map([\n                  [\n                    \"get\",\n                    new FunctionValue(([key, defaultValue]) => {\n                      if (!(key instanceof StringValue)) {\n                        throw new Error(`Object key must be a string: got ${key.type}`);\n                      }\n                      return this.value.get(key.value) ?? defaultValue ?? new NullValue();\n                    })\n                  ],\n                  [\n                    \"items\",\n                    new FunctionValue(() => {\n                      return new ArrayValue(\n                        Array.from(this.value.entries()).map(([key, value]) => new ArrayValue([new StringValue(key), value]))\n                      );\n                    })\n                  ]\n                ]));\n              }\n              /**\n               * NOTE: necessary to override since all JavaScript arrays are considered truthy,\n               * while only non-empty Python arrays are consider truthy.\n               *\n               * e.g.,\n               *  - JavaScript:  {} && 5 -> 5\n               *  - Python:      {} and 5 -> {}\n               */\n              __bool__() {\n                return new BooleanValue(this.value.size > 0);\n              }\n            };\n            var KeywordArgumentsValue = class extends ObjectValue {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"KeywordArgumentsValue\");\n              }\n            };\n            var ArrayValue = class extends RuntimeValue {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"ArrayValue\");\n                __publicField(this, \"builtins\", /* @__PURE__ */ new Map([[\"length\", new NumericValue(this.value.length)]]));\n              }\n              /**\n               * NOTE: necessary to override since all JavaScript arrays are considered truthy,\n               * while only non-empty Python arrays are consider truthy.\n               *\n               * e.g.,\n               *  - JavaScript:  [] && 5 -> 5\n               *  - Python:      [] and 5 -> []\n               */\n              __bool__() {\n                return new BooleanValue(this.value.length > 0);\n              }\n            };\n            var TupleValue = class extends ArrayValue {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"TupleValue\");\n              }\n            };\n            var FunctionValue = class extends RuntimeValue {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"FunctionValue\");\n              }\n            };\n            var NullValue = class extends RuntimeValue {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"NullValue\");\n              }\n            };\n            var UndefinedValue = class extends RuntimeValue {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"type\", \"UndefinedValue\");\n              }\n            };\n            var Environment = class {\n              constructor(parent) {\n                /**\n                 * The variables declared in this environment.\n                 */\n                __publicField(this, \"variables\", /* @__PURE__ */ new Map([\n                  [\n                    \"namespace\",\n                    new FunctionValue((args) => {\n                      if (args.length === 0) {\n                        return new ObjectValue(/* @__PURE__ */ new Map());\n                      }\n                      if (args.length !== 1 || !(args[0] instanceof ObjectValue)) {\n                        throw new Error(\"`namespace` expects either zero arguments or a single object argument\");\n                      }\n                      return args[0];\n                    })\n                  ]\n                ]));\n                /**\n                 * The tests available in this environment.\n                 */\n                __publicField(this, \"tests\", /* @__PURE__ */ new Map([\n                  [\"boolean\", (operand) => operand.type === \"BooleanValue\"],\n                  [\"callable\", (operand) => operand instanceof FunctionValue],\n                  [\n                    \"odd\",\n                    (operand) => {\n                      if (operand.type !== \"NumericValue\") {\n                        throw new Error(`Cannot apply test \"odd\" to type: ${operand.type}`);\n                      }\n                      return operand.value % 2 !== 0;\n                    }\n                  ],\n                  [\n                    \"even\",\n                    (operand) => {\n                      if (operand.type !== \"NumericValue\") {\n                        throw new Error(`Cannot apply test \"even\" to type: ${operand.type}`);\n                      }\n                      return operand.value % 2 === 0;\n                    }\n                  ],\n                  [\"false\", (operand) => operand.type === \"BooleanValue\" && !operand.value],\n                  [\"true\", (operand) => operand.type === \"BooleanValue\" && operand.value],\n                  [\"none\", (operand) => operand.type === \"NullValue\"],\n                  [\"string\", (operand) => operand.type === \"StringValue\"],\n                  [\"number\", (operand) => operand.type === \"NumericValue\"],\n                  [\"integer\", (operand) => operand.type === \"NumericValue\" && Number.isInteger(operand.value)],\n                  [\"iterable\", (operand) => operand.type === \"ArrayValue\" || operand.type === \"StringValue\"],\n                  [\"mapping\", (operand) => operand.type === \"ObjectValue\"],\n                  [\n                    \"lower\",\n                    (operand) => {\n                      const str = operand.value;\n                      return operand.type === \"StringValue\" && str === str.toLowerCase();\n                    }\n                  ],\n                  [\n                    \"upper\",\n                    (operand) => {\n                      const str = operand.value;\n                      return operand.type === \"StringValue\" && str === str.toUpperCase();\n                    }\n                  ],\n                  [\"none\", (operand) => operand.type === \"NullValue\"],\n                  [\"defined\", (operand) => operand.type !== \"UndefinedValue\"],\n                  [\"undefined\", (operand) => operand.type === \"UndefinedValue\"],\n                  [\"equalto\", (a, b) => a.value === b.value],\n                  [\"eq\", (a, b) => a.value === b.value]\n                ]));\n                this.parent = parent;\n              }\n              /**\n               * Set the value of a variable in the current environment.\n               */\n              set(name, value) {\n                return this.declareVariable(name, convertToRuntimeValues(value));\n              }\n              declareVariable(name, value) {\n                if (this.variables.has(name)) {\n                  throw new SyntaxError(`Variable already declared: ${name}`);\n                }\n                this.variables.set(name, value);\n                return value;\n              }\n              // private assignVariable(name: string, value: AnyRuntimeValue): AnyRuntimeValue {\n              // \tconst env = this.resolve(name);\n              // \tenv.variables.set(name, value);\n              // \treturn value;\n              // }\n              /**\n               * Set variable in the current scope.\n               * See https://jinja.palletsprojects.com/en/3.0.x/templates/#assignments for more information.\n               */\n              setVariable(name, value) {\n                this.variables.set(name, value);\n                return value;\n              }\n              /**\n               * Resolve the environment in which the variable is declared.\n               * @param {string} name The name of the variable.\n               * @returns {Environment} The environment in which the variable is declared.\n               */\n              resolve(name) {\n                if (this.variables.has(name)) {\n                  return this;\n                }\n                if (this.parent) {\n                  return this.parent.resolve(name);\n                }\n                throw new Error(`Unknown variable: ${name}`);\n              }\n              lookupVariable(name) {\n                try {\n                  return this.resolve(name).variables.get(name) ?? new UndefinedValue();\n                } catch {\n                  return new UndefinedValue();\n                }\n              }\n            };\n            var Interpreter = class {\n              constructor(env3) {\n                __publicField(this, \"global\");\n                this.global = env3 ?? new Environment();\n              }\n              /**\n               * Run the program.\n               */\n              run(program) {\n                return this.evaluate(program, this.global);\n              }\n              /**\n               * Evaluates expressions following the binary operation type.\n               */\n              evaluateBinaryExpression(node, environment) {\n                const left = this.evaluate(node.left, environment);\n                switch (node.operator.value) {\n                  case \"and\":\n                    return left.__bool__().value ? this.evaluate(node.right, environment) : left;\n                  case \"or\":\n                    return left.__bool__().value ? left : this.evaluate(node.right, environment);\n                }\n                const right = this.evaluate(node.right, environment);\n                switch (node.operator.value) {\n                  case \"==\":\n                    return new BooleanValue(left.value == right.value);\n                  case \"!=\":\n                    return new BooleanValue(left.value != right.value);\n                }\n                if (left instanceof UndefinedValue || right instanceof UndefinedValue) {\n                  throw new Error(\"Cannot perform operation on undefined values\");\n                } else if (left instanceof NullValue || right instanceof NullValue) {\n                  throw new Error(\"Cannot perform operation on null values\");\n                } else if (left instanceof NumericValue && right instanceof NumericValue) {\n                  switch (node.operator.value) {\n                    case \"+\":\n                      return new NumericValue(left.value + right.value);\n                    case \"-\":\n                      return new NumericValue(left.value - right.value);\n                    case \"*\":\n                      return new NumericValue(left.value * right.value);\n                    case \"/\":\n                      return new NumericValue(left.value / right.value);\n                    case \"%\":\n                      return new NumericValue(left.value % right.value);\n                    case \"<\":\n                      return new BooleanValue(left.value < right.value);\n                    case \">\":\n                      return new BooleanValue(left.value > right.value);\n                    case \">=\":\n                      return new BooleanValue(left.value >= right.value);\n                    case \"<=\":\n                      return new BooleanValue(left.value <= right.value);\n                  }\n                } else if (left instanceof ArrayValue && right instanceof ArrayValue) {\n                  switch (node.operator.value) {\n                    case \"+\":\n                      return new ArrayValue(left.value.concat(right.value));\n                  }\n                } else if (right instanceof ArrayValue) {\n                  const member = right.value.find((x) => x.value === left.value) !== void 0;\n                  switch (node.operator.value) {\n                    case \"in\":\n                      return new BooleanValue(member);\n                    case \"not in\":\n                      return new BooleanValue(!member);\n                  }\n                }\n                if (left instanceof StringValue || right instanceof StringValue) {\n                  switch (node.operator.value) {\n                    case \"+\":\n                      return new StringValue(left.value.toString() + right.value.toString());\n                  }\n                }\n                if (left instanceof StringValue && right instanceof StringValue) {\n                  switch (node.operator.value) {\n                    case \"in\":\n                      return new BooleanValue(right.value.includes(left.value));\n                    case \"not in\":\n                      return new BooleanValue(!right.value.includes(left.value));\n                  }\n                }\n                if (left instanceof StringValue && right instanceof ObjectValue) {\n                  switch (node.operator.value) {\n                    case \"in\":\n                      return new BooleanValue(right.value.has(left.value));\n                    case \"not in\":\n                      return new BooleanValue(!right.value.has(left.value));\n                  }\n                }\n                throw new SyntaxError(`Unknown operator \"${node.operator.value}\" between ${left.type} and ${right.type}`);\n              }\n              evaluateArguments(args, environment) {\n                const positionalArguments = [];\n                const keywordArguments = /* @__PURE__ */ new Map();\n                for (const argument of args) {\n                  if (argument.type === \"KeywordArgumentExpression\") {\n                    const kwarg = argument;\n                    keywordArguments.set(kwarg.key.value, this.evaluate(kwarg.value, environment));\n                  } else {\n                    if (keywordArguments.size > 0) {\n                      throw new Error(\"Positional arguments must come before keyword arguments\");\n                    }\n                    positionalArguments.push(this.evaluate(argument, environment));\n                  }\n                }\n                return [positionalArguments, keywordArguments];\n              }\n              /**\n               * Evaluates expressions following the filter operation type.\n               */\n              evaluateFilterExpression(node, environment) {\n                const operand = this.evaluate(node.operand, environment);\n                if (node.filter.type === \"Identifier\") {\n                  const filter = node.filter;\n                  if (filter.value === \"tojson\") {\n                    return new StringValue(toJSON(operand));\n                  }\n                  if (operand instanceof ArrayValue) {\n                    switch (filter.value) {\n                      case \"list\":\n                        return operand;\n                      case \"first\":\n                        return operand.value[0];\n                      case \"last\":\n                        return operand.value[operand.value.length - 1];\n                      case \"length\":\n                        return new NumericValue(operand.value.length);\n                      case \"reverse\":\n                        return new ArrayValue(operand.value.reverse());\n                      case \"sort\":\n                        return new ArrayValue(\n                          operand.value.sort((a, b) => {\n                            if (a.type !== b.type) {\n                              throw new Error(`Cannot compare different types: ${a.type} and ${b.type}`);\n                            }\n                            switch (a.type) {\n                              case \"NumericValue\":\n                                return a.value - b.value;\n                              case \"StringValue\":\n                                return a.value.localeCompare(b.value);\n                              default:\n                                throw new Error(`Cannot compare type: ${a.type}`);\n                            }\n                          })\n                        );\n                      case \"join\":\n                        return new StringValue(operand.value.map((x) => x.value).join(\"\"));\n                      case \"string\":\n                        return new StringValue(toJSON(operand));\n                      default:\n                        throw new Error(`Unknown ArrayValue filter: ${filter.value}`);\n                    }\n                  } else if (operand instanceof StringValue) {\n                    switch (filter.value) {\n                      case \"length\":\n                        return new NumericValue(operand.value.length);\n                      case \"upper\":\n                        return new StringValue(operand.value.toUpperCase());\n                      case \"lower\":\n                        return new StringValue(operand.value.toLowerCase());\n                      case \"title\":\n                        return new StringValue(titleCase(operand.value));\n                      case \"capitalize\":\n                        return new StringValue(operand.value.charAt(0).toUpperCase() + operand.value.slice(1));\n                      case \"trim\":\n                        return new StringValue(operand.value.trim());\n                      case \"indent\":\n                        return new StringValue(\n                          operand.value.split(\"\\n\").map(\n                            (x, i) => (\n                              // By default, don't indent the first line or empty lines\n                              i === 0 || x.length === 0 ? x : \"    \" + x\n                            )\n                          ).join(\"\\n\")\n                        );\n                      case \"join\":\n                      case \"string\":\n                        return operand;\n                      default:\n                        throw new Error(`Unknown StringValue filter: ${filter.value}`);\n                    }\n                  } else if (operand instanceof NumericValue) {\n                    switch (filter.value) {\n                      case \"abs\":\n                        return new NumericValue(Math.abs(operand.value));\n                      default:\n                        throw new Error(`Unknown NumericValue filter: ${filter.value}`);\n                    }\n                  } else if (operand instanceof ObjectValue) {\n                    switch (filter.value) {\n                      case \"items\":\n                        return new ArrayValue(\n                          Array.from(operand.value.entries()).map(([key, value]) => new ArrayValue([new StringValue(key), value]))\n                        );\n                      case \"length\":\n                        return new NumericValue(operand.value.size);\n                      default:\n                        throw new Error(`Unknown ObjectValue filter: ${filter.value}`);\n                    }\n                  }\n                  throw new Error(`Cannot apply filter \"${filter.value}\" to type: ${operand.type}`);\n                } else if (node.filter.type === \"CallExpression\") {\n                  const filter = node.filter;\n                  if (filter.callee.type !== \"Identifier\") {\n                    throw new Error(`Unknown filter: ${filter.callee.type}`);\n                  }\n                  const filterName = filter.callee.value;\n                  if (filterName === \"tojson\") {\n                    const [, kwargs] = this.evaluateArguments(filter.args, environment);\n                    const indent = kwargs.get(\"indent\") ?? new NullValue();\n                    if (!(indent instanceof NumericValue || indent instanceof NullValue)) {\n                      throw new Error(\"If set, indent must be a number\");\n                    }\n                    return new StringValue(toJSON(operand, indent.value));\n                  } else if (filterName === \"join\") {\n                    let value;\n                    if (operand instanceof StringValue) {\n                      value = Array.from(operand.value);\n                    } else if (operand instanceof ArrayValue) {\n                      value = operand.value.map((x) => x.value);\n                    } else {\n                      throw new Error(`Cannot apply filter \"${filterName}\" to type: ${operand.type}`);\n                    }\n                    const [args, kwargs] = this.evaluateArguments(filter.args, environment);\n                    const separator = args.at(0) ?? kwargs.get(\"separator\") ?? new StringValue(\"\");\n                    if (!(separator instanceof StringValue)) {\n                      throw new Error(\"separator must be a string\");\n                    }\n                    return new StringValue(value.join(separator.value));\n                  }\n                  if (operand instanceof ArrayValue) {\n                    switch (filterName) {\n                      case \"selectattr\":\n                      case \"rejectattr\": {\n                        const select = filterName === \"selectattr\";\n                        if (operand.value.some((x) => !(x instanceof ObjectValue))) {\n                          throw new Error(`\\`${filterName}\\` can only be applied to array of objects`);\n                        }\n                        if (filter.args.some((x) => x.type !== \"StringLiteral\")) {\n                          throw new Error(`arguments of \\`${filterName}\\` must be strings`);\n                        }\n                        const [attr, testName, value] = filter.args.map((x) => this.evaluate(x, environment));\n                        let testFunction;\n                        if (testName) {\n                          const test = environment.tests.get(testName.value);\n                          if (!test) {\n                            throw new Error(`Unknown test: ${testName.value}`);\n                          }\n                          testFunction = test;\n                        } else {\n                          testFunction = (...x) => x[0].__bool__().value;\n                        }\n                        const filtered = operand.value.filter((item) => {\n                          const a = item.value.get(attr.value);\n                          const result = a ? testFunction(a, value) : false;\n                          return select ? result : !result;\n                        });\n                        return new ArrayValue(filtered);\n                      }\n                      case \"map\": {\n                        const [, kwargs] = this.evaluateArguments(filter.args, environment);\n                        if (kwargs.has(\"attribute\")) {\n                          const attr = kwargs.get(\"attribute\");\n                          if (!(attr instanceof StringValue)) {\n                            throw new Error(\"attribute must be a string\");\n                          }\n                          const defaultValue = kwargs.get(\"default\");\n                          const mapped = operand.value.map((item) => {\n                            if (!(item instanceof ObjectValue)) {\n                              throw new Error(\"items in map must be an object\");\n                            }\n                            return item.value.get(attr.value) ?? defaultValue ?? new UndefinedValue();\n                          });\n                          return new ArrayValue(mapped);\n                        } else {\n                          throw new Error(\"`map` expressions without `attribute` set are not currently supported.\");\n                        }\n                      }\n                    }\n                    throw new Error(`Unknown ArrayValue filter: ${filterName}`);\n                  } else if (operand instanceof StringValue) {\n                    switch (filterName) {\n                      case \"indent\": {\n                        const [args, kwargs] = this.evaluateArguments(filter.args, environment);\n                        const width = args.at(0) ?? kwargs.get(\"width\") ?? new NumericValue(4);\n                        if (!(width instanceof NumericValue)) {\n                          throw new Error(\"width must be a number\");\n                        }\n                        const first = args.at(1) ?? kwargs.get(\"first\") ?? new BooleanValue(false);\n                        const blank = args.at(2) ?? kwargs.get(\"blank\") ?? new BooleanValue(false);\n                        const lines = operand.value.split(\"\\n\");\n                        const indent = \" \".repeat(width.value);\n                        const indented = lines.map(\n                          (x, i) => !first.value && i === 0 || !blank.value && x.length === 0 ? x : indent + x\n                        );\n                        return new StringValue(indented.join(\"\\n\"));\n                      }\n                    }\n                    throw new Error(`Unknown StringValue filter: ${filterName}`);\n                  } else {\n                    throw new Error(`Cannot apply filter \"${filterName}\" to type: ${operand.type}`);\n                  }\n                }\n                throw new Error(`Unknown filter: ${node.filter.type}`);\n              }\n              /**\n               * Evaluates expressions following the test operation type.\n               */\n              evaluateTestExpression(node, environment) {\n                const operand = this.evaluate(node.operand, environment);\n                const test = environment.tests.get(node.test.value);\n                if (!test) {\n                  throw new Error(`Unknown test: ${node.test.value}`);\n                }\n                const result = test(operand);\n                return new BooleanValue(node.negate ? !result : result);\n              }\n              /**\n               * Evaluates expressions following the unary operation type.\n               */\n              evaluateUnaryExpression(node, environment) {\n                const argument = this.evaluate(node.argument, environment);\n                switch (node.operator.value) {\n                  case \"not\":\n                    return new BooleanValue(!argument.value);\n                  default:\n                    throw new SyntaxError(`Unknown operator: ${node.operator.value}`);\n                }\n              }\n              evalProgram(program, environment) {\n                return this.evaluateBlock(program.body, environment);\n              }\n              evaluateBlock(statements, environment) {\n                let result = \"\";\n                for (const statement of statements) {\n                  const lastEvaluated = this.evaluate(statement, environment);\n                  if (lastEvaluated.type !== \"NullValue\" && lastEvaluated.type !== \"UndefinedValue\") {\n                    result += lastEvaluated.value;\n                  }\n                }\n                return new StringValue(result);\n              }\n              evaluateIdentifier(node, environment) {\n                return environment.lookupVariable(node.value);\n              }\n              evaluateCallExpression(expr, environment) {\n                const [args, kwargs] = this.evaluateArguments(expr.args, environment);\n                if (kwargs.size > 0) {\n                  args.push(new KeywordArgumentsValue(kwargs));\n                }\n                const fn = this.evaluate(expr.callee, environment);\n                if (fn.type !== \"FunctionValue\") {\n                  throw new Error(`Cannot call something that is not a function: got ${fn.type}`);\n                }\n                return fn.value(args, environment);\n              }\n              evaluateSliceExpression(object, expr, environment) {\n                if (!(object instanceof ArrayValue || object instanceof StringValue)) {\n                  throw new Error(\"Slice object must be an array or string\");\n                }\n                const start = this.evaluate(expr.start, environment);\n                const stop = this.evaluate(expr.stop, environment);\n                const step = this.evaluate(expr.step, environment);\n                if (!(start instanceof NumericValue || start instanceof UndefinedValue)) {\n                  throw new Error(\"Slice start must be numeric or undefined\");\n                }\n                if (!(stop instanceof NumericValue || stop instanceof UndefinedValue)) {\n                  throw new Error(\"Slice stop must be numeric or undefined\");\n                }\n                if (!(step instanceof NumericValue || step instanceof UndefinedValue)) {\n                  throw new Error(\"Slice step must be numeric or undefined\");\n                }\n                if (object instanceof ArrayValue) {\n                  return new ArrayValue(slice(object.value, start.value, stop.value, step.value));\n                } else {\n                  return new StringValue(slice(Array.from(object.value), start.value, stop.value, step.value).join(\"\"));\n                }\n              }\n              evaluateMemberExpression(expr, environment) {\n                const object = this.evaluate(expr.object, environment);\n                let property;\n                if (expr.computed) {\n                  if (expr.property.type === \"SliceExpression\") {\n                    return this.evaluateSliceExpression(object, expr.property, environment);\n                  } else {\n                    property = this.evaluate(expr.property, environment);\n                  }\n                } else {\n                  property = new StringValue(expr.property.value);\n                }\n                let value;\n                if (object instanceof ObjectValue) {\n                  if (!(property instanceof StringValue)) {\n                    throw new Error(`Cannot access property with non-string: got ${property.type}`);\n                  }\n                  value = object.value.get(property.value) ?? object.builtins.get(property.value);\n                } else if (object instanceof ArrayValue || object instanceof StringValue) {\n                  if (property instanceof NumericValue) {\n                    value = object.value.at(property.value);\n                    if (object instanceof StringValue) {\n                      value = new StringValue(object.value.at(property.value));\n                    }\n                  } else if (property instanceof StringValue) {\n                    value = object.builtins.get(property.value);\n                  } else {\n                    throw new Error(`Cannot access property with non-string/non-number: got ${property.type}`);\n                  }\n                } else {\n                  if (!(property instanceof StringValue)) {\n                    throw new Error(`Cannot access property with non-string: got ${property.type}`);\n                  }\n                  value = object.builtins.get(property.value);\n                }\n                return value instanceof RuntimeValue ? value : new UndefinedValue();\n              }\n              evaluateSet(node, environment) {\n                const rhs = node.value ? this.evaluate(node.value, environment) : this.evaluateBlock(node.body, environment);\n                if (node.assignee.type === \"Identifier\") {\n                  const variableName = node.assignee.value;\n                  environment.setVariable(variableName, rhs);\n                } else if (node.assignee.type === \"MemberExpression\") {\n                  const member = node.assignee;\n                  const object = this.evaluate(member.object, environment);\n                  if (!(object instanceof ObjectValue)) {\n                    throw new Error(\"Cannot assign to member of non-object\");\n                  }\n                  if (member.property.type !== \"Identifier\") {\n                    throw new Error(\"Cannot assign to member with non-identifier property\");\n                  }\n                  object.value.set(member.property.value, rhs);\n                } else {\n                  throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(node.assignee)}`);\n                }\n                return new NullValue();\n              }\n              evaluateIf(node, environment) {\n                const test = this.evaluate(node.test, environment);\n                return this.evaluateBlock(test.__bool__().value ? node.body : node.alternate, environment);\n              }\n              evaluateFor(node, environment) {\n                const scope = new Environment(environment);\n                let test, iterable;\n                if (node.iterable.type === \"SelectExpression\") {\n                  const select = node.iterable;\n                  iterable = this.evaluate(select.iterable, scope);\n                  test = select.test;\n                } else {\n                  iterable = this.evaluate(node.iterable, scope);\n                }\n                if (!(iterable instanceof ArrayValue)) {\n                  throw new Error(`Expected iterable type in for loop: got ${iterable.type}`);\n                }\n                const items = [];\n                const scopeUpdateFunctions = [];\n                for (let i = 0; i < iterable.value.length; ++i) {\n                  const loopScope = new Environment(scope);\n                  const current = iterable.value[i];\n                  let scopeUpdateFunction;\n                  if (node.loopvar.type === \"Identifier\") {\n                    scopeUpdateFunction = (scope2) => scope2.setVariable(node.loopvar.value, current);\n                  } else if (node.loopvar.type === \"TupleLiteral\") {\n                    const loopvar = node.loopvar;\n                    if (current.type !== \"ArrayValue\") {\n                      throw new Error(`Cannot unpack non-iterable type: ${current.type}`);\n                    }\n                    const c = current;\n                    if (loopvar.value.length !== c.value.length) {\n                      throw new Error(`Too ${loopvar.value.length > c.value.length ? \"few\" : \"many\"} items to unpack`);\n                    }\n                    scopeUpdateFunction = (scope2) => {\n                      for (let j = 0; j < loopvar.value.length; ++j) {\n                        if (loopvar.value[j].type !== \"Identifier\") {\n                          throw new Error(`Cannot unpack non-identifier type: ${loopvar.value[j].type}`);\n                        }\n                        scope2.setVariable(loopvar.value[j].value, c.value[j]);\n                      }\n                    };\n                  } else {\n                    throw new Error(`Invalid loop variable(s): ${node.loopvar.type}`);\n                  }\n                  if (test) {\n                    scopeUpdateFunction(loopScope);\n                    const testValue = this.evaluate(test, loopScope);\n                    if (!testValue.__bool__().value) {\n                      continue;\n                    }\n                  }\n                  items.push(current);\n                  scopeUpdateFunctions.push(scopeUpdateFunction);\n                }\n                let result = \"\";\n                let noIteration = true;\n                for (let i = 0; i < items.length; ++i) {\n                  const loop = /* @__PURE__ */ new Map([\n                    [\"index\", new NumericValue(i + 1)],\n                    [\"index0\", new NumericValue(i)],\n                    [\"revindex\", new NumericValue(items.length - i)],\n                    [\"revindex0\", new NumericValue(items.length - i - 1)],\n                    [\"first\", new BooleanValue(i === 0)],\n                    [\"last\", new BooleanValue(i === items.length - 1)],\n                    [\"length\", new NumericValue(items.length)],\n                    [\"previtem\", i > 0 ? items[i - 1] : new UndefinedValue()],\n                    [\"nextitem\", i < items.length - 1 ? items[i + 1] : new UndefinedValue()]\n                  ]);\n                  scope.setVariable(\"loop\", new ObjectValue(loop));\n                  scopeUpdateFunctions[i](scope);\n                  const evaluated = this.evaluateBlock(node.body, scope);\n                  result += evaluated.value;\n                  noIteration = false;\n                }\n                if (noIteration) {\n                  const defaultEvaluated = this.evaluateBlock(node.defaultBlock, scope);\n                  result += defaultEvaluated.value;\n                }\n                return new StringValue(result);\n              }\n              /**\n               * See https://jinja.palletsprojects.com/en/3.1.x/templates/#macros for more information.\n               */\n              evaluateMacro(node, environment) {\n                environment.setVariable(\n                  node.name.value,\n                  new FunctionValue((args, scope) => {\n                    const macroScope = new Environment(scope);\n                    args = args.slice();\n                    let kwargs;\n                    if (args.at(-1)?.type === \"KeywordArgumentsValue\") {\n                      kwargs = args.pop();\n                    }\n                    for (let i = 0; i < node.args.length; ++i) {\n                      const nodeArg = node.args[i];\n                      const passedArg = args[i];\n                      if (nodeArg.type === \"Identifier\") {\n                        const identifier = nodeArg;\n                        if (!passedArg) {\n                          throw new Error(`Missing positional argument: ${identifier.value}`);\n                        }\n                        macroScope.setVariable(identifier.value, passedArg);\n                      } else if (nodeArg.type === \"KeywordArgumentExpression\") {\n                        const kwarg = nodeArg;\n                        const value = passedArg ?? // Try positional arguments first\n                        kwargs?.value.get(kwarg.key.value) ?? // Look in user-passed kwargs\n                        this.evaluate(kwarg.value, macroScope);\n                        macroScope.setVariable(kwarg.key.value, value);\n                      } else {\n                        throw new Error(`Unknown argument type: ${nodeArg.type}`);\n                      }\n                    }\n                    return this.evaluateBlock(node.body, macroScope);\n                  })\n                );\n                return new NullValue();\n              }\n              evaluate(statement, environment) {\n                if (statement === void 0)\n                  return new UndefinedValue();\n                switch (statement.type) {\n                  case \"Program\":\n                    return this.evalProgram(statement, environment);\n                  case \"Set\":\n                    return this.evaluateSet(statement, environment);\n                  case \"If\":\n                    return this.evaluateIf(statement, environment);\n                  case \"For\":\n                    return this.evaluateFor(statement, environment);\n                  case \"Macro\":\n                    return this.evaluateMacro(statement, environment);\n                  case \"NumericLiteral\":\n                    return new NumericValue(Number(statement.value));\n                  case \"StringLiteral\":\n                    return new StringValue(statement.value);\n                  case \"BooleanLiteral\":\n                    return new BooleanValue(statement.value);\n                  case \"NullLiteral\":\n                    return new NullValue(statement.value);\n                  case \"ArrayLiteral\":\n                    return new ArrayValue(statement.value.map((x) => this.evaluate(x, environment)));\n                  case \"TupleLiteral\":\n                    return new TupleValue(statement.value.map((x) => this.evaluate(x, environment)));\n                  case \"ObjectLiteral\": {\n                    const mapping = /* @__PURE__ */ new Map();\n                    for (const [key, value] of statement.value) {\n                      const evaluatedKey = this.evaluate(key, environment);\n                      if (!(evaluatedKey instanceof StringValue)) {\n                        throw new Error(`Object keys must be strings: got ${evaluatedKey.type}`);\n                      }\n                      mapping.set(evaluatedKey.value, this.evaluate(value, environment));\n                    }\n                    return new ObjectValue(mapping);\n                  }\n                  case \"Identifier\":\n                    return this.evaluateIdentifier(statement, environment);\n                  case \"CallExpression\":\n                    return this.evaluateCallExpression(statement, environment);\n                  case \"MemberExpression\":\n                    return this.evaluateMemberExpression(statement, environment);\n                  case \"UnaryExpression\":\n                    return this.evaluateUnaryExpression(statement, environment);\n                  case \"BinaryExpression\":\n                    return this.evaluateBinaryExpression(statement, environment);\n                  case \"FilterExpression\":\n                    return this.evaluateFilterExpression(statement, environment);\n                  case \"TestExpression\":\n                    return this.evaluateTestExpression(statement, environment);\n                  default:\n                    throw new SyntaxError(`Unknown node type: ${statement.type}`);\n                }\n              }\n            };\n            function convertToRuntimeValues(input) {\n              switch (typeof input) {\n                case \"number\":\n                  return new NumericValue(input);\n                case \"string\":\n                  return new StringValue(input);\n                case \"boolean\":\n                  return new BooleanValue(input);\n                case \"undefined\":\n                  return new UndefinedValue();\n                case \"object\":\n                  if (input === null) {\n                    return new NullValue();\n                  } else if (Array.isArray(input)) {\n                    return new ArrayValue(input.map(convertToRuntimeValues));\n                  } else {\n                    return new ObjectValue(\n                      new Map(Object.entries(input).map(([key, value]) => [key, convertToRuntimeValues(value)]))\n                    );\n                  }\n                case \"function\":\n                  return new FunctionValue((args, _scope) => {\n                    const result = input(...args.map((x) => x.value)) ?? null;\n                    return convertToRuntimeValues(result);\n                  });\n                default:\n                  throw new Error(`Cannot convert to runtime value: ${input}`);\n              }\n            }\n            function toJSON(input, indent, depth) {\n              const currentDepth = depth ?? 0;\n              switch (input.type) {\n                case \"NullValue\":\n                case \"UndefinedValue\":\n                  return \"null\";\n                case \"NumericValue\":\n                case \"StringValue\":\n                case \"BooleanValue\":\n                  return JSON.stringify(input.value);\n                case \"ArrayValue\":\n                case \"ObjectValue\": {\n                  const indentValue = indent ? \" \".repeat(indent) : \"\";\n                  const basePadding = \"\\n\" + indentValue.repeat(currentDepth);\n                  const childrenPadding = basePadding + indentValue;\n                  if (input.type === \"ArrayValue\") {\n                    const core = input.value.map((x) => toJSON(x, indent, currentDepth + 1));\n                    return indent ? `[${childrenPadding}${core.join(`,${childrenPadding}`)}${basePadding}]` : `[${core.join(\", \")}]`;\n                  } else {\n                    const core = Array.from(input.value.entries()).map(([key, value]) => {\n                      const v = `\"${key}\": ${toJSON(value, indent, currentDepth + 1)}`;\n                      return indent ? `${childrenPadding}${v}` : v;\n                    });\n                    return indent ? `{${core.join(\",\")}${basePadding}}` : `{${core.join(\", \")}}`;\n                  }\n                }\n                default:\n                  throw new Error(`Cannot convert to JSON: ${input.type}`);\n              }\n            }\n            var Template = class {\n              /**\n               * @param {string} template The template string\n               */\n              constructor(template) {\n                __publicField(this, \"parsed\");\n                const tokens = tokenize(template, {\n                  lstrip_blocks: true,\n                  trim_blocks: true\n                });\n                this.parsed = parse(tokens);\n              }\n              render(items) {\n                const env3 = new Environment();\n                env3.set(\"false\", false);\n                env3.set(\"true\", true);\n                env3.set(\"raise_exception\", (args) => {\n                  throw new Error(args);\n                });\n                env3.set(\"range\", range);\n                if (items) {\n                  for (const [key, value] of Object.entries(items)) {\n                    env3.set(key, value);\n                  }\n                }\n                const interpreter = new Interpreter(env3);\n                const result = interpreter.run(this.parsed);\n                return result.value;\n              }\n            };\n          }\n        ),\n        /***/\n        \"./src/backends/onnx.js\": (\n          /*!******************************!*\\\n            !*** ./src/backends/onnx.js ***!\n            \\******************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            var onnxruntime_node__WEBPACK_IMPORTED_MODULE_1___namespace_cache;\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Tensor: () => (\n                /* reexport safe */\n                onnxruntime_common__WEBPACK_IMPORTED_MODULE_3__.Tensor\n              ),\n              /* harmony export */\n              createInferenceSession: () => (\n                /* binding */\n                createInferenceSession\n              ),\n              /* harmony export */\n              deviceToExecutionProviders: () => (\n                /* binding */\n                deviceToExecutionProviders\n              ),\n              /* harmony export */\n              isONNXProxy: () => (\n                /* binding */\n                isONNXProxy\n              ),\n              /* harmony export */\n              isONNXTensor: () => (\n                /* binding */\n                isONNXTensor\n              )\n              /* harmony export */\n            });\n            var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../env.js */\n              \"./src/env.js\"\n            );\n            var onnxruntime_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! onnxruntime-node */\n              \"?2ce3\"\n            );\n            var onnxruntime_web__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! onnxruntime-web */\n              \"onnxruntime-web\"\n            );\n            var onnxruntime_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! onnxruntime-common */\n              \"onnxruntime-common\"\n            );\n            const DEVICE_TO_EXECUTION_PROVIDER_MAPPING = Object.freeze({\n              auto: null,\n              // Auto-detect based on device and environment\n              gpu: null,\n              // Auto-detect GPU\n              cpu: \"cpu\",\n              // CPU\n              wasm: \"wasm\",\n              // WebAssembly\n              webgpu: \"webgpu\",\n              // WebGPU\n              cuda: \"cuda\",\n              // CUDA\n              dml: \"dml\",\n              // DirectML\n              webnn: { name: \"webnn\", deviceType: \"cpu\" },\n              // WebNN (default)\n              \"webnn-npu\": { name: \"webnn\", deviceType: \"npu\" },\n              // WebNN NPU\n              \"webnn-gpu\": { name: \"webnn\", deviceType: \"gpu\" },\n              // WebNN GPU\n              \"webnn-cpu\": { name: \"webnn\", deviceType: \"cpu\" }\n              // WebNN CPU\n            });\n            const supportedDevices = [];\n            let defaultDevices;\n            let ONNX;\n            const ORT_SYMBOL = Symbol.for(\"onnxruntime\");\n            if (ORT_SYMBOL in globalThis) {\n              ONNX = globalThis[ORT_SYMBOL];\n            } else if (_env_js__WEBPACK_IMPORTED_MODULE_0__.apis.IS_NODE_ENV) {\n              ONNX = onnxruntime_node__WEBPACK_IMPORTED_MODULE_1__ ?? (onnxruntime_node__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (onnxruntime_node__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__2.t(onnxruntime_node__WEBPACK_IMPORTED_MODULE_1__, 2)));\n              switch (process.platform) {\n                case \"win32\":\n                  supportedDevices.push(\"dml\");\n                  break;\n                case \"linux\":\n                  if (process.arch === \"x64\") {\n                    supportedDevices.push(\"cuda\");\n                  }\n                  break;\n                case \"darwin\":\n                  break;\n              }\n              supportedDevices.push(\"cpu\");\n              defaultDevices = [\"cpu\"];\n            } else {\n              ONNX = onnxruntime_web__WEBPACK_IMPORTED_MODULE_2__;\n              if (_env_js__WEBPACK_IMPORTED_MODULE_0__.apis.IS_WEBNN_AVAILABLE) {\n                supportedDevices.push(\"webnn-npu\", \"webnn-gpu\", \"webnn-cpu\", \"webnn\");\n              }\n              if (_env_js__WEBPACK_IMPORTED_MODULE_0__.apis.IS_WEBGPU_AVAILABLE) {\n                supportedDevices.push(\"webgpu\");\n              }\n              supportedDevices.push(\"wasm\");\n              defaultDevices = [\"wasm\"];\n            }\n            const InferenceSession3 = ONNX.InferenceSession;\n            function deviceToExecutionProviders(device = null) {\n              if (!device) return defaultDevices;\n              switch (device) {\n                case \"auto\":\n                  return supportedDevices;\n                case \"gpu\":\n                  return supportedDevices.filter(\n                    (x) => [\"webgpu\", \"cuda\", \"dml\", \"webnn-gpu\"].includes(x)\n                  );\n              }\n              if (supportedDevices.includes(device)) {\n                return [DEVICE_TO_EXECUTION_PROVIDER_MAPPING[device] ?? device];\n              }\n              throw new Error(`Unsupported device: \"${device}\". Should be one of: ${supportedDevices.join(\", \")}.`);\n            }\n            let wasmInitPromise = null;\n            async function createInferenceSession(buffer_or_path, session_options, session_config) {\n              if (wasmInitPromise) {\n                await wasmInitPromise;\n              }\n              const sessionPromise = InferenceSession3.create(buffer_or_path, session_options);\n              wasmInitPromise ?? (wasmInitPromise = sessionPromise);\n              const session = await sessionPromise;\n              session.config = session_config;\n              return session;\n            }\n            function isONNXTensor(x) {\n              return x instanceof ONNX.Tensor;\n            }\n            const ONNX_ENV = ONNX?.env;\n            if (ONNX_ENV?.wasm) {\n              if (\n                // @ts-ignore Cannot find name 'ServiceWorkerGlobalScope'.ts(2304)\n                !(typeof ServiceWorkerGlobalScope !== \"undefined\" && self instanceof ServiceWorkerGlobalScope) && !ONNX_ENV.wasm.wasmPaths\n              ) {\n                ONNX_ENV.wasm.wasmPaths = `https://cdn.jsdelivr.net/npm/@huggingface/transformers@${_env_js__WEBPACK_IMPORTED_MODULE_0__.env.version}/dist/`;\n              }\n              ONNX_ENV.wasm.proxy = false;\n            }\n            if (ONNX_ENV?.webgpu) {\n              ONNX_ENV.webgpu.powerPreference = \"high-performance\";\n            }\n            function isONNXProxy() {\n              return ONNX_ENV?.wasm?.proxy;\n            }\n            _env_js__WEBPACK_IMPORTED_MODULE_0__.env.backends.onnx = ONNX_ENV;\n          }\n        ),\n        /***/\n        \"./src/base/feature_extraction_utils.js\": (\n          /*!**********************************************!*\\\n            !*** ./src/base/feature_extraction_utils.js ***!\n            \\**********************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              FeatureExtractor: () => (\n                /* binding */\n                FeatureExtractor\n              ),\n              /* harmony export */\n              validate_audio_inputs: () => (\n                /* binding */\n                validate_audio_inputs\n              )\n              /* harmony export */\n            });\n            var _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../utils/constants.js */\n              \"./src/utils/constants.js\"\n            );\n            var _utils_generic_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../utils/generic.js */\n              \"./src/utils/generic.js\"\n            );\n            var _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../utils/hub.js */\n              \"./src/utils/hub.js\"\n            );\n            class FeatureExtractor extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_1__.Callable {\n              /**\n               * Constructs a new FeatureExtractor instance.\n               *\n               * @param {Object} config The configuration for the feature extractor.\n               */\n              constructor(config) {\n                super();\n                this.config = config;\n              }\n              /**\n               * Instantiate one of the feature extractor classes of the library from a pretrained model.\n               * \n               * The feature extractor class to instantiate is selected based on the `feature_extractor_type` property of\n               * the config object (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)\n               * \n               * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:\n               * - A string, the *model id* of a pretrained feature_extractor hosted inside a model repo on huggingface.co.\n               *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a\n               *   user or organization name, like `dbmdz/bert-base-german-cased`.\n               * - A path to a *directory* containing feature_extractor files, e.g., `./my_model_directory/`.\n               * @param {import('../utils/hub.js').PretrainedOptions} options Additional options for loading the feature_extractor.\n               * \n               * @returns {Promise<FeatureExtractor>} A new instance of the Feature Extractor class.\n               */\n              static async from_pretrained(pretrained_model_name_or_path, options) {\n                const config = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__.getModelJSON)(pretrained_model_name_or_path, _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__.FEATURE_EXTRACTOR_NAME, true, options);\n                return new this(config);\n              }\n            }\n            function validate_audio_inputs(audio, feature_extractor) {\n              if (!(audio instanceof Float32Array || audio instanceof Float64Array)) {\n                throw new Error(\n                  `${feature_extractor} expects input to be a Float32Array or a Float64Array, but got ${audio?.constructor?.name ?? typeof audio} instead. If using the feature extractor directly, remember to use \\`read_audio(url, sampling_rate)\\` to obtain the raw audio data of the file/url.`\n                );\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/base/image_processors_utils.js\": (\n          /*!********************************************!*\\\n            !*** ./src/base/image_processors_utils.js ***!\n            \\********************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              ImageProcessor: () => (\n                /* binding */\n                ImageProcessor\n              ),\n              /* harmony export */\n              center_to_corners_format: () => (\n                /* binding */\n                center_to_corners_format\n              ),\n              /* harmony export */\n              post_process_instance_segmentation: () => (\n                /* binding */\n                post_process_instance_segmentation\n              ),\n              /* harmony export */\n              post_process_object_detection: () => (\n                /* binding */\n                post_process_object_detection\n              ),\n              /* harmony export */\n              post_process_panoptic_segmentation: () => (\n                /* binding */\n                post_process_panoptic_segmentation\n              ),\n              /* harmony export */\n              post_process_semantic_segmentation: () => (\n                /* binding */\n                post_process_semantic_segmentation\n              )\n              /* harmony export */\n            });\n            var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../utils/generic.js */\n              \"./src/utils/generic.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../utils/maths.js */\n              \"./src/utils/maths.js\"\n            );\n            var _utils_image_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ../utils/image.js */\n              \"./src/utils/image.js\"\n            );\n            var _utils_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(\n              /*! ../utils/core.js */\n              \"./src/utils/core.js\"\n            );\n            var _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(\n              /*! ../utils/hub.js */\n              \"./src/utils/hub.js\"\n            );\n            var _utils_constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(\n              /*! ../utils/constants.js */\n              \"./src/utils/constants.js\"\n            );\n            function constraint_to_multiple_of(val, multiple, minVal = 0, maxVal = null) {\n              const a = val / multiple;\n              let x = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.bankers_round)(a) * multiple;\n              if (maxVal !== null && x > maxVal) {\n                x = Math.floor(a) * multiple;\n              }\n              if (x < minVal) {\n                x = Math.ceil(a) * multiple;\n              }\n              return x;\n            }\n            function enforce_size_divisibility([width, height], divisor) {\n              return [\n                Math.max(Math.floor(width / divisor), 1) * divisor,\n                Math.max(Math.floor(height / divisor), 1) * divisor\n              ];\n            }\n            function center_to_corners_format([centerX, centerY, width, height]) {\n              return [\n                centerX - width / 2,\n                centerY - height / 2,\n                centerX + width / 2,\n                centerY + height / 2\n              ];\n            }\n            function post_process_object_detection(outputs, threshold = 0.5, target_sizes = null, is_zero_shot = false) {\n              const out_logits = outputs.logits;\n              const out_bbox = outputs.pred_boxes;\n              const [batch_size, num_boxes, num_classes] = out_logits.dims;\n              if (target_sizes !== null && target_sizes.length !== batch_size) {\n                throw Error(\"Make sure that you pass in as many target sizes as the batch dimension of the logits\");\n              }\n              let toReturn = [];\n              for (let i = 0; i < batch_size; ++i) {\n                let target_size = target_sizes !== null ? target_sizes[i] : null;\n                let info = {\n                  boxes: [],\n                  classes: [],\n                  scores: []\n                };\n                let logits = out_logits[i];\n                let bbox = out_bbox[i];\n                for (let j = 0; j < num_boxes; ++j) {\n                  let logit = logits[j];\n                  let indices = [];\n                  let probs;\n                  if (is_zero_shot) {\n                    probs = logit.sigmoid().data;\n                    for (let k2 = 0; k2 < probs.length; ++k2) {\n                      if (probs[k2] > threshold) {\n                        indices.push(k2);\n                      }\n                    }\n                  } else {\n                    let maxIndex = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.max)(logit.data)[1];\n                    if (maxIndex === num_classes - 1) {\n                      continue;\n                    }\n                    probs = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.softmax)(logit.data);\n                    if (probs[maxIndex] < threshold) {\n                      continue;\n                    }\n                    indices.push(maxIndex);\n                  }\n                  for (const index of indices) {\n                    let box = bbox[j].data;\n                    box = center_to_corners_format(box);\n                    if (target_size !== null) {\n                      box = box.map((x, i2) => x * target_size[(i2 + 1) % 2]);\n                    }\n                    info.boxes.push(box);\n                    info.classes.push(index);\n                    info.scores.push(probs[index]);\n                  }\n                }\n                toReturn.push(info);\n              }\n              return toReturn;\n            }\n            function post_process_semantic_segmentation(outputs, target_sizes = null) {\n              const logits = outputs.logits;\n              const batch_size = logits.dims[0];\n              if (target_sizes !== null && target_sizes.length !== batch_size) {\n                throw Error(\"Make sure that you pass in as many target sizes as the batch dimension of the logits\");\n              }\n              const toReturn = [];\n              for (let i = 0; i < batch_size; ++i) {\n                const target_size = target_sizes !== null ? target_sizes[i] : null;\n                let data = logits[i];\n                if (target_size !== null) {\n                  data = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.interpolate)(data, target_size, \"bilinear\", false);\n                }\n                const [height, width] = target_size ?? data.dims.slice(-2);\n                const segmentation = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\n                  \"int32\",\n                  new Int32Array(height * width),\n                  [height, width]\n                );\n                const buffer = data[0].data;\n                const segmentation_data = segmentation.data;\n                for (let j = 1; j < data.dims[0]; ++j) {\n                  const row = data[j].data;\n                  for (let k2 = 0; k2 < row.length; ++k2) {\n                    if (row[k2] > buffer[k2]) {\n                      buffer[k2] = row[k2];\n                      segmentation_data[k2] = j;\n                    }\n                  }\n                }\n                const hasLabel = new Array(data.dims[0]);\n                for (let j = 0; j < segmentation_data.length; ++j) {\n                  const index = segmentation_data[j];\n                  hasLabel[index] = index;\n                }\n                const labels = hasLabel.filter((x) => x !== void 0);\n                toReturn.push({ segmentation, labels });\n              }\n              return toReturn;\n            }\n            function remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold, num_labels) {\n              const mask_probs_item = [];\n              const pred_scores_item = [];\n              const pred_labels_item = [];\n              for (let j = 0; j < class_logits.dims[0]; ++j) {\n                const cls = class_logits[j];\n                const mask = mask_logits[j];\n                const pred_label = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.max)(cls.data)[1];\n                if (pred_label === num_labels) {\n                  continue;\n                }\n                const scores = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.softmax)(cls.data);\n                const pred_score = scores[pred_label];\n                if (pred_score > object_mask_threshold) {\n                  mask_probs_item.push(mask);\n                  pred_scores_item.push(pred_score);\n                  pred_labels_item.push(pred_label);\n                }\n              }\n              return [mask_probs_item, pred_scores_item, pred_labels_item];\n            }\n            function check_segment_validity(mask_labels, mask_probs, k2, mask_threshold = 0.5, overlap_mask_area_threshold = 0.8) {\n              const mask_k = [];\n              let mask_k_area = 0;\n              let original_area = 0;\n              const mask_probs_k_data = mask_probs[k2].data;\n              for (let i = 0; i < mask_labels.length; ++i) {\n                if (mask_labels[i] === k2) {\n                  mask_k.push(i);\n                  ++mask_k_area;\n                }\n                if (mask_probs_k_data[i] >= mask_threshold) {\n                  ++original_area;\n                }\n              }\n              let mask_exists = mask_k_area > 0 && original_area > 0;\n              if (mask_exists) {\n                let area_ratio = mask_k_area / original_area;\n                mask_exists = area_ratio > overlap_mask_area_threshold;\n              }\n              return [mask_exists, mask_k];\n            }\n            function compute_segments(mask_probs, pred_scores, pred_labels, mask_threshold, overlap_mask_area_threshold, label_ids_to_fuse = null, target_size = null) {\n              const [height, width] = target_size ?? mask_probs[0].dims;\n              const segmentation = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\n                \"int32\",\n                new Int32Array(height * width),\n                [height, width]\n              );\n              const segments = [];\n              if (target_size !== null) {\n                for (let i = 0; i < mask_probs.length; ++i) {\n                  mask_probs[i] = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.interpolate)(mask_probs[i], target_size, \"bilinear\", false);\n                }\n              }\n              const mask_labels = new Int32Array(mask_probs[0].data.length);\n              const bestScores = new Float32Array(mask_probs[0].data.length);\n              for (let i = 0; i < mask_probs.length; ++i) {\n                let score = pred_scores[i];\n                const mask_probs_i_data = mask_probs[i].data;\n                for (let j = 0; j < mask_probs_i_data.length; ++j) {\n                  mask_probs_i_data[j] *= score;\n                  if (mask_probs_i_data[j] > bestScores[j]) {\n                    mask_labels[j] = i;\n                    bestScores[j] = mask_probs_i_data[j];\n                  }\n                }\n              }\n              let current_segment_id = 0;\n              const segmentation_data = segmentation.data;\n              for (let k2 = 0; k2 < pred_labels.length; ++k2) {\n                const pred_class = pred_labels[k2];\n                const [mask_exists, mask_k] = check_segment_validity(\n                  mask_labels,\n                  mask_probs,\n                  k2,\n                  mask_threshold,\n                  overlap_mask_area_threshold\n                );\n                if (!mask_exists) {\n                  continue;\n                }\n                ++current_segment_id;\n                for (const index of mask_k) {\n                  segmentation_data[index] = current_segment_id;\n                }\n                segments.push({\n                  id: current_segment_id,\n                  label_id: pred_class,\n                  // was_fused: should_fuse, TODO\n                  score: pred_scores[k2]\n                });\n              }\n              return [segmentation, segments];\n            }\n            function smart_resize(height, width, factor = 28, min_pixels = 56 * 56, max_pixels = 14 * 14 * 4 * 1280) {\n              if (height < factor || width < factor) {\n                throw new Error(`height:${height} or width:${width} must be larger than factor:${factor}`);\n              } else if (Math.max(height, width) / Math.min(height, width) > 200) {\n                throw new Error(\n                  `absolute aspect ratio must be smaller than 200, got ${Math.max(height, width) / Math.min(height, width)}`\n                );\n              }\n              let h_bar = Math.round(height / factor) * factor;\n              let w_bar = Math.round(width / factor) * factor;\n              if (h_bar * w_bar > max_pixels) {\n                const beta = Math.sqrt(height * width / max_pixels);\n                h_bar = Math.floor(height / beta / factor) * factor;\n                w_bar = Math.floor(width / beta / factor) * factor;\n              } else if (h_bar * w_bar < min_pixels) {\n                const beta = Math.sqrt(min_pixels / (height * width));\n                h_bar = Math.ceil(height * beta / factor) * factor;\n                w_bar = Math.ceil(width * beta / factor) * factor;\n              }\n              return [h_bar, w_bar];\n            }\n            function post_process_panoptic_segmentation(outputs, threshold = 0.5, mask_threshold = 0.5, overlap_mask_area_threshold = 0.8, label_ids_to_fuse = null, target_sizes = null) {\n              if (label_ids_to_fuse === null) {\n                console.warn(\"`label_ids_to_fuse` unset. No instance will be fused.\");\n                label_ids_to_fuse = /* @__PURE__ */ new Set();\n              }\n              const class_queries_logits = outputs.class_queries_logits ?? outputs.logits;\n              const masks_queries_logits = outputs.masks_queries_logits ?? outputs.pred_masks;\n              const mask_probs = masks_queries_logits.sigmoid();\n              let [batch_size, num_queries, num_labels] = class_queries_logits.dims;\n              num_labels -= 1;\n              if (target_sizes !== null && target_sizes.length !== batch_size) {\n                throw Error(\"Make sure that you pass in as many target sizes as the batch dimension of the logits\");\n              }\n              let toReturn = [];\n              for (let i = 0; i < batch_size; ++i) {\n                let target_size = target_sizes !== null ? target_sizes[i] : null;\n                let class_logits = class_queries_logits[i];\n                let mask_logits = mask_probs[i];\n                let [mask_probs_item, pred_scores_item, pred_labels_item] = remove_low_and_no_objects(class_logits, mask_logits, threshold, num_labels);\n                if (pred_labels_item.length === 0) {\n                  let [height, width] = target_size ?? mask_logits.dims.slice(-2);\n                  let segmentation2 = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\n                    \"int32\",\n                    new Int32Array(height * width).fill(-1),\n                    [height, width]\n                  );\n                  toReturn.push({\n                    segmentation: segmentation2,\n                    segments_info: []\n                  });\n                  continue;\n                }\n                let [segmentation, segments] = compute_segments(\n                  mask_probs_item,\n                  pred_scores_item,\n                  pred_labels_item,\n                  mask_threshold,\n                  overlap_mask_area_threshold,\n                  label_ids_to_fuse,\n                  target_size\n                );\n                toReturn.push({\n                  segmentation,\n                  segments_info: segments\n                });\n              }\n              return toReturn;\n            }\n            function post_process_instance_segmentation(outputs, threshold = 0.5, target_sizes = null) {\n              throw new Error(\"`post_process_instance_segmentation` is not yet implemented.\");\n            }\n            class ImageProcessor extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {\n              /**\n               * Constructs a new `ImageProcessor`.\n               * @param {ImageProcessorConfig} config The configuration object.\n               */\n              constructor(config) {\n                super();\n                this.image_mean = config.image_mean ?? config.mean;\n                this.image_std = config.image_std ?? config.std;\n                this.resample = config.resample ?? 2;\n                this.do_rescale = config.do_rescale ?? true;\n                this.rescale_factor = config.rescale_factor ?? 1 / 255;\n                this.do_normalize = config.do_normalize;\n                this.do_thumbnail = config.do_thumbnail;\n                this.size = config.size ?? config.image_size;\n                this.do_resize = config.do_resize ?? this.size !== void 0;\n                this.size_divisibility = config.size_divisibility ?? config.size_divisor;\n                this.do_center_crop = config.do_center_crop;\n                this.crop_size = config.crop_size;\n                this.do_convert_rgb = config.do_convert_rgb ?? true;\n                this.do_crop_margin = config.do_crop_margin;\n                this.pad_size = config.pad_size;\n                this.do_pad = config.do_pad;\n                if (this.do_pad && !this.pad_size && this.size && this.size.width !== void 0 && this.size.height !== void 0) {\n                  this.pad_size = this.size;\n                }\n                this.do_flip_channel_order = config.do_flip_channel_order ?? false;\n                this.config = config;\n              }\n              /**\n               * Resize the image to make a thumbnail. The image is resized so that no dimension is larger than any\n               * corresponding dimension of the specified size.\n               * @param {RawImage} image The image to be resized.\n               * @param {{height:number, width:number}} size The size `{\"height\": h, \"width\": w}` to resize the image to.\n               * @param {string | 0 | 1 | 2 | 3 | 4 | 5} [resample=2] The resampling filter to use.\n               * @returns {Promise<RawImage>} The resized image.\n               */\n              async thumbnail(image, size, resample2 = 2) {\n                const input_height = image.height;\n                const input_width = image.width;\n                const output_height = size.height;\n                const output_width = size.width;\n                let height = Math.min(input_height, output_height);\n                let width = Math.min(input_width, output_width);\n                if (height === input_height && width === input_width) {\n                  return image;\n                }\n                if (input_height > input_width) {\n                  width = Math.floor(input_width * height / input_height);\n                } else if (input_width > input_height) {\n                  height = Math.floor(input_height * width / input_width);\n                }\n                return await image.resize(width, height, { resample: resample2 });\n              }\n              /**\n               * Crops the margin of the image. Gray pixels are considered margin (i.e., pixels with a value below the threshold).\n               * @param {RawImage} image The image to be cropped.\n               * @param {number} gray_threshold Value below which pixels are considered to be gray.\n               * @returns {Promise<RawImage>} The cropped image.\n               */\n              async crop_margin(image, gray_threshold = 200) {\n                const gray_image = image.clone().grayscale();\n                const minValue = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.min)(gray_image.data)[0];\n                const maxValue = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.max)(gray_image.data)[0];\n                const diff = maxValue - minValue;\n                if (diff === 0) {\n                  return image;\n                }\n                const threshold = gray_threshold / 255;\n                let x_min = gray_image.width, y_min = gray_image.height, x_max = 0, y_max = 0;\n                const gray_image_data = gray_image.data;\n                for (let j = 0; j < gray_image.height; ++j) {\n                  const row = j * gray_image.width;\n                  for (let i = 0; i < gray_image.width; ++i) {\n                    if ((gray_image_data[row + i] - minValue) / diff < threshold) {\n                      x_min = Math.min(x_min, i);\n                      y_min = Math.min(y_min, j);\n                      x_max = Math.max(x_max, i);\n                      y_max = Math.max(y_max, j);\n                    }\n                  }\n                }\n                image = await image.crop([x_min, y_min, x_max, y_max]);\n                return image;\n              }\n              /**\n               * Pad the image by a certain amount.\n               * @param {Float32Array} pixelData The pixel data to pad.\n               * @param {number[]} imgDims The dimensions of the image (height, width, channels).\n               * @param {{width:number; height:number}|number|'square'} padSize The dimensions of the padded image.\n               * @param {Object} options The options for padding.\n               * @param {'constant'|'symmetric'} [options.mode='constant'] The type of padding to add.\n               * @param {boolean} [options.center=false] Whether to center the image.\n               * @param {number|number[]} [options.constant_values=0] The constant value to use for padding.\n               * @returns {[Float32Array, number[]]} The padded pixel data and image dimensions.\n               */\n              pad_image(pixelData, imgDims, padSize, {\n                mode = \"constant\",\n                center = false,\n                constant_values = 0\n              } = {}) {\n                const [imageHeight, imageWidth, imageChannels] = imgDims;\n                let paddedImageWidth, paddedImageHeight;\n                if (typeof padSize === \"number\") {\n                  paddedImageWidth = padSize;\n                  paddedImageHeight = padSize;\n                } else if (padSize === \"square\") {\n                  paddedImageWidth = paddedImageHeight = Math.max(imageHeight, imageWidth);\n                } else {\n                  paddedImageWidth = padSize.width;\n                  paddedImageHeight = padSize.height;\n                }\n                if (paddedImageWidth !== imageWidth || paddedImageHeight !== imageHeight) {\n                  const paddedPixelData = new Float32Array(paddedImageWidth * paddedImageHeight * imageChannels);\n                  if (Array.isArray(constant_values)) {\n                    for (let i = 0; i < paddedPixelData.length; ++i) {\n                      paddedPixelData[i] = constant_values[i % imageChannels];\n                    }\n                  } else if (constant_values !== 0) {\n                    paddedPixelData.fill(constant_values);\n                  }\n                  const [left, top] = center ? [Math.floor((paddedImageWidth - imageWidth) / 2), Math.floor((paddedImageHeight - imageHeight) / 2)] : [0, 0];\n                  for (let i = 0; i < imageHeight; ++i) {\n                    const a = (i + top) * paddedImageWidth;\n                    const b = i * imageWidth;\n                    for (let j = 0; j < imageWidth; ++j) {\n                      const c = (a + j + left) * imageChannels;\n                      const d = (b + j) * imageChannels;\n                      for (let k2 = 0; k2 < imageChannels; ++k2) {\n                        paddedPixelData[c + k2] = pixelData[d + k2];\n                      }\n                    }\n                  }\n                  if (mode === \"symmetric\") {\n                    if (center) {\n                      throw new Error(\"`center` padding is not supported when `mode` is set to `symmetric`.\");\n                    }\n                    const h1 = imageHeight - 1;\n                    const w1 = imageWidth - 1;\n                    for (let i = 0; i < paddedImageHeight; ++i) {\n                      const a = i * paddedImageWidth;\n                      const b = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.calculateReflectOffset)(i, h1) * imageWidth;\n                      for (let j = 0; j < paddedImageWidth; ++j) {\n                        if (i < imageHeight && j < imageWidth) continue;\n                        const c = (a + j) * imageChannels;\n                        const d = (b + (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.calculateReflectOffset)(j, w1)) * imageChannels;\n                        for (let k2 = 0; k2 < imageChannels; ++k2) {\n                          paddedPixelData[c + k2] = pixelData[d + k2];\n                        }\n                      }\n                    }\n                  }\n                  pixelData = paddedPixelData;\n                  imgDims = [paddedImageHeight, paddedImageWidth, imageChannels];\n                }\n                return [pixelData, imgDims];\n              }\n              /**\n               * Rescale the image' pixel values by `this.rescale_factor`.\n               * @param {Float32Array} pixelData The pixel data to rescale.\n               * @returns {void}\n               */\n              rescale(pixelData) {\n                for (let i = 0; i < pixelData.length; ++i) {\n                  pixelData[i] = this.rescale_factor * pixelData[i];\n                }\n              }\n              /**\n               * Find the target (width, height) dimension of the output image after\n               * resizing given the input image and the desired size.\n               * @param {RawImage} image The image to resize.\n               * @param {any} size The size to use for resizing the image. \n               * @returns {[number, number]} The target (width, height) dimension of the output image after resizing.\n               */\n              get_resize_output_image_size(image, size) {\n                const [srcWidth, srcHeight] = image.size;\n                let shortest_edge;\n                let longest_edge;\n                if (this.do_thumbnail) {\n                  const { height, width } = size;\n                  shortest_edge = Math.min(height, width);\n                } else if (Number.isInteger(size)) {\n                  shortest_edge = size;\n                  longest_edge = this.config.max_size ?? shortest_edge;\n                } else if (size !== void 0) {\n                  shortest_edge = size.shortest_edge;\n                  longest_edge = size.longest_edge;\n                }\n                if (shortest_edge !== void 0 || longest_edge !== void 0) {\n                  const shortResizeFactor = shortest_edge === void 0 ? 1 : Math.max(shortest_edge / srcWidth, shortest_edge / srcHeight);\n                  const newWidth = srcWidth * shortResizeFactor;\n                  const newHeight = srcHeight * shortResizeFactor;\n                  const longResizeFactor = longest_edge === void 0 ? 1 : Math.min(longest_edge / newWidth, longest_edge / newHeight);\n                  let finalWidth = Math.floor(Number((newWidth * longResizeFactor).toFixed(2)));\n                  let finalHeight = Math.floor(Number((newHeight * longResizeFactor).toFixed(2)));\n                  if (this.size_divisibility !== void 0) {\n                    [finalWidth, finalHeight] = enforce_size_divisibility([finalWidth, finalHeight], this.size_divisibility);\n                  }\n                  return [finalWidth, finalHeight];\n                } else if (size !== void 0 && size.width !== void 0 && size.height !== void 0) {\n                  let newWidth = size.width;\n                  let newHeight = size.height;\n                  if (this.config.keep_aspect_ratio && this.config.ensure_multiple_of) {\n                    let scale_height = newHeight / srcHeight;\n                    let scale_width = newWidth / srcWidth;\n                    if (Math.abs(1 - scale_width) < Math.abs(1 - scale_height)) {\n                      scale_height = scale_width;\n                    } else {\n                      scale_width = scale_height;\n                    }\n                    newHeight = constraint_to_multiple_of(scale_height * srcHeight, this.config.ensure_multiple_of);\n                    newWidth = constraint_to_multiple_of(scale_width * srcWidth, this.config.ensure_multiple_of);\n                  }\n                  return [newWidth, newHeight];\n                } else if (this.size_divisibility !== void 0) {\n                  return enforce_size_divisibility([srcWidth, srcHeight], this.size_divisibility);\n                } else if (size.min_pixels !== void 0 && size.max_pixels !== void 0) {\n                  const { min_pixels, max_pixels } = size;\n                  const factor = this.config.patch_size * this.config.merge_size;\n                  return smart_resize(srcHeight, srcWidth, factor, min_pixels, max_pixels);\n                } else {\n                  throw new Error(`Could not resize image due to unsupported \\`this.size\\` option in config: ${JSON.stringify(size)}`);\n                }\n              }\n              /**\n               * Resizes the image.\n               * @param {RawImage} image The image to resize.\n               * @returns {Promise<RawImage>} The resized image.\n               */\n              async resize(image) {\n                const [newWidth, newHeight] = this.get_resize_output_image_size(image, this.size);\n                return await image.resize(newWidth, newHeight, {\n                  // @ts-expect-error TS2322\n                  resample: this.resample\n                });\n              }\n              /**\n               * @typedef {object} PreprocessedImage\n               * @property {HeightWidth} original_size The original size of the image.\n               * @property {HeightWidth} reshaped_input_size The reshaped input size of the image.\n               * @property {Tensor} pixel_values The pixel values of the preprocessed image.\n               */\n              /**\n               * Preprocesses the given image.\n               *\n               * @param {RawImage} image The image to preprocess.\n               * @param {Object} overrides The overrides for the preprocessing options.\n               * @returns {Promise<PreprocessedImage>} The preprocessed image.\n               */\n              async preprocess(image, {\n                do_normalize = null,\n                do_pad = null,\n                do_convert_rgb = null,\n                do_convert_grayscale = null,\n                do_flip_channel_order = null\n              } = {}) {\n                if (this.do_crop_margin) {\n                  image = await this.crop_margin(image);\n                }\n                const [srcWidth, srcHeight] = image.size;\n                if (do_convert_rgb ?? this.do_convert_rgb) {\n                  image = image.rgb();\n                } else if (do_convert_grayscale) {\n                  image = image.grayscale();\n                }\n                if (this.do_resize) {\n                  image = await this.resize(image);\n                }\n                if (this.do_thumbnail) {\n                  image = await this.thumbnail(image, this.size, this.resample);\n                }\n                if (this.do_center_crop) {\n                  let crop_width;\n                  let crop_height;\n                  if (Number.isInteger(this.crop_size)) {\n                    crop_width = this.crop_size;\n                    crop_height = this.crop_size;\n                  } else {\n                    crop_width = this.crop_size.width;\n                    crop_height = this.crop_size.height;\n                  }\n                  image = await image.center_crop(crop_width, crop_height);\n                }\n                const reshaped_input_size = [image.height, image.width];\n                let pixelData = Float32Array.from(image.data);\n                let imgDims = [image.height, image.width, image.channels];\n                if (this.do_rescale) {\n                  this.rescale(pixelData);\n                }\n                if (do_normalize ?? this.do_normalize) {\n                  let image_mean = this.image_mean;\n                  if (!Array.isArray(this.image_mean)) {\n                    image_mean = new Array(image.channels).fill(image_mean);\n                  }\n                  let image_std = this.image_std;\n                  if (!Array.isArray(this.image_std)) {\n                    image_std = new Array(image.channels).fill(image_mean);\n                  }\n                  if (image_mean.length !== image.channels || image_std.length !== image.channels) {\n                    throw new Error(`When set to arrays, the length of \\`image_mean\\` (${image_mean.length}) and \\`image_std\\` (${image_std.length}) must match the number of channels in the image (${image.channels}).`);\n                  }\n                  for (let i = 0; i < pixelData.length; i += image.channels) {\n                    for (let j = 0; j < image.channels; ++j) {\n                      pixelData[i + j] = (pixelData[i + j] - image_mean[j]) / image_std[j];\n                    }\n                  }\n                }\n                if (do_pad ?? this.do_pad) {\n                  if (this.pad_size) {\n                    const padded = this.pad_image(pixelData, [image.height, image.width, image.channels], this.pad_size);\n                    [pixelData, imgDims] = padded;\n                  } else if (this.size_divisibility) {\n                    const [paddedWidth, paddedHeight] = enforce_size_divisibility([imgDims[1], imgDims[0]], this.size_divisibility);\n                    [pixelData, imgDims] = this.pad_image(pixelData, imgDims, { width: paddedWidth, height: paddedHeight });\n                  }\n                }\n                if (do_flip_channel_order ?? this.do_flip_channel_order) {\n                  if (imgDims[2] !== 3) {\n                    throw new Error(\"Flipping channel order is only supported for RGB images.\");\n                  }\n                  for (let i = 0; i < pixelData.length; i += 3) {\n                    const temp = pixelData[i];\n                    pixelData[i] = pixelData[i + 2];\n                    pixelData[i + 2] = temp;\n                  }\n                }\n                const pixel_values = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\"float32\", pixelData, imgDims).permute(2, 0, 1);\n                return {\n                  original_size: [srcHeight, srcWidth],\n                  reshaped_input_size,\n                  pixel_values\n                };\n              }\n              /**\n               * Calls the feature extraction process on an array of images,\n               * preprocesses each image, and concatenates the resulting\n               * features into a single Tensor.\n               * @param {RawImage[]} images The image(s) to extract features from.\n               * @param {...any} args Additional arguments.\n               * @returns {Promise<ImageProcessorResult>} An object containing the concatenated pixel values (and other metadata) of the preprocessed images.\n               */\n              async _call(images, ...args) {\n                if (!Array.isArray(images)) {\n                  images = [images];\n                }\n                const imageData = await Promise.all(images.map((x) => this.preprocess(x)));\n                const pixel_values = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.stack)(imageData.map((x) => x.pixel_values), 0);\n                return {\n                  pixel_values,\n                  // Original sizes of images\n                  original_sizes: imageData.map((x) => x.original_size),\n                  // Reshaped sizes of images, before padding or cropping\n                  reshaped_input_sizes: imageData.map((x) => x.reshaped_input_size)\n                };\n              }\n              /**\n               * Instantiate one of the processor classes of the library from a pretrained model.\n               * \n               * The processor class to instantiate is selected based on the `image_processor_type` (or `feature_extractor_type`; legacy)\n               * property of the config object (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)\n               * \n               * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:\n               * - A string, the *model id* of a pretrained processor hosted inside a model repo on huggingface.co.\n               *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a\n               *   user or organization name, like `dbmdz/bert-base-german-cased`.\n               * - A path to a *directory* containing processor files, e.g., `./my_model_directory/`.\n               * @param {import('../utils/hub.js').PretrainedOptions} options Additional options for loading the processor.\n               * \n               * @returns {Promise<ImageProcessor>} A new instance of the Processor class.\n               */\n              static async from_pretrained(pretrained_model_name_or_path, options) {\n                const preprocessorConfig = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.getModelJSON)(pretrained_model_name_or_path, _utils_constants_js__WEBPACK_IMPORTED_MODULE_6__.IMAGE_PROCESSOR_NAME, true, options);\n                return new this(preprocessorConfig);\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/base/processing_utils.js\": (\n          /*!**************************************!*\\\n            !*** ./src/base/processing_utils.js ***!\n            \\**************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Processor: () => (\n                /* binding */\n                Processor\n              )\n              /* harmony export */\n            });\n            var _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../utils/constants.js */\n              \"./src/utils/constants.js\"\n            );\n            var _utils_generic_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../utils/generic.js */\n              \"./src/utils/generic.js\"\n            );\n            var _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../utils/hub.js */\n              \"./src/utils/hub.js\"\n            );\n            class Processor extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_1__.Callable {\n              /**\n               * Creates a new Processor with the given components\n               * @param {Object} config \n               * @param {Record<string, Object>} components \n               */\n              constructor(config, components) {\n                super();\n                this.config = config;\n                this.components = components;\n              }\n              /**\n               * @returns {import('./image_processors_utils.js').ImageProcessor|undefined} The image processor of the processor, if it exists.\n               */\n              get image_processor() {\n                return this.components.image_processor;\n              }\n              /**\n               * @returns {PreTrainedTokenizer|undefined} The tokenizer of the processor, if it exists.\n               */\n              get tokenizer() {\n                return this.components.tokenizer;\n              }\n              /**\n               * @returns {import('./feature_extraction_utils.js').FeatureExtractor|undefined} The feature extractor of the processor, if it exists.\n               */\n              get feature_extractor() {\n                return this.components.feature_extractor;\n              }\n              /**\n               * @param {Parameters<PreTrainedTokenizer['apply_chat_template']>[0]} messages\n               * @param {Parameters<PreTrainedTokenizer['apply_chat_template']>[1]} options\n               * @returns {ReturnType<PreTrainedTokenizer['apply_chat_template']>}\n               */\n              apply_chat_template(messages, options = {}) {\n                if (!this.tokenizer) {\n                  throw new Error(\"Unable to apply chat template without a tokenizer.\");\n                }\n                return this.tokenizer.apply_chat_template(messages, {\n                  tokenize: false,\n                  // default to false\n                  ...options\n                });\n              }\n              /**\n               * @param {Parameters<PreTrainedTokenizer['batch_decode']>} args\n               * @returns {ReturnType<PreTrainedTokenizer['batch_decode']>}\n               */\n              batch_decode(...args) {\n                if (!this.tokenizer) {\n                  throw new Error(\"Unable to decode without a tokenizer.\");\n                }\n                return this.tokenizer.batch_decode(...args);\n              }\n              /**\n               * @param {Parameters<PreTrainedTokenizer['decode']>} args\n               * @returns {ReturnType<PreTrainedTokenizer['decode']>}\n               */\n              decode(...args) {\n                if (!this.tokenizer) {\n                  throw new Error(\"Unable to decode without a tokenizer.\");\n                }\n                return this.tokenizer.decode(...args);\n              }\n              /**\n               * Calls the feature_extractor function with the given input.\n               * @param {any} input The input to extract features from.\n               * @param {...any} args Additional arguments.\n               * @returns {Promise<any>} A Promise that resolves with the extracted features.\n               */\n              async _call(input, ...args) {\n                for (const item of [this.image_processor, this.feature_extractor, this.tokenizer]) {\n                  if (item) {\n                    return item(input, ...args);\n                  }\n                }\n                throw new Error(\"No image processor, feature extractor, or tokenizer found.\");\n              }\n              /**\n               * Instantiate one of the processor classes of the library from a pretrained model.\n               * \n               * The processor class to instantiate is selected based on the `image_processor_type` (or `feature_extractor_type`; legacy)\n               * property of the config object (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)\n               * \n               * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:\n               * - A string, the *model id* of a pretrained processor hosted inside a model repo on huggingface.co.\n               *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a\n               *   user or organization name, like `dbmdz/bert-base-german-cased`.\n               * - A path to a *directory* containing processor files, e.g., `./my_model_directory/`.\n               * @param {PretrainedProcessorOptions} options Additional options for loading the processor.\n               * \n               * @returns {Promise<Processor>} A new instance of the Processor class.\n               */\n              static async from_pretrained(pretrained_model_name_or_path, options) {\n                const [config, components] = await Promise.all([\n                  // TODO:\n                  this.uses_processor_config ? (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__.getModelJSON)(pretrained_model_name_or_path, _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__.PROCESSOR_NAME, true, options) : {},\n                  Promise.all(\n                    this.classes.filter((cls) => cls in this).map(async (cls) => {\n                      const component = await this[cls].from_pretrained(pretrained_model_name_or_path, options);\n                      return [cls.replace(/_class$/, \"\"), component];\n                    })\n                  ).then(Object.fromEntries)\n                ]);\n                return new this(config, components);\n              }\n            }\n            __publicField(Processor, \"classes\", [\n              \"image_processor_class\",\n              \"tokenizer_class\",\n              \"feature_extractor_class\"\n            ]);\n            __publicField(Processor, \"uses_processor_config\", false);\n          }\n        ),\n        /***/\n        \"./src/configs.js\": (\n          /*!************************!*\\\n            !*** ./src/configs.js ***!\n            \\************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              AutoConfig: () => (\n                /* binding */\n                AutoConfig\n              ),\n              /* harmony export */\n              PretrainedConfig: () => (\n                /* binding */\n                PretrainedConfig\n              ),\n              /* harmony export */\n              getKeyValueShapes: () => (\n                /* binding */\n                getKeyValueShapes\n              )\n              /* harmony export */\n            });\n            var _utils_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ./utils/core.js */\n              \"./src/utils/core.js\"\n            );\n            var _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ./utils/hub.js */\n              \"./src/utils/hub.js\"\n            );\n            async function loadConfig(pretrained_model_name_or_path, options) {\n              return await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__.getModelJSON)(pretrained_model_name_or_path, \"config.json\", true, options);\n            }\n            function getNormalizedConfig(config) {\n              const mapping = {};\n              let init_normalized_config = {};\n              switch (config.model_type) {\n                // Sub-configs\n                case \"llava\":\n                case \"paligemma\":\n                case \"gemma3\":\n                case \"florence2\":\n                case \"llava_onevision\":\n                case \"idefics3\":\n                case \"ultravox\":\n                case \"smolvlm\":\n                  init_normalized_config = getNormalizedConfig(config.text_config);\n                  break;\n                case \"moondream1\":\n                  init_normalized_config = getNormalizedConfig(config.phi_config);\n                  break;\n                case \"musicgen\":\n                  init_normalized_config = getNormalizedConfig(config.decoder);\n                  break;\n                case \"multi_modality\":\n                  init_normalized_config = getNormalizedConfig(config.language_config);\n                  break;\n                // Decoder-only models\n                case \"gpt2\":\n                case \"gptj\":\n                case \"jais\":\n                case \"codegen\":\n                case \"gpt_bigcode\":\n                  mapping[\"num_heads\"] = \"n_head\";\n                  mapping[\"num_layers\"] = \"n_layer\";\n                  mapping[\"hidden_size\"] = \"n_embd\";\n                  break;\n                case \"gpt_neox\":\n                case \"stablelm\":\n                case \"opt\":\n                case \"falcon\":\n                  mapping[\"num_heads\"] = \"num_attention_heads\";\n                  mapping[\"num_layers\"] = \"num_hidden_layers\";\n                  mapping[\"hidden_size\"] = \"hidden_size\";\n                  break;\n                case \"llama\":\n                case \"olmo\":\n                case \"olmo2\":\n                case \"mobilellm\":\n                case \"granite\":\n                case \"cohere\":\n                case \"mistral\":\n                case \"starcoder2\":\n                case \"qwen2\":\n                case \"qwen2_vl\":\n                case \"phi\":\n                case \"phi3\":\n                case \"phi3_v\":\n                  mapping[\"num_heads\"] = \"num_key_value_heads\";\n                  mapping[\"num_layers\"] = \"num_hidden_layers\";\n                  mapping[\"hidden_size\"] = \"hidden_size\";\n                  mapping[\"num_attention_heads\"] = \"num_attention_heads\";\n                  break;\n                case \"gemma\":\n                case \"gemma2\":\n                case \"gemma3_text\":\n                case \"glm\":\n                case \"helium\":\n                  mapping[\"num_heads\"] = \"num_key_value_heads\";\n                  mapping[\"num_layers\"] = \"num_hidden_layers\";\n                  mapping[\"dim_kv\"] = \"head_dim\";\n                  break;\n                case \"openelm\":\n                  mapping[\"num_heads\"] = \"num_kv_heads\";\n                  mapping[\"num_layers\"] = \"num_transformer_layers\";\n                  mapping[\"dim_kv\"] = \"head_dim\";\n                  break;\n                case \"gpt_neo\":\n                case \"donut-swin\":\n                  mapping[\"num_heads\"] = \"num_heads\";\n                  mapping[\"num_layers\"] = \"num_layers\";\n                  mapping[\"hidden_size\"] = \"hidden_size\";\n                  break;\n                case \"bloom\":\n                  mapping[\"num_heads\"] = \"n_head\";\n                  mapping[\"num_layers\"] = \"n_layer\";\n                  mapping[\"hidden_size\"] = \"hidden_size\";\n                  break;\n                case \"mpt\":\n                  mapping[\"num_heads\"] = \"n_heads\";\n                  mapping[\"num_layers\"] = \"n_layers\";\n                  mapping[\"hidden_size\"] = \"d_model\";\n                  break;\n                case \"exaone\":\n                  mapping[\"num_heads\"] = \"num_key_value_heads\";\n                  mapping[\"num_layers\"] = \"num_layers\";\n                  mapping[\"dim_kv\"] = \"head_dim\";\n                  mapping[\"num_attention_heads\"] = \"num_attention_heads\";\n                  break;\n                // Encoder-decoder models\n                case \"t5\":\n                case \"mt5\":\n                case \"longt5\":\n                  mapping[\"num_decoder_layers\"] = \"num_decoder_layers\";\n                  mapping[\"num_decoder_heads\"] = \"num_heads\";\n                  mapping[\"decoder_dim_kv\"] = \"d_kv\";\n                  mapping[\"num_encoder_layers\"] = \"num_layers\";\n                  mapping[\"num_encoder_heads\"] = \"num_heads\";\n                  mapping[\"encoder_dim_kv\"] = \"d_kv\";\n                  break;\n                case \"bart\":\n                case \"mbart\":\n                case \"marian\":\n                case \"whisper\":\n                case \"lite-whisper\":\n                case \"m2m_100\":\n                case \"blenderbot\":\n                case \"blenderbot-small\":\n                case \"florence2_language\":\n                  mapping[\"num_decoder_layers\"] = \"decoder_layers\";\n                  mapping[\"num_decoder_heads\"] = \"decoder_attention_heads\";\n                  mapping[\"decoder_hidden_size\"] = \"d_model\";\n                  mapping[\"num_encoder_layers\"] = \"encoder_layers\";\n                  mapping[\"num_encoder_heads\"] = \"encoder_attention_heads\";\n                  mapping[\"encoder_hidden_size\"] = \"d_model\";\n                  break;\n                case \"speecht5\":\n                  mapping[\"num_decoder_layers\"] = \"decoder_layers\";\n                  mapping[\"num_decoder_heads\"] = \"decoder_attention_heads\";\n                  mapping[\"decoder_hidden_size\"] = \"hidden_size\";\n                  mapping[\"num_encoder_layers\"] = \"encoder_layers\";\n                  mapping[\"num_encoder_heads\"] = \"encoder_attention_heads\";\n                  mapping[\"encoder_hidden_size\"] = \"hidden_size\";\n                  break;\n                case \"trocr\":\n                  mapping[\"num_encoder_layers\"] = mapping[\"num_decoder_layers\"] = \"decoder_layers\";\n                  mapping[\"num_encoder_heads\"] = mapping[\"num_decoder_heads\"] = \"decoder_attention_heads\";\n                  mapping[\"encoder_hidden_size\"] = mapping[\"decoder_hidden_size\"] = \"d_model\";\n                  break;\n                case \"musicgen_decoder\":\n                  mapping[\"num_encoder_layers\"] = mapping[\"num_decoder_layers\"] = \"num_hidden_layers\";\n                  mapping[\"num_encoder_heads\"] = mapping[\"num_decoder_heads\"] = \"num_attention_heads\";\n                  mapping[\"encoder_hidden_size\"] = mapping[\"decoder_hidden_size\"] = \"hidden_size\";\n                  break;\n                case \"moonshine\":\n                  mapping[\"num_decoder_layers\"] = \"decoder_num_hidden_layers\";\n                  mapping[\"num_decoder_heads\"] = \"decoder_num_key_value_heads\";\n                  mapping[\"num_encoder_layers\"] = \"encoder_num_hidden_layers\";\n                  mapping[\"num_encoder_heads\"] = \"encoder_num_key_value_heads\";\n                  mapping[\"encoder_hidden_size\"] = mapping[\"decoder_hidden_size\"] = \"hidden_size\";\n                  break;\n                case \"vision-encoder-decoder\":\n                  const decoderConfig = getNormalizedConfig(config.decoder);\n                  const add_encoder_pkv = \"num_decoder_layers\" in decoderConfig;\n                  const result = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_0__.pick)(config, [\"model_type\", \"is_encoder_decoder\"]);\n                  if (add_encoder_pkv) {\n                    result.num_decoder_layers = decoderConfig.num_decoder_layers;\n                    result.num_decoder_heads = decoderConfig.num_decoder_heads;\n                    result.decoder_hidden_size = decoderConfig.decoder_hidden_size;\n                    result.num_encoder_layers = decoderConfig.num_encoder_layers;\n                    result.num_encoder_heads = decoderConfig.num_encoder_heads;\n                    result.encoder_hidden_size = decoderConfig.encoder_hidden_size;\n                  } else {\n                    result.num_layers = decoderConfig.num_layers;\n                    result.num_heads = decoderConfig.num_heads;\n                    result.hidden_size = decoderConfig.hidden_size;\n                  }\n                  return result;\n              }\n              const normalized_config = {\n                ...init_normalized_config,\n                ...(0, _utils_core_js__WEBPACK_IMPORTED_MODULE_0__.pick)(config, [\"model_type\", \"multi_query\", \"is_encoder_decoder\"])\n              };\n              for (const key in mapping) {\n                normalized_config[key] = config[mapping[key]];\n              }\n              return normalized_config;\n            }\n            function getKeyValueShapes(config, {\n              prefix = \"past_key_values\",\n              batch_size = 1\n            } = {}) {\n              const decoderFeeds = {};\n              const normalized_config = config.normalized_config;\n              if (normalized_config.is_encoder_decoder && (\"num_encoder_heads\" in normalized_config && \"num_decoder_heads\" in normalized_config)) {\n                const encoder_dim_kv = normalized_config.encoder_dim_kv ?? normalized_config.encoder_hidden_size / normalized_config.num_encoder_heads;\n                const decoder_dim_kv = normalized_config.decoder_dim_kv ?? normalized_config.decoder_hidden_size / normalized_config.num_decoder_heads;\n                const encoder_dims = [batch_size, normalized_config.num_encoder_heads, 0, encoder_dim_kv];\n                const decoder_dims = [batch_size, normalized_config.num_decoder_heads, 0, decoder_dim_kv];\n                for (let i = 0; i < normalized_config.num_decoder_layers; ++i) {\n                  decoderFeeds[`${prefix}.${i}.encoder.key`] = encoder_dims;\n                  decoderFeeds[`${prefix}.${i}.encoder.value`] = encoder_dims;\n                  decoderFeeds[`${prefix}.${i}.decoder.key`] = decoder_dims;\n                  decoderFeeds[`${prefix}.${i}.decoder.value`] = decoder_dims;\n                }\n              } else {\n                const num_heads = normalized_config.num_heads;\n                const num_layers = normalized_config.num_layers;\n                const dim_kv = normalized_config.dim_kv ?? normalized_config.hidden_size / (normalized_config.num_attention_heads ?? num_heads);\n                if (normalized_config.model_type === \"falcon\") {\n                  const dims = [batch_size * num_heads, 0, dim_kv];\n                  for (let i = 0; i < num_layers; ++i) {\n                    decoderFeeds[`${prefix}.${i}.key`] = dims;\n                    decoderFeeds[`${prefix}.${i}.value`] = dims;\n                  }\n                } else if (normalized_config.multi_query) {\n                  const dims = [batch_size * num_heads, 0, 2 * dim_kv];\n                  for (let i = 0; i < num_layers; ++i) {\n                    decoderFeeds[`${prefix}.${i}.key_value`] = dims;\n                  }\n                } else if (normalized_config.model_type === \"bloom\") {\n                  const keyDims = [batch_size * num_heads, dim_kv, 0];\n                  const valueDims = [batch_size * num_heads, 0, dim_kv];\n                  for (let i = 0; i < num_layers; ++i) {\n                    decoderFeeds[`${prefix}.${i}.key`] = keyDims;\n                    decoderFeeds[`${prefix}.${i}.value`] = valueDims;\n                  }\n                } else if (normalized_config.model_type === \"openelm\") {\n                  for (let i = 0; i < num_layers; ++i) {\n                    const dims = [batch_size, num_heads[i], 0, dim_kv];\n                    decoderFeeds[`${prefix}.${i}.key`] = dims;\n                    decoderFeeds[`${prefix}.${i}.value`] = dims;\n                  }\n                } else {\n                  const dims = [batch_size, num_heads, 0, dim_kv];\n                  for (let i = 0; i < num_layers; ++i) {\n                    decoderFeeds[`${prefix}.${i}.key`] = dims;\n                    decoderFeeds[`${prefix}.${i}.value`] = dims;\n                  }\n                }\n              }\n              return decoderFeeds;\n            }\n            class PretrainedConfig {\n              /**\n               * Create a new PreTrainedTokenizer instance.\n               * @param {Object} configJSON The JSON of the config.\n               */\n              constructor(configJSON) {\n                // NOTE: Typo in original\n                /** @type {string|null} */\n                __publicField(this, \"model_type\", null);\n                /** @type {boolean} */\n                __publicField(this, \"is_encoder_decoder\", false);\n                /** @type {number} */\n                __publicField(this, \"max_position_embeddings\");\n                /** @type {TransformersJSConfig} */\n                __publicField(this, \"transformers.js_config\");\n                Object.assign(this, configJSON);\n                this.normalized_config = getNormalizedConfig(this);\n              }\n              /**\n               * Loads a pre-trained config from the given `pretrained_model_name_or_path`. \n               * \n               * @param {string} pretrained_model_name_or_path The path to the pre-trained config.\n               * @param {PretrainedOptions} options Additional options for loading the config.\n               * @throws {Error} Throws an error if the config.json is not found in the `pretrained_model_name_or_path`.\n               * \n               * @returns {Promise<PretrainedConfig>} A new instance of the `PretrainedConfig` class.\n               */\n              static async from_pretrained(pretrained_model_name_or_path, {\n                progress_callback = null,\n                config = null,\n                cache_dir = null,\n                local_files_only = false,\n                revision = \"main\"\n              } = {}) {\n                if (config && !(config instanceof PretrainedConfig)) {\n                  config = new PretrainedConfig(config);\n                }\n                const data = config ?? await loadConfig(pretrained_model_name_or_path, {\n                  progress_callback,\n                  config,\n                  cache_dir,\n                  local_files_only,\n                  revision\n                });\n                return new this(data);\n              }\n            }\n            class AutoConfig {\n              /** @type {typeof PretrainedConfig.from_pretrained} */\n              static async from_pretrained(...args) {\n                return PretrainedConfig.from_pretrained(...args);\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/env.js\": (\n          /*!********************!*\\\n            !*** ./src/env.js ***!\n            \\********************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              apis: () => (\n                /* binding */\n                apis\n              ),\n              /* harmony export */\n              env: () => (\n                /* binding */\n                env3\n              )\n              /* harmony export */\n            });\n            var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! fs */\n              \"?569f\"\n            );\n            var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! path */\n              \"?3f59\"\n            );\n            var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! url */\n              \"?154a\"\n            );\n            const VERSION = \"3.5.0\";\n            const IS_BROWSER_ENV = typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n            const IS_WEBWORKER_ENV = typeof self !== \"undefined\" && self.constructor?.name === \"DedicatedWorkerGlobalScope\";\n            const IS_WEB_CACHE_AVAILABLE = typeof self !== \"undefined\" && \"caches\" in self;\n            const IS_WEBGPU_AVAILABLE = typeof navigator !== \"undefined\" && \"gpu\" in navigator;\n            const IS_WEBNN_AVAILABLE = typeof navigator !== \"undefined\" && \"ml\" in navigator;\n            const IS_PROCESS_AVAILABLE = typeof process !== \"undefined\";\n            const IS_NODE_ENV = IS_PROCESS_AVAILABLE && process?.release?.name === \"node\";\n            const IS_FS_AVAILABLE = !isEmpty(fs__WEBPACK_IMPORTED_MODULE_0__);\n            const IS_PATH_AVAILABLE = !isEmpty(path__WEBPACK_IMPORTED_MODULE_1__);\n            const apis = Object.freeze({\n              /** Whether we are running in a browser environment (and not a web worker) */\n              IS_BROWSER_ENV,\n              /** Whether we are running in a web worker environment */\n              IS_WEBWORKER_ENV,\n              /** Whether the Cache API is available */\n              IS_WEB_CACHE_AVAILABLE,\n              /** Whether the WebGPU API is available */\n              IS_WEBGPU_AVAILABLE,\n              /** Whether the WebNN API is available */\n              IS_WEBNN_AVAILABLE,\n              /** Whether the Node.js process API is available */\n              IS_PROCESS_AVAILABLE,\n              /** Whether we are running in a Node.js environment */\n              IS_NODE_ENV,\n              /** Whether the filesystem API is available */\n              IS_FS_AVAILABLE,\n              /** Whether the path API is available */\n              IS_PATH_AVAILABLE\n            });\n            const RUNNING_LOCALLY = IS_FS_AVAILABLE && IS_PATH_AVAILABLE;\n            let dirname__ = \"./\";\n            if (RUNNING_LOCALLY) {\n              const _import_meta_url = Object(import_meta2).url;\n              if (_import_meta_url) {\n                dirname__ = path__WEBPACK_IMPORTED_MODULE_1__.dirname(path__WEBPACK_IMPORTED_MODULE_1__.dirname(url__WEBPACK_IMPORTED_MODULE_2__.fileURLToPath(_import_meta_url)));\n              } else if (typeof __dirname !== \"undefined\") {\n                dirname__ = path__WEBPACK_IMPORTED_MODULE_1__.dirname(__dirname);\n              }\n            }\n            const DEFAULT_CACHE_DIR = RUNNING_LOCALLY ? path__WEBPACK_IMPORTED_MODULE_1__.join(dirname__, \"/.cache/\") : null;\n            const DEFAULT_LOCAL_MODEL_PATH = \"/models/\";\n            const localModelPath = RUNNING_LOCALLY ? path__WEBPACK_IMPORTED_MODULE_1__.join(dirname__, DEFAULT_LOCAL_MODEL_PATH) : DEFAULT_LOCAL_MODEL_PATH;\n            const env3 = {\n              version: VERSION,\n              /////////////////// Backends settings ///////////////////\n              // NOTE: These will be populated later by the backends themselves.\n              backends: {\n                // onnxruntime-web/onnxruntime-node\n                onnx: {}\n              },\n              /////////////////// Model settings ///////////////////\n              allowRemoteModels: true,\n              remoteHost: \"https://huggingface.co/\",\n              remotePathTemplate: \"{model}/resolve/{revision}/\",\n              allowLocalModels: !(IS_BROWSER_ENV || IS_WEBWORKER_ENV),\n              localModelPath,\n              useFS: IS_FS_AVAILABLE,\n              /////////////////// Cache settings ///////////////////\n              useBrowserCache: IS_WEB_CACHE_AVAILABLE,\n              useFSCache: IS_FS_AVAILABLE,\n              cacheDir: DEFAULT_CACHE_DIR,\n              useCustomCache: false,\n              customCache: null\n              //////////////////////////////////////////////////////\n            };\n            function isEmpty(obj) {\n              return Object.keys(obj).length === 0;\n            }\n          }\n        ),\n        /***/\n        \"./src/generation/configuration_utils.js\": (\n          /*!***********************************************!*\\\n            !*** ./src/generation/configuration_utils.js ***!\n            \\***********************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              GenerationConfig: () => (\n                /* binding */\n                GenerationConfig\n              )\n              /* harmony export */\n            });\n            var _utils_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../utils/core.js */\n              \"./src/utils/core.js\"\n            );\n            class GenerationConfig {\n              /**\n               * \n               * @param {GenerationConfig|import('../configs.js').PretrainedConfig} config \n               */\n              constructor(config) {\n                // Parameters that control the length of the output\n                /**\n                 * The maximum length the generated tokens can have.\n                 * Corresponds to the length of the input prompt + `max_new_tokens`.\n                 * Its effect is overridden by `max_new_tokens`, if also set.\n                 * @type {number}\n                 * @default 20\n                 */\n                __publicField(this, \"max_length\", 20);\n                /**\n                 * The maximum numbers of tokens to generate, ignoring the number of tokens in the prompt.\n                 * @type {number}\n                 * @default null\n                 */\n                __publicField(this, \"max_new_tokens\", null);\n                /**\n                 * The minimum length of the sequence to be generated.\n                 * Corresponds to the length of the input prompt + `min_new_tokens`.\n                 * Its effect is overridden by `min_new_tokens`, if also set.\n                 * @type {number}\n                 * @default 0\n                 */\n                __publicField(this, \"min_length\", 0);\n                /**\n                 * The minimum numbers of tokens to generate, ignoring the number of tokens in the prompt.\n                 * @type {number}\n                 * @default null\n                 */\n                __publicField(this, \"min_new_tokens\", null);\n                /**\n                 * Controls the stopping condition for beam-based methods, like beam-search. It accepts the following values:\n                 * - `true`, where the generation stops as soon as there are `num_beams` complete candidates;\n                 * - `false`, where an heuristic is applied and the generation stops when is it very unlikely to find better candidates;\n                 * - `\"never\"`, where the beam search procedure only stops when there cannot be better candidates (canonical beam search algorithm).\n                 * @type {boolean|\"never\"}\n                 * @default false\n                 */\n                __publicField(this, \"early_stopping\", false);\n                /**\n                 * The maximum amount of time you allow the computation to run for in seconds.\n                 * Generation will still finish the current pass after allocated time has been passed.\n                 * @type {number}\n                 * @default null\n                 */\n                __publicField(this, \"max_time\", null);\n                // Parameters that control the generation strategy used\n                /**\n                 * Whether or not to use sampling; use greedy decoding otherwise.\n                 * @type {boolean}\n                 * @default false\n                 */\n                __publicField(this, \"do_sample\", false);\n                /**\n                 * Number of beams for beam search. 1 means no beam search.\n                 * @type {number}\n                 * @default 1\n                 */\n                __publicField(this, \"num_beams\", 1);\n                /**\n                 * Number of groups to divide `num_beams` into in order to ensure diversity among different groups of beams.\n                 * See [this paper](https://arxiv.org/pdf/1610.02424.pdf) for more details.\n                 * @type {number}\n                 * @default 1\n                 */\n                __publicField(this, \"num_beam_groups\", 1);\n                /**\n                 * The values balance the model confidence and the degeneration penalty in contrastive search decoding.\n                 * @type {number}\n                 * @default null\n                 */\n                __publicField(this, \"penalty_alpha\", null);\n                /**\n                 * Whether or not the model should use the past last key/values attentions (if applicable to the model) to speed up decoding.\n                 * @type {boolean}\n                 * @default true\n                 */\n                __publicField(this, \"use_cache\", true);\n                // Parameters for manipulation of the model output logits\n                /**\n                 * The value used to modulate the next token probabilities.\n                 * @type {number}\n                 * @default 1.0\n                 */\n                __publicField(this, \"temperature\", 1);\n                /**\n                 * The number of highest probability vocabulary tokens to keep for top-k-filtering.\n                 * @type {number}\n                 * @default 50\n                 */\n                __publicField(this, \"top_k\", 50);\n                /**\n                 * If set to float < 1, only the smallest set of most probable tokens with probabilities that add up to `top_p` or higher are kept for generation.\n                 * @type {number}\n                 * @default 1.0\n                 */\n                __publicField(this, \"top_p\", 1);\n                /**\n                 * Local typicality measures how similar the conditional probability of predicting a target token next is to the expected conditional probability of predicting a random token next, given the partial text already generated.\n                 * If set to float < 1, the smallest set of the most locally typical tokens with probabilities that add up to `typical_p` or higher are kept for generation.\n                 * See [this paper](https://arxiv.org/pdf/2202.00666.pdf) for more details.\n                 * @type {number}\n                 * @default 1.0\n                 */\n                __publicField(this, \"typical_p\", 1);\n                /**\n                 * If set to float strictly between 0 and 1, only tokens with a conditional probability greater than `epsilon_cutoff` will be sampled.\n                 * In the paper, suggested values range from 3e-4 to 9e-4, depending on the size of the model.\n                 * See [Truncation Sampling as Language Model Desmoothing](https://arxiv.org/abs/2210.15191) for more details.\n                 * @type {number}\n                 * @default 0.0\n                 */\n                __publicField(this, \"epsilon_cutoff\", 0);\n                /**\n                 * Eta sampling is a hybrid of locally typical sampling and epsilon sampling.\n                 * If set to float strictly between 0 and 1, a token is only considered if it is greater than either `eta_cutoff` or `sqrt(eta_cutoff) * exp(-entropy(softmax(next_token_logits)))`.\n                 * The latter term is intuitively the expected next token probability, scaled by `sqrt(eta_cutoff)`. In the paper, suggested values range from 3e-4 to 2e-3, depending on the size of the model.\n                 * See [Truncation Sampling as Language Model Desmoothing](https://arxiv.org/abs/2210.15191) for more details.\n                 * @type {number}\n                 * @default 0.0\n                 */\n                __publicField(this, \"eta_cutoff\", 0);\n                /**\n                 * This value is subtracted from a beam's score if it generates a token same as any beam from other group at a particular time.\n                 * Note that `diversity_penalty` is only effective if `group beam search` is enabled.\n                 * @type {number}\n                 * @default 0.0\n                 */\n                __publicField(this, \"diversity_penalty\", 0);\n                /**\n                 * The parameter for repetition penalty. 1.0 means no penalty.\n                 * See [this paper](https://arxiv.org/pdf/1909.05858.pdf) for more details.\n                 * @type {number}\n                 * @default 1.0\n                 */\n                __publicField(this, \"repetition_penalty\", 1);\n                /**\n                 * The paramater for encoder_repetition_penalty.\n                 * An exponential penalty on sequences that are not in the original input.\n                 * 1.0 means no penalty.\n                 * @type {number}\n                 * @default 1.0\n                 */\n                __publicField(this, \"encoder_repetition_penalty\", 1);\n                /**\n                 * Exponential penalty to the length that is used with beam-based generation.\n                 * It is applied as an exponent to the sequence length, which in turn is used to divide the score of the sequence.\n                 * Since the score is the log likelihood of the sequence (i.e. negative), `length_penalty` > 0.0 promotes longer sequences, while `length_penalty` < 0.0 encourages shorter sequences.\n                 * @type {number}\n                 * @default 1.0\n                 */\n                __publicField(this, \"length_penalty\", 1);\n                /**\n                 * If set to int > 0, all ngrams of that size can only occur once.\n                 * @type {number}\n                 * @default 0\n                 */\n                __publicField(this, \"no_repeat_ngram_size\", 0);\n                /**\n                 * List of token ids that are not allowed to be generated.\n                 * In order to get the token ids of the words that should not appear in the generated text, use\n                 * `tokenizer(bad_words, { add_prefix_space: true, add_special_tokens: false }).input_ids`.\n                 * @type {number[][]}\n                 * @default null\n                 */\n                __publicField(this, \"bad_words_ids\", null);\n                /**\n                 * List of token ids that must be generated.\n                 * If given a `number[][]`, this is treated as a simple list of words that must be included, the opposite to `bad_words_ids`.\n                 * If given `number[][][]`, this triggers a [disjunctive constraint](https://github.com/huggingface/transformers/issues/14081), where one can allow different forms of each word.\n                 * @type {number[][]|number[][][]}\n                 * @default null\n                 */\n                __publicField(this, \"force_words_ids\", null);\n                /**\n                 * Whether to renormalize the logits after applying all the logits processors or warpers (including the custom ones).\n                 * It's highly recommended to set this flag to `true` as the search algorithms suppose the score logits are normalized but some logit processors or warpers break the normalization.\n                 * @type {boolean}\n                 * @default false\n                 */\n                __publicField(this, \"renormalize_logits\", false);\n                /**\n                 * Custom constraints that can be added to the generation to ensure that the output will contain the use of certain tokens as defined by `Constraint` objects, in the most sensible way possible.\n                 * @type {Object[]}\n                 * @default null\n                 */\n                __publicField(this, \"constraints\", null);\n                /**\n                 * The id of the token to force as the first generated token after the `decoder_start_token_id`.\n                 * Useful for multilingual models like mBART where the first generated token needs to be the target language token.\n                 * @type {number}\n                 * @default null\n                 */\n                __publicField(this, \"forced_bos_token_id\", null);\n                /**\n                 * The id of the token to force as the last generated token when `max_length` is reached.\n                 * Optionally, use a list to set multiple *end-of-sequence* tokens.\n                 * @type {number|number[]}\n                 * @default null\n                 */\n                __publicField(this, \"forced_eos_token_id\", null);\n                /**\n                 * Whether to remove possible *nan* and *inf* outputs of the model to prevent the generation method to crash. Note that using `remove_invalid_values` can slow down generation.\n                 * @type {boolean}\n                 */\n                __publicField(this, \"remove_invalid_values\", false);\n                /**\n                 * This Tuple adds an exponentially increasing length penalty, after a certain amount of tokens have been generated.\n                 * The tuple shall consist of: `(start_index, decay_factor)` where `start_index` indicates where penalty starts and `decay_factor` represents the factor of exponential decay.\n                 * @type {[number, number]}\n                 * @default null\n                 */\n                __publicField(this, \"exponential_decay_length_penalty\", null);\n                /**\n                 * A list of tokens that will be suppressed at generation.\n                 * The `SuppressTokens` logit processor will set their log probs to `-inf` so that they are not sampled.\n                 * @type {number[]}\n                 * @default null\n                 */\n                __publicField(this, \"suppress_tokens\", null);\n                /**\n                 * A streamer that will be used to stream the generation.\n                 * @type {import('./streamers.js').TextStreamer}\n                 * @default null\n                 */\n                __publicField(this, \"streamer\", null);\n                /**\n                 * A list of tokens that will be suppressed at the beginning of the generation.\n                 * The `SuppressBeginTokens` logit processor will set their log probs to `-inf` so that they are not sampled.\n                 * @type {number[]}\n                 * @default null\n                 */\n                __publicField(this, \"begin_suppress_tokens\", null);\n                /**\n                 * A list of pairs of integers which indicates a mapping from generation indices to token indices that will be forced before sampling.\n                 * For example, `[[1, 123]]` means the second generated token will always be a token of index 123.\n                 * @type {[number, number][]}\n                 * @default null\n                 */\n                __publicField(this, \"forced_decoder_ids\", null);\n                /**\n                 * The guidance scale for classifier free guidance (CFG). CFG is enabled by setting `guidance_scale > 1`.\n                 * Higher guidance scale encourages the model to generate samples that are more closely linked to the input\n                 * prompt, usually at the expense of poorer quality.\n                 * @type {number}\n                 * @default null\n                 */\n                __publicField(this, \"guidance_scale\", null);\n                // Parameters that define the output variables of `generate`\n                /**\n                 * The number of independently computed returned sequences for each element in the batch.\n                 * @type {number}\n                 * @default 1\n                 */\n                __publicField(this, \"num_return_sequences\", 1);\n                /**\n                 * Whether or not to return the attentions tensors of all attention layers.\n                 * See `attentions` under returned tensors for more details.\n                 * @type {boolean}\n                 * @default false\n                 */\n                __publicField(this, \"output_attentions\", false);\n                /**\n                 * Whether or not to return the hidden states of all layers.\n                 * See `hidden_states` under returned tensors for more details.\n                 * @type {boolean}\n                 * @default false\n                 */\n                __publicField(this, \"output_hidden_states\", false);\n                /**\n                 * Whether or not to return the prediction scores.\n                 * See `scores` under returned tensors for more details.\n                 * @type {boolean}\n                 * @default false\n                 */\n                __publicField(this, \"output_scores\", false);\n                /**\n                 * Whether or not to return a `ModelOutput` instead of a plain tuple.\n                 * @type {boolean}\n                 * @default false\n                 */\n                __publicField(this, \"return_dict_in_generate\", false);\n                // Special tokens that can be used at generation time\n                /**\n                 * The id of the *padding* token.\n                 * @type {number}\n                 * @default null\n                 */\n                __publicField(this, \"pad_token_id\", null);\n                /**\n                 * The id of the *beginning-of-sequence* token.\n                 * @type {number}\n                 * @default null\n                 */\n                __publicField(this, \"bos_token_id\", null);\n                /**\n                 * The id of the *end-of-sequence* token.\n                 * Optionally, use a list to set multiple *end-of-sequence* tokens.\n                 * @type {number|number[]}\n                 * @default null\n                 */\n                __publicField(this, \"eos_token_id\", null);\n                // Generation parameters exclusive to encoder-decoder models\n                /**\n                 * If set to int > 0, all ngrams of that size that occur in the `encoder_input_ids` cannot occur in the `decoder_input_ids`.\n                 * @type {number}\n                 * @default 0\n                 */\n                __publicField(this, \"encoder_no_repeat_ngram_size\", 0);\n                /**\n                 * If an encoder-decoder model starts decoding with a different token than *bos*, the id of that token.\n                 * @type {number}\n                 * @default null\n                 */\n                __publicField(this, \"decoder_start_token_id\", null);\n                // Wild card\n                /**\n                 * Additional generation kwargs will be forwarded to the `generate` function of the model.\n                 * Kwargs that are not present in `generate`'s signature will be used in the model forward pass.\n                 * @type {Object}\n                 * @default {}\n                 */\n                __publicField(this, \"generation_kwargs\", {});\n                Object.assign(this, (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_0__.pick)(config, Object.getOwnPropertyNames(this)));\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/generation/logits_process.js\": (\n          /*!******************************************!*\\\n            !*** ./src/generation/logits_process.js ***!\n            \\******************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              ClassifierFreeGuidanceLogitsProcessor: () => (\n                /* binding */\n                ClassifierFreeGuidanceLogitsProcessor\n              ),\n              /* harmony export */\n              ForcedBOSTokenLogitsProcessor: () => (\n                /* binding */\n                ForcedBOSTokenLogitsProcessor\n              ),\n              /* harmony export */\n              ForcedEOSTokenLogitsProcessor: () => (\n                /* binding */\n                ForcedEOSTokenLogitsProcessor\n              ),\n              /* harmony export */\n              LogitsProcessor: () => (\n                /* binding */\n                LogitsProcessor\n              ),\n              /* harmony export */\n              LogitsProcessorList: () => (\n                /* binding */\n                LogitsProcessorList\n              ),\n              /* harmony export */\n              LogitsWarper: () => (\n                /* binding */\n                LogitsWarper\n              ),\n              /* harmony export */\n              MinLengthLogitsProcessor: () => (\n                /* binding */\n                MinLengthLogitsProcessor\n              ),\n              /* harmony export */\n              MinNewTokensLengthLogitsProcessor: () => (\n                /* binding */\n                MinNewTokensLengthLogitsProcessor\n              ),\n              /* harmony export */\n              NoBadWordsLogitsProcessor: () => (\n                /* binding */\n                NoBadWordsLogitsProcessor\n              ),\n              /* harmony export */\n              NoRepeatNGramLogitsProcessor: () => (\n                /* binding */\n                NoRepeatNGramLogitsProcessor\n              ),\n              /* harmony export */\n              RepetitionPenaltyLogitsProcessor: () => (\n                /* binding */\n                RepetitionPenaltyLogitsProcessor\n              ),\n              /* harmony export */\n              SuppressTokensAtBeginLogitsProcessor: () => (\n                /* binding */\n                SuppressTokensAtBeginLogitsProcessor\n              ),\n              /* harmony export */\n              TemperatureLogitsWarper: () => (\n                /* binding */\n                TemperatureLogitsWarper\n              ),\n              /* harmony export */\n              TopKLogitsWarper: () => (\n                /* binding */\n                TopKLogitsWarper\n              ),\n              /* harmony export */\n              TopPLogitsWarper: () => (\n                /* binding */\n                TopPLogitsWarper\n              ),\n              /* harmony export */\n              WhisperTimeStampLogitsProcessor: () => (\n                /* binding */\n                WhisperTimeStampLogitsProcessor\n              )\n              /* harmony export */\n            });\n            var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../utils/generic.js */\n              \"./src/utils/generic.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../utils/maths.js */\n              \"./src/utils/maths.js\"\n            );\n            class LogitsProcessor extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {\n              /**\n               * Apply the processor to the input logits.\n               *\n               * @abstract\n               * @param {bigint[][]} input_ids The input ids.\n               * @param {Tensor} logits The logits to process.\n               * @throws {Error} Throws an error if `_call` is not implemented in the subclass.\n               */\n              _call(input_ids, logits) {\n                throw Error(\"`_call` should be implemented in a subclass\");\n              }\n            }\n            class LogitsWarper extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {\n              /**\n               * Apply the processor to the input logits.\n               *\n               * @abstract\n               * @param {bigint[][]} input_ids The input ids.\n               * @param {Tensor} logits The logits to process.\n               * @throws {Error} Throws an error if `_call` is not implemented in the subclass.\n               */\n              _call(input_ids, logits) {\n                throw Error(\"`_call` should be implemented in a subclass\");\n              }\n            }\n            class LogitsProcessorList extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {\n              /**\n               * Constructs a new instance of `LogitsProcessorList`.\n               */\n              constructor() {\n                super();\n                this.processors = [];\n              }\n              /**\n               * Adds a new logits processor to the list.\n               *\n               * @param {LogitsProcessor} item The logits processor function to add.\n               */\n              push(item) {\n                this.processors.push(item);\n              }\n              /**\n               * Adds multiple logits processors to the list.\n               *\n               * @param {LogitsProcessor[]} items The logits processor functions to add.\n               */\n              extend(items) {\n                this.processors.push(...items);\n              }\n              /**\n               * Applies all logits processors in the list to a batch of logits, modifying them in-place.\n               *\n               * @param {bigint[][]} input_ids The input IDs for the language model.\n               * @param {Tensor} logits\n               */\n              _call(input_ids, logits) {\n                let toReturn = logits;\n                for (const processor of this.processors) {\n                  toReturn = processor(input_ids, toReturn);\n                }\n                return toReturn;\n              }\n              [Symbol.iterator]() {\n                return this.processors.values();\n              }\n            }\n            class ForcedBOSTokenLogitsProcessor extends LogitsProcessor {\n              /**\n               * Create a ForcedBOSTokenLogitsProcessor.\n               * @param {number} bos_token_id The ID of the beginning-of-sequence token to be forced.\n               */\n              constructor(bos_token_id) {\n                super();\n                this.bos_token_id = bos_token_id;\n              }\n              /**\n               * Apply the BOS token forcing to the logits.\n               * @param {bigint[][]} input_ids The input IDs.\n               * @param {Tensor} logits The logits.\n               * @returns {Tensor} The logits with BOS token forcing.\n               */\n              _call(input_ids, logits) {\n                for (let i = 0; i < input_ids.length; ++i) {\n                  if (input_ids[i].length === 1) {\n                    const batch_logits_data = (\n                      /** @type {Float32Array} */\n                      logits[i].data\n                    );\n                    batch_logits_data.fill(-Infinity);\n                    batch_logits_data[this.bos_token_id] = 0;\n                  }\n                }\n                return logits;\n              }\n            }\n            class ForcedEOSTokenLogitsProcessor extends LogitsProcessor {\n              /**\n               * Create a ForcedEOSTokenLogitsProcessor.\n               * @param {number} max_length The maximum length of the sequence to be generated.\n               * @param {number|number[]} eos_token_id The id(s) of the *end-of-sequence* token.\n               */\n              constructor(max_length, eos_token_id) {\n                super();\n                this.max_length = max_length;\n                this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];\n              }\n              /**\n               * Apply the processor to input_ids and logits.\n               * \n               * @param {bigint[][]} input_ids The input ids.\n               * @param {Tensor} logits The logits tensor.\n               */\n              _call(input_ids, logits) {\n                for (let i = 0; i < input_ids.length; ++i) {\n                  if (input_ids[i].length === this.max_length - 1) {\n                    const batch_logits_data = (\n                      /** @type {Float32Array} */\n                      logits[i].data\n                    );\n                    batch_logits_data.fill(-Infinity);\n                    for (const eos_token of this.eos_token_id) {\n                      batch_logits_data[eos_token] = 0;\n                    }\n                  }\n                }\n                return logits;\n              }\n            }\n            class SuppressTokensAtBeginLogitsProcessor extends LogitsProcessor {\n              /**\n               * Create a SuppressTokensAtBeginLogitsProcessor.\n               * @param {number[]} begin_suppress_tokens The IDs of the tokens to suppress.\n               * @param {number} begin_index The number of tokens to generate before suppressing tokens.\n               */\n              constructor(begin_suppress_tokens, begin_index) {\n                super();\n                this.begin_suppress_tokens = begin_suppress_tokens;\n                this.begin_index = begin_index;\n              }\n              /**\n               * Apply the BOS token forcing to the logits.\n               * @param {bigint[][]} input_ids The input IDs.\n               * @param {Tensor} logits The logits.\n               * @returns {Tensor} The logits with BOS token forcing.\n               */\n              _call(input_ids, logits) {\n                for (let i = 0; i < input_ids.length; ++i) {\n                  if (input_ids[i].length === this.begin_index) {\n                    const batch_logits_data = (\n                      /** @type {Float32Array} */\n                      logits[i].data\n                    );\n                    for (const token_id of this.begin_suppress_tokens) {\n                      batch_logits_data[token_id] = -Infinity;\n                    }\n                  }\n                }\n                return logits;\n              }\n            }\n            class WhisperTimeStampLogitsProcessor extends LogitsProcessor {\n              /**\n               * Constructs a new WhisperTimeStampLogitsProcessor.\n               * @param {import('../models/whisper/generation_whisper.js').WhisperGenerationConfig} generate_config The config object passed to the `generate()` method of a transformer model.\n               * @param {number[]} init_tokens The initial tokens of the input sequence.\n               */\n              constructor(generate_config, init_tokens) {\n                super();\n                this.eos_token_id = Array.isArray(generate_config.eos_token_id) ? generate_config.eos_token_id[0] : generate_config.eos_token_id;\n                this.no_timestamps_token_id = generate_config.no_timestamps_token_id;\n                this.timestamp_begin = this.no_timestamps_token_id + 1;\n                this.begin_index = init_tokens.length;\n                if (init_tokens.at(-1) === this.no_timestamps_token_id) {\n                  this.begin_index -= 1;\n                }\n                this.max_initial_timestamp_index = generate_config.max_initial_timestamp_index;\n              }\n              /**\n               * Modify the logits to handle timestamp tokens.\n               * @param {bigint[][]} input_ids The input sequence of tokens.\n               * @param {Tensor} logits The logits output by the model.\n               * @returns {Tensor} The modified logits.\n               */\n              _call(input_ids, logits) {\n                for (let i = 0; i < input_ids.length; ++i) {\n                  const batch_logits_data = (\n                    /** @type {Float32Array} */\n                    logits[i].data\n                  );\n                  batch_logits_data[this.no_timestamps_token_id] = -Infinity;\n                  if (input_ids[i].length === this.begin_index - 1) {\n                    batch_logits_data.fill(-Infinity);\n                    batch_logits_data[this.timestamp_begin] = 0;\n                    continue;\n                  }\n                  const seq = input_ids[i].slice(this.begin_index);\n                  const last_was_timestamp = seq.length >= 1 && seq[seq.length - 1] >= this.timestamp_begin;\n                  const penultimate_was_timestamp = seq.length < 2 || seq[seq.length - 2] >= this.timestamp_begin;\n                  if (last_was_timestamp) {\n                    if (penultimate_was_timestamp) {\n                      batch_logits_data.subarray(this.timestamp_begin).fill(-Infinity);\n                    } else {\n                      batch_logits_data.subarray(0, this.eos_token_id).fill(-Infinity);\n                    }\n                  }\n                  if (input_ids[i].length === this.begin_index && this.max_initial_timestamp_index !== null) {\n                    const last_allowed = this.timestamp_begin + this.max_initial_timestamp_index;\n                    batch_logits_data.subarray(last_allowed + 1).fill(-Infinity);\n                  }\n                  const logprobs = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.log_softmax)(batch_logits_data);\n                  const timestamp_logprob = Math.log(logprobs.subarray(this.timestamp_begin).map(Math.exp).reduce((a, b) => a + b));\n                  const max_text_token_logprob = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.max)(logprobs.subarray(0, this.timestamp_begin))[0];\n                  if (timestamp_logprob > max_text_token_logprob) {\n                    batch_logits_data.subarray(0, this.timestamp_begin).fill(-Infinity);\n                  }\n                }\n                return logits;\n              }\n            }\n            class NoRepeatNGramLogitsProcessor extends LogitsProcessor {\n              /**\n               * Create a NoRepeatNGramLogitsProcessor.\n               * @param {number} no_repeat_ngram_size The no-repeat-ngram size. All ngrams of this size can only occur once.\n               */\n              constructor(no_repeat_ngram_size) {\n                super();\n                this.no_repeat_ngram_size = no_repeat_ngram_size;\n              }\n              /**\n               * Generate n-grams from a sequence of token ids.\n               * @param {bigint[]} prevInputIds List of previous input ids\n               * @returns {Map<string, number[]>} Map of generated n-grams\n               */\n              getNgrams(prevInputIds) {\n                const curLen = prevInputIds.length;\n                const ngrams = [];\n                for (let j = 0; j < curLen + 1 - this.no_repeat_ngram_size; ++j) {\n                  const ngram = [];\n                  for (let k2 = 0; k2 < this.no_repeat_ngram_size; ++k2) {\n                    ngram.push(prevInputIds[j + k2]);\n                  }\n                  ngrams.push(ngram.map(Number));\n                }\n                const generatedNgram = /* @__PURE__ */ new Map();\n                for (const ngram of ngrams) {\n                  const prevNgram = ngram.slice(0, ngram.length - 1);\n                  const prevNgramKey = JSON.stringify(prevNgram);\n                  const prevNgramValue = generatedNgram.get(prevNgramKey) ?? [];\n                  prevNgramValue.push(ngram[ngram.length - 1]);\n                  generatedNgram.set(prevNgramKey, prevNgramValue);\n                }\n                return generatedNgram;\n              }\n              /**\n               * Generate n-grams from a sequence of token ids.\n               * @param {Map<string, number[]>} bannedNgrams Map of banned n-grams\n               * @param {bigint[]} prevInputIds List of previous input ids\n               * @returns {number[]} Map of generated n-grams\n               */\n              getGeneratedNgrams(bannedNgrams, prevInputIds) {\n                const ngramIdx = prevInputIds.slice(prevInputIds.length + 1 - this.no_repeat_ngram_size, prevInputIds.length);\n                const banned = bannedNgrams.get(JSON.stringify(ngramIdx.map(Number))) ?? [];\n                return banned;\n              }\n              /**\n               * Calculate banned n-gram tokens\n               * @param {bigint[]} prevInputIds List of previous input ids\n               * @returns {number[]} Map of generated n-grams\n               */\n              calcBannedNgramTokens(prevInputIds) {\n                const bannedTokens = [];\n                if (prevInputIds.length + 1 < this.no_repeat_ngram_size) {\n                  return bannedTokens;\n                } else {\n                  const generatedNgrams = this.getNgrams(prevInputIds);\n                  const bannedTokens2 = this.getGeneratedNgrams(generatedNgrams, prevInputIds);\n                  return bannedTokens2;\n                }\n              }\n              /**\n               * Apply the no-repeat-ngram processor to the logits.\n               * @param {bigint[][]} input_ids The input IDs.\n               * @param {Tensor} logits The logits.\n               * @returns {Tensor} The logits with no-repeat-ngram processing.\n               */\n              _call(input_ids, logits) {\n                for (let i = 0; i < input_ids.length; ++i) {\n                  const batch_logits_data = (\n                    /** @type {Float32Array} */\n                    logits[i].data\n                  );\n                  const bannedTokens = this.calcBannedNgramTokens(input_ids[i]);\n                  for (const token of bannedTokens) {\n                    batch_logits_data[token] = -Infinity;\n                  }\n                }\n                return logits;\n              }\n            }\n            class RepetitionPenaltyLogitsProcessor extends LogitsProcessor {\n              /**\n               * Create a RepetitionPenaltyLogitsProcessor.\n               * @param {number} penalty The parameter for repetition penalty.\n               * - 1.0 means no penalty. Above 1.0 penalizes previously generated tokens.\n               * - Between 0.0 and 1.0 rewards previously generated tokens.\n               */\n              constructor(penalty) {\n                super();\n                this.penalty = penalty;\n              }\n              /**\n               * Apply the repetition penalty to the logits.\n               * @param {bigint[][]} input_ids The input IDs.\n               * @param {Tensor} logits The logits.\n               * @returns {Tensor} The logits with repetition penalty processing.\n               */\n              _call(input_ids, logits) {\n                for (let i = 0; i < input_ids.length; ++i) {\n                  const batch_logits_data = (\n                    /** @type {Float32Array} */\n                    logits[i].data\n                  );\n                  for (const input_id of new Set(input_ids[i])) {\n                    const token = Number(input_id);\n                    if (batch_logits_data[token] < 0) {\n                      batch_logits_data[token] *= this.penalty;\n                    } else {\n                      batch_logits_data[token] /= this.penalty;\n                    }\n                  }\n                }\n                return logits;\n              }\n            }\n            class MinLengthLogitsProcessor extends LogitsProcessor {\n              /**\n               * Create a MinLengthLogitsProcessor.\n               * @param {number} min_length The minimum length below which the score of `eos_token_id` is set to negative infinity.\n               * @param {number|number[]} eos_token_id The ID/IDs of the end-of-sequence token.\n               */\n              constructor(min_length, eos_token_id) {\n                super();\n                this.min_length = min_length;\n                this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];\n              }\n              /**\n               * Apply logit processor.\n               * @param {bigint[][]} input_ids The input IDs.\n               * @param {Tensor} logits The logits.\n               * @returns {Tensor} The processed logits.\n               */\n              _call(input_ids, logits) {\n                for (let i = 0; i < input_ids.length; ++i) {\n                  if (input_ids[i].length < this.min_length) {\n                    const batch_logits_data = (\n                      /** @type {Float32Array} */\n                      logits[i].data\n                    );\n                    for (const eos_token of this.eos_token_id) {\n                      batch_logits_data[eos_token] = -Infinity;\n                    }\n                  }\n                }\n                return logits;\n              }\n            }\n            class MinNewTokensLengthLogitsProcessor extends LogitsProcessor {\n              /**\n               * Create a MinNewTokensLengthLogitsProcessor.\n               * @param {number} prompt_length_to_skip The input tokens length.\n               * @param {number} min_new_tokens The minimum *new* tokens length below which the score of `eos_token_id` is set to negative infinity.\n               * @param {number|number[]} eos_token_id The ID/IDs of the end-of-sequence token.\n               */\n              constructor(prompt_length_to_skip, min_new_tokens, eos_token_id) {\n                super();\n                this.prompt_length_to_skip = prompt_length_to_skip;\n                this.min_new_tokens = min_new_tokens;\n                this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];\n              }\n              /**\n               * Apply logit processor.\n               * @param {bigint[][]} input_ids The input IDs.\n               * @param {Tensor} logits The logits.\n               * @returns {Tensor} The processed logits.\n               */\n              _call(input_ids, logits) {\n                for (let i = 0; i < input_ids.length; ++i) {\n                  const new_tokens_length = input_ids[i].length - this.prompt_length_to_skip;\n                  if (new_tokens_length < this.min_new_tokens) {\n                    const batch_logits_data = (\n                      /** @type {Float32Array} */\n                      logits[i].data\n                    );\n                    for (const eos_token of this.eos_token_id) {\n                      batch_logits_data[eos_token] = -Infinity;\n                    }\n                  }\n                }\n                return logits;\n              }\n            }\n            class NoBadWordsLogitsProcessor extends LogitsProcessor {\n              /**\n               * Create a `NoBadWordsLogitsProcessor`.\n               * @param {number[][]} bad_words_ids List of list of token ids that are not allowed to be generated.\n               * @param {number|number[]} eos_token_id The id of the *end-of-sequence* token. Optionally, use a list to set multiple *end-of-sequence* tokens.\n               */\n              constructor(bad_words_ids, eos_token_id) {\n                super();\n                this.bad_words_ids = bad_words_ids;\n                this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];\n              }\n              /**\n               * Apply logit processor.\n               * @param {bigint[][]} input_ids The input IDs.\n               * @param {Tensor} logits The logits.\n               * @returns {Tensor} The processed logits.\n               */\n              _call(input_ids, logits) {\n                for (let i = 0; i < input_ids.length; ++i) {\n                  const batch_logits_data = (\n                    /** @type {Float32Array} */\n                    logits[i].data\n                  );\n                  const ids = input_ids[i];\n                  for (const bad_word_ids of this.bad_words_ids) {\n                    if (ids.length < bad_word_ids.length - 1) continue;\n                    let mark = true;\n                    for (let j = 1; j <= bad_word_ids.length - 1; ++j) {\n                      if (bad_word_ids.at(-j - 1) != ids.at(-j)) {\n                        mark = false;\n                        break;\n                      }\n                    }\n                    if (mark) {\n                      batch_logits_data[bad_word_ids.at(-1)] = -Infinity;\n                    }\n                  }\n                }\n                return logits;\n              }\n            }\n            class ClassifierFreeGuidanceLogitsProcessor extends LogitsProcessor {\n              /**\n               * Create a `ClassifierFreeGuidanceLogitsProcessor`.\n               * @param {number} guidance_scale The guidance scale for classifier free guidance (CFG). CFG is enabled by setting `guidance_scale > 1`.\n               * Higher guidance scale encourages the model to generate samples that are more closely linked to the input\n               * prompt, usually at the expense of poorer quality.\n               */\n              constructor(guidance_scale) {\n                super();\n                if (guidance_scale <= 1) {\n                  throw new Error(\n                    `Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${guidance_scale}.`\n                  );\n                }\n                this.guidance_scale = guidance_scale;\n              }\n              /**\n               * Apply logit processor.\n               * @param {bigint[][]} input_ids The input IDs.\n               * @param {Tensor} logits The logits.\n               * @returns {Tensor} The processed logits.\n               */\n              _call(input_ids, logits) {\n                if (logits.dims[0] !== 2 * input_ids.length) {\n                  throw new Error(\n                    `Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${logits.dims[0]} for the logits and ${input_ids.length} for the input ids.`\n                  );\n                }\n                const unguided_bsz = input_ids.length;\n                const cond_logits = logits.slice([0, unguided_bsz], null);\n                const uncond_logits = logits.slice([unguided_bsz, logits.dims[0]], null);\n                for (let i = 0; i < uncond_logits.data.length; ++i) {\n                  uncond_logits.data[i] += (cond_logits.data[i] - uncond_logits.data[i]) * this.guidance_scale;\n                }\n                return uncond_logits;\n              }\n            }\n            class TemperatureLogitsWarper extends LogitsWarper {\n              /**\n               * Create a `TemperatureLogitsWarper`.\n               * @param {number} temperature Strictly positive float value used to modulate the logits distribution.\n               * A value smaller than `1` decreases randomness (and vice versa), with `0` being equivalent to shifting\n               * all probability mass to the most likely token.\n               */\n              constructor(temperature) {\n                super();\n                if (typeof temperature !== \"number\" || temperature <= 0) {\n                  let errorMessage = `\\`temperature\\` (=${temperature}) must be a strictly positive float, otherwise your next token scores will be invalid.`;\n                  if (temperature === 0) {\n                    errorMessage += \" If you're looking for greedy decoding strategies, set `do_sample=false`.\";\n                  }\n                }\n                this.temperature = temperature;\n              }\n              /**\n               * Apply logit warper.\n               * @param {bigint[][]} input_ids The input IDs.\n               * @param {Tensor} logits The logits.\n               * @returns {Tensor} The processed logits.\n               */\n              _call(input_ids, logits) {\n                const batch_logits_data = (\n                  /** @type {Float32Array} */\n                  logits.data\n                );\n                for (let i = 0; i < batch_logits_data.length; ++i) {\n                  batch_logits_data[i] /= this.temperature;\n                }\n                return logits;\n              }\n            }\n            class TopPLogitsWarper extends LogitsWarper {\n              /**\n               * Create a `TopPLogitsWarper`.\n               * @param {number} top_p If set to < 1, only the smallest set of most probable tokens with\n               * probabilities that add up to `top_p` or higher are kept for generation.\n               * @param {Object} options Additional options for the top-p sampling.\n               * @param {number} [options.filter_value=-Infinity] All filtered values will be set to this float value.\n               * @param {number} [options.min_tokens_to_keep=1] Minimum number of tokens that cannot be filtered.\n               */\n              constructor(top_p, {\n                filter_value = -Infinity,\n                min_tokens_to_keep = 1\n              } = {}) {\n                super();\n                if (top_p < 0 || top_p > 1) {\n                  throw new Error(`\\`top_p\\` must be a float > 0 and < 1, but is ${top_p}`);\n                }\n                if (!Number.isInteger(min_tokens_to_keep) || min_tokens_to_keep < 1) {\n                  throw new Error(`\\`min_tokens_to_keep\\` must be a positive integer, but is ${min_tokens_to_keep}`);\n                }\n                this.top_p = top_p;\n                this.filter_value = filter_value;\n                this.min_tokens_to_keep = min_tokens_to_keep;\n              }\n            }\n            class TopKLogitsWarper extends LogitsWarper {\n              /**\n               * Create a `TopKLogitsWarper`.\n               * @param {number} top_k If set to > 0, only the top `top_k` tokens are kept for generation.\n               * @param {Object} options Additional options for the top-k sampling.\n               * @param {number} [options.filter_value=-Infinity] All filtered values will be set to this float value.\n               * @param {number} [options.min_tokens_to_keep=1] Minimum number of tokens that cannot be filtered.\n               */\n              constructor(top_k, {\n                filter_value = -Infinity,\n                min_tokens_to_keep = 1\n              } = {}) {\n                super();\n                if (!Number.isInteger(top_k) || top_k < 0) {\n                  throw new Error(`\\`top_k\\` must be a positive integer, but is ${top_k}`);\n                }\n                this.top_k = Math.max(top_k, min_tokens_to_keep);\n                this.filter_value = filter_value;\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/generation/logits_sampler.js\": (\n          /*!******************************************!*\\\n            !*** ./src/generation/logits_sampler.js ***!\n            \\******************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              LogitsSampler: () => (\n                /* binding */\n                LogitsSampler\n              )\n              /* harmony export */\n            });\n            var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../utils/generic.js */\n              \"./src/utils/generic.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../utils/maths.js */\n              \"./src/utils/maths.js\"\n            );\n            var _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ../generation/configuration_utils.js */\n              \"./src/generation/configuration_utils.js\"\n            );\n            class LogitsSampler extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {\n              /**\n               * Creates a new Sampler object with the specified generation config.\n               * @param {GenerationConfig} generation_config The generation config.\n               */\n              constructor(generation_config) {\n                super();\n                this.generation_config = generation_config;\n              }\n              /**\n               * Executes the sampler, using the specified logits.\n               * @param {Tensor} logits\n               * @returns {Promise<[bigint, number][]>}\n               */\n              async _call(logits) {\n                return this.sample(logits);\n              }\n              /**\n               * Abstract method for sampling the logits.\n               * @param {Tensor} logits\n               * @throws {Error} If not implemented in subclass.\n               * @returns {Promise<[bigint, number][]>}\n               */\n              async sample(logits) {\n                throw Error(\"sample should be implemented in subclasses.\");\n              }\n              /**\n               * Returns the specified logits as an array, with temperature applied.\n               * @param {Tensor} logits\n               * @param {number} index\n               * @returns {Float32Array}\n               */\n              getLogits(logits, index) {\n                let vocabSize = logits.dims.at(-1);\n                let logs = (\n                  /** @type {Float32Array} */\n                  logits.data\n                );\n                if (index === -1) {\n                  logs = logs.slice(-vocabSize);\n                } else {\n                  let startIndex = index * vocabSize;\n                  logs = logs.slice(startIndex, startIndex + vocabSize);\n                }\n                return logs;\n              }\n              /**\n               * Selects an item randomly based on the specified probabilities.\n               * @param {import(\"../transformers.js\").DataArray} probabilities An array of probabilities to use for selection.\n               * @returns {number} The index of the selected item.\n               */\n              randomSelect(probabilities) {\n                let sumProbabilities = 0;\n                for (let i = 0; i < probabilities.length; ++i) {\n                  sumProbabilities += probabilities[i];\n                }\n                let r = Math.random() * sumProbabilities;\n                for (let i = 0; i < probabilities.length; ++i) {\n                  r -= probabilities[i];\n                  if (r <= 0) {\n                    return i;\n                  }\n                }\n                return 0;\n              }\n              /**\n               * Returns a Sampler object based on the specified options.\n               * @param {GenerationConfig} generation_config An object containing options for the sampler.\n               * @returns {LogitsSampler} A Sampler object.\n               */\n              static getSampler(generation_config) {\n                if (generation_config.do_sample) {\n                  return new MultinomialSampler(generation_config);\n                } else if (generation_config.num_beams > 1) {\n                  return new BeamSearchSampler(generation_config);\n                } else {\n                  if (generation_config.num_return_sequences > 1) {\n                    throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${generation_config.num_return_sequences}.`);\n                  }\n                  return new GreedySampler(generation_config);\n                }\n              }\n            }\n            class GreedySampler extends LogitsSampler {\n              /**\n               * Sample the maximum probability of a given logits tensor.\n               * @param {Tensor} logits\n               * @returns {Promise<[bigint, number][]>} An array with a single tuple, containing the index of the maximum value and a meaningless score (since this is a greedy search).\n               */\n              async sample(logits) {\n                const argmax = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.max)(logits.data)[1];\n                return [\n                  [BigInt(argmax), 0]\n                ];\n              }\n            }\n            class MultinomialSampler extends LogitsSampler {\n              /**\n               * Sample from the logits.\n               * @param {Tensor} logits\n               * @returns {Promise<[bigint, number][]>}\n               */\n              async sample(logits) {\n                let k2 = logits.dims.at(-1);\n                if (this.generation_config.top_k > 0) {\n                  k2 = Math.min(this.generation_config.top_k, k2);\n                }\n                const [v, i] = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.topk)(logits, k2);\n                const probabilities = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.softmax)(\n                  /** @type {Float32Array} */\n                  v.data\n                );\n                return Array.from({ length: this.generation_config.num_beams }, () => {\n                  const sampledIndex = this.randomSelect(probabilities);\n                  return [\n                    i.data[sampledIndex],\n                    // token id\n                    Math.log(probabilities[sampledIndex])\n                    // score\n                  ];\n                });\n              }\n            }\n            class BeamSearchSampler extends LogitsSampler {\n              /**\n               * Sample from the logits.\n               * @param {Tensor} logits\n               * @returns {Promise<[bigint, number][]>}\n               */\n              async sample(logits) {\n                let k2 = logits.dims.at(-1);\n                if (this.generation_config.top_k > 0) {\n                  k2 = Math.min(this.generation_config.top_k, k2);\n                }\n                const [v, i] = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.topk)(logits, k2);\n                const probabilities = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.softmax)(\n                  /** @type {Float32Array} */\n                  v.data\n                );\n                return Array.from({ length: this.generation_config.num_beams }, (_, x) => {\n                  return [\n                    i.data[x],\n                    // token id\n                    Math.log(probabilities[x])\n                    // score\n                  ];\n                });\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/generation/stopping_criteria.js\": (\n          /*!*********************************************!*\\\n            !*** ./src/generation/stopping_criteria.js ***!\n            \\*********************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              EosTokenCriteria: () => (\n                /* binding */\n                EosTokenCriteria\n              ),\n              /* harmony export */\n              InterruptableStoppingCriteria: () => (\n                /* binding */\n                InterruptableStoppingCriteria\n              ),\n              /* harmony export */\n              MaxLengthCriteria: () => (\n                /* binding */\n                MaxLengthCriteria\n              ),\n              /* harmony export */\n              StoppingCriteria: () => (\n                /* binding */\n                StoppingCriteria\n              ),\n              /* harmony export */\n              StoppingCriteriaList: () => (\n                /* binding */\n                StoppingCriteriaList\n              )\n              /* harmony export */\n            });\n            var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../utils/generic.js */\n              \"./src/utils/generic.js\"\n            );\n            class StoppingCriteria extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {\n              /**\n               * \n               * @param {number[][]} input_ids (`number[][]` of shape `(batch_size, sequence_length)`):\n               * Indices of input sequence tokens in the vocabulary.\n               * @param {number[][]} scores scores (`number[][]` of shape `(batch_size, config.vocab_size)`):\n               * Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax\n               * or scores for each vocabulary token after SoftMax.\n               * @returns {boolean[]} A list of booleans indicating whether each sequence should be stopped.\n               */\n              _call(input_ids, scores) {\n                throw Error(\"StoppingCriteria needs to be subclassed\");\n              }\n            }\n            class StoppingCriteriaList extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {\n              /**\n               * Constructs a new instance of `StoppingCriteriaList`.\n               */\n              constructor() {\n                super();\n                this.criteria = [];\n              }\n              /**\n               * Adds a new stopping criterion to the list.\n               *\n               * @param {StoppingCriteria} item The stopping criterion to add.\n               */\n              push(item) {\n                this.criteria.push(item);\n              }\n              /**\n               * Adds multiple stopping criteria to the list.\n               *\n               * @param {StoppingCriteria|StoppingCriteriaList|StoppingCriteria[]} items The stopping criteria to add.\n               */\n              extend(items) {\n                if (items instanceof StoppingCriteriaList) {\n                  items = items.criteria;\n                } else if (items instanceof StoppingCriteria) {\n                  items = [items];\n                }\n                this.criteria.push(...items);\n              }\n              _call(input_ids, scores) {\n                const is_done = new Array(input_ids.length).fill(false);\n                for (const criterion of this.criteria) {\n                  const criterion_done = criterion(input_ids, scores);\n                  for (let i = 0; i < is_done.length; ++i) {\n                    is_done[i] || (is_done[i] = criterion_done[i]);\n                  }\n                }\n                return is_done;\n              }\n              [Symbol.iterator]() {\n                return this.criteria.values();\n              }\n            }\n            class MaxLengthCriteria extends StoppingCriteria {\n              /**\n               * \n               * @param {number} max_length The maximum length that the output sequence can have in number of tokens.\n               * @param {number} [max_position_embeddings=null] The maximum model length, as defined by the model's `config.max_position_embeddings` attribute.\n               */\n              constructor(max_length, max_position_embeddings = null) {\n                super();\n                this.max_length = max_length;\n                this.max_position_embeddings = max_position_embeddings;\n              }\n              _call(input_ids) {\n                return input_ids.map((ids) => ids.length >= this.max_length);\n              }\n            }\n            class EosTokenCriteria extends StoppingCriteria {\n              /**\n               * \n               * @param {number|number[]} eos_token_id The id of the *end-of-sequence* token.\n               * Optionally, use a list to set multiple *end-of-sequence* tokens.\n               */\n              constructor(eos_token_id) {\n                super();\n                if (!Array.isArray(eos_token_id)) {\n                  eos_token_id = [eos_token_id];\n                }\n                this.eos_token_id = eos_token_id;\n              }\n              /**\n               * \n               * @param {number[][]} input_ids \n               * @param {number[][]} scores \n               * @returns {boolean[]}\n               */\n              _call(input_ids, scores) {\n                return input_ids.map((ids) => {\n                  const last = ids.at(-1);\n                  return this.eos_token_id.some((eos_id) => last == eos_id);\n                });\n              }\n            }\n            class InterruptableStoppingCriteria extends StoppingCriteria {\n              constructor() {\n                super();\n                this.interrupted = false;\n              }\n              interrupt() {\n                this.interrupted = true;\n              }\n              reset() {\n                this.interrupted = false;\n              }\n              _call(input_ids, scores) {\n                return new Array(input_ids.length).fill(this.interrupted);\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/generation/streamers.js\": (\n          /*!*************************************!*\\\n            !*** ./src/generation/streamers.js ***!\n            \\*************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              BaseStreamer: () => (\n                /* binding */\n                BaseStreamer\n              ),\n              /* harmony export */\n              TextStreamer: () => (\n                /* binding */\n                TextStreamer\n              ),\n              /* harmony export */\n              WhisperTextStreamer: () => (\n                /* binding */\n                WhisperTextStreamer\n              )\n              /* harmony export */\n            });\n            var _utils_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../utils/core.js */\n              \"./src/utils/core.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            var _env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../env.js */\n              \"./src/env.js\"\n            );\n            class BaseStreamer {\n              /**\n               * Function that is called by `.generate()` to push new tokens\n               * @param {bigint[][]} value \n               */\n              put(value) {\n                throw Error(\"Not implemented\");\n              }\n              /**\n               * Function that is called by `.generate()` to signal the end of generation\n               */\n              end() {\n                throw Error(\"Not implemented\");\n              }\n            }\n            const stdout_write = _env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_PROCESS_AVAILABLE ? (x) => process.stdout.write(x) : (x) => console.log(x);\n            class TextStreamer extends BaseStreamer {\n              /**\n               * \n               * @param {import('../tokenizers.js').PreTrainedTokenizer} tokenizer\n               * @param {Object} options\n               * @param {boolean} [options.skip_prompt=false] Whether to skip the prompt tokens\n               * @param {boolean} [options.skip_special_tokens=true] Whether to skip special tokens when decoding\n               * @param {function(string): void} [options.callback_function=null] Function to call when a piece of text is ready to display\n               * @param {function(bigint[]): void} [options.token_callback_function=null] Function to call when a new token is generated\n               * @param {Object} [options.decode_kwargs={}] Additional keyword arguments to pass to the tokenizer's decode method\n               */\n              constructor(tokenizer, {\n                skip_prompt = false,\n                callback_function = null,\n                token_callback_function = null,\n                skip_special_tokens = true,\n                decode_kwargs = {},\n                ...kwargs\n              } = {}) {\n                super();\n                this.tokenizer = tokenizer;\n                this.skip_prompt = skip_prompt;\n                this.callback_function = callback_function ?? stdout_write;\n                this.token_callback_function = token_callback_function;\n                this.decode_kwargs = { skip_special_tokens, ...decode_kwargs, ...kwargs };\n                this.token_cache = [];\n                this.print_len = 0;\n                this.next_tokens_are_prompt = true;\n              }\n              /**\n               * Receives tokens, decodes them, and prints them to stdout as soon as they form entire words.\n               * @param {bigint[][]} value \n               */\n              put(value) {\n                if (value.length > 1) {\n                  throw Error(\"TextStreamer only supports batch size of 1\");\n                }\n                const is_prompt = this.next_tokens_are_prompt;\n                if (is_prompt) {\n                  this.next_tokens_are_prompt = false;\n                  if (this.skip_prompt) return;\n                }\n                const tokens = value[0];\n                this.token_callback_function?.(tokens);\n                this.token_cache = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(this.token_cache, tokens);\n                const text = this.tokenizer.decode(this.token_cache, this.decode_kwargs);\n                let printable_text;\n                if (is_prompt || text.endsWith(\"\\n\")) {\n                  printable_text = text.slice(this.print_len);\n                  this.token_cache = [];\n                  this.print_len = 0;\n                } else if (text.length > 0 && (0, _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__.is_chinese_char)(text.charCodeAt(text.length - 1))) {\n                  printable_text = text.slice(this.print_len);\n                  this.print_len += printable_text.length;\n                } else {\n                  printable_text = text.slice(this.print_len, text.lastIndexOf(\" \") + 1);\n                  this.print_len += printable_text.length;\n                }\n                this.on_finalized_text(printable_text, false);\n              }\n              /**\n               * Flushes any remaining cache and prints a newline to stdout.\n               */\n              end() {\n                let printable_text;\n                if (this.token_cache.length > 0) {\n                  const text = this.tokenizer.decode(this.token_cache, this.decode_kwargs);\n                  printable_text = text.slice(this.print_len);\n                  this.token_cache = [];\n                  this.print_len = 0;\n                } else {\n                  printable_text = \"\";\n                }\n                this.next_tokens_are_prompt = true;\n                this.on_finalized_text(printable_text, true);\n              }\n              /**\n               * Prints the new text to stdout. If the stream is ending, also prints a newline.\n               * @param {string} text \n               * @param {boolean} stream_end \n               */\n              on_finalized_text(text, stream_end) {\n                if (text.length > 0) {\n                  this.callback_function?.(text);\n                }\n                if (stream_end && this.callback_function === stdout_write && _env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_PROCESS_AVAILABLE) {\n                  this.callback_function?.(\"\\n\");\n                }\n              }\n            }\n            class WhisperTextStreamer extends TextStreamer {\n              /**\n               * @param {import('../tokenizers.js').WhisperTokenizer} tokenizer\n               * @param {Object} options\n               * @param {boolean} [options.skip_prompt=false] Whether to skip the prompt tokens\n               * @param {function(string): void} [options.callback_function=null] Function to call when a piece of text is ready to display\n               * @param {function(bigint[]): void} [options.token_callback_function=null] Function to call when a new token is generated\n               * @param {function(number): void} [options.on_chunk_start=null] Function to call when a new chunk starts\n               * @param {function(number): void} [options.on_chunk_end=null] Function to call when a chunk ends\n               * @param {function(): void} [options.on_finalize=null] Function to call when the stream is finalized\n               * @param {number} [options.time_precision=0.02] Precision of the timestamps\n               * @param {boolean} [options.skip_special_tokens=true] Whether to skip special tokens when decoding\n               * @param {Object} [options.decode_kwargs={}] Additional keyword arguments to pass to the tokenizer's decode method\n               */\n              constructor(tokenizer, {\n                skip_prompt = false,\n                callback_function = null,\n                token_callback_function = null,\n                on_chunk_start = null,\n                on_chunk_end = null,\n                on_finalize = null,\n                time_precision = 0.02,\n                skip_special_tokens = true,\n                decode_kwargs = {}\n              } = {}) {\n                super(tokenizer, {\n                  skip_prompt,\n                  skip_special_tokens,\n                  callback_function,\n                  token_callback_function,\n                  decode_kwargs\n                });\n                this.timestamp_begin = tokenizer.timestamp_begin;\n                this.on_chunk_start = on_chunk_start;\n                this.on_chunk_end = on_chunk_end;\n                this.on_finalize = on_finalize;\n                this.time_precision = time_precision;\n                this.waiting_for_timestamp = false;\n              }\n              /**\n               * @param {bigint[][]} value \n               */\n              put(value) {\n                if (value.length > 1) {\n                  throw Error(\"WhisperTextStreamer only supports batch size of 1\");\n                }\n                const tokens = value[0];\n                if (tokens.length === 1) {\n                  const offset = Number(tokens[0]) - this.timestamp_begin;\n                  if (offset >= 0) {\n                    const time = offset * this.time_precision;\n                    if (this.waiting_for_timestamp) {\n                      this.on_chunk_end?.(time);\n                    } else {\n                      this.on_chunk_start?.(time);\n                    }\n                    this.waiting_for_timestamp = !this.waiting_for_timestamp;\n                    value = [[]];\n                  }\n                }\n                return super.put(value);\n              }\n              end() {\n                super.end();\n                this.on_finalize?.();\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models.js\": (\n          /*!***********************!*\\\n            !*** ./src/models.js ***!\n            \\***********************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              ASTForAudioClassification: () => (\n                /* binding */\n                ASTForAudioClassification\n              ),\n              /* harmony export */\n              ASTModel: () => (\n                /* binding */\n                ASTModel\n              ),\n              /* harmony export */\n              ASTPreTrainedModel: () => (\n                /* binding */\n                ASTPreTrainedModel\n              ),\n              /* harmony export */\n              AlbertForMaskedLM: () => (\n                /* binding */\n                AlbertForMaskedLM\n              ),\n              /* harmony export */\n              AlbertForQuestionAnswering: () => (\n                /* binding */\n                AlbertForQuestionAnswering\n              ),\n              /* harmony export */\n              AlbertForSequenceClassification: () => (\n                /* binding */\n                AlbertForSequenceClassification\n              ),\n              /* harmony export */\n              AlbertModel: () => (\n                /* binding */\n                AlbertModel\n              ),\n              /* harmony export */\n              AlbertPreTrainedModel: () => (\n                /* binding */\n                AlbertPreTrainedModel\n              ),\n              /* harmony export */\n              AutoModel: () => (\n                /* binding */\n                AutoModel\n              ),\n              /* harmony export */\n              AutoModelForAudioClassification: () => (\n                /* binding */\n                AutoModelForAudioClassification\n              ),\n              /* harmony export */\n              AutoModelForAudioFrameClassification: () => (\n                /* binding */\n                AutoModelForAudioFrameClassification\n              ),\n              /* harmony export */\n              AutoModelForAudioTextToText: () => (\n                /* binding */\n                AutoModelForAudioTextToText\n              ),\n              /* harmony export */\n              AutoModelForCTC: () => (\n                /* binding */\n                AutoModelForCTC\n              ),\n              /* harmony export */\n              AutoModelForCausalLM: () => (\n                /* binding */\n                AutoModelForCausalLM\n              ),\n              /* harmony export */\n              AutoModelForDepthEstimation: () => (\n                /* binding */\n                AutoModelForDepthEstimation\n              ),\n              /* harmony export */\n              AutoModelForDocumentQuestionAnswering: () => (\n                /* binding */\n                AutoModelForDocumentQuestionAnswering\n              ),\n              /* harmony export */\n              AutoModelForImageClassification: () => (\n                /* binding */\n                AutoModelForImageClassification\n              ),\n              /* harmony export */\n              AutoModelForImageFeatureExtraction: () => (\n                /* binding */\n                AutoModelForImageFeatureExtraction\n              ),\n              /* harmony export */\n              AutoModelForImageMatting: () => (\n                /* binding */\n                AutoModelForImageMatting\n              ),\n              /* harmony export */\n              AutoModelForImageSegmentation: () => (\n                /* binding */\n                AutoModelForImageSegmentation\n              ),\n              /* harmony export */\n              AutoModelForImageTextToText: () => (\n                /* binding */\n                AutoModelForImageTextToText\n              ),\n              /* harmony export */\n              AutoModelForImageToImage: () => (\n                /* binding */\n                AutoModelForImageToImage\n              ),\n              /* harmony export */\n              AutoModelForMaskGeneration: () => (\n                /* binding */\n                AutoModelForMaskGeneration\n              ),\n              /* harmony export */\n              AutoModelForMaskedLM: () => (\n                /* binding */\n                AutoModelForMaskedLM\n              ),\n              /* harmony export */\n              AutoModelForNormalEstimation: () => (\n                /* binding */\n                AutoModelForNormalEstimation\n              ),\n              /* harmony export */\n              AutoModelForObjectDetection: () => (\n                /* binding */\n                AutoModelForObjectDetection\n              ),\n              /* harmony export */\n              AutoModelForPoseEstimation: () => (\n                /* binding */\n                AutoModelForPoseEstimation\n              ),\n              /* harmony export */\n              AutoModelForQuestionAnswering: () => (\n                /* binding */\n                AutoModelForQuestionAnswering\n              ),\n              /* harmony export */\n              AutoModelForSemanticSegmentation: () => (\n                /* binding */\n                AutoModelForSemanticSegmentation\n              ),\n              /* harmony export */\n              AutoModelForSeq2SeqLM: () => (\n                /* binding */\n                AutoModelForSeq2SeqLM\n              ),\n              /* harmony export */\n              AutoModelForSequenceClassification: () => (\n                /* binding */\n                AutoModelForSequenceClassification\n              ),\n              /* harmony export */\n              AutoModelForSpeechSeq2Seq: () => (\n                /* binding */\n                AutoModelForSpeechSeq2Seq\n              ),\n              /* harmony export */\n              AutoModelForTextToSpectrogram: () => (\n                /* binding */\n                AutoModelForTextToSpectrogram\n              ),\n              /* harmony export */\n              AutoModelForTextToWaveform: () => (\n                /* binding */\n                AutoModelForTextToWaveform\n              ),\n              /* harmony export */\n              AutoModelForTokenClassification: () => (\n                /* binding */\n                AutoModelForTokenClassification\n              ),\n              /* harmony export */\n              AutoModelForUniversalSegmentation: () => (\n                /* binding */\n                AutoModelForUniversalSegmentation\n              ),\n              /* harmony export */\n              AutoModelForVision2Seq: () => (\n                /* binding */\n                AutoModelForVision2Seq\n              ),\n              /* harmony export */\n              AutoModelForXVector: () => (\n                /* binding */\n                AutoModelForXVector\n              ),\n              /* harmony export */\n              AutoModelForZeroShotObjectDetection: () => (\n                /* binding */\n                AutoModelForZeroShotObjectDetection\n              ),\n              /* harmony export */\n              BartForConditionalGeneration: () => (\n                /* binding */\n                BartForConditionalGeneration\n              ),\n              /* harmony export */\n              BartForSequenceClassification: () => (\n                /* binding */\n                BartForSequenceClassification\n              ),\n              /* harmony export */\n              BartModel: () => (\n                /* binding */\n                BartModel\n              ),\n              /* harmony export */\n              BartPretrainedModel: () => (\n                /* binding */\n                BartPretrainedModel\n              ),\n              /* harmony export */\n              BaseModelOutput: () => (\n                /* binding */\n                BaseModelOutput\n              ),\n              /* harmony export */\n              BeitForImageClassification: () => (\n                /* binding */\n                BeitForImageClassification\n              ),\n              /* harmony export */\n              BeitModel: () => (\n                /* binding */\n                BeitModel\n              ),\n              /* harmony export */\n              BeitPreTrainedModel: () => (\n                /* binding */\n                BeitPreTrainedModel\n              ),\n              /* harmony export */\n              BertForMaskedLM: () => (\n                /* binding */\n                BertForMaskedLM\n              ),\n              /* harmony export */\n              BertForQuestionAnswering: () => (\n                /* binding */\n                BertForQuestionAnswering\n              ),\n              /* harmony export */\n              BertForSequenceClassification: () => (\n                /* binding */\n                BertForSequenceClassification\n              ),\n              /* harmony export */\n              BertForTokenClassification: () => (\n                /* binding */\n                BertForTokenClassification\n              ),\n              /* harmony export */\n              BertModel: () => (\n                /* binding */\n                BertModel\n              ),\n              /* harmony export */\n              BertPreTrainedModel: () => (\n                /* binding */\n                BertPreTrainedModel\n              ),\n              /* harmony export */\n              BlenderbotForConditionalGeneration: () => (\n                /* binding */\n                BlenderbotForConditionalGeneration\n              ),\n              /* harmony export */\n              BlenderbotModel: () => (\n                /* binding */\n                BlenderbotModel\n              ),\n              /* harmony export */\n              BlenderbotPreTrainedModel: () => (\n                /* binding */\n                BlenderbotPreTrainedModel\n              ),\n              /* harmony export */\n              BlenderbotSmallForConditionalGeneration: () => (\n                /* binding */\n                BlenderbotSmallForConditionalGeneration\n              ),\n              /* harmony export */\n              BlenderbotSmallModel: () => (\n                /* binding */\n                BlenderbotSmallModel\n              ),\n              /* harmony export */\n              BlenderbotSmallPreTrainedModel: () => (\n                /* binding */\n                BlenderbotSmallPreTrainedModel\n              ),\n              /* harmony export */\n              BloomForCausalLM: () => (\n                /* binding */\n                BloomForCausalLM\n              ),\n              /* harmony export */\n              BloomModel: () => (\n                /* binding */\n                BloomModel\n              ),\n              /* harmony export */\n              BloomPreTrainedModel: () => (\n                /* binding */\n                BloomPreTrainedModel\n              ),\n              /* harmony export */\n              CLIPModel: () => (\n                /* binding */\n                CLIPModel\n              ),\n              /* harmony export */\n              CLIPPreTrainedModel: () => (\n                /* binding */\n                CLIPPreTrainedModel\n              ),\n              /* harmony export */\n              CLIPSegForImageSegmentation: () => (\n                /* binding */\n                CLIPSegForImageSegmentation\n              ),\n              /* harmony export */\n              CLIPSegModel: () => (\n                /* binding */\n                CLIPSegModel\n              ),\n              /* harmony export */\n              CLIPSegPreTrainedModel: () => (\n                /* binding */\n                CLIPSegPreTrainedModel\n              ),\n              /* harmony export */\n              CLIPTextModel: () => (\n                /* binding */\n                CLIPTextModel\n              ),\n              /* harmony export */\n              CLIPTextModelWithProjection: () => (\n                /* binding */\n                CLIPTextModelWithProjection\n              ),\n              /* harmony export */\n              CLIPVisionModel: () => (\n                /* binding */\n                CLIPVisionModel\n              ),\n              /* harmony export */\n              CLIPVisionModelWithProjection: () => (\n                /* binding */\n                CLIPVisionModelWithProjection\n              ),\n              /* harmony export */\n              CamembertForMaskedLM: () => (\n                /* binding */\n                CamembertForMaskedLM\n              ),\n              /* harmony export */\n              CamembertForQuestionAnswering: () => (\n                /* binding */\n                CamembertForQuestionAnswering\n              ),\n              /* harmony export */\n              CamembertForSequenceClassification: () => (\n                /* binding */\n                CamembertForSequenceClassification\n              ),\n              /* harmony export */\n              CamembertForTokenClassification: () => (\n                /* binding */\n                CamembertForTokenClassification\n              ),\n              /* harmony export */\n              CamembertModel: () => (\n                /* binding */\n                CamembertModel\n              ),\n              /* harmony export */\n              CamembertPreTrainedModel: () => (\n                /* binding */\n                CamembertPreTrainedModel\n              ),\n              /* harmony export */\n              CausalLMOutput: () => (\n                /* binding */\n                CausalLMOutput\n              ),\n              /* harmony export */\n              CausalLMOutputWithPast: () => (\n                /* binding */\n                CausalLMOutputWithPast\n              ),\n              /* harmony export */\n              ChineseCLIPModel: () => (\n                /* binding */\n                ChineseCLIPModel\n              ),\n              /* harmony export */\n              ChineseCLIPPreTrainedModel: () => (\n                /* binding */\n                ChineseCLIPPreTrainedModel\n              ),\n              /* harmony export */\n              ClapAudioModelWithProjection: () => (\n                /* binding */\n                ClapAudioModelWithProjection\n              ),\n              /* harmony export */\n              ClapModel: () => (\n                /* binding */\n                ClapModel\n              ),\n              /* harmony export */\n              ClapPreTrainedModel: () => (\n                /* binding */\n                ClapPreTrainedModel\n              ),\n              /* harmony export */\n              ClapTextModelWithProjection: () => (\n                /* binding */\n                ClapTextModelWithProjection\n              ),\n              /* harmony export */\n              CodeGenForCausalLM: () => (\n                /* binding */\n                CodeGenForCausalLM\n              ),\n              /* harmony export */\n              CodeGenModel: () => (\n                /* binding */\n                CodeGenModel\n              ),\n              /* harmony export */\n              CodeGenPreTrainedModel: () => (\n                /* binding */\n                CodeGenPreTrainedModel\n              ),\n              /* harmony export */\n              CohereForCausalLM: () => (\n                /* binding */\n                CohereForCausalLM\n              ),\n              /* harmony export */\n              CohereModel: () => (\n                /* binding */\n                CohereModel\n              ),\n              /* harmony export */\n              CoherePreTrainedModel: () => (\n                /* binding */\n                CoherePreTrainedModel\n              ),\n              /* harmony export */\n              ConvBertForMaskedLM: () => (\n                /* binding */\n                ConvBertForMaskedLM\n              ),\n              /* harmony export */\n              ConvBertForQuestionAnswering: () => (\n                /* binding */\n                ConvBertForQuestionAnswering\n              ),\n              /* harmony export */\n              ConvBertForSequenceClassification: () => (\n                /* binding */\n                ConvBertForSequenceClassification\n              ),\n              /* harmony export */\n              ConvBertForTokenClassification: () => (\n                /* binding */\n                ConvBertForTokenClassification\n              ),\n              /* harmony export */\n              ConvBertModel: () => (\n                /* binding */\n                ConvBertModel\n              ),\n              /* harmony export */\n              ConvBertPreTrainedModel: () => (\n                /* binding */\n                ConvBertPreTrainedModel\n              ),\n              /* harmony export */\n              ConvNextForImageClassification: () => (\n                /* binding */\n                ConvNextForImageClassification\n              ),\n              /* harmony export */\n              ConvNextModel: () => (\n                /* binding */\n                ConvNextModel\n              ),\n              /* harmony export */\n              ConvNextPreTrainedModel: () => (\n                /* binding */\n                ConvNextPreTrainedModel\n              ),\n              /* harmony export */\n              ConvNextV2ForImageClassification: () => (\n                /* binding */\n                ConvNextV2ForImageClassification\n              ),\n              /* harmony export */\n              ConvNextV2Model: () => (\n                /* binding */\n                ConvNextV2Model\n              ),\n              /* harmony export */\n              ConvNextV2PreTrainedModel: () => (\n                /* binding */\n                ConvNextV2PreTrainedModel\n              ),\n              /* harmony export */\n              DPTForDepthEstimation: () => (\n                /* binding */\n                DPTForDepthEstimation\n              ),\n              /* harmony export */\n              DPTModel: () => (\n                /* binding */\n                DPTModel\n              ),\n              /* harmony export */\n              DPTPreTrainedModel: () => (\n                /* binding */\n                DPTPreTrainedModel\n              ),\n              /* harmony export */\n              DacDecoderModel: () => (\n                /* binding */\n                DacDecoderModel\n              ),\n              /* harmony export */\n              DacDecoderOutput: () => (\n                /* binding */\n                DacDecoderOutput\n              ),\n              /* harmony export */\n              DacEncoderModel: () => (\n                /* binding */\n                DacEncoderModel\n              ),\n              /* harmony export */\n              DacEncoderOutput: () => (\n                /* binding */\n                DacEncoderOutput\n              ),\n              /* harmony export */\n              DacModel: () => (\n                /* binding */\n                DacModel\n              ),\n              /* harmony export */\n              DacPreTrainedModel: () => (\n                /* binding */\n                DacPreTrainedModel\n              ),\n              /* harmony export */\n              DebertaForMaskedLM: () => (\n                /* binding */\n                DebertaForMaskedLM\n              ),\n              /* harmony export */\n              DebertaForQuestionAnswering: () => (\n                /* binding */\n                DebertaForQuestionAnswering\n              ),\n              /* harmony export */\n              DebertaForSequenceClassification: () => (\n                /* binding */\n                DebertaForSequenceClassification\n              ),\n              /* harmony export */\n              DebertaForTokenClassification: () => (\n                /* binding */\n                DebertaForTokenClassification\n              ),\n              /* harmony export */\n              DebertaModel: () => (\n                /* binding */\n                DebertaModel\n              ),\n              /* harmony export */\n              DebertaPreTrainedModel: () => (\n                /* binding */\n                DebertaPreTrainedModel\n              ),\n              /* harmony export */\n              DebertaV2ForMaskedLM: () => (\n                /* binding */\n                DebertaV2ForMaskedLM\n              ),\n              /* harmony export */\n              DebertaV2ForQuestionAnswering: () => (\n                /* binding */\n                DebertaV2ForQuestionAnswering\n              ),\n              /* harmony export */\n              DebertaV2ForSequenceClassification: () => (\n                /* binding */\n                DebertaV2ForSequenceClassification\n              ),\n              /* harmony export */\n              DebertaV2ForTokenClassification: () => (\n                /* binding */\n                DebertaV2ForTokenClassification\n              ),\n              /* harmony export */\n              DebertaV2Model: () => (\n                /* binding */\n                DebertaV2Model\n              ),\n              /* harmony export */\n              DebertaV2PreTrainedModel: () => (\n                /* binding */\n                DebertaV2PreTrainedModel\n              ),\n              /* harmony export */\n              DecisionTransformerModel: () => (\n                /* binding */\n                DecisionTransformerModel\n              ),\n              /* harmony export */\n              DecisionTransformerPreTrainedModel: () => (\n                /* binding */\n                DecisionTransformerPreTrainedModel\n              ),\n              /* harmony export */\n              DeiTForImageClassification: () => (\n                /* binding */\n                DeiTForImageClassification\n              ),\n              /* harmony export */\n              DeiTModel: () => (\n                /* binding */\n                DeiTModel\n              ),\n              /* harmony export */\n              DeiTPreTrainedModel: () => (\n                /* binding */\n                DeiTPreTrainedModel\n              ),\n              /* harmony export */\n              DepthAnythingForDepthEstimation: () => (\n                /* binding */\n                DepthAnythingForDepthEstimation\n              ),\n              /* harmony export */\n              DepthAnythingPreTrainedModel: () => (\n                /* binding */\n                DepthAnythingPreTrainedModel\n              ),\n              /* harmony export */\n              DepthProForDepthEstimation: () => (\n                /* binding */\n                DepthProForDepthEstimation\n              ),\n              /* harmony export */\n              DepthProPreTrainedModel: () => (\n                /* binding */\n                DepthProPreTrainedModel\n              ),\n              /* harmony export */\n              DetrForObjectDetection: () => (\n                /* binding */\n                DetrForObjectDetection\n              ),\n              /* harmony export */\n              DetrForSegmentation: () => (\n                /* binding */\n                DetrForSegmentation\n              ),\n              /* harmony export */\n              DetrModel: () => (\n                /* binding */\n                DetrModel\n              ),\n              /* harmony export */\n              DetrObjectDetectionOutput: () => (\n                /* binding */\n                DetrObjectDetectionOutput\n              ),\n              /* harmony export */\n              DetrPreTrainedModel: () => (\n                /* binding */\n                DetrPreTrainedModel\n              ),\n              /* harmony export */\n              DetrSegmentationOutput: () => (\n                /* binding */\n                DetrSegmentationOutput\n              ),\n              /* harmony export */\n              Dinov2ForImageClassification: () => (\n                /* binding */\n                Dinov2ForImageClassification\n              ),\n              /* harmony export */\n              Dinov2Model: () => (\n                /* binding */\n                Dinov2Model\n              ),\n              /* harmony export */\n              Dinov2PreTrainedModel: () => (\n                /* binding */\n                Dinov2PreTrainedModel\n              ),\n              /* harmony export */\n              Dinov2WithRegistersForImageClassification: () => (\n                /* binding */\n                Dinov2WithRegistersForImageClassification\n              ),\n              /* harmony export */\n              Dinov2WithRegistersModel: () => (\n                /* binding */\n                Dinov2WithRegistersModel\n              ),\n              /* harmony export */\n              Dinov2WithRegistersPreTrainedModel: () => (\n                /* binding */\n                Dinov2WithRegistersPreTrainedModel\n              ),\n              /* harmony export */\n              DistilBertForMaskedLM: () => (\n                /* binding */\n                DistilBertForMaskedLM\n              ),\n              /* harmony export */\n              DistilBertForQuestionAnswering: () => (\n                /* binding */\n                DistilBertForQuestionAnswering\n              ),\n              /* harmony export */\n              DistilBertForSequenceClassification: () => (\n                /* binding */\n                DistilBertForSequenceClassification\n              ),\n              /* harmony export */\n              DistilBertForTokenClassification: () => (\n                /* binding */\n                DistilBertForTokenClassification\n              ),\n              /* harmony export */\n              DistilBertModel: () => (\n                /* binding */\n                DistilBertModel\n              ),\n              /* harmony export */\n              DistilBertPreTrainedModel: () => (\n                /* binding */\n                DistilBertPreTrainedModel\n              ),\n              /* harmony export */\n              DonutSwinModel: () => (\n                /* binding */\n                DonutSwinModel\n              ),\n              /* harmony export */\n              DonutSwinPreTrainedModel: () => (\n                /* binding */\n                DonutSwinPreTrainedModel\n              ),\n              /* harmony export */\n              EfficientNetForImageClassification: () => (\n                /* binding */\n                EfficientNetForImageClassification\n              ),\n              /* harmony export */\n              EfficientNetModel: () => (\n                /* binding */\n                EfficientNetModel\n              ),\n              /* harmony export */\n              EfficientNetPreTrainedModel: () => (\n                /* binding */\n                EfficientNetPreTrainedModel\n              ),\n              /* harmony export */\n              ElectraForMaskedLM: () => (\n                /* binding */\n                ElectraForMaskedLM\n              ),\n              /* harmony export */\n              ElectraForQuestionAnswering: () => (\n                /* binding */\n                ElectraForQuestionAnswering\n              ),\n              /* harmony export */\n              ElectraForSequenceClassification: () => (\n                /* binding */\n                ElectraForSequenceClassification\n              ),\n              /* harmony export */\n              ElectraForTokenClassification: () => (\n                /* binding */\n                ElectraForTokenClassification\n              ),\n              /* harmony export */\n              ElectraModel: () => (\n                /* binding */\n                ElectraModel\n              ),\n              /* harmony export */\n              ElectraPreTrainedModel: () => (\n                /* binding */\n                ElectraPreTrainedModel\n              ),\n              /* harmony export */\n              EsmForMaskedLM: () => (\n                /* binding */\n                EsmForMaskedLM\n              ),\n              /* harmony export */\n              EsmForSequenceClassification: () => (\n                /* binding */\n                EsmForSequenceClassification\n              ),\n              /* harmony export */\n              EsmForTokenClassification: () => (\n                /* binding */\n                EsmForTokenClassification\n              ),\n              /* harmony export */\n              EsmModel: () => (\n                /* binding */\n                EsmModel\n              ),\n              /* harmony export */\n              EsmPreTrainedModel: () => (\n                /* binding */\n                EsmPreTrainedModel\n              ),\n              /* harmony export */\n              ExaoneForCausalLM: () => (\n                /* binding */\n                ExaoneForCausalLM\n              ),\n              /* harmony export */\n              ExaoneModel: () => (\n                /* binding */\n                ExaoneModel\n              ),\n              /* harmony export */\n              ExaonePreTrainedModel: () => (\n                /* binding */\n                ExaonePreTrainedModel\n              ),\n              /* harmony export */\n              FalconForCausalLM: () => (\n                /* binding */\n                FalconForCausalLM\n              ),\n              /* harmony export */\n              FalconModel: () => (\n                /* binding */\n                FalconModel\n              ),\n              /* harmony export */\n              FalconPreTrainedModel: () => (\n                /* binding */\n                FalconPreTrainedModel\n              ),\n              /* harmony export */\n              FastViTForImageClassification: () => (\n                /* binding */\n                FastViTForImageClassification\n              ),\n              /* harmony export */\n              FastViTModel: () => (\n                /* binding */\n                FastViTModel\n              ),\n              /* harmony export */\n              FastViTPreTrainedModel: () => (\n                /* binding */\n                FastViTPreTrainedModel\n              ),\n              /* harmony export */\n              Florence2ForConditionalGeneration: () => (\n                /* binding */\n                Florence2ForConditionalGeneration\n              ),\n              /* harmony export */\n              Florence2PreTrainedModel: () => (\n                /* binding */\n                Florence2PreTrainedModel\n              ),\n              /* harmony export */\n              GLPNForDepthEstimation: () => (\n                /* binding */\n                GLPNForDepthEstimation\n              ),\n              /* harmony export */\n              GLPNModel: () => (\n                /* binding */\n                GLPNModel\n              ),\n              /* harmony export */\n              GLPNPreTrainedModel: () => (\n                /* binding */\n                GLPNPreTrainedModel\n              ),\n              /* harmony export */\n              GPT2LMHeadModel: () => (\n                /* binding */\n                GPT2LMHeadModel\n              ),\n              /* harmony export */\n              GPT2Model: () => (\n                /* binding */\n                GPT2Model\n              ),\n              /* harmony export */\n              GPT2PreTrainedModel: () => (\n                /* binding */\n                GPT2PreTrainedModel\n              ),\n              /* harmony export */\n              GPTBigCodeForCausalLM: () => (\n                /* binding */\n                GPTBigCodeForCausalLM\n              ),\n              /* harmony export */\n              GPTBigCodeModel: () => (\n                /* binding */\n                GPTBigCodeModel\n              ),\n              /* harmony export */\n              GPTBigCodePreTrainedModel: () => (\n                /* binding */\n                GPTBigCodePreTrainedModel\n              ),\n              /* harmony export */\n              GPTJForCausalLM: () => (\n                /* binding */\n                GPTJForCausalLM\n              ),\n              /* harmony export */\n              GPTJModel: () => (\n                /* binding */\n                GPTJModel\n              ),\n              /* harmony export */\n              GPTJPreTrainedModel: () => (\n                /* binding */\n                GPTJPreTrainedModel\n              ),\n              /* harmony export */\n              GPTNeoForCausalLM: () => (\n                /* binding */\n                GPTNeoForCausalLM\n              ),\n              /* harmony export */\n              GPTNeoModel: () => (\n                /* binding */\n                GPTNeoModel\n              ),\n              /* harmony export */\n              GPTNeoPreTrainedModel: () => (\n                /* binding */\n                GPTNeoPreTrainedModel\n              ),\n              /* harmony export */\n              GPTNeoXForCausalLM: () => (\n                /* binding */\n                GPTNeoXForCausalLM\n              ),\n              /* harmony export */\n              GPTNeoXModel: () => (\n                /* binding */\n                GPTNeoXModel\n              ),\n              /* harmony export */\n              GPTNeoXPreTrainedModel: () => (\n                /* binding */\n                GPTNeoXPreTrainedModel\n              ),\n              /* harmony export */\n              Gemma2ForCausalLM: () => (\n                /* binding */\n                Gemma2ForCausalLM\n              ),\n              /* harmony export */\n              Gemma2Model: () => (\n                /* binding */\n                Gemma2Model\n              ),\n              /* harmony export */\n              Gemma2PreTrainedModel: () => (\n                /* binding */\n                Gemma2PreTrainedModel\n              ),\n              /* harmony export */\n              Gemma3ForCausalLM: () => (\n                /* binding */\n                Gemma3ForCausalLM\n              ),\n              /* harmony export */\n              Gemma3Model: () => (\n                /* binding */\n                Gemma3Model\n              ),\n              /* harmony export */\n              Gemma3PreTrainedModel: () => (\n                /* binding */\n                Gemma3PreTrainedModel\n              ),\n              /* harmony export */\n              GemmaForCausalLM: () => (\n                /* binding */\n                GemmaForCausalLM\n              ),\n              /* harmony export */\n              GemmaModel: () => (\n                /* binding */\n                GemmaModel\n              ),\n              /* harmony export */\n              GemmaPreTrainedModel: () => (\n                /* binding */\n                GemmaPreTrainedModel\n              ),\n              /* harmony export */\n              GlmForCausalLM: () => (\n                /* binding */\n                GlmForCausalLM\n              ),\n              /* harmony export */\n              GlmModel: () => (\n                /* binding */\n                GlmModel\n              ),\n              /* harmony export */\n              GlmPreTrainedModel: () => (\n                /* binding */\n                GlmPreTrainedModel\n              ),\n              /* harmony export */\n              GraniteForCausalLM: () => (\n                /* binding */\n                GraniteForCausalLM\n              ),\n              /* harmony export */\n              GraniteModel: () => (\n                /* binding */\n                GraniteModel\n              ),\n              /* harmony export */\n              GranitePreTrainedModel: () => (\n                /* binding */\n                GranitePreTrainedModel\n              ),\n              /* harmony export */\n              GroundingDinoForObjectDetection: () => (\n                /* binding */\n                GroundingDinoForObjectDetection\n              ),\n              /* harmony export */\n              GroundingDinoPreTrainedModel: () => (\n                /* binding */\n                GroundingDinoPreTrainedModel\n              ),\n              /* harmony export */\n              GroupViTModel: () => (\n                /* binding */\n                GroupViTModel\n              ),\n              /* harmony export */\n              GroupViTPreTrainedModel: () => (\n                /* binding */\n                GroupViTPreTrainedModel\n              ),\n              /* harmony export */\n              HeliumForCausalLM: () => (\n                /* binding */\n                HeliumForCausalLM\n              ),\n              /* harmony export */\n              HeliumModel: () => (\n                /* binding */\n                HeliumModel\n              ),\n              /* harmony export */\n              HeliumPreTrainedModel: () => (\n                /* binding */\n                HeliumPreTrainedModel\n              ),\n              /* harmony export */\n              HieraForImageClassification: () => (\n                /* binding */\n                HieraForImageClassification\n              ),\n              /* harmony export */\n              HieraModel: () => (\n                /* binding */\n                HieraModel\n              ),\n              /* harmony export */\n              HieraPreTrainedModel: () => (\n                /* binding */\n                HieraPreTrainedModel\n              ),\n              /* harmony export */\n              HubertForCTC: () => (\n                /* binding */\n                HubertForCTC\n              ),\n              /* harmony export */\n              HubertForSequenceClassification: () => (\n                /* binding */\n                HubertForSequenceClassification\n              ),\n              /* harmony export */\n              HubertModel: () => (\n                /* binding */\n                HubertModel\n              ),\n              /* harmony export */\n              HubertPreTrainedModel: () => (\n                /* binding */\n                HubertPreTrainedModel\n              ),\n              /* harmony export */\n              IJepaForImageClassification: () => (\n                /* binding */\n                IJepaForImageClassification\n              ),\n              /* harmony export */\n              IJepaModel: () => (\n                /* binding */\n                IJepaModel\n              ),\n              /* harmony export */\n              IJepaPreTrainedModel: () => (\n                /* binding */\n                IJepaPreTrainedModel\n              ),\n              /* harmony export */\n              Idefics3ForConditionalGeneration: () => (\n                /* binding */\n                Idefics3ForConditionalGeneration\n              ),\n              /* harmony export */\n              Idefics3PreTrainedModel: () => (\n                /* binding */\n                Idefics3PreTrainedModel\n              ),\n              /* harmony export */\n              ImageMattingOutput: () => (\n                /* binding */\n                ImageMattingOutput\n              ),\n              /* harmony export */\n              JAISLMHeadModel: () => (\n                /* binding */\n                JAISLMHeadModel\n              ),\n              /* harmony export */\n              JAISModel: () => (\n                /* binding */\n                JAISModel\n              ),\n              /* harmony export */\n              JAISPreTrainedModel: () => (\n                /* binding */\n                JAISPreTrainedModel\n              ),\n              /* harmony export */\n              JinaCLIPModel: () => (\n                /* binding */\n                JinaCLIPModel\n              ),\n              /* harmony export */\n              JinaCLIPPreTrainedModel: () => (\n                /* binding */\n                JinaCLIPPreTrainedModel\n              ),\n              /* harmony export */\n              JinaCLIPTextModel: () => (\n                /* binding */\n                JinaCLIPTextModel\n              ),\n              /* harmony export */\n              JinaCLIPVisionModel: () => (\n                /* binding */\n                JinaCLIPVisionModel\n              ),\n              /* harmony export */\n              LiteWhisperForConditionalGeneration: () => (\n                /* binding */\n                LiteWhisperForConditionalGeneration\n              ),\n              /* harmony export */\n              LlamaForCausalLM: () => (\n                /* binding */\n                LlamaForCausalLM\n              ),\n              /* harmony export */\n              LlamaModel: () => (\n                /* binding */\n                LlamaModel\n              ),\n              /* harmony export */\n              LlamaPreTrainedModel: () => (\n                /* binding */\n                LlamaPreTrainedModel\n              ),\n              /* harmony export */\n              LlavaForConditionalGeneration: () => (\n                /* binding */\n                LlavaForConditionalGeneration\n              ),\n              /* harmony export */\n              LlavaOnevisionForConditionalGeneration: () => (\n                /* binding */\n                LlavaOnevisionForConditionalGeneration\n              ),\n              /* harmony export */\n              LlavaPreTrainedModel: () => (\n                /* binding */\n                LlavaPreTrainedModel\n              ),\n              /* harmony export */\n              LongT5ForConditionalGeneration: () => (\n                /* binding */\n                LongT5ForConditionalGeneration\n              ),\n              /* harmony export */\n              LongT5Model: () => (\n                /* binding */\n                LongT5Model\n              ),\n              /* harmony export */\n              LongT5PreTrainedModel: () => (\n                /* binding */\n                LongT5PreTrainedModel\n              ),\n              /* harmony export */\n              M2M100ForConditionalGeneration: () => (\n                /* binding */\n                M2M100ForConditionalGeneration\n              ),\n              /* harmony export */\n              M2M100Model: () => (\n                /* binding */\n                M2M100Model\n              ),\n              /* harmony export */\n              M2M100PreTrainedModel: () => (\n                /* binding */\n                M2M100PreTrainedModel\n              ),\n              /* harmony export */\n              MBartForCausalLM: () => (\n                /* binding */\n                MBartForCausalLM\n              ),\n              /* harmony export */\n              MBartForConditionalGeneration: () => (\n                /* binding */\n                MBartForConditionalGeneration\n              ),\n              /* harmony export */\n              MBartForSequenceClassification: () => (\n                /* binding */\n                MBartForSequenceClassification\n              ),\n              /* harmony export */\n              MBartModel: () => (\n                /* binding */\n                MBartModel\n              ),\n              /* harmony export */\n              MBartPreTrainedModel: () => (\n                /* binding */\n                MBartPreTrainedModel\n              ),\n              /* harmony export */\n              MPNetForMaskedLM: () => (\n                /* binding */\n                MPNetForMaskedLM\n              ),\n              /* harmony export */\n              MPNetForQuestionAnswering: () => (\n                /* binding */\n                MPNetForQuestionAnswering\n              ),\n              /* harmony export */\n              MPNetForSequenceClassification: () => (\n                /* binding */\n                MPNetForSequenceClassification\n              ),\n              /* harmony export */\n              MPNetForTokenClassification: () => (\n                /* binding */\n                MPNetForTokenClassification\n              ),\n              /* harmony export */\n              MPNetModel: () => (\n                /* binding */\n                MPNetModel\n              ),\n              /* harmony export */\n              MPNetPreTrainedModel: () => (\n                /* binding */\n                MPNetPreTrainedModel\n              ),\n              /* harmony export */\n              MT5ForConditionalGeneration: () => (\n                /* binding */\n                MT5ForConditionalGeneration\n              ),\n              /* harmony export */\n              MT5Model: () => (\n                /* binding */\n                MT5Model\n              ),\n              /* harmony export */\n              MT5PreTrainedModel: () => (\n                /* binding */\n                MT5PreTrainedModel\n              ),\n              /* harmony export */\n              MarianMTModel: () => (\n                /* binding */\n                MarianMTModel\n              ),\n              /* harmony export */\n              MarianModel: () => (\n                /* binding */\n                MarianModel\n              ),\n              /* harmony export */\n              MarianPreTrainedModel: () => (\n                /* binding */\n                MarianPreTrainedModel\n              ),\n              /* harmony export */\n              MaskFormerForInstanceSegmentation: () => (\n                /* binding */\n                MaskFormerForInstanceSegmentation\n              ),\n              /* harmony export */\n              MaskFormerModel: () => (\n                /* binding */\n                MaskFormerModel\n              ),\n              /* harmony export */\n              MaskFormerPreTrainedModel: () => (\n                /* binding */\n                MaskFormerPreTrainedModel\n              ),\n              /* harmony export */\n              MaskedLMOutput: () => (\n                /* binding */\n                MaskedLMOutput\n              ),\n              /* harmony export */\n              Metric3DForDepthEstimation: () => (\n                /* binding */\n                Metric3DForDepthEstimation\n              ),\n              /* harmony export */\n              Metric3DPreTrainedModel: () => (\n                /* binding */\n                Metric3DPreTrainedModel\n              ),\n              /* harmony export */\n              Metric3Dv2ForDepthEstimation: () => (\n                /* binding */\n                Metric3Dv2ForDepthEstimation\n              ),\n              /* harmony export */\n              Metric3Dv2PreTrainedModel: () => (\n                /* binding */\n                Metric3Dv2PreTrainedModel\n              ),\n              /* harmony export */\n              MgpstrForSceneTextRecognition: () => (\n                /* binding */\n                MgpstrForSceneTextRecognition\n              ),\n              /* harmony export */\n              MgpstrModelOutput: () => (\n                /* binding */\n                MgpstrModelOutput\n              ),\n              /* harmony export */\n              MgpstrPreTrainedModel: () => (\n                /* binding */\n                MgpstrPreTrainedModel\n              ),\n              /* harmony export */\n              MimiDecoderModel: () => (\n                /* binding */\n                MimiDecoderModel\n              ),\n              /* harmony export */\n              MimiDecoderOutput: () => (\n                /* binding */\n                MimiDecoderOutput\n              ),\n              /* harmony export */\n              MimiEncoderModel: () => (\n                /* binding */\n                MimiEncoderModel\n              ),\n              /* harmony export */\n              MimiEncoderOutput: () => (\n                /* binding */\n                MimiEncoderOutput\n              ),\n              /* harmony export */\n              MimiModel: () => (\n                /* binding */\n                MimiModel\n              ),\n              /* harmony export */\n              MimiPreTrainedModel: () => (\n                /* binding */\n                MimiPreTrainedModel\n              ),\n              /* harmony export */\n              MistralForCausalLM: () => (\n                /* binding */\n                MistralForCausalLM\n              ),\n              /* harmony export */\n              MistralModel: () => (\n                /* binding */\n                MistralModel\n              ),\n              /* harmony export */\n              MistralPreTrainedModel: () => (\n                /* binding */\n                MistralPreTrainedModel\n              ),\n              /* harmony export */\n              MobileBertForMaskedLM: () => (\n                /* binding */\n                MobileBertForMaskedLM\n              ),\n              /* harmony export */\n              MobileBertForQuestionAnswering: () => (\n                /* binding */\n                MobileBertForQuestionAnswering\n              ),\n              /* harmony export */\n              MobileBertForSequenceClassification: () => (\n                /* binding */\n                MobileBertForSequenceClassification\n              ),\n              /* harmony export */\n              MobileBertModel: () => (\n                /* binding */\n                MobileBertModel\n              ),\n              /* harmony export */\n              MobileBertPreTrainedModel: () => (\n                /* binding */\n                MobileBertPreTrainedModel\n              ),\n              /* harmony export */\n              MobileLLMForCausalLM: () => (\n                /* binding */\n                MobileLLMForCausalLM\n              ),\n              /* harmony export */\n              MobileLLMModel: () => (\n                /* binding */\n                MobileLLMModel\n              ),\n              /* harmony export */\n              MobileLLMPreTrainedModel: () => (\n                /* binding */\n                MobileLLMPreTrainedModel\n              ),\n              /* harmony export */\n              MobileNetV1ForImageClassification: () => (\n                /* binding */\n                MobileNetV1ForImageClassification\n              ),\n              /* harmony export */\n              MobileNetV1ForSemanticSegmentation: () => (\n                /* binding */\n                MobileNetV1ForSemanticSegmentation\n              ),\n              /* harmony export */\n              MobileNetV1Model: () => (\n                /* binding */\n                MobileNetV1Model\n              ),\n              /* harmony export */\n              MobileNetV1PreTrainedModel: () => (\n                /* binding */\n                MobileNetV1PreTrainedModel\n              ),\n              /* harmony export */\n              MobileNetV2ForImageClassification: () => (\n                /* binding */\n                MobileNetV2ForImageClassification\n              ),\n              /* harmony export */\n              MobileNetV2ForSemanticSegmentation: () => (\n                /* binding */\n                MobileNetV2ForSemanticSegmentation\n              ),\n              /* harmony export */\n              MobileNetV2Model: () => (\n                /* binding */\n                MobileNetV2Model\n              ),\n              /* harmony export */\n              MobileNetV2PreTrainedModel: () => (\n                /* binding */\n                MobileNetV2PreTrainedModel\n              ),\n              /* harmony export */\n              MobileNetV3ForImageClassification: () => (\n                /* binding */\n                MobileNetV3ForImageClassification\n              ),\n              /* harmony export */\n              MobileNetV3ForSemanticSegmentation: () => (\n                /* binding */\n                MobileNetV3ForSemanticSegmentation\n              ),\n              /* harmony export */\n              MobileNetV3Model: () => (\n                /* binding */\n                MobileNetV3Model\n              ),\n              /* harmony export */\n              MobileNetV3PreTrainedModel: () => (\n                /* binding */\n                MobileNetV3PreTrainedModel\n              ),\n              /* harmony export */\n              MobileNetV4ForImageClassification: () => (\n                /* binding */\n                MobileNetV4ForImageClassification\n              ),\n              /* harmony export */\n              MobileNetV4ForSemanticSegmentation: () => (\n                /* binding */\n                MobileNetV4ForSemanticSegmentation\n              ),\n              /* harmony export */\n              MobileNetV4Model: () => (\n                /* binding */\n                MobileNetV4Model\n              ),\n              /* harmony export */\n              MobileNetV4PreTrainedModel: () => (\n                /* binding */\n                MobileNetV4PreTrainedModel\n              ),\n              /* harmony export */\n              MobileViTForImageClassification: () => (\n                /* binding */\n                MobileViTForImageClassification\n              ),\n              /* harmony export */\n              MobileViTModel: () => (\n                /* binding */\n                MobileViTModel\n              ),\n              /* harmony export */\n              MobileViTPreTrainedModel: () => (\n                /* binding */\n                MobileViTPreTrainedModel\n              ),\n              /* harmony export */\n              MobileViTV2ForImageClassification: () => (\n                /* binding */\n                MobileViTV2ForImageClassification\n              ),\n              /* harmony export */\n              MobileViTV2Model: () => (\n                /* binding */\n                MobileViTV2Model\n              ),\n              /* harmony export */\n              MobileViTV2PreTrainedModel: () => (\n                /* binding */\n                MobileViTV2PreTrainedModel\n              ),\n              /* harmony export */\n              ModelOutput: () => (\n                /* binding */\n                ModelOutput\n              ),\n              /* harmony export */\n              ModernBertForMaskedLM: () => (\n                /* binding */\n                ModernBertForMaskedLM\n              ),\n              /* harmony export */\n              ModernBertForSequenceClassification: () => (\n                /* binding */\n                ModernBertForSequenceClassification\n              ),\n              /* harmony export */\n              ModernBertForTokenClassification: () => (\n                /* binding */\n                ModernBertForTokenClassification\n              ),\n              /* harmony export */\n              ModernBertModel: () => (\n                /* binding */\n                ModernBertModel\n              ),\n              /* harmony export */\n              ModernBertPreTrainedModel: () => (\n                /* binding */\n                ModernBertPreTrainedModel\n              ),\n              /* harmony export */\n              Moondream1ForConditionalGeneration: () => (\n                /* binding */\n                Moondream1ForConditionalGeneration\n              ),\n              /* harmony export */\n              MoonshineForConditionalGeneration: () => (\n                /* binding */\n                MoonshineForConditionalGeneration\n              ),\n              /* harmony export */\n              MoonshineModel: () => (\n                /* binding */\n                MoonshineModel\n              ),\n              /* harmony export */\n              MoonshinePreTrainedModel: () => (\n                /* binding */\n                MoonshinePreTrainedModel\n              ),\n              /* harmony export */\n              MptForCausalLM: () => (\n                /* binding */\n                MptForCausalLM\n              ),\n              /* harmony export */\n              MptModel: () => (\n                /* binding */\n                MptModel\n              ),\n              /* harmony export */\n              MptPreTrainedModel: () => (\n                /* binding */\n                MptPreTrainedModel\n              ),\n              /* harmony export */\n              MultiModalityCausalLM: () => (\n                /* binding */\n                MultiModalityCausalLM\n              ),\n              /* harmony export */\n              MultiModalityPreTrainedModel: () => (\n                /* binding */\n                MultiModalityPreTrainedModel\n              ),\n              /* harmony export */\n              MusicgenForCausalLM: () => (\n                /* binding */\n                MusicgenForCausalLM\n              ),\n              /* harmony export */\n              MusicgenForConditionalGeneration: () => (\n                /* binding */\n                MusicgenForConditionalGeneration\n              ),\n              /* harmony export */\n              MusicgenModel: () => (\n                /* binding */\n                MusicgenModel\n              ),\n              /* harmony export */\n              MusicgenPreTrainedModel: () => (\n                /* binding */\n                MusicgenPreTrainedModel\n              ),\n              /* harmony export */\n              NomicBertModel: () => (\n                /* binding */\n                NomicBertModel\n              ),\n              /* harmony export */\n              NomicBertPreTrainedModel: () => (\n                /* binding */\n                NomicBertPreTrainedModel\n              ),\n              /* harmony export */\n              OPTForCausalLM: () => (\n                /* binding */\n                OPTForCausalLM\n              ),\n              /* harmony export */\n              OPTModel: () => (\n                /* binding */\n                OPTModel\n              ),\n              /* harmony export */\n              OPTPreTrainedModel: () => (\n                /* binding */\n                OPTPreTrainedModel\n              ),\n              /* harmony export */\n              Olmo2ForCausalLM: () => (\n                /* binding */\n                Olmo2ForCausalLM\n              ),\n              /* harmony export */\n              Olmo2Model: () => (\n                /* binding */\n                Olmo2Model\n              ),\n              /* harmony export */\n              Olmo2PreTrainedModel: () => (\n                /* binding */\n                Olmo2PreTrainedModel\n              ),\n              /* harmony export */\n              OlmoForCausalLM: () => (\n                /* binding */\n                OlmoForCausalLM\n              ),\n              /* harmony export */\n              OlmoModel: () => (\n                /* binding */\n                OlmoModel\n              ),\n              /* harmony export */\n              OlmoPreTrainedModel: () => (\n                /* binding */\n                OlmoPreTrainedModel\n              ),\n              /* harmony export */\n              OpenELMForCausalLM: () => (\n                /* binding */\n                OpenELMForCausalLM\n              ),\n              /* harmony export */\n              OpenELMModel: () => (\n                /* binding */\n                OpenELMModel\n              ),\n              /* harmony export */\n              OpenELMPreTrainedModel: () => (\n                /* binding */\n                OpenELMPreTrainedModel\n              ),\n              /* harmony export */\n              OwlViTForObjectDetection: () => (\n                /* binding */\n                OwlViTForObjectDetection\n              ),\n              /* harmony export */\n              OwlViTModel: () => (\n                /* binding */\n                OwlViTModel\n              ),\n              /* harmony export */\n              OwlViTPreTrainedModel: () => (\n                /* binding */\n                OwlViTPreTrainedModel\n              ),\n              /* harmony export */\n              Owlv2ForObjectDetection: () => (\n                /* binding */\n                Owlv2ForObjectDetection\n              ),\n              /* harmony export */\n              Owlv2Model: () => (\n                /* binding */\n                Owlv2Model\n              ),\n              /* harmony export */\n              Owlv2PreTrainedModel: () => (\n                /* binding */\n                Owlv2PreTrainedModel\n              ),\n              /* harmony export */\n              PaliGemmaForConditionalGeneration: () => (\n                /* binding */\n                PaliGemmaForConditionalGeneration\n              ),\n              /* harmony export */\n              PaliGemmaPreTrainedModel: () => (\n                /* binding */\n                PaliGemmaPreTrainedModel\n              ),\n              /* harmony export */\n              PatchTSMixerForPrediction: () => (\n                /* binding */\n                PatchTSMixerForPrediction\n              ),\n              /* harmony export */\n              PatchTSMixerModel: () => (\n                /* binding */\n                PatchTSMixerModel\n              ),\n              /* harmony export */\n              PatchTSMixerPreTrainedModel: () => (\n                /* binding */\n                PatchTSMixerPreTrainedModel\n              ),\n              /* harmony export */\n              PatchTSTForPrediction: () => (\n                /* binding */\n                PatchTSTForPrediction\n              ),\n              /* harmony export */\n              PatchTSTModel: () => (\n                /* binding */\n                PatchTSTModel\n              ),\n              /* harmony export */\n              PatchTSTPreTrainedModel: () => (\n                /* binding */\n                PatchTSTPreTrainedModel\n              ),\n              /* harmony export */\n              Phi3ForCausalLM: () => (\n                /* binding */\n                Phi3ForCausalLM\n              ),\n              /* harmony export */\n              Phi3Model: () => (\n                /* binding */\n                Phi3Model\n              ),\n              /* harmony export */\n              Phi3PreTrainedModel: () => (\n                /* binding */\n                Phi3PreTrainedModel\n              ),\n              /* harmony export */\n              Phi3VForCausalLM: () => (\n                /* binding */\n                Phi3VForCausalLM\n              ),\n              /* harmony export */\n              Phi3VPreTrainedModel: () => (\n                /* binding */\n                Phi3VPreTrainedModel\n              ),\n              /* harmony export */\n              PhiForCausalLM: () => (\n                /* binding */\n                PhiForCausalLM\n              ),\n              /* harmony export */\n              PhiModel: () => (\n                /* binding */\n                PhiModel\n              ),\n              /* harmony export */\n              PhiPreTrainedModel: () => (\n                /* binding */\n                PhiPreTrainedModel\n              ),\n              /* harmony export */\n              PreTrainedModel: () => (\n                /* binding */\n                PreTrainedModel\n              ),\n              /* harmony export */\n              PretrainedMixin: () => (\n                /* binding */\n                PretrainedMixin\n              ),\n              /* harmony export */\n              PvtForImageClassification: () => (\n                /* binding */\n                PvtForImageClassification\n              ),\n              /* harmony export */\n              PvtModel: () => (\n                /* binding */\n                PvtModel\n              ),\n              /* harmony export */\n              PvtPreTrainedModel: () => (\n                /* binding */\n                PvtPreTrainedModel\n              ),\n              /* harmony export */\n              PyAnnoteForAudioFrameClassification: () => (\n                /* binding */\n                PyAnnoteForAudioFrameClassification\n              ),\n              /* harmony export */\n              PyAnnoteModel: () => (\n                /* binding */\n                PyAnnoteModel\n              ),\n              /* harmony export */\n              PyAnnotePreTrainedModel: () => (\n                /* binding */\n                PyAnnotePreTrainedModel\n              ),\n              /* harmony export */\n              QuestionAnsweringModelOutput: () => (\n                /* binding */\n                QuestionAnsweringModelOutput\n              ),\n              /* harmony export */\n              Qwen2ForCausalLM: () => (\n                /* binding */\n                Qwen2ForCausalLM\n              ),\n              /* harmony export */\n              Qwen2Model: () => (\n                /* binding */\n                Qwen2Model\n              ),\n              /* harmony export */\n              Qwen2PreTrainedModel: () => (\n                /* binding */\n                Qwen2PreTrainedModel\n              ),\n              /* harmony export */\n              Qwen2VLForConditionalGeneration: () => (\n                /* binding */\n                Qwen2VLForConditionalGeneration\n              ),\n              /* harmony export */\n              Qwen2VLPreTrainedModel: () => (\n                /* binding */\n                Qwen2VLPreTrainedModel\n              ),\n              /* harmony export */\n              RFDetrForObjectDetection: () => (\n                /* binding */\n                RFDetrForObjectDetection\n              ),\n              /* harmony export */\n              RFDetrModel: () => (\n                /* binding */\n                RFDetrModel\n              ),\n              /* harmony export */\n              RFDetrObjectDetectionOutput: () => (\n                /* binding */\n                RFDetrObjectDetectionOutput\n              ),\n              /* harmony export */\n              RFDetrPreTrainedModel: () => (\n                /* binding */\n                RFDetrPreTrainedModel\n              ),\n              /* harmony export */\n              RTDetrForObjectDetection: () => (\n                /* binding */\n                RTDetrForObjectDetection\n              ),\n              /* harmony export */\n              RTDetrModel: () => (\n                /* binding */\n                RTDetrModel\n              ),\n              /* harmony export */\n              RTDetrObjectDetectionOutput: () => (\n                /* binding */\n                RTDetrObjectDetectionOutput\n              ),\n              /* harmony export */\n              RTDetrPreTrainedModel: () => (\n                /* binding */\n                RTDetrPreTrainedModel\n              ),\n              /* harmony export */\n              RTDetrV2ForObjectDetection: () => (\n                /* binding */\n                RTDetrV2ForObjectDetection\n              ),\n              /* harmony export */\n              RTDetrV2Model: () => (\n                /* binding */\n                RTDetrV2Model\n              ),\n              /* harmony export */\n              RTDetrV2ObjectDetectionOutput: () => (\n                /* binding */\n                RTDetrV2ObjectDetectionOutput\n              ),\n              /* harmony export */\n              RTDetrV2PreTrainedModel: () => (\n                /* binding */\n                RTDetrV2PreTrainedModel\n              ),\n              /* harmony export */\n              ResNetForImageClassification: () => (\n                /* binding */\n                ResNetForImageClassification\n              ),\n              /* harmony export */\n              ResNetModel: () => (\n                /* binding */\n                ResNetModel\n              ),\n              /* harmony export */\n              ResNetPreTrainedModel: () => (\n                /* binding */\n                ResNetPreTrainedModel\n              ),\n              /* harmony export */\n              RoFormerForMaskedLM: () => (\n                /* binding */\n                RoFormerForMaskedLM\n              ),\n              /* harmony export */\n              RoFormerForQuestionAnswering: () => (\n                /* binding */\n                RoFormerForQuestionAnswering\n              ),\n              /* harmony export */\n              RoFormerForSequenceClassification: () => (\n                /* binding */\n                RoFormerForSequenceClassification\n              ),\n              /* harmony export */\n              RoFormerForTokenClassification: () => (\n                /* binding */\n                RoFormerForTokenClassification\n              ),\n              /* harmony export */\n              RoFormerModel: () => (\n                /* binding */\n                RoFormerModel\n              ),\n              /* harmony export */\n              RoFormerPreTrainedModel: () => (\n                /* binding */\n                RoFormerPreTrainedModel\n              ),\n              /* harmony export */\n              RobertaForMaskedLM: () => (\n                /* binding */\n                RobertaForMaskedLM\n              ),\n              /* harmony export */\n              RobertaForQuestionAnswering: () => (\n                /* binding */\n                RobertaForQuestionAnswering\n              ),\n              /* harmony export */\n              RobertaForSequenceClassification: () => (\n                /* binding */\n                RobertaForSequenceClassification\n              ),\n              /* harmony export */\n              RobertaForTokenClassification: () => (\n                /* binding */\n                RobertaForTokenClassification\n              ),\n              /* harmony export */\n              RobertaModel: () => (\n                /* binding */\n                RobertaModel\n              ),\n              /* harmony export */\n              RobertaPreTrainedModel: () => (\n                /* binding */\n                RobertaPreTrainedModel\n              ),\n              /* harmony export */\n              SamImageSegmentationOutput: () => (\n                /* binding */\n                SamImageSegmentationOutput\n              ),\n              /* harmony export */\n              SamModel: () => (\n                /* binding */\n                SamModel\n              ),\n              /* harmony export */\n              SamPreTrainedModel: () => (\n                /* binding */\n                SamPreTrainedModel\n              ),\n              /* harmony export */\n              SapiensForDepthEstimation: () => (\n                /* binding */\n                SapiensForDepthEstimation\n              ),\n              /* harmony export */\n              SapiensForNormalEstimation: () => (\n                /* binding */\n                SapiensForNormalEstimation\n              ),\n              /* harmony export */\n              SapiensForSemanticSegmentation: () => (\n                /* binding */\n                SapiensForSemanticSegmentation\n              ),\n              /* harmony export */\n              SapiensPreTrainedModel: () => (\n                /* binding */\n                SapiensPreTrainedModel\n              ),\n              /* harmony export */\n              SegformerForImageClassification: () => (\n                /* binding */\n                SegformerForImageClassification\n              ),\n              /* harmony export */\n              SegformerForSemanticSegmentation: () => (\n                /* binding */\n                SegformerForSemanticSegmentation\n              ),\n              /* harmony export */\n              SegformerModel: () => (\n                /* binding */\n                SegformerModel\n              ),\n              /* harmony export */\n              SegformerPreTrainedModel: () => (\n                /* binding */\n                SegformerPreTrainedModel\n              ),\n              /* harmony export */\n              Seq2SeqLMOutput: () => (\n                /* binding */\n                Seq2SeqLMOutput\n              ),\n              /* harmony export */\n              SequenceClassifierOutput: () => (\n                /* binding */\n                SequenceClassifierOutput\n              ),\n              /* harmony export */\n              SiglipModel: () => (\n                /* binding */\n                SiglipModel\n              ),\n              /* harmony export */\n              SiglipPreTrainedModel: () => (\n                /* binding */\n                SiglipPreTrainedModel\n              ),\n              /* harmony export */\n              SiglipTextModel: () => (\n                /* binding */\n                SiglipTextModel\n              ),\n              /* harmony export */\n              SiglipVisionModel: () => (\n                /* binding */\n                SiglipVisionModel\n              ),\n              /* harmony export */\n              SmolVLMForConditionalGeneration: () => (\n                /* binding */\n                SmolVLMForConditionalGeneration\n              ),\n              /* harmony export */\n              SnacDecoderModel: () => (\n                /* binding */\n                SnacDecoderModel\n              ),\n              /* harmony export */\n              SnacEncoderModel: () => (\n                /* binding */\n                SnacEncoderModel\n              ),\n              /* harmony export */\n              SnacModel: () => (\n                /* binding */\n                SnacModel\n              ),\n              /* harmony export */\n              SnacPreTrainedModel: () => (\n                /* binding */\n                SnacPreTrainedModel\n              ),\n              /* harmony export */\n              SpeechT5ForSpeechToText: () => (\n                /* binding */\n                SpeechT5ForSpeechToText\n              ),\n              /* harmony export */\n              SpeechT5ForTextToSpeech: () => (\n                /* binding */\n                SpeechT5ForTextToSpeech\n              ),\n              /* harmony export */\n              SpeechT5HifiGan: () => (\n                /* binding */\n                SpeechT5HifiGan\n              ),\n              /* harmony export */\n              SpeechT5Model: () => (\n                /* binding */\n                SpeechT5Model\n              ),\n              /* harmony export */\n              SpeechT5PreTrainedModel: () => (\n                /* binding */\n                SpeechT5PreTrainedModel\n              ),\n              /* harmony export */\n              SqueezeBertForMaskedLM: () => (\n                /* binding */\n                SqueezeBertForMaskedLM\n              ),\n              /* harmony export */\n              SqueezeBertForQuestionAnswering: () => (\n                /* binding */\n                SqueezeBertForQuestionAnswering\n              ),\n              /* harmony export */\n              SqueezeBertForSequenceClassification: () => (\n                /* binding */\n                SqueezeBertForSequenceClassification\n              ),\n              /* harmony export */\n              SqueezeBertModel: () => (\n                /* binding */\n                SqueezeBertModel\n              ),\n              /* harmony export */\n              SqueezeBertPreTrainedModel: () => (\n                /* binding */\n                SqueezeBertPreTrainedModel\n              ),\n              /* harmony export */\n              StableLmForCausalLM: () => (\n                /* binding */\n                StableLmForCausalLM\n              ),\n              /* harmony export */\n              StableLmModel: () => (\n                /* binding */\n                StableLmModel\n              ),\n              /* harmony export */\n              StableLmPreTrainedModel: () => (\n                /* binding */\n                StableLmPreTrainedModel\n              ),\n              /* harmony export */\n              Starcoder2ForCausalLM: () => (\n                /* binding */\n                Starcoder2ForCausalLM\n              ),\n              /* harmony export */\n              Starcoder2Model: () => (\n                /* binding */\n                Starcoder2Model\n              ),\n              /* harmony export */\n              Starcoder2PreTrainedModel: () => (\n                /* binding */\n                Starcoder2PreTrainedModel\n              ),\n              /* harmony export */\n              StyleTextToSpeech2Model: () => (\n                /* binding */\n                StyleTextToSpeech2Model\n              ),\n              /* harmony export */\n              StyleTextToSpeech2PreTrainedModel: () => (\n                /* binding */\n                StyleTextToSpeech2PreTrainedModel\n              ),\n              /* harmony export */\n              Swin2SRForImageSuperResolution: () => (\n                /* binding */\n                Swin2SRForImageSuperResolution\n              ),\n              /* harmony export */\n              Swin2SRModel: () => (\n                /* binding */\n                Swin2SRModel\n              ),\n              /* harmony export */\n              Swin2SRPreTrainedModel: () => (\n                /* binding */\n                Swin2SRPreTrainedModel\n              ),\n              /* harmony export */\n              SwinForImageClassification: () => (\n                /* binding */\n                SwinForImageClassification\n              ),\n              /* harmony export */\n              SwinForSemanticSegmentation: () => (\n                /* binding */\n                SwinForSemanticSegmentation\n              ),\n              /* harmony export */\n              SwinModel: () => (\n                /* binding */\n                SwinModel\n              ),\n              /* harmony export */\n              SwinPreTrainedModel: () => (\n                /* binding */\n                SwinPreTrainedModel\n              ),\n              /* harmony export */\n              T5ForConditionalGeneration: () => (\n                /* binding */\n                T5ForConditionalGeneration\n              ),\n              /* harmony export */\n              T5Model: () => (\n                /* binding */\n                T5Model\n              ),\n              /* harmony export */\n              T5PreTrainedModel: () => (\n                /* binding */\n                T5PreTrainedModel\n              ),\n              /* harmony export */\n              TableTransformerForObjectDetection: () => (\n                /* binding */\n                TableTransformerForObjectDetection\n              ),\n              /* harmony export */\n              TableTransformerModel: () => (\n                /* binding */\n                TableTransformerModel\n              ),\n              /* harmony export */\n              TableTransformerObjectDetectionOutput: () => (\n                /* binding */\n                TableTransformerObjectDetectionOutput\n              ),\n              /* harmony export */\n              TableTransformerPreTrainedModel: () => (\n                /* binding */\n                TableTransformerPreTrainedModel\n              ),\n              /* harmony export */\n              TokenClassifierOutput: () => (\n                /* binding */\n                TokenClassifierOutput\n              ),\n              /* harmony export */\n              TrOCRForCausalLM: () => (\n                /* binding */\n                TrOCRForCausalLM\n              ),\n              /* harmony export */\n              TrOCRPreTrainedModel: () => (\n                /* binding */\n                TrOCRPreTrainedModel\n              ),\n              /* harmony export */\n              UltravoxModel: () => (\n                /* binding */\n                UltravoxModel\n              ),\n              /* harmony export */\n              UltravoxPreTrainedModel: () => (\n                /* binding */\n                UltravoxPreTrainedModel\n              ),\n              /* harmony export */\n              UniSpeechForCTC: () => (\n                /* binding */\n                UniSpeechForCTC\n              ),\n              /* harmony export */\n              UniSpeechForSequenceClassification: () => (\n                /* binding */\n                UniSpeechForSequenceClassification\n              ),\n              /* harmony export */\n              UniSpeechModel: () => (\n                /* binding */\n                UniSpeechModel\n              ),\n              /* harmony export */\n              UniSpeechPreTrainedModel: () => (\n                /* binding */\n                UniSpeechPreTrainedModel\n              ),\n              /* harmony export */\n              UniSpeechSatForAudioFrameClassification: () => (\n                /* binding */\n                UniSpeechSatForAudioFrameClassification\n              ),\n              /* harmony export */\n              UniSpeechSatForCTC: () => (\n                /* binding */\n                UniSpeechSatForCTC\n              ),\n              /* harmony export */\n              UniSpeechSatForSequenceClassification: () => (\n                /* binding */\n                UniSpeechSatForSequenceClassification\n              ),\n              /* harmony export */\n              UniSpeechSatModel: () => (\n                /* binding */\n                UniSpeechSatModel\n              ),\n              /* harmony export */\n              UniSpeechSatPreTrainedModel: () => (\n                /* binding */\n                UniSpeechSatPreTrainedModel\n              ),\n              /* harmony export */\n              ViTForImageClassification: () => (\n                /* binding */\n                ViTForImageClassification\n              ),\n              /* harmony export */\n              ViTMAEModel: () => (\n                /* binding */\n                ViTMAEModel\n              ),\n              /* harmony export */\n              ViTMAEPreTrainedModel: () => (\n                /* binding */\n                ViTMAEPreTrainedModel\n              ),\n              /* harmony export */\n              ViTMSNForImageClassification: () => (\n                /* binding */\n                ViTMSNForImageClassification\n              ),\n              /* harmony export */\n              ViTMSNModel: () => (\n                /* binding */\n                ViTMSNModel\n              ),\n              /* harmony export */\n              ViTMSNPreTrainedModel: () => (\n                /* binding */\n                ViTMSNPreTrainedModel\n              ),\n              /* harmony export */\n              ViTModel: () => (\n                /* binding */\n                ViTModel\n              ),\n              /* harmony export */\n              ViTPreTrainedModel: () => (\n                /* binding */\n                ViTPreTrainedModel\n              ),\n              /* harmony export */\n              VisionEncoderDecoderModel: () => (\n                /* binding */\n                VisionEncoderDecoderModel\n              ),\n              /* harmony export */\n              VitMatteForImageMatting: () => (\n                /* binding */\n                VitMatteForImageMatting\n              ),\n              /* harmony export */\n              VitMattePreTrainedModel: () => (\n                /* binding */\n                VitMattePreTrainedModel\n              ),\n              /* harmony export */\n              VitPoseForPoseEstimation: () => (\n                /* binding */\n                VitPoseForPoseEstimation\n              ),\n              /* harmony export */\n              VitPosePreTrainedModel: () => (\n                /* binding */\n                VitPosePreTrainedModel\n              ),\n              /* harmony export */\n              VitsModel: () => (\n                /* binding */\n                VitsModel\n              ),\n              /* harmony export */\n              VitsModelOutput: () => (\n                /* binding */\n                VitsModelOutput\n              ),\n              /* harmony export */\n              VitsPreTrainedModel: () => (\n                /* binding */\n                VitsPreTrainedModel\n              ),\n              /* harmony export */\n              Wav2Vec2BertForCTC: () => (\n                /* binding */\n                Wav2Vec2BertForCTC\n              ),\n              /* harmony export */\n              Wav2Vec2BertForSequenceClassification: () => (\n                /* binding */\n                Wav2Vec2BertForSequenceClassification\n              ),\n              /* harmony export */\n              Wav2Vec2BertModel: () => (\n                /* binding */\n                Wav2Vec2BertModel\n              ),\n              /* harmony export */\n              Wav2Vec2BertPreTrainedModel: () => (\n                /* binding */\n                Wav2Vec2BertPreTrainedModel\n              ),\n              /* harmony export */\n              Wav2Vec2ForAudioFrameClassification: () => (\n                /* binding */\n                Wav2Vec2ForAudioFrameClassification\n              ),\n              /* harmony export */\n              Wav2Vec2ForCTC: () => (\n                /* binding */\n                Wav2Vec2ForCTC\n              ),\n              /* harmony export */\n              Wav2Vec2ForSequenceClassification: () => (\n                /* binding */\n                Wav2Vec2ForSequenceClassification\n              ),\n              /* harmony export */\n              Wav2Vec2Model: () => (\n                /* binding */\n                Wav2Vec2Model\n              ),\n              /* harmony export */\n              Wav2Vec2PreTrainedModel: () => (\n                /* binding */\n                Wav2Vec2PreTrainedModel\n              ),\n              /* harmony export */\n              WavLMForAudioFrameClassification: () => (\n                /* binding */\n                WavLMForAudioFrameClassification\n              ),\n              /* harmony export */\n              WavLMForCTC: () => (\n                /* binding */\n                WavLMForCTC\n              ),\n              /* harmony export */\n              WavLMForSequenceClassification: () => (\n                /* binding */\n                WavLMForSequenceClassification\n              ),\n              /* harmony export */\n              WavLMForXVector: () => (\n                /* binding */\n                WavLMForXVector\n              ),\n              /* harmony export */\n              WavLMModel: () => (\n                /* binding */\n                WavLMModel\n              ),\n              /* harmony export */\n              WavLMPreTrainedModel: () => (\n                /* binding */\n                WavLMPreTrainedModel\n              ),\n              /* harmony export */\n              WeSpeakerResNetModel: () => (\n                /* binding */\n                WeSpeakerResNetModel\n              ),\n              /* harmony export */\n              WeSpeakerResNetPreTrainedModel: () => (\n                /* binding */\n                WeSpeakerResNetPreTrainedModel\n              ),\n              /* harmony export */\n              WhisperForConditionalGeneration: () => (\n                /* binding */\n                WhisperForConditionalGeneration\n              ),\n              /* harmony export */\n              WhisperModel: () => (\n                /* binding */\n                WhisperModel\n              ),\n              /* harmony export */\n              WhisperPreTrainedModel: () => (\n                /* binding */\n                WhisperPreTrainedModel\n              ),\n              /* harmony export */\n              XLMForQuestionAnswering: () => (\n                /* binding */\n                XLMForQuestionAnswering\n              ),\n              /* harmony export */\n              XLMForSequenceClassification: () => (\n                /* binding */\n                XLMForSequenceClassification\n              ),\n              /* harmony export */\n              XLMForTokenClassification: () => (\n                /* binding */\n                XLMForTokenClassification\n              ),\n              /* harmony export */\n              XLMModel: () => (\n                /* binding */\n                XLMModel\n              ),\n              /* harmony export */\n              XLMPreTrainedModel: () => (\n                /* binding */\n                XLMPreTrainedModel\n              ),\n              /* harmony export */\n              XLMRobertaForMaskedLM: () => (\n                /* binding */\n                XLMRobertaForMaskedLM\n              ),\n              /* harmony export */\n              XLMRobertaForQuestionAnswering: () => (\n                /* binding */\n                XLMRobertaForQuestionAnswering\n              ),\n              /* harmony export */\n              XLMRobertaForSequenceClassification: () => (\n                /* binding */\n                XLMRobertaForSequenceClassification\n              ),\n              /* harmony export */\n              XLMRobertaForTokenClassification: () => (\n                /* binding */\n                XLMRobertaForTokenClassification\n              ),\n              /* harmony export */\n              XLMRobertaModel: () => (\n                /* binding */\n                XLMRobertaModel\n              ),\n              /* harmony export */\n              XLMRobertaPreTrainedModel: () => (\n                /* binding */\n                XLMRobertaPreTrainedModel\n              ),\n              /* harmony export */\n              XLMWithLMHeadModel: () => (\n                /* binding */\n                XLMWithLMHeadModel\n              ),\n              /* harmony export */\n              XVectorOutput: () => (\n                /* binding */\n                XVectorOutput\n              ),\n              /* harmony export */\n              YolosForObjectDetection: () => (\n                /* binding */\n                YolosForObjectDetection\n              ),\n              /* harmony export */\n              YolosModel: () => (\n                /* binding */\n                YolosModel\n              ),\n              /* harmony export */\n              YolosObjectDetectionOutput: () => (\n                /* binding */\n                YolosObjectDetectionOutput\n              ),\n              /* harmony export */\n              YolosPreTrainedModel: () => (\n                /* binding */\n                YolosPreTrainedModel\n              )\n              /* harmony export */\n            });\n            var _configs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ./configs.js */\n              \"./src/configs.js\"\n            );\n            var _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ./backends/onnx.js */\n              \"./src/backends/onnx.js\"\n            );\n            var _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ./utils/dtypes.js */\n              \"./src/utils/dtypes.js\"\n            );\n            var _utils_generic_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ./utils/generic.js */\n              \"./src/utils/generic.js\"\n            );\n            var _utils_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(\n              /*! ./utils/core.js */\n              \"./src/utils/core.js\"\n            );\n            var _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(\n              /*! ./utils/hub.js */\n              \"./src/utils/hub.js\"\n            );\n            var _utils_constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(\n              /*! ./utils/constants.js */\n              \"./src/utils/constants.js\"\n            );\n            var _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(\n              /*! ./generation/logits_process.js */\n              \"./src/generation/logits_process.js\"\n            );\n            var _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(\n              /*! ./generation/configuration_utils.js */\n              \"./src/generation/configuration_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(\n              /*! ./utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var _utils_image_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(\n              /*! ./utils/image.js */\n              \"./src/utils/image.js\"\n            );\n            var _utils_maths_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(\n              /*! ./utils/maths.js */\n              \"./src/utils/maths.js\"\n            );\n            var _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(\n              /*! ./generation/stopping_criteria.js */\n              \"./src/generation/stopping_criteria.js\"\n            );\n            var _generation_logits_sampler_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__2(\n              /*! ./generation/logits_sampler.js */\n              \"./src/generation/logits_sampler.js\"\n            );\n            var _env_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__2(\n              /*! ./env.js */\n              \"./src/env.js\"\n            );\n            var _models_whisper_generation_whisper_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__2(\n              /*! ./models/whisper/generation_whisper.js */\n              \"./src/models/whisper/generation_whisper.js\"\n            );\n            var _models_whisper_common_whisper_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__2(\n              /*! ./models/whisper/common_whisper.js */\n              \"./src/models/whisper/common_whisper.js\"\n            );\n            const MODEL_TYPES = {\n              EncoderOnly: 0,\n              EncoderDecoder: 1,\n              Seq2Seq: 2,\n              Vision2Seq: 3,\n              DecoderOnly: 4,\n              MaskGeneration: 5,\n              ImageTextToText: 6,\n              Musicgen: 7,\n              MultiModality: 8,\n              Phi3V: 9,\n              AudioTextToText: 10,\n              AutoEncoder: 11\n            };\n            const MODEL_TYPE_MAPPING = /* @__PURE__ */ new Map();\n            const MODEL_NAME_TO_CLASS_MAPPING = /* @__PURE__ */ new Map();\n            const MODEL_CLASS_TO_NAME_MAPPING = /* @__PURE__ */ new Map();\n            async function getSession(pretrained_model_name_or_path, fileName, options) {\n              let custom_config = options.config?.[\"transformers.js_config\"] ?? {};\n              let device = options.device ?? custom_config.device;\n              if (device && typeof device !== \"string\") {\n                if (device.hasOwnProperty(fileName)) {\n                  device = device[fileName];\n                } else {\n                  console.warn(`device not specified for \"${fileName}\". Using the default device.`);\n                  device = null;\n                }\n              }\n              const selectedDevice = (\n                /** @type {import(\"./utils/devices.js\").DeviceType} */\n                device ?? (_env_js__WEBPACK_IMPORTED_MODULE_14__.apis.IS_NODE_ENV ? \"cpu\" : \"wasm\")\n              );\n              const executionProviders = (0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.deviceToExecutionProviders)(selectedDevice);\n              const device_config = custom_config.device_config ?? {};\n              if (device_config.hasOwnProperty(selectedDevice)) {\n                custom_config = {\n                  ...custom_config,\n                  ...device_config[selectedDevice]\n                };\n              }\n              let dtype = options.dtype ?? custom_config.dtype;\n              if (typeof dtype !== \"string\") {\n                if (dtype && dtype.hasOwnProperty(fileName)) {\n                  dtype = dtype[fileName];\n                } else {\n                  dtype = _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DEVICE_DTYPE_MAPPING[selectedDevice] ?? _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES.fp32;\n                  console.warn(`dtype not specified for \"${fileName}\". Using the default dtype (${dtype}) for this device (${selectedDevice}).`);\n                }\n              }\n              if (dtype === _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES.auto) {\n                let config_dtype = custom_config.dtype;\n                if (typeof config_dtype !== \"string\") {\n                  config_dtype = config_dtype?.[fileName];\n                }\n                if (config_dtype && config_dtype !== _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES.auto && _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES.hasOwnProperty(config_dtype)) {\n                  dtype = config_dtype;\n                } else {\n                  dtype = _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DEVICE_DTYPE_MAPPING[selectedDevice] ?? _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES.fp32;\n                }\n              }\n              const selectedDtype = (\n                /** @type {import(\"./utils/dtypes.js\").DataType} */\n                dtype\n              );\n              if (!_utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(selectedDtype)) {\n                throw new Error(`Invalid dtype: ${selectedDtype}. Should be one of: ${Object.keys(_utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES).join(\", \")}`);\n              } else if (selectedDtype === _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES.fp16 && selectedDevice === \"webgpu\" && !await (0, _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.isWebGpuFp16Supported)()) {\n                throw new Error(`The device (${selectedDevice}) does not support fp16.`);\n              }\n              const kv_cache_dtype_config = custom_config.kv_cache_dtype;\n              const kv_cache_dtype = kv_cache_dtype_config ? typeof kv_cache_dtype_config === \"string\" ? kv_cache_dtype_config : kv_cache_dtype_config[selectedDtype] ?? \"float32\" : void 0;\n              if (kv_cache_dtype && ![\"float32\", \"float16\"].includes(kv_cache_dtype)) {\n                throw new Error(`Invalid kv_cache_dtype: ${kv_cache_dtype}. Should be one of: float32, float16`);\n              }\n              const session_config = {\n                dtype: selectedDtype,\n                kv_cache_dtype\n              };\n              const suffix = _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DTYPE_SUFFIX_MAPPING[selectedDtype];\n              const baseName = `${fileName}${suffix}.onnx`;\n              const modelFileName = `${options.subfolder ?? \"\"}/${baseName}`;\n              const session_options = { ...options.session_options };\n              session_options.executionProviders ?? (session_options.executionProviders = executionProviders);\n              const free_dimension_overrides = custom_config.free_dimension_overrides;\n              if (free_dimension_overrides) {\n                session_options.freeDimensionOverrides ?? (session_options.freeDimensionOverrides = free_dimension_overrides);\n              } else if (selectedDevice.startsWith(\"webnn\") && !session_options.freeDimensionOverrides) {\n                console.warn(\n                  `WebNN does not currently support dynamic shapes and requires 'free_dimension_overrides' to be set in config.json, preferably as a field within config[\"transformers.js_config\"][\"device_config\"][\"${selectedDevice}\"]. When 'free_dimension_overrides' is not set, you may experience significant performance degradation.`\n                );\n              }\n              const return_path = _env_js__WEBPACK_IMPORTED_MODULE_14__.apis.IS_NODE_ENV && _env_js__WEBPACK_IMPORTED_MODULE_14__.env.useFSCache;\n              const bufferOrPathPromise = (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.getModelFile)(pretrained_model_name_or_path, modelFileName, true, options, return_path);\n              const use_external_data_format = options.use_external_data_format ?? custom_config.use_external_data_format;\n              let externalDataPromises = [];\n              if (use_external_data_format) {\n                let external_data_format;\n                if (typeof use_external_data_format === \"object\") {\n                  if (use_external_data_format.hasOwnProperty(baseName)) {\n                    external_data_format = use_external_data_format[baseName];\n                  } else if (use_external_data_format.hasOwnProperty(fileName)) {\n                    external_data_format = use_external_data_format[fileName];\n                  } else {\n                    external_data_format = false;\n                  }\n                } else {\n                  external_data_format = use_external_data_format;\n                }\n                const num_chunks = +external_data_format;\n                if (num_chunks > _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.MAX_EXTERNAL_DATA_CHUNKS) {\n                  throw new Error(`The number of external data chunks (${num_chunks}) exceeds the maximum allowed value (${_utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.MAX_EXTERNAL_DATA_CHUNKS}).`);\n                }\n                for (let i = 0; i < num_chunks; ++i) {\n                  const path = `${baseName}_data${i === 0 ? \"\" : \"_\" + i}`;\n                  const fullPath = `${options.subfolder ?? \"\"}/${path}`;\n                  externalDataPromises.push(new Promise(async (resolve, reject) => {\n                    const data = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.getModelFile)(pretrained_model_name_or_path, fullPath, true, options, return_path);\n                    resolve(data instanceof Uint8Array ? { path, data } : path);\n                  }));\n                }\n              } else if (session_options.externalData !== void 0) {\n                externalDataPromises = session_options.externalData.map(async (ext) => {\n                  if (typeof ext.data === \"string\") {\n                    const ext_buffer = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.getModelFile)(pretrained_model_name_or_path, ext.data, true, options);\n                    return { ...ext, data: ext_buffer };\n                  }\n                  return ext;\n                });\n              }\n              if (externalDataPromises.length > 0) {\n                const externalData = await Promise.all(externalDataPromises);\n                if (!_env_js__WEBPACK_IMPORTED_MODULE_14__.apis.IS_NODE_ENV) {\n                  session_options.externalData = externalData;\n                }\n              }\n              if (selectedDevice === \"webgpu\") {\n                const shapes = (0, _configs_js__WEBPACK_IMPORTED_MODULE_0__.getKeyValueShapes)(options.config, {\n                  prefix: \"present\"\n                });\n                if (Object.keys(shapes).length > 0 && !(0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.isONNXProxy)()) {\n                  const preferredOutputLocation = {};\n                  for (const key in shapes) {\n                    preferredOutputLocation[key] = \"gpu-buffer\";\n                  }\n                  session_options.preferredOutputLocation = preferredOutputLocation;\n                }\n              }\n              const buffer_or_path = await bufferOrPathPromise;\n              return { buffer_or_path, session_options, session_config };\n            }\n            async function constructSessions(pretrained_model_name_or_path, names, options) {\n              return Object.fromEntries(await Promise.all(\n                Object.keys(names).map(async (name) => {\n                  const { buffer_or_path, session_options, session_config } = await getSession(pretrained_model_name_or_path, names[name], options);\n                  const session = await (0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.createInferenceSession)(buffer_or_path, session_options, session_config);\n                  return [name, session];\n                })\n              ));\n            }\n            async function getOptionalConfigs(pretrained_model_name_or_path, names, options) {\n              return Object.fromEntries(await Promise.all(\n                Object.keys(names).map(async (name) => {\n                  const config = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.getModelJSON)(pretrained_model_name_or_path, names[name], false, options);\n                  return [name, config];\n                })\n              ));\n            }\n            function validateInputs(session, inputs) {\n              const checkedInputs = /* @__PURE__ */ Object.create(null);\n              const missingInputs = [];\n              for (const inputName of session.inputNames) {\n                const tensor = inputs[inputName];\n                if (!(tensor instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor)) {\n                  missingInputs.push(inputName);\n                  continue;\n                }\n                checkedInputs[inputName] = (0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.isONNXProxy)() ? tensor.clone() : tensor;\n              }\n              if (missingInputs.length > 0) {\n                throw new Error(\n                  `An error occurred during model execution: \"Missing the following inputs: ${missingInputs.join(\", \")}.`\n                );\n              }\n              const numInputsProvided = Object.keys(inputs).length;\n              const numInputsNeeded = session.inputNames.length;\n              if (numInputsProvided > numInputsNeeded) {\n                let ignored = Object.keys(inputs).filter((inputName) => !session.inputNames.includes(inputName));\n                console.warn(`WARNING: Too many inputs were provided (${numInputsProvided} > ${numInputsNeeded}). The following inputs will be ignored: \"${ignored.join(\", \")}\".`);\n              }\n              return checkedInputs;\n            }\n            async function sessionRun(session, inputs) {\n              const checkedInputs = validateInputs(session, inputs);\n              try {\n                const ortFeed = Object.fromEntries(Object.entries(checkedInputs).map(([k2, v]) => [k2, v.ort_tensor]));\n                let output = await session.run(ortFeed);\n                output = replaceTensors(output);\n                return output;\n              } catch (e) {\n                const formatted = Object.fromEntries(Object.entries(checkedInputs).map(([k2, { type, dims, data }]) => [k2, {\n                  // Extract these properties from the underlying ORT tensor\n                  type,\n                  dims,\n                  data\n                }]));\n                console.error(`An error occurred during model execution: \"${e}\".`);\n                console.error(\"Inputs given to model:\", formatted);\n                throw e;\n              }\n            }\n            function replaceTensors(obj) {\n              for (let prop in obj) {\n                if ((0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.isONNXTensor)(obj[prop])) {\n                  obj[prop] = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(obj[prop]);\n                } else if (typeof obj[prop] === \"object\") {\n                  replaceTensors(obj[prop]);\n                }\n              }\n              return obj;\n            }\n            function toI64Tensor(items) {\n              if (items instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor) {\n                return items;\n              }\n              if (items.length === 0) {\n                throw Error(\"items must be non-empty\");\n              }\n              if (Array.isArray(items[0])) {\n                if (items.some((x) => x.length !== items[0].length)) {\n                  throw Error(\"Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.\");\n                }\n                return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\n                  \"int64\",\n                  BigInt64Array.from(items.flat().map((x) => BigInt(x))),\n                  [items.length, items[0].length]\n                );\n              } else {\n                return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\n                  \"int64\",\n                  BigInt64Array.from(items.map((x) => BigInt(x))),\n                  [1, items.length]\n                );\n              }\n            }\n            function boolTensor(value) {\n              return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\"bool\", [value], [1]);\n            }\n            async function seq2seqForward(self2, model_inputs) {\n              let { encoder_outputs, input_ids, decoder_input_ids, ...other_decoder_inputs } = model_inputs;\n              if (!encoder_outputs) {\n                const encoder_inputs = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(model_inputs, self2.sessions[\"model\"].inputNames);\n                encoder_outputs = (await encoderForward(self2, encoder_inputs)).last_hidden_state;\n              }\n              other_decoder_inputs.input_ids = decoder_input_ids;\n              other_decoder_inputs.encoder_hidden_states = encoder_outputs;\n              if (self2.sessions[\"decoder_model_merged\"].inputNames.includes(\"encoder_attention_mask\")) {\n                other_decoder_inputs.encoder_attention_mask = model_inputs.attention_mask;\n              }\n              const decoderResults = await decoderForward(self2, other_decoder_inputs, true);\n              return decoderResults;\n            }\n            async function encoderForward(self2, model_inputs) {\n              const session = self2.sessions[\"model\"];\n              const encoderFeeds = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(model_inputs, session.inputNames);\n              if (session.inputNames.includes(\"inputs_embeds\") && !encoderFeeds.inputs_embeds) {\n                if (!model_inputs.input_ids) {\n                  throw new Error(\"Both `input_ids` and `inputs_embeds` are missing in the model inputs.\");\n                }\n                encoderFeeds.inputs_embeds = await self2.encode_text({ input_ids: model_inputs.input_ids });\n              }\n              if (session.inputNames.includes(\"token_type_ids\") && !encoderFeeds.token_type_ids) {\n                if (!encoderFeeds.input_ids) {\n                  throw new Error(\"Both `input_ids` and `token_type_ids` are missing in the model inputs.\");\n                }\n                encoderFeeds.token_type_ids = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.zeros_like)(encoderFeeds.input_ids);\n              }\n              if (session.inputNames.includes(\"pixel_mask\") && !encoderFeeds.pixel_mask) {\n                if (!encoderFeeds.pixel_values) {\n                  throw new Error(\"Both `pixel_values` and `pixel_mask` are missing in the model inputs.\");\n                }\n                const dims = encoderFeeds.pixel_values.dims;\n                encoderFeeds.pixel_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([dims[0], dims[2], dims[3]]);\n              }\n              return await sessionRun(session, encoderFeeds);\n            }\n            async function autoEncoderForward(self2, model_inputs) {\n              const encoded = await self2.encode(model_inputs);\n              const decoded = await self2.decode(encoded);\n              return decoded;\n            }\n            async function decoderForward(self2, model_inputs, is_encoder_decoder = false) {\n              const session = self2.sessions[is_encoder_decoder ? \"decoder_model_merged\" : \"model\"];\n              const { past_key_values, ...new_model_inputs } = model_inputs;\n              if (session.inputNames.includes(\"use_cache_branch\")) {\n                new_model_inputs.use_cache_branch = boolTensor(!!past_key_values);\n              }\n              if (session.inputNames.includes(\"position_ids\") && new_model_inputs.attention_mask && !new_model_inputs.position_ids) {\n                const start_index = [\"paligemma\", \"gemma3_text\", \"gemma3\"].includes(self2.config.model_type) ? 1 : 0;\n                new_model_inputs.position_ids = createPositionIds(new_model_inputs, past_key_values, start_index);\n              }\n              self2.addPastKeyValues(new_model_inputs, past_key_values);\n              const fixed = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(new_model_inputs, session.inputNames);\n              return await sessionRun(session, fixed);\n            }\n            function default_merge_input_ids_with_features({\n              modality_token_id,\n              inputs_embeds,\n              modality_features,\n              input_ids,\n              attention_mask\n            }) {\n              const token_positions = input_ids.tolist().map(\n                (ids) => ids.reduce((acc, x, idx) => {\n                  if (x == modality_token_id) acc.push(idx);\n                  return acc;\n                }, [])\n              );\n              const n_tokens = token_positions.reduce((acc, x) => acc + x.length, 0);\n              const n_features = modality_features.dims[0];\n              if (n_tokens !== n_features) {\n                throw new Error(`Number of tokens and features do not match: tokens: ${n_tokens}, features ${n_features}`);\n              }\n              let img = 0;\n              for (let i = 0; i < token_positions.length; ++i) {\n                const tokens = token_positions[i];\n                const embeds = inputs_embeds[i];\n                for (let j = 0; j < tokens.length; ++j) {\n                  embeds[tokens[j]].data.set(modality_features[img++].data);\n                }\n              }\n              return { inputs_embeds, attention_mask };\n            }\n            function default_merge_input_ids_with_image_features({\n              image_token_id,\n              inputs_embeds,\n              image_features,\n              input_ids,\n              attention_mask\n            }) {\n              return default_merge_input_ids_with_features({\n                modality_token_id: image_token_id,\n                inputs_embeds,\n                modality_features: image_features,\n                input_ids,\n                attention_mask\n              });\n            }\n            function default_merge_input_ids_with_audio_features({\n              audio_token_id,\n              inputs_embeds,\n              audio_features,\n              input_ids,\n              attention_mask\n            }) {\n              return default_merge_input_ids_with_features({\n                modality_token_id: audio_token_id,\n                inputs_embeds,\n                modality_features: audio_features,\n                input_ids,\n                attention_mask\n              });\n            }\n            async function genericTextToTextForward(self2, {\n              // Generic parameters:\n              encode_function,\n              merge_function,\n              modality_input_name,\n              modality_output_name,\n              // Produced by the tokenizer/processor:\n              input_ids = null,\n              attention_mask = null,\n              // Used during generation:\n              position_ids = null,\n              inputs_embeds = null,\n              past_key_values = null,\n              // Generic generation parameters\n              generation_config = null,\n              logits_processor = null,\n              // Additional parameters\n              ...kwargs\n            }) {\n              const modality_values = kwargs[modality_input_name];\n              if (!inputs_embeds) {\n                inputs_embeds = await self2.encode_text({ input_ids, ...kwargs });\n                if (modality_values && input_ids.dims[1] !== 1) {\n                  const modality_features = await encode_function({\n                    // Pass the modality values under its expected key.\n                    // The caller knows whether this is audio or image.\n                    [modality_input_name]: modality_values,\n                    ...kwargs\n                  });\n                  ({ inputs_embeds, attention_mask } = merge_function({\n                    [modality_output_name]: modality_features,\n                    inputs_embeds,\n                    input_ids,\n                    attention_mask\n                  }));\n                } else if (past_key_values && modality_values && input_ids.dims[1] === 1) {\n                  const target_length = input_ids.dims[1];\n                  const past_length = Object.values(past_key_values)[0].dims.at(-2);\n                  attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([\n                    (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([input_ids.dims[0], past_length]),\n                    attention_mask.slice(null, [attention_mask.dims[1] - target_length, attention_mask.dims[1]])\n                  ], 1);\n                }\n              }\n              if (!position_ids) {\n                if (self2.config.model_type === \"qwen2_vl\") {\n                  const { image_grid_thw, video_grid_thw } = kwargs;\n                  [position_ids] = self2.get_rope_index(input_ids, image_grid_thw, video_grid_thw, attention_mask);\n                }\n              }\n              const outputs = await decoderForward(self2, {\n                inputs_embeds,\n                past_key_values,\n                attention_mask,\n                position_ids,\n                generation_config,\n                logits_processor\n              }, true);\n              return outputs;\n            }\n            async function audioTextToTextForward(self2, params) {\n              return await genericTextToTextForward(self2, {\n                ...params,\n                modality_input_name: \"audio_values\",\n                modality_output_name: \"audio_features\",\n                encode_function: self2.encode_audio.bind(self2),\n                merge_function: self2._merge_input_ids_with_audio_features.bind(self2)\n              });\n            }\n            async function imageTextToTextForward(self2, params) {\n              return await genericTextToTextForward(self2, {\n                ...params,\n                modality_input_name: \"pixel_values\",\n                modality_output_name: \"image_features\",\n                encode_function: self2.encode_image.bind(self2),\n                merge_function: self2._merge_input_ids_with_image_features.bind(self2)\n              });\n            }\n            function cumsum_masked_fill(attention_mask, start_index = 0) {\n              const [bz, seq_len] = attention_mask.dims;\n              const attn_mask_data = attention_mask.data;\n              const data = new BigInt64Array(attn_mask_data.length);\n              for (let i = 0; i < bz; ++i) {\n                const start = i * seq_len;\n                let sum = BigInt(start_index);\n                for (let j = 0; j < seq_len; ++j) {\n                  const index = start + j;\n                  if (attn_mask_data[index] === 0n) {\n                    data[index] = BigInt(1);\n                  } else {\n                    data[index] = sum;\n                    sum += attn_mask_data[index];\n                  }\n                }\n              }\n              return { data, dims: attention_mask.dims };\n            }\n            function createPositionIds(model_inputs, past_key_values = null, start_index = 0) {\n              const { input_ids, inputs_embeds, attention_mask } = model_inputs;\n              const { data, dims } = cumsum_masked_fill(attention_mask, start_index);\n              let position_ids = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\"int64\", data, dims);\n              if (past_key_values) {\n                const offset = -(input_ids ?? inputs_embeds).dims.at(1);\n                position_ids = position_ids.slice(null, [offset, null]);\n              }\n              return position_ids;\n            }\n            function decoder_prepare_inputs_for_generation(self2, input_ids, model_inputs, generation_config) {\n              if (model_inputs.past_key_values) {\n                const past_length = Object.values(model_inputs.past_key_values)[0].dims.at(-2);\n                const { input_ids: input_ids2, attention_mask } = model_inputs;\n                if (attention_mask && attention_mask.dims[1] > input_ids2.dims[1]) {\n                } else if (past_length < input_ids2.dims[1]) {\n                  model_inputs.input_ids = input_ids2.slice(null, [past_length, null]);\n                } else {\n                  if (\n                    // NOTE: Only used by VLMs (!= so that null matches undefined)\n                    self2.config.image_token_index != null && // Equivalent to `self.config.image_token_index in input_ids` (== so that int matches bigint)\n                    input_ids2.data.some((x) => x == self2.config.image_token_index)\n                  ) {\n                    const num_image_tokens = self2.config.num_image_tokens;\n                    if (!num_image_tokens) {\n                      throw new Error(\"`num_image_tokens` is missing in the model configuration.\");\n                    }\n                    const num_new_tokens = input_ids2.dims[1] - (past_length - num_image_tokens);\n                    model_inputs.input_ids = input_ids2.slice(null, [-num_new_tokens, null]);\n                    model_inputs.attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([1, past_length + num_new_tokens]);\n                  }\n                }\n              }\n              return model_inputs;\n            }\n            function encoder_decoder_prepare_inputs_for_generation(self2, input_ids, model_inputs, generation_config) {\n              if (model_inputs.past_key_values) {\n                input_ids = input_ids.map((x) => [x.at(-1)]);\n              }\n              return {\n                ...model_inputs,\n                decoder_input_ids: toI64Tensor(input_ids)\n              };\n            }\n            function multimodal_text_to_text_prepare_inputs_for_generation(self2, ...args) {\n              if (self2.config.is_encoder_decoder) {\n                return encoder_decoder_prepare_inputs_for_generation(self2, ...args);\n              } else {\n                return decoder_prepare_inputs_for_generation(self2, ...args);\n              }\n            }\n            function multimodality_prepare_inputs_for_generation(self2, input_ids, model_inputs, generation_config) {\n              const has_past_key_values = !!model_inputs.past_key_values;\n              if (generation_config.guidance_scale !== null && generation_config.guidance_scale > 1) {\n                if (has_past_key_values) {\n                  model_inputs.input_ids = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([\n                    model_inputs.input_ids,\n                    model_inputs.input_ids\n                  ], 0);\n                } else {\n                  model_inputs.input_ids = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([\n                    model_inputs.input_ids,\n                    (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.full_like)(model_inputs.input_ids, BigInt(generation_config.pad_token_id))\n                  ], 0);\n                  model_inputs.attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([\n                    model_inputs.attention_mask,\n                    (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.full_like)(model_inputs.attention_mask, 0n)\n                  ], 0);\n                }\n              }\n              if (has_past_key_values || !model_inputs.pixel_values) {\n                model_inputs.pixel_values = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.full)([0, 0, 3, 384, 384], 1);\n              }\n              if (has_past_key_values) {\n                const num_img_tokens = 0;\n                const num_text_tokens = 1;\n                const has_image = num_img_tokens > 0 ? 1 : 0;\n                const batch_size = 1;\n                model_inputs.images_seq_mask = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\n                  \"bool\",\n                  new Array(num_img_tokens + num_text_tokens).fill(true).fill(false, 0, num_text_tokens),\n                  [batch_size, num_img_tokens + num_text_tokens]\n                );\n                model_inputs.images_emb_mask = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\n                  \"bool\",\n                  new Array(num_img_tokens).fill(!!has_image),\n                  [batch_size, 1, num_img_tokens]\n                );\n              }\n              return model_inputs;\n            }\n            class PreTrainedModel extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_3__.Callable {\n              /**\n               * Creates a new instance of the `PreTrainedModel` class.\n               * @param {import('./configs.js').PretrainedConfig} config The model configuration.\n               * @param {Record<string, any>} sessions The inference sessions for the model.\n               * @param {Record<string, Object>} configs Additional configuration files (e.g., generation_config.json).\n               */\n              constructor(config, sessions, configs) {\n                super();\n                __publicField(this, \"main_input_name\", \"input_ids\");\n                __publicField(this, \"forward_params\", [\"input_ids\", \"attention_mask\"]);\n                this.config = config;\n                this.sessions = sessions;\n                this.configs = configs;\n                const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this.constructor);\n                const modelType = MODEL_TYPE_MAPPING.get(modelName);\n                this.can_generate = false;\n                this._forward = null;\n                this._prepare_inputs_for_generation = null;\n                switch (modelType) {\n                  case MODEL_TYPES.DecoderOnly:\n                    this.can_generate = true;\n                    this._forward = decoderForward;\n                    this._prepare_inputs_for_generation = decoder_prepare_inputs_for_generation;\n                    break;\n                  case MODEL_TYPES.Seq2Seq:\n                  case MODEL_TYPES.Vision2Seq:\n                  case MODEL_TYPES.Musicgen:\n                    this.can_generate = true;\n                    this._forward = seq2seqForward;\n                    this._prepare_inputs_for_generation = encoder_decoder_prepare_inputs_for_generation;\n                    break;\n                  case MODEL_TYPES.EncoderDecoder:\n                    this._forward = seq2seqForward;\n                    break;\n                  case MODEL_TYPES.ImageTextToText:\n                    this.can_generate = true;\n                    this._forward = imageTextToTextForward;\n                    this._prepare_inputs_for_generation = multimodal_text_to_text_prepare_inputs_for_generation;\n                    break;\n                  case MODEL_TYPES.AudioTextToText:\n                    this.can_generate = true;\n                    this._forward = audioTextToTextForward;\n                    this._prepare_inputs_for_generation = multimodal_text_to_text_prepare_inputs_for_generation;\n                    break;\n                  case MODEL_TYPES.Phi3V:\n                    this.can_generate = true;\n                    this._prepare_inputs_for_generation = multimodal_text_to_text_prepare_inputs_for_generation;\n                    break;\n                  case MODEL_TYPES.MultiModality:\n                    this.can_generate = true;\n                    this._prepare_inputs_for_generation = multimodality_prepare_inputs_for_generation;\n                    break;\n                  case MODEL_TYPES.AutoEncoder:\n                    this._forward = autoEncoderForward;\n                    break;\n                  default:\n                    this._forward = encoderForward;\n                    break;\n                }\n                if (this.can_generate) {\n                  this.forward_params.push(\"past_key_values\");\n                }\n                this.custom_config = this.config[\"transformers.js_config\"] ?? {};\n              }\n              /**\n              * Disposes of all the ONNX sessions that were created during inference.\n              * @returns {Promise<unknown[]>} An array of promises, one for each ONNX session that is being disposed.\n              * @todo Use https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n              */\n              async dispose() {\n                const promises = [];\n                for (const session of Object.values(this.sessions)) {\n                  if (session?.handler?.dispose) {\n                    promises.push(session.handler.dispose());\n                  }\n                }\n                return await Promise.all(promises);\n              }\n              /**\n               * Instantiate one of the model classes of the library from a pretrained model.\n               * \n               * The model class to instantiate is selected based on the `model_type` property of the config object\n               * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)\n               * \n               * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:\n               * - A string, the *model id* of a pretrained model hosted inside a model repo on huggingface.co.\n               *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a\n               *   user or organization name, like `dbmdz/bert-base-german-cased`.\n               * - A path to a *directory* containing model weights, e.g., `./my_model_directory/`.\n               * @param {import('./utils/hub.js').PretrainedModelOptions} options Additional options for loading the model.\n               * \n               * @returns {Promise<PreTrainedModel>} A new instance of the `PreTrainedModel` class.\n               */\n              static async from_pretrained(pretrained_model_name_or_path, {\n                progress_callback = null,\n                config = null,\n                cache_dir = null,\n                local_files_only = false,\n                revision = \"main\",\n                model_file_name = null,\n                subfolder = \"onnx\",\n                device = null,\n                dtype = null,\n                use_external_data_format = null,\n                session_options = {}\n              } = {}) {\n                let options = {\n                  progress_callback,\n                  config,\n                  cache_dir,\n                  local_files_only,\n                  revision,\n                  model_file_name,\n                  subfolder,\n                  device,\n                  dtype,\n                  use_external_data_format,\n                  session_options\n                };\n                const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this);\n                const modelType = MODEL_TYPE_MAPPING.get(modelName);\n                config = options.config = await _configs_js__WEBPACK_IMPORTED_MODULE_0__.AutoConfig.from_pretrained(pretrained_model_name_or_path, options);\n                let info;\n                if (modelType === MODEL_TYPES.DecoderOnly) {\n                  info = await Promise.all([\n                    constructSessions(pretrained_model_name_or_path, {\n                      model: options.model_file_name ?? \"model\"\n                    }, options),\n                    getOptionalConfigs(pretrained_model_name_or_path, {\n                      generation_config: \"generation_config.json\"\n                    }, options)\n                  ]);\n                } else if (modelType === MODEL_TYPES.Seq2Seq || modelType === MODEL_TYPES.Vision2Seq) {\n                  info = await Promise.all([\n                    constructSessions(pretrained_model_name_or_path, {\n                      model: \"encoder_model\",\n                      decoder_model_merged: \"decoder_model_merged\"\n                    }, options),\n                    getOptionalConfigs(pretrained_model_name_or_path, {\n                      generation_config: \"generation_config.json\"\n                    }, options)\n                  ]);\n                } else if (modelType === MODEL_TYPES.MaskGeneration) {\n                  info = await Promise.all([\n                    constructSessions(pretrained_model_name_or_path, {\n                      model: \"vision_encoder\",\n                      prompt_encoder_mask_decoder: \"prompt_encoder_mask_decoder\"\n                    }, options)\n                  ]);\n                } else if (modelType === MODEL_TYPES.EncoderDecoder) {\n                  info = await Promise.all([\n                    constructSessions(pretrained_model_name_or_path, {\n                      model: \"encoder_model\",\n                      decoder_model_merged: \"decoder_model_merged\"\n                    }, options)\n                  ]);\n                } else if (modelType === MODEL_TYPES.ImageTextToText) {\n                  const sessions = {\n                    embed_tokens: \"embed_tokens\",\n                    vision_encoder: \"vision_encoder\",\n                    decoder_model_merged: \"decoder_model_merged\"\n                  };\n                  if (config.is_encoder_decoder) {\n                    sessions[\"model\"] = \"encoder_model\";\n                  }\n                  info = await Promise.all([\n                    constructSessions(pretrained_model_name_or_path, sessions, options),\n                    getOptionalConfigs(pretrained_model_name_or_path, {\n                      generation_config: \"generation_config.json\"\n                    }, options)\n                  ]);\n                } else if (modelType === MODEL_TYPES.AudioTextToText) {\n                  const sessions = {\n                    embed_tokens: \"embed_tokens\",\n                    audio_encoder: \"audio_encoder\",\n                    decoder_model_merged: \"decoder_model_merged\"\n                  };\n                  info = await Promise.all([\n                    constructSessions(pretrained_model_name_or_path, sessions, options),\n                    getOptionalConfigs(pretrained_model_name_or_path, {\n                      generation_config: \"generation_config.json\"\n                    }, options)\n                  ]);\n                } else if (modelType === MODEL_TYPES.Musicgen) {\n                  info = await Promise.all([\n                    constructSessions(pretrained_model_name_or_path, {\n                      model: \"text_encoder\",\n                      decoder_model_merged: \"decoder_model_merged\",\n                      encodec_decode: \"encodec_decode\"\n                    }, options),\n                    getOptionalConfigs(pretrained_model_name_or_path, {\n                      generation_config: \"generation_config.json\"\n                    }, options)\n                  ]);\n                } else if (modelType === MODEL_TYPES.MultiModality) {\n                  info = await Promise.all([\n                    constructSessions(pretrained_model_name_or_path, {\n                      prepare_inputs_embeds: \"prepare_inputs_embeds\",\n                      model: \"language_model\",\n                      lm_head: \"lm_head\",\n                      gen_head: \"gen_head\",\n                      gen_img_embeds: \"gen_img_embeds\",\n                      image_decode: \"image_decode\"\n                    }, options),\n                    getOptionalConfigs(pretrained_model_name_or_path, {\n                      generation_config: \"generation_config.json\"\n                    }, options)\n                  ]);\n                } else if (modelType === MODEL_TYPES.Phi3V) {\n                  info = await Promise.all([\n                    constructSessions(pretrained_model_name_or_path, {\n                      prepare_inputs_embeds: \"prepare_inputs_embeds\",\n                      model: \"model\",\n                      vision_encoder: \"vision_encoder\"\n                    }, options),\n                    getOptionalConfigs(pretrained_model_name_or_path, {\n                      generation_config: \"generation_config.json\"\n                    }, options)\n                  ]);\n                } else if (modelType === MODEL_TYPES.AutoEncoder) {\n                  info = await Promise.all([\n                    constructSessions(pretrained_model_name_or_path, {\n                      encoder_model: \"encoder_model\",\n                      decoder_model: \"decoder_model\"\n                    }, options)\n                  ]);\n                } else {\n                  if (modelType !== MODEL_TYPES.EncoderOnly) {\n                    const type = modelName ?? config?.model_type;\n                    if (type !== \"custom\") {\n                      console.warn(`Model type for '${type}' not found, assuming encoder-only architecture. Please report this at ${_utils_constants_js__WEBPACK_IMPORTED_MODULE_6__.GITHUB_ISSUE_URL}.`);\n                    }\n                  }\n                  info = await Promise.all([\n                    constructSessions(pretrained_model_name_or_path, {\n                      model: options.model_file_name ?? \"model\"\n                    }, options)\n                  ]);\n                }\n                return new this(config, ...info);\n              }\n              /**\n               * Runs the model with the provided inputs\n               * @param {Object} model_inputs Object containing input tensors\n               * @returns {Promise<Object>} Object containing output tensors\n               */\n              async _call(model_inputs) {\n                return await this.forward(model_inputs);\n              }\n              /**\n               * Forward method for a pretrained model. If not overridden by a subclass, the correct forward method\n               * will be chosen based on the model type.\n               * @param {Object} model_inputs The input data to the model in the format specified in the ONNX model.\n               * @returns {Promise<Object>} The output data from the model in the format specified in the ONNX model.\n               * @throws {Error} This method must be implemented in subclasses.\n               */\n              async forward(model_inputs) {\n                return await this._forward(this, model_inputs);\n              }\n              /**\n               * Get the model's generation config, if it exists.\n               * @returns {GenerationConfig|null} The model's generation config if it exists, otherwise `null`.\n               */\n              get generation_config() {\n                return this.configs?.generation_config ?? null;\n              }\n              /**\n               * This function returns a [`LogitsProcessorList`] list object that contains all relevant [`LogitsWarper`]\n               * instances used for multinomial sampling.\n               * @param {GenerationConfig} generation_config The generation config.\n               * @returns {LogitsProcessorList} generation_config \n               */\n              _get_logits_warper(generation_config) {\n                const warpers = new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.LogitsProcessorList();\n                if (generation_config.temperature !== null && generation_config.temperature !== 1) {\n                  warpers.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.TemperatureLogitsWarper(generation_config.temperature));\n                }\n                if (generation_config.top_k !== null && generation_config.top_k !== 0) {\n                  warpers.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.TopKLogitsWarper(generation_config.top_k));\n                }\n                if (generation_config.top_p !== null && generation_config.top_p < 1) {\n                  warpers.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.TopPLogitsWarper(generation_config.top_p));\n                }\n                return warpers;\n              }\n              /**\n               * @param {GenerationConfig} generation_config \n               * @param {number} input_ids_seq_length The starting sequence length for the input ids.\n               * @returns {LogitsProcessorList}\n               * @private\n               */\n              _get_logits_processor(generation_config, input_ids_seq_length, logits_processor = null) {\n                const processors = new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.LogitsProcessorList();\n                if (generation_config.repetition_penalty !== null && generation_config.repetition_penalty !== 1) {\n                  processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.RepetitionPenaltyLogitsProcessor(generation_config.repetition_penalty));\n                }\n                if (generation_config.no_repeat_ngram_size !== null && generation_config.no_repeat_ngram_size > 0) {\n                  processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.NoRepeatNGramLogitsProcessor(generation_config.no_repeat_ngram_size));\n                }\n                if (generation_config.bad_words_ids !== null) {\n                  processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.NoBadWordsLogitsProcessor(generation_config.bad_words_ids, generation_config.eos_token_id));\n                }\n                if (generation_config.min_length !== null && generation_config.eos_token_id !== null && generation_config.min_length > 0) {\n                  processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.MinLengthLogitsProcessor(generation_config.min_length, generation_config.eos_token_id));\n                }\n                if (generation_config.min_new_tokens !== null && generation_config.eos_token_id !== null && generation_config.min_new_tokens > 0) {\n                  processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.MinNewTokensLengthLogitsProcessor(\n                    input_ids_seq_length,\n                    generation_config.min_new_tokens,\n                    generation_config.eos_token_id\n                  ));\n                }\n                if (generation_config.forced_bos_token_id !== null) {\n                  processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.ForcedBOSTokenLogitsProcessor(generation_config.forced_bos_token_id));\n                }\n                if (generation_config.forced_eos_token_id !== null) {\n                  processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.ForcedEOSTokenLogitsProcessor(\n                    generation_config.max_length,\n                    generation_config.forced_eos_token_id\n                  ));\n                }\n                if (generation_config.begin_suppress_tokens !== null) {\n                  const begin_index = input_ids_seq_length > 1 || generation_config.forced_bos_token_id === null ? input_ids_seq_length : input_ids_seq_length + 1;\n                  processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.SuppressTokensAtBeginLogitsProcessor(generation_config.begin_suppress_tokens, begin_index));\n                }\n                if (generation_config.guidance_scale !== null && generation_config.guidance_scale > 1) {\n                  processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.ClassifierFreeGuidanceLogitsProcessor(generation_config.guidance_scale));\n                }\n                if (logits_processor !== null) {\n                  processors.extend(logits_processor);\n                }\n                return processors;\n              }\n              /**\n               * This function merges multiple generation configs together to form a final generation config to be used by the model for text generation.\n               * It first creates an empty `GenerationConfig` object, then it applies the model's own `generation_config` property to it. Finally, if a `generation_config` object was passed in the arguments, it overwrites the corresponding properties in the final config with those of the passed config object.\n               * @param {GenerationConfig|null} generation_config A `GenerationConfig` object containing generation parameters.\n               * @param {Object} kwargs Additional generation parameters to be used in place of those in the `generation_config` object.\n               * @returns {GenerationConfig} The final generation config object to be used by the model for text generation.\n               */\n              _prepare_generation_config(generation_config, kwargs, cls = _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_8__.GenerationConfig) {\n                const config = { ...this.config };\n                for (const key of [\"decoder\", \"generator\", \"text_config\"]) {\n                  if (key in config) {\n                    Object.assign(config, config[key]);\n                  }\n                }\n                const gen_config = new cls(config);\n                Object.assign(gen_config, this.generation_config ?? {});\n                if (generation_config) {\n                  Object.assign(gen_config, generation_config);\n                }\n                if (kwargs) {\n                  Object.assign(gen_config, (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(kwargs, Object.getOwnPropertyNames(gen_config)));\n                }\n                return gen_config;\n              }\n              /**\n               * \n               * @param {GenerationConfig} generation_config \n               * @param {StoppingCriteriaList} [stopping_criteria=null] \n               */\n              _get_stopping_criteria(generation_config, stopping_criteria = null) {\n                const criteria = new _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_12__.StoppingCriteriaList();\n                if (generation_config.max_length !== null) {\n                  criteria.push(new _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_12__.MaxLengthCriteria(\n                    generation_config.max_length,\n                    this.config.max_position_embeddings ?? null\n                  ));\n                }\n                if (generation_config.eos_token_id !== null) {\n                  criteria.push(new _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_12__.EosTokenCriteria(generation_config.eos_token_id));\n                }\n                if (stopping_criteria) {\n                  criteria.extend(stopping_criteria);\n                }\n                return criteria;\n              }\n              /**\n               * Confirms that the model class is compatible with generation.\n               * If not, raises an exception that points to the right class to use.\n               */\n              _validate_model_class() {\n                if (!this.can_generate) {\n                  const generate_compatible_mappings = [\n                    MODEL_FOR_CAUSAL_LM_MAPPING_NAMES,\n                    // MODEL_FOR_CAUSAL_IMAGE_MODELING_MAPPING, // TODO\n                    MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES,\n                    MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES,\n                    MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES\n                  ];\n                  const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this.constructor);\n                  const generate_compatible_classes = /* @__PURE__ */ new Set();\n                  const modelType = this.config.model_type;\n                  for (const model_mapping of generate_compatible_mappings) {\n                    const supported_models = model_mapping.get(modelType);\n                    if (supported_models) {\n                      generate_compatible_classes.add(supported_models[0]);\n                    }\n                  }\n                  let errorMessage = `The current model class (${modelName}) is not compatible with \\`.generate()\\`, as it doesn't have a language model head.`;\n                  if (generate_compatible_classes.size > 0) {\n                    errorMessage += ` Please use the following class instead: ${[...generate_compatible_classes].join(\", \")}`;\n                  }\n                  throw Error(errorMessage);\n                }\n              }\n              prepare_inputs_for_generation(...args) {\n                return this._prepare_inputs_for_generation(this, ...args);\n              }\n              /**\n               * \n               * @param {Object} inputs\n               * @param {bigint[][]} inputs.generated_input_ids\n               * @param {Object} inputs.outputs\n               * @param {Object} inputs.model_inputs\n               * @param {boolean} inputs.is_encoder_decoder\n               * @returns {Object} The updated model inputs for the next generation iteration.\n               */\n              _update_model_kwargs_for_generation({ generated_input_ids, outputs, model_inputs, is_encoder_decoder }) {\n                model_inputs[\"past_key_values\"] = this.getPastKeyValues(outputs, model_inputs.past_key_values);\n                model_inputs[\"input_ids\"] = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\"int64\", generated_input_ids.flat(), [generated_input_ids.length, 1]);\n                if (!is_encoder_decoder) {\n                  model_inputs.attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)(\n                    [\n                      model_inputs.attention_mask,\n                      (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([model_inputs.attention_mask.dims[0], 1])\n                    ],\n                    1\n                  );\n                } else if (\"decoder_attention_mask\" in model_inputs) {\n                }\n                model_inputs[\"position_ids\"] = null;\n                return model_inputs;\n              }\n              /**\n               * This function extracts the model-specific `inputs` for generation.\n               * @param {Object} params\n               * @param {Tensor} [params.inputs=null]\n               * @param {number} [params.bos_token_id=null]\n               * @param {Record<string, Tensor|number[]>} [params.model_kwargs]\n               * @returns {{inputs_tensor: Tensor, model_inputs: Record<string, Tensor>, model_input_name: string}} The model-specific inputs for generation.\n               */\n              _prepare_model_inputs({ inputs, bos_token_id, model_kwargs }) {\n                const model_inputs = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(model_kwargs, this.forward_params);\n                const input_name = this.main_input_name;\n                if (input_name in model_inputs) {\n                  if (inputs) {\n                    throw new Error(\n                      \"`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...\"\n                    );\n                  }\n                } else {\n                  model_inputs[input_name] = inputs;\n                }\n                const inputs_tensor = model_inputs[input_name];\n                return { inputs_tensor, model_inputs, model_input_name: input_name };\n              }\n              async _prepare_encoder_decoder_kwargs_for_generation({ inputs_tensor, model_inputs, model_input_name, generation_config }) {\n                if (this.sessions[\"model\"].inputNames.includes(\"inputs_embeds\") && !model_inputs.inputs_embeds && \"_prepare_inputs_embeds\" in this) {\n                  const { input_ids, pixel_values, attention_mask, ...kwargs } = model_inputs;\n                  const prepared_inputs = await this._prepare_inputs_embeds(model_inputs);\n                  model_inputs = {\n                    ...kwargs,\n                    ...(0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(prepared_inputs, [\"inputs_embeds\", \"attention_mask\"])\n                  };\n                }\n                let { last_hidden_state } = await encoderForward(this, model_inputs);\n                if (generation_config.guidance_scale !== null && generation_config.guidance_scale > 1) {\n                  last_hidden_state = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([\n                    last_hidden_state,\n                    (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.full_like)(last_hidden_state, 0)\n                  ], 0);\n                  if (\"attention_mask\" in model_inputs) {\n                    model_inputs[\"attention_mask\"] = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([\n                      model_inputs[\"attention_mask\"],\n                      (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.zeros_like)(model_inputs[\"attention_mask\"])\n                    ], 0);\n                  }\n                } else if (model_inputs.decoder_input_ids) {\n                  const decoder_input_ids_batch_size = toI64Tensor(model_inputs.decoder_input_ids).dims[0];\n                  if (decoder_input_ids_batch_size !== last_hidden_state.dims[0]) {\n                    if (last_hidden_state.dims[0] !== 1) {\n                      throw new Error(\n                        `The encoder outputs have a different batch size (${last_hidden_state.dims[0]}) than the decoder inputs (${decoder_input_ids_batch_size}).`\n                      );\n                    }\n                    last_hidden_state = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)(Array.from({ length: decoder_input_ids_batch_size }, () => last_hidden_state), 0);\n                  }\n                }\n                model_inputs[\"encoder_outputs\"] = last_hidden_state;\n                return model_inputs;\n              }\n              /**\n               * Prepares `decoder_input_ids` for generation with encoder-decoder models\n               * @param {*} param0 \n               */\n              _prepare_decoder_input_ids_for_generation({ batch_size, model_input_name, model_kwargs, decoder_start_token_id, bos_token_id, generation_config }) {\n                let { decoder_input_ids, ...model_inputs } = model_kwargs;\n                if (!(decoder_input_ids instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor)) {\n                  if (!decoder_input_ids) {\n                    decoder_start_token_id ?? (decoder_start_token_id = bos_token_id);\n                    if (this.config.model_type === \"musicgen\") {\n                      decoder_input_ids = Array.from({\n                        // @ts-expect-error TS2339\n                        length: batch_size * this.config.decoder.num_codebooks\n                      }, () => [decoder_start_token_id]);\n                    } else if (Array.isArray(decoder_start_token_id)) {\n                      if (decoder_start_token_id.length !== batch_size) {\n                        throw new Error(\n                          `\\`decoder_start_token_id\\` expcted to have length ${batch_size} but got ${decoder_start_token_id.length}`\n                        );\n                      }\n                      decoder_input_ids = decoder_start_token_id;\n                    } else {\n                      decoder_input_ids = Array.from({\n                        length: batch_size\n                      }, () => [decoder_start_token_id]);\n                    }\n                  } else if (!Array.isArray(decoder_input_ids[0])) {\n                    decoder_input_ids = Array.from({\n                      length: batch_size\n                    }, () => decoder_input_ids);\n                  }\n                  decoder_input_ids = toI64Tensor(decoder_input_ids);\n                }\n                model_kwargs[\"decoder_attention_mask\"] = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones_like)(decoder_input_ids);\n                return { input_ids: decoder_input_ids, model_inputs };\n              }\n              /**\n               * Generates sequences of token ids for models with a language modeling head.\n               * @param {import('./generation/parameters.js').GenerationFunctionParameters} options\n               * @returns {Promise<ModelOutput|Tensor>} The output of the model, which can contain the generated token ids, attentions, and scores.\n               */\n              async generate({\n                inputs = null,\n                generation_config = null,\n                logits_processor = null,\n                stopping_criteria = null,\n                streamer = null,\n                // inputs_attention_mask = null,\n                ...kwargs\n              }) {\n                this._validate_model_class();\n                generation_config = this._prepare_generation_config(generation_config, kwargs);\n                let { inputs_tensor, model_inputs, model_input_name } = this._prepare_model_inputs({\n                  inputs,\n                  model_kwargs: kwargs\n                });\n                const is_encoder_decoder = this.config.is_encoder_decoder;\n                if (!is_encoder_decoder) {\n                } else if (!(\"encoder_outputs\" in model_inputs)) {\n                  model_inputs = await this._prepare_encoder_decoder_kwargs_for_generation(\n                    { inputs_tensor, model_inputs, model_input_name, generation_config }\n                  );\n                }\n                let input_ids;\n                if (is_encoder_decoder) {\n                  ({ input_ids, model_inputs } = this._prepare_decoder_input_ids_for_generation({\n                    batch_size: model_inputs[model_input_name].dims.at(0),\n                    model_input_name,\n                    model_kwargs: model_inputs,\n                    decoder_start_token_id: generation_config.decoder_start_token_id,\n                    bos_token_id: generation_config.bos_token_id,\n                    generation_config\n                  }));\n                } else {\n                  input_ids = model_inputs[model_input_name];\n                }\n                let input_ids_length = input_ids.dims.at(-1);\n                if (generation_config.max_new_tokens !== null) {\n                  generation_config.max_length = input_ids_length + generation_config.max_new_tokens;\n                }\n                const prepared_logits_processor = this._get_logits_processor(\n                  generation_config,\n                  input_ids_length,\n                  logits_processor\n                );\n                const prepared_stopping_criteria = this._get_stopping_criteria(\n                  generation_config,\n                  stopping_criteria\n                );\n                const numInputs = model_inputs[model_input_name].dims.at(0);\n                const sampler = _generation_logits_sampler_js__WEBPACK_IMPORTED_MODULE_13__.LogitsSampler.getSampler(generation_config);\n                const scores = new Array(numInputs).fill(0);\n                const all_input_ids = input_ids.tolist();\n                if (streamer) {\n                  streamer.put(all_input_ids);\n                }\n                let outputs;\n                let attentions = {};\n                while (true) {\n                  model_inputs = this.prepare_inputs_for_generation(all_input_ids, model_inputs, generation_config);\n                  outputs = await this.forward(model_inputs);\n                  if (generation_config.output_attentions && generation_config.return_dict_in_generate) {\n                    const token_attentions = this.getAttentions(outputs);\n                    for (const key in token_attentions) {\n                      if (!(key in attentions)) {\n                        attentions[key] = [];\n                      }\n                      attentions[key].push(token_attentions[key]);\n                    }\n                  }\n                  const logits = outputs.logits.slice(null, -1, null);\n                  const next_tokens_scores = prepared_logits_processor(all_input_ids, logits);\n                  const generated_input_ids = [];\n                  for (let batch_idx = 0; batch_idx < next_tokens_scores.dims.at(0); ++batch_idx) {\n                    const logs = next_tokens_scores[batch_idx];\n                    const sampledTokens = await sampler(logs);\n                    for (const [newTokenId, logProb] of sampledTokens) {\n                      const bigint = BigInt(newTokenId);\n                      scores[batch_idx] += logProb;\n                      all_input_ids[batch_idx].push(bigint);\n                      generated_input_ids.push([bigint]);\n                      break;\n                    }\n                  }\n                  if (streamer) {\n                    streamer.put(generated_input_ids);\n                  }\n                  const stop = prepared_stopping_criteria(all_input_ids);\n                  if (stop.every((x) => x)) {\n                    break;\n                  }\n                  model_inputs = this._update_model_kwargs_for_generation({\n                    generated_input_ids,\n                    outputs,\n                    model_inputs,\n                    is_encoder_decoder\n                  });\n                }\n                if (streamer) {\n                  streamer.end();\n                }\n                const past_key_values = this.getPastKeyValues(outputs, model_inputs.past_key_values, true);\n                const sequences = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\"int64\", all_input_ids.flat(), [all_input_ids.length, all_input_ids[0].length]);\n                if (generation_config.return_dict_in_generate) {\n                  return {\n                    sequences,\n                    past_key_values,\n                    ...attentions\n                    // TODO:\n                    // scores,\n                    // logits,\n                  };\n                } else {\n                  for (const tensor of Object.values(outputs)) {\n                    if (tensor.location === \"gpu-buffer\") {\n                      tensor.dispose();\n                    }\n                  }\n                  return sequences;\n                }\n              }\n              /**\n               * Returns an object containing past key values from the given decoder results object.\n               *\n               * @param {Object} decoderResults The decoder results object.\n               * @param {Object} pastKeyValues The previous past key values.\n               * @returns {Object} An object containing past key values.\n               */\n              getPastKeyValues(decoderResults, pastKeyValues, disposeEncoderPKVs = false) {\n                const pkvs = /* @__PURE__ */ Object.create(null);\n                for (const name in decoderResults) {\n                  if (name.startsWith(\"present\")) {\n                    const newName = name.replace(\"present\", \"past_key_values\");\n                    const is_encoder_pkv = name.includes(\"encoder\");\n                    if (is_encoder_pkv && pastKeyValues) {\n                      pkvs[newName] = pastKeyValues[newName];\n                    } else {\n                      pkvs[newName] = decoderResults[name];\n                    }\n                    if (pastKeyValues && (!is_encoder_pkv || disposeEncoderPKVs)) {\n                      const t = pastKeyValues[newName];\n                      if (t.location === \"gpu-buffer\") {\n                        t.dispose();\n                      }\n                    }\n                  }\n                }\n                return pkvs;\n              }\n              /**\n               * Returns an object containing attentions from the given model output object.\n               *\n               * @param {Object} model_output The output of the model.\n               * @returns {{cross_attentions?: Tensor[]}} An object containing attentions.\n               */\n              getAttentions(model_output) {\n                const attentions = {};\n                for (const attnName of [\"cross_attentions\", \"encoder_attentions\", \"decoder_attentions\"]) {\n                  for (const name in model_output) {\n                    if (name.startsWith(attnName)) {\n                      if (!(attnName in attentions)) {\n                        attentions[attnName] = [];\n                      }\n                      attentions[attnName].push(model_output[name]);\n                    }\n                  }\n                }\n                return attentions;\n              }\n              /**\n               * Adds past key values to the decoder feeds object. If pastKeyValues is null, creates new tensors for past key values.\n               *\n               * @param {Object} decoderFeeds The decoder feeds object to add past key values to.\n               * @param {Object} pastKeyValues An object containing past key values.\n               */\n              addPastKeyValues(decoderFeeds, pastKeyValues) {\n                if (pastKeyValues) {\n                  Object.assign(decoderFeeds, pastKeyValues);\n                } else {\n                  const session = this.sessions[\"decoder_model_merged\"] ?? this.sessions[\"model\"];\n                  const dtype = session?.config?.kv_cache_dtype ?? \"float32\";\n                  const empty = dtype === \"float16\" ? new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.DataTypeMap.float16() : [];\n                  const batch_size = (decoderFeeds[this.main_input_name] ?? decoderFeeds.attention_mask)?.dims?.[0] ?? 1;\n                  const shapes = (0, _configs_js__WEBPACK_IMPORTED_MODULE_0__.getKeyValueShapes)(this.config, { batch_size });\n                  for (const name in shapes) {\n                    decoderFeeds[name] = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(dtype, empty, shapes[name]);\n                  }\n                }\n              }\n              async encode_image({ pixel_values }) {\n                const features = (await sessionRun(this.sessions[\"vision_encoder\"], { pixel_values })).image_features;\n                if (!this.config.num_image_tokens) {\n                  console.warn(\n                    `The number of image tokens was not set in the model configuration. Setting it to the number of features detected by the vision encoder (${features.dims[1]}).`\n                  );\n                  this.config.num_image_tokens = features.dims[1];\n                }\n                return features;\n              }\n              async encode_text({ input_ids }) {\n                return (await sessionRun(this.sessions[\"embed_tokens\"], { input_ids })).inputs_embeds;\n              }\n              async encode_audio({ audio_values }) {\n                return (await sessionRun(this.sessions[\"audio_encoder\"], { audio_values })).audio_features;\n              }\n            }\n            class ModelOutput {\n            }\n            class BaseModelOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.last_hidden_state Sequence of hidden-states at the output of the last layer of the model.\n               * @param {Tensor} [output.hidden_states] Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.\n               * @param {Tensor} [output.attentions] Attentions weights after the attention softmax, used to compute the weighted average in the self-attention heads.\n               */\n              constructor({ last_hidden_state, hidden_states = null, attentions = null }) {\n                super();\n                this.last_hidden_state = last_hidden_state;\n                this.hidden_states = hidden_states;\n                this.attentions = attentions;\n              }\n            }\n            class BertPreTrainedModel extends PreTrainedModel {\n            }\n            class BertModel extends BertPreTrainedModel {\n            }\n            class BertForMaskedLM extends BertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class BertForSequenceClassification extends BertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class BertForTokenClassification extends BertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class BertForQuestionAnswering extends BertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class ModernBertPreTrainedModel extends PreTrainedModel {\n            }\n            class ModernBertModel extends ModernBertPreTrainedModel {\n            }\n            class ModernBertForMaskedLM extends ModernBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class ModernBertForSequenceClassification extends ModernBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class ModernBertForTokenClassification extends ModernBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class NomicBertPreTrainedModel extends PreTrainedModel {\n            }\n            class NomicBertModel extends NomicBertPreTrainedModel {\n            }\n            class RoFormerPreTrainedModel extends PreTrainedModel {\n            }\n            class RoFormerModel extends RoFormerPreTrainedModel {\n            }\n            class RoFormerForMaskedLM extends RoFormerPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class RoFormerForSequenceClassification extends RoFormerPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class RoFormerForTokenClassification extends RoFormerPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class RoFormerForQuestionAnswering extends RoFormerPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class ConvBertPreTrainedModel extends PreTrainedModel {\n            }\n            class ConvBertModel extends ConvBertPreTrainedModel {\n            }\n            class ConvBertForMaskedLM extends ConvBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class ConvBertForSequenceClassification extends ConvBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class ConvBertForTokenClassification extends ConvBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class ConvBertForQuestionAnswering extends ConvBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class ElectraPreTrainedModel extends PreTrainedModel {\n            }\n            class ElectraModel extends ElectraPreTrainedModel {\n            }\n            class ElectraForMaskedLM extends ElectraPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class ElectraForSequenceClassification extends ElectraPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class ElectraForTokenClassification extends ElectraPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class ElectraForQuestionAnswering extends ElectraPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class CamembertPreTrainedModel extends PreTrainedModel {\n            }\n            class CamembertModel extends CamembertPreTrainedModel {\n            }\n            class CamembertForMaskedLM extends CamembertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class CamembertForSequenceClassification extends CamembertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class CamembertForTokenClassification extends CamembertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class CamembertForQuestionAnswering extends CamembertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class DebertaPreTrainedModel extends PreTrainedModel {\n            }\n            class DebertaModel extends DebertaPreTrainedModel {\n            }\n            class DebertaForMaskedLM extends DebertaPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class DebertaForSequenceClassification extends DebertaPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class DebertaForTokenClassification extends DebertaPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class DebertaForQuestionAnswering extends DebertaPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class DebertaV2PreTrainedModel extends PreTrainedModel {\n            }\n            class DebertaV2Model extends DebertaV2PreTrainedModel {\n            }\n            class DebertaV2ForMaskedLM extends DebertaV2PreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class DebertaV2ForSequenceClassification extends DebertaV2PreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class DebertaV2ForTokenClassification extends DebertaV2PreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class DebertaV2ForQuestionAnswering extends DebertaV2PreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class DistilBertPreTrainedModel extends PreTrainedModel {\n            }\n            class DistilBertModel extends DistilBertPreTrainedModel {\n            }\n            class DistilBertForSequenceClassification extends DistilBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class DistilBertForTokenClassification extends DistilBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class DistilBertForQuestionAnswering extends DistilBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class DistilBertForMaskedLM extends DistilBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class EsmPreTrainedModel extends PreTrainedModel {\n            }\n            class EsmModel extends EsmPreTrainedModel {\n            }\n            class EsmForMaskedLM extends EsmPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class EsmForSequenceClassification extends EsmPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class EsmForTokenClassification extends EsmPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class MobileBertPreTrainedModel extends PreTrainedModel {\n            }\n            class MobileBertModel extends MobileBertPreTrainedModel {\n            }\n            class MobileBertForMaskedLM extends MobileBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class MobileBertForSequenceClassification extends MobileBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class MobileBertForQuestionAnswering extends MobileBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class MPNetPreTrainedModel extends PreTrainedModel {\n            }\n            class MPNetModel extends MPNetPreTrainedModel {\n            }\n            class MPNetForMaskedLM extends MPNetPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class MPNetForSequenceClassification extends MPNetPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class MPNetForTokenClassification extends MPNetPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class MPNetForQuestionAnswering extends MPNetPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class SqueezeBertPreTrainedModel extends PreTrainedModel {\n            }\n            class SqueezeBertModel extends SqueezeBertPreTrainedModel {\n            }\n            class SqueezeBertForMaskedLM extends SqueezeBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class SqueezeBertForSequenceClassification extends SqueezeBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class SqueezeBertForQuestionAnswering extends SqueezeBertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class AlbertPreTrainedModel extends PreTrainedModel {\n            }\n            class AlbertModel extends AlbertPreTrainedModel {\n            }\n            class AlbertForSequenceClassification extends AlbertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class AlbertForQuestionAnswering extends AlbertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class AlbertForMaskedLM extends AlbertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class T5PreTrainedModel extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"forward_params\", [\n                  \"input_ids\",\n                  \"attention_mask\",\n                  \"encoder_outputs\",\n                  \"decoder_input_ids\",\n                  \"decoder_attention_mask\",\n                  \"past_key_values\"\n                ]);\n              }\n            }\n            ;\n            class T5Model extends T5PreTrainedModel {\n            }\n            class T5ForConditionalGeneration extends T5PreTrainedModel {\n            }\n            class LongT5PreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class LongT5Model extends LongT5PreTrainedModel {\n            }\n            class LongT5ForConditionalGeneration extends LongT5PreTrainedModel {\n            }\n            class MT5PreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class MT5Model extends MT5PreTrainedModel {\n            }\n            class MT5ForConditionalGeneration extends MT5PreTrainedModel {\n            }\n            class BartPretrainedModel extends PreTrainedModel {\n            }\n            ;\n            class BartModel extends BartPretrainedModel {\n            }\n            class BartForConditionalGeneration extends BartPretrainedModel {\n            }\n            class BartForSequenceClassification extends BartPretrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class MBartPreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class MBartModel extends MBartPreTrainedModel {\n            }\n            class MBartForConditionalGeneration extends MBartPreTrainedModel {\n            }\n            class MBartForSequenceClassification extends MBartPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class MBartForCausalLM extends MBartPreTrainedModel {\n            }\n            class BlenderbotPreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class BlenderbotModel extends BlenderbotPreTrainedModel {\n            }\n            class BlenderbotForConditionalGeneration extends BlenderbotPreTrainedModel {\n            }\n            class BlenderbotSmallPreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class BlenderbotSmallModel extends BlenderbotSmallPreTrainedModel {\n            }\n            class BlenderbotSmallForConditionalGeneration extends BlenderbotSmallPreTrainedModel {\n            }\n            class RobertaPreTrainedModel extends PreTrainedModel {\n            }\n            class RobertaModel extends RobertaPreTrainedModel {\n            }\n            class RobertaForMaskedLM extends RobertaPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class RobertaForSequenceClassification extends RobertaPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class RobertaForTokenClassification extends RobertaPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class RobertaForQuestionAnswering extends RobertaPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class XLMPreTrainedModel extends PreTrainedModel {\n            }\n            class XLMModel extends XLMPreTrainedModel {\n            }\n            class XLMWithLMHeadModel extends XLMPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class XLMForSequenceClassification extends XLMPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class XLMForTokenClassification extends XLMPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class XLMForQuestionAnswering extends XLMPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class XLMRobertaPreTrainedModel extends PreTrainedModel {\n            }\n            class XLMRobertaModel extends XLMRobertaPreTrainedModel {\n            }\n            class XLMRobertaForMaskedLM extends XLMRobertaPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<MaskedLMOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new MaskedLMOutput(await super._call(model_inputs));\n              }\n            }\n            class XLMRobertaForSequenceClassification extends XLMRobertaPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class XLMRobertaForTokenClassification extends XLMRobertaPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class XLMRobertaForQuestionAnswering extends XLMRobertaPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               *\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n               */\n              async _call(model_inputs) {\n                return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n              }\n            }\n            class ASTPreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class ASTModel extends ASTPreTrainedModel {\n            }\n            class ASTForAudioClassification extends ASTPreTrainedModel {\n            }\n            class WhisperPreTrainedModel extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"requires_attention_mask\", false);\n                __publicField(this, \"main_input_name\", \"input_features\");\n                __publicField(this, \"forward_params\", [\n                  \"input_features\",\n                  \"attention_mask\",\n                  \"decoder_input_ids\",\n                  \"decoder_attention_mask\",\n                  \"past_key_values\"\n                ]);\n              }\n            }\n            ;\n            class WhisperModel extends WhisperPreTrainedModel {\n            }\n            class WhisperForConditionalGeneration extends WhisperPreTrainedModel {\n              _prepare_generation_config(generation_config, kwargs) {\n                return (\n                  /** @type {WhisperGenerationConfig} */\n                  super._prepare_generation_config(generation_config, kwargs, _models_whisper_generation_whisper_js__WEBPACK_IMPORTED_MODULE_15__.WhisperGenerationConfig)\n                );\n              }\n              /**\n               * \n               * @param {WhisperGenerationConfig} generation_config \n               */\n              _retrieve_init_tokens(generation_config) {\n                const init_tokens = [generation_config.decoder_start_token_id];\n                let language = generation_config.language;\n                const task = generation_config.task;\n                if (generation_config.is_multilingual) {\n                  if (!language) {\n                    console.warn(\"No language specified - defaulting to English (en).\");\n                    language = \"en\";\n                  }\n                  const language_code = (0, _models_whisper_common_whisper_js__WEBPACK_IMPORTED_MODULE_16__.whisper_language_to_code)(language);\n                  const language_token = `<|${language_code}|>`;\n                  init_tokens.push(generation_config.lang_to_id[language_token]);\n                  init_tokens.push(generation_config.task_to_id[task ?? \"transcribe\"]);\n                } else if (language || task) {\n                  throw new Error(\n                    \"Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.\"\n                  );\n                }\n                if (!generation_config.return_timestamps && generation_config.no_timestamps_token_id && init_tokens.at(-1) !== generation_config.no_timestamps_token_id) {\n                  init_tokens.push(generation_config.no_timestamps_token_id);\n                } else if (generation_config.return_timestamps && init_tokens.at(-1) === generation_config.no_timestamps_token_id) {\n                  console.warn(\"<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`.\");\n                  init_tokens.pop();\n                }\n                return init_tokens.filter((token) => token != null);\n              }\n              /**\n               * Transcribes or translates log-mel input features to a sequence of auto-regressively generated token ids.\n               * @param {import('./models/whisper/generation_whisper.js').WhisperGenerationFunctionParameters} options\n               * @returns {Promise<ModelOutput|Tensor>} The output of the model, which can contain the generated token ids, attentions, and scores.\n               */\n              async generate({\n                inputs = null,\n                generation_config = null,\n                logits_processor = null,\n                stopping_criteria = null,\n                // Whisper-specific options (passed to kwargs)\n                // prompt_ids = null,\n                // language = null,\n                // task = null,\n                ...kwargs\n              }) {\n                generation_config = this._prepare_generation_config(generation_config, kwargs);\n                const init_tokens = kwargs.decoder_input_ids ?? this._retrieve_init_tokens(generation_config);\n                if (generation_config.return_timestamps) {\n                  logits_processor ?? (logits_processor = new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.LogitsProcessorList());\n                  logits_processor.push(\n                    new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.WhisperTimeStampLogitsProcessor(generation_config, init_tokens)\n                  );\n                }\n                if (generation_config.begin_suppress_tokens) {\n                  logits_processor ?? (logits_processor = new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.LogitsProcessorList());\n                  logits_processor.push(\n                    new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.SuppressTokensAtBeginLogitsProcessor(generation_config.begin_suppress_tokens, init_tokens.length)\n                  );\n                }\n                if (generation_config.return_token_timestamps) {\n                  if (!generation_config.alignment_heads) {\n                    throw new Error(\n                      \"Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.\"\n                    );\n                  }\n                  if (generation_config.task === \"translate\") {\n                    console.warn(\"Token-level timestamps may not be reliable for task 'translate'.\");\n                  }\n                  generation_config.output_attentions = true;\n                  generation_config.return_dict_in_generate = true;\n                }\n                const outputs = await super.generate({\n                  inputs,\n                  generation_config,\n                  logits_processor,\n                  decoder_input_ids: init_tokens,\n                  ...kwargs\n                });\n                if (generation_config.return_token_timestamps) {\n                  outputs[\"token_timestamps\"] = this._extract_token_timestamps(\n                    // @ts-expect-error TS2345\n                    outputs,\n                    generation_config.alignment_heads,\n                    generation_config.num_frames\n                  );\n                }\n                return outputs;\n              }\n              /**\n               * Calculates token-level timestamps using the encoder-decoder cross-attentions and\n               * dynamic time-warping (DTW) to map each output token to a position in the input audio.\n               * If `num_frames` is specified, the encoder-decoder cross-attentions will be cropped before applying DTW.\n               * @param {Object} generate_outputs Outputs generated by the model\n               * @param {Tensor[][]} generate_outputs.cross_attentions The cross attentions output by the model\n               * @param {Tensor} generate_outputs.sequences The sequences output by the model\n               * @param {number[][]} alignment_heads Alignment heads of the model\n               * @param {number} [num_frames=null] Number of frames in the input audio.\n               * @param {number} [time_precision=0.02] Precision of the timestamps in seconds\n               * @returns {Tensor} tensor containing the timestamps in seconds for each predicted token\n               */\n              _extract_token_timestamps(generate_outputs, alignment_heads, num_frames = null, time_precision = 0.02) {\n                if (!generate_outputs.cross_attentions) {\n                  throw new Error(\n                    \"Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.\"\n                  );\n                }\n                if (num_frames == null) {\n                  console.warn(\n                    \"`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).\"\n                  );\n                }\n                let median_filter_width = this.config.median_filter_width;\n                if (median_filter_width === void 0) {\n                  console.warn(\"Model config has no `median_filter_width`, using default value of 7.\");\n                  median_filter_width = 7;\n                }\n                const batch = generate_outputs.cross_attentions;\n                const cross_attentions = Array.from(\n                  { length: this.config.decoder_layers },\n                  // Concatenate the cross attentions for each layer across sequence length dimension.\n                  (_, i) => (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)(batch.map((x) => x[i]), 2)\n                );\n                const weights = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.stack)(alignment_heads.map(([l, h]) => {\n                  if (l >= cross_attentions.length) {\n                    throw new Error(`Layer index ${l} is out of bounds for cross attentions (length ${cross_attentions.length}).`);\n                  }\n                  return num_frames ? cross_attentions[l].slice(null, h, null, [0, num_frames]) : cross_attentions[l].slice(null, h);\n                })).transpose(1, 0, 2, 3);\n                const [std, calculatedMean] = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.std_mean)(weights, -2, 0, true);\n                const smoothedWeights = weights.clone();\n                for (let a = 0; a < smoothedWeights.dims[0]; ++a) {\n                  const aTensor = smoothedWeights[a];\n                  for (let b = 0; b < aTensor.dims[0]; ++b) {\n                    const bTensor = aTensor[b];\n                    const stdTensorData = std[a][b][0].data;\n                    const meanTensorData = calculatedMean[a][b][0].data;\n                    for (let c = 0; c < bTensor.dims[0]; ++c) {\n                      let cTensorData = bTensor[c].data;\n                      for (let d = 0; d < cTensorData.length; ++d) {\n                        cTensorData[d] = (cTensorData[d] - meanTensorData[d]) / stdTensorData[d];\n                      }\n                      cTensorData.set((0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_11__.medianFilter)(cTensorData, median_filter_width));\n                    }\n                  }\n                }\n                const batchedMatrices = [(0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.mean)(smoothedWeights, 1)];\n                const timestampsShape = generate_outputs.sequences.dims;\n                const timestamps = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\n                  \"float32\",\n                  new Float32Array(timestampsShape[0] * timestampsShape[1]),\n                  timestampsShape\n                );\n                for (let batch_idx = 0; batch_idx < timestampsShape[0]; ++batch_idx) {\n                  const matrix = batchedMatrices[batch_idx].neg().squeeze_(0);\n                  const [text_indices, time_indices] = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_11__.dynamic_time_warping)(matrix.tolist());\n                  const diffs = Array.from({ length: text_indices.length - 1 }, (v, i) => text_indices[i + 1] - text_indices[i]);\n                  const jumps = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.mergeArrays)([1], diffs).map((x) => !!x);\n                  const jump_times = [];\n                  for (let i = 0; i < jumps.length; ++i) {\n                    if (jumps[i]) {\n                      jump_times.push(time_indices[i] * time_precision);\n                    }\n                  }\n                  timestamps[batch_idx].data.set(jump_times, 1);\n                }\n                return timestamps;\n              }\n            }\n            class LiteWhisperForConditionalGeneration extends WhisperForConditionalGeneration {\n            }\n            class MoonshinePreTrainedModel extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"requires_attention_mask\", false);\n                __publicField(this, \"main_input_name\", \"input_values\");\n                __publicField(this, \"forward_params\", [\n                  \"input_values\",\n                  \"decoder_input_ids\",\n                  \"past_key_values\"\n                ]);\n              }\n            }\n            ;\n            class MoonshineModel extends MoonshinePreTrainedModel {\n            }\n            class MoonshineForConditionalGeneration extends MoonshinePreTrainedModel {\n            }\n            class VisionEncoderDecoderModel extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"main_input_name\", \"pixel_values\");\n                __publicField(this, \"forward_params\", [\n                  // Encoder inputs\n                  \"pixel_values\",\n                  // Decoder inpputs\n                  \"decoder_input_ids\",\n                  \"encoder_hidden_states\",\n                  \"past_key_values\"\n                ]);\n              }\n            }\n            class LlavaPreTrainedModel extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"forward_params\", [\n                  \"input_ids\",\n                  \"attention_mask\",\n                  \"pixel_values\",\n                  \"position_ids\",\n                  \"past_key_values\"\n                ]);\n              }\n            }\n            class LlavaForConditionalGeneration extends LlavaPreTrainedModel {\n              _merge_input_ids_with_image_features({\n                inputs_embeds,\n                image_features,\n                input_ids,\n                attention_mask\n              }) {\n                const image_token_index = this.config.image_token_index;\n                const idsList = input_ids.tolist();\n                const indexOfImage = idsList.map((x) => x.findIndex((x2) => x2 == image_token_index));\n                const noImages = indexOfImage.every((x) => x === -1);\n                const allImages = indexOfImage.every((x) => x !== -1);\n                if (!noImages && !allImages) {\n                  throw new Error(\"Every input should contain either 0 or 1 image token.\");\n                }\n                if (noImages) {\n                  return {\n                    inputs_embeds,\n                    attention_mask\n                  };\n                }\n                const stacked = [];\n                const stacked_attention_mask = [];\n                for (let i = 0; i < indexOfImage.length; ++i) {\n                  const index = indexOfImage[i];\n                  const e = inputs_embeds[i];\n                  const im2 = image_features[i];\n                  const am2 = attention_mask[i];\n                  stacked.push(\n                    (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([\n                      e.slice([0, index]),\n                      im2,\n                      e.slice([index + 1, e.dims[0]])\n                    ], 0)\n                  );\n                  stacked_attention_mask.push(\n                    (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([\n                      am2.slice([0, index]),\n                      (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([im2.dims[0]]),\n                      am2.slice([index + 1, am2.dims[0]])\n                    ], 0)\n                  );\n                }\n                return {\n                  inputs_embeds: (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.stack)(stacked, 0),\n                  attention_mask: (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.stack)(stacked_attention_mask, 0)\n                };\n              }\n            }\n            class LlavaOnevisionForConditionalGeneration extends LlavaForConditionalGeneration {\n            }\n            class Moondream1ForConditionalGeneration extends LlavaForConditionalGeneration {\n            }\n            class Florence2PreTrainedModel extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"forward_params\", [\n                  // Encoder inputs\n                  \"input_ids\",\n                  \"inputs_embeds\",\n                  \"attention_mask\",\n                  \"pixel_values\",\n                  // Decoder inputs\n                  \"encoder_outputs\",\n                  \"decoder_input_ids\",\n                  \"decoder_inputs_embeds\",\n                  \"decoder_attention_mask\",\n                  \"past_key_values\"\n                ]);\n                __publicField(this, \"main_input_name\", \"inputs_embeds\");\n              }\n            }\n            class Florence2ForConditionalGeneration extends Florence2PreTrainedModel {\n              _merge_input_ids_with_image_features({\n                inputs_embeds,\n                image_features,\n                input_ids,\n                attention_mask\n              }) {\n                return {\n                  inputs_embeds: (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([\n                    image_features,\n                    // image embeds\n                    inputs_embeds\n                    // task prefix embeds\n                  ], 1),\n                  attention_mask: (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([\n                    (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)(image_features.dims.slice(0, 2)),\n                    // image attention mask\n                    attention_mask\n                    // task prefix attention mask\n                  ], 1)\n                };\n              }\n              async _prepare_inputs_embeds({ input_ids, pixel_values, inputs_embeds, attention_mask }) {\n                if (!input_ids && !pixel_values) {\n                  throw new Error(\"Either `input_ids` or `pixel_values` should be provided.\");\n                }\n                let text_features, image_features;\n                if (input_ids) {\n                  text_features = await this.encode_text({ input_ids });\n                }\n                if (pixel_values) {\n                  image_features = await this.encode_image({ pixel_values });\n                }\n                if (text_features && image_features) {\n                  ({ inputs_embeds, attention_mask } = this._merge_input_ids_with_image_features({\n                    inputs_embeds: text_features,\n                    image_features,\n                    input_ids,\n                    attention_mask\n                  }));\n                } else {\n                  inputs_embeds = text_features || image_features;\n                }\n                return { inputs_embeds, attention_mask };\n              }\n              async forward({\n                input_ids,\n                pixel_values,\n                attention_mask,\n                decoder_input_ids,\n                decoder_attention_mask,\n                encoder_outputs,\n                past_key_values,\n                inputs_embeds,\n                decoder_inputs_embeds\n              }) {\n                if (!inputs_embeds) {\n                  ({ inputs_embeds, attention_mask } = await this._prepare_inputs_embeds({ input_ids, pixel_values, inputs_embeds, attention_mask }));\n                }\n                if (!encoder_outputs) {\n                  let { last_hidden_state } = await encoderForward(this, { inputs_embeds, attention_mask });\n                  encoder_outputs = last_hidden_state;\n                }\n                if (!decoder_inputs_embeds) {\n                  if (!decoder_input_ids) {\n                    throw new Error(\"Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.\");\n                  }\n                  decoder_inputs_embeds = await this.encode_text({ input_ids: decoder_input_ids });\n                }\n                const decoderFeeds = {\n                  inputs_embeds: decoder_inputs_embeds,\n                  attention_mask: decoder_attention_mask,\n                  encoder_attention_mask: attention_mask,\n                  encoder_hidden_states: encoder_outputs,\n                  past_key_values\n                };\n                const decoder_outputs = await decoderForward(this, decoderFeeds, true);\n                return decoder_outputs;\n              }\n            }\n            class PaliGemmaPreTrainedModel extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"forward_params\", [\n                  \"input_ids\",\n                  // 'inputs_embeds',\n                  \"attention_mask\",\n                  \"pixel_values\",\n                  \"position_ids\",\n                  \"past_key_values\"\n                ]);\n              }\n            }\n            class PaliGemmaForConditionalGeneration extends PaliGemmaPreTrainedModel {\n              _merge_input_ids_with_image_features(kwargs) {\n                const vision_hidden_size = kwargs.image_features.dims.at(-1);\n                const reshaped_image_hidden_states = kwargs.image_features.view(-1, vision_hidden_size);\n                return default_merge_input_ids_with_image_features({\n                  // @ts-ignore\n                  image_token_id: this.config.image_token_index,\n                  ...kwargs,\n                  image_features: reshaped_image_hidden_states\n                });\n              }\n            }\n            class Idefics3PreTrainedModel extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"forward_params\", [\n                  \"input_ids\",\n                  \"attention_mask\",\n                  \"pixel_values\",\n                  \"pixel_attention_mask\",\n                  \"position_ids\",\n                  \"past_key_values\"\n                ]);\n              }\n            }\n            class Idefics3ForConditionalGeneration extends Idefics3PreTrainedModel {\n              async encode_image({ pixel_values, pixel_attention_mask }) {\n                const features = (await sessionRun(this.sessions[\"vision_encoder\"], { pixel_values, pixel_attention_mask })).image_features;\n                return features;\n              }\n              _merge_input_ids_with_image_features(kwargs) {\n                const vision_hidden_size = kwargs.image_features.dims.at(-1);\n                const reshaped_image_hidden_states = kwargs.image_features.view(-1, vision_hidden_size);\n                return default_merge_input_ids_with_image_features({\n                  // @ts-ignore\n                  image_token_id: this.config.image_token_id,\n                  ...kwargs,\n                  image_features: reshaped_image_hidden_states\n                });\n              }\n            }\n            class SmolVLMForConditionalGeneration extends Idefics3ForConditionalGeneration {\n            }\n            class Phi3VPreTrainedModel extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"forward_params\", [\n                  \"input_ids\",\n                  \"inputs_embeds\",\n                  \"attention_mask\",\n                  \"position_ids\",\n                  \"pixel_values\",\n                  \"image_sizes\",\n                  \"past_key_values\"\n                ]);\n              }\n            }\n            class Phi3VForCausalLM extends Phi3VPreTrainedModel {\n              async forward({\n                // Produced by the tokenizer/processor:\n                input_ids = null,\n                attention_mask = null,\n                pixel_values = null,\n                image_sizes = null,\n                // Used during generation:\n                position_ids = null,\n                inputs_embeds = null,\n                past_key_values = null,\n                // Generic generation parameters\n                generation_config = null,\n                logits_processor = null,\n                // TODO: needed?\n                ...kwargs\n              }) {\n                if (!inputs_embeds) {\n                  let image_features;\n                  if (pixel_values && input_ids.dims[1] !== 1) {\n                    if (!image_sizes) {\n                      throw new Error(\"`image_sizes` must be provided when `pixel_values` is provided.\");\n                    }\n                    ({ image_features } = await sessionRun(this.sessions[\"vision_encoder\"], {\n                      pixel_values,\n                      image_sizes\n                    }));\n                  } else {\n                    const hidden_size = this.config.normalized_config.hidden_size;\n                    image_features = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\n                      \"float32\",\n                      [],\n                      [0, hidden_size]\n                    );\n                  }\n                  ({ inputs_embeds } = await sessionRun(this.sessions[\"prepare_inputs_embeds\"], {\n                    input_ids,\n                    image_features\n                  }));\n                }\n                const outputs = await decoderForward(this, {\n                  inputs_embeds,\n                  past_key_values,\n                  attention_mask,\n                  position_ids,\n                  generation_config,\n                  logits_processor\n                }, false);\n                return outputs;\n              }\n            }\n            class CLIPPreTrainedModel extends PreTrainedModel {\n            }\n            class CLIPModel extends CLIPPreTrainedModel {\n            }\n            class CLIPTextModel extends CLIPPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"text_model\"\n                });\n              }\n            }\n            class CLIPTextModelWithProjection extends CLIPPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"text_model\"\n                });\n              }\n            }\n            class CLIPVisionModel extends CLIPPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"vision_model\"\n                });\n              }\n            }\n            class CLIPVisionModelWithProjection extends CLIPPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"vision_model\"\n                });\n              }\n            }\n            class SiglipPreTrainedModel extends PreTrainedModel {\n            }\n            class SiglipModel extends SiglipPreTrainedModel {\n            }\n            class SiglipTextModel extends SiglipPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"text_model\"\n                });\n              }\n            }\n            class SiglipVisionModel extends CLIPPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"vision_model\"\n                });\n              }\n            }\n            class ChineseCLIPPreTrainedModel extends PreTrainedModel {\n            }\n            class ChineseCLIPModel extends ChineseCLIPPreTrainedModel {\n            }\n            class JinaCLIPPreTrainedModel extends PreTrainedModel {\n            }\n            class JinaCLIPModel extends JinaCLIPPreTrainedModel {\n              async forward(model_inputs) {\n                const missing_text_inputs = !model_inputs.input_ids;\n                const missing_image_inputs = !model_inputs.pixel_values;\n                if (missing_text_inputs && missing_image_inputs) {\n                  throw new Error(\"Either `input_ids` or `pixel_values` should be provided.\");\n                }\n                if (missing_text_inputs) {\n                  model_inputs.input_ids = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([model_inputs.pixel_values.dims[0], 1]);\n                }\n                if (missing_image_inputs) {\n                  const { image_size } = this.config.vision_config;\n                  model_inputs.pixel_values = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.full)([0, 3, image_size, image_size], 0);\n                }\n                const { text_embeddings, image_embeddings, l2norm_text_embeddings, l2norm_image_embeddings } = await super.forward(model_inputs);\n                const result = {};\n                if (!missing_text_inputs) {\n                  result.text_embeddings = text_embeddings;\n                  result.l2norm_text_embeddings = l2norm_text_embeddings;\n                }\n                if (!missing_image_inputs) {\n                  result.image_embeddings = image_embeddings;\n                  result.l2norm_image_embeddings = l2norm_image_embeddings;\n                }\n                return result;\n              }\n            }\n            class JinaCLIPTextModel extends JinaCLIPPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"text_model\"\n                });\n              }\n            }\n            class JinaCLIPVisionModel extends JinaCLIPPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"vision_model\"\n                });\n              }\n            }\n            class CLIPSegPreTrainedModel extends PreTrainedModel {\n            }\n            class CLIPSegModel extends CLIPSegPreTrainedModel {\n            }\n            class CLIPSegForImageSegmentation extends CLIPSegPreTrainedModel {\n            }\n            class GPT2PreTrainedModel extends PreTrainedModel {\n            }\n            class GPT2Model extends GPT2PreTrainedModel {\n            }\n            class GPT2LMHeadModel extends GPT2PreTrainedModel {\n            }\n            class JAISPreTrainedModel extends PreTrainedModel {\n            }\n            class JAISModel extends JAISPreTrainedModel {\n            }\n            class JAISLMHeadModel extends JAISPreTrainedModel {\n            }\n            class GPTNeoPreTrainedModel extends PreTrainedModel {\n            }\n            class GPTNeoModel extends GPTNeoPreTrainedModel {\n            }\n            class GPTNeoForCausalLM extends GPTNeoPreTrainedModel {\n            }\n            class GPTNeoXPreTrainedModel extends PreTrainedModel {\n            }\n            class GPTNeoXModel extends GPTNeoXPreTrainedModel {\n            }\n            class GPTNeoXForCausalLM extends GPTNeoXPreTrainedModel {\n            }\n            class GPTJPreTrainedModel extends PreTrainedModel {\n            }\n            class GPTJModel extends GPTJPreTrainedModel {\n            }\n            class GPTJForCausalLM extends GPTJPreTrainedModel {\n            }\n            class GPTBigCodePreTrainedModel extends PreTrainedModel {\n            }\n            class GPTBigCodeModel extends GPTBigCodePreTrainedModel {\n            }\n            class GPTBigCodeForCausalLM extends GPTBigCodePreTrainedModel {\n            }\n            class CodeGenPreTrainedModel extends PreTrainedModel {\n            }\n            class CodeGenModel extends CodeGenPreTrainedModel {\n            }\n            class CodeGenForCausalLM extends CodeGenPreTrainedModel {\n            }\n            class LlamaPreTrainedModel extends PreTrainedModel {\n            }\n            class LlamaModel extends LlamaPreTrainedModel {\n            }\n            class LlamaForCausalLM extends LlamaPreTrainedModel {\n            }\n            class HeliumPreTrainedModel extends PreTrainedModel {\n            }\n            class HeliumModel extends HeliumPreTrainedModel {\n            }\n            class HeliumForCausalLM extends HeliumPreTrainedModel {\n            }\n            class GlmPreTrainedModel extends PreTrainedModel {\n            }\n            class GlmModel extends GlmPreTrainedModel {\n            }\n            class GlmForCausalLM extends GlmPreTrainedModel {\n            }\n            class ExaonePreTrainedModel extends PreTrainedModel {\n            }\n            class ExaoneModel extends ExaonePreTrainedModel {\n            }\n            class ExaoneForCausalLM extends ExaonePreTrainedModel {\n            }\n            class MobileLLMPreTrainedModel extends PreTrainedModel {\n            }\n            class MobileLLMModel extends MobileLLMPreTrainedModel {\n            }\n            class MobileLLMForCausalLM extends MobileLLMPreTrainedModel {\n            }\n            class OlmoPreTrainedModel extends PreTrainedModel {\n            }\n            class OlmoModel extends OlmoPreTrainedModel {\n            }\n            class OlmoForCausalLM extends OlmoPreTrainedModel {\n            }\n            class Olmo2PreTrainedModel extends PreTrainedModel {\n            }\n            class Olmo2Model extends Olmo2PreTrainedModel {\n            }\n            class Olmo2ForCausalLM extends Olmo2PreTrainedModel {\n            }\n            class GranitePreTrainedModel extends PreTrainedModel {\n            }\n            class GraniteModel extends GranitePreTrainedModel {\n            }\n            class GraniteForCausalLM extends GranitePreTrainedModel {\n            }\n            class CoherePreTrainedModel extends PreTrainedModel {\n            }\n            class CohereModel extends CoherePreTrainedModel {\n            }\n            class CohereForCausalLM extends CoherePreTrainedModel {\n            }\n            class GemmaPreTrainedModel extends PreTrainedModel {\n            }\n            class GemmaModel extends GemmaPreTrainedModel {\n            }\n            class GemmaForCausalLM extends GemmaPreTrainedModel {\n            }\n            class Gemma2PreTrainedModel extends PreTrainedModel {\n            }\n            class Gemma2Model extends Gemma2PreTrainedModel {\n            }\n            class Gemma2ForCausalLM extends Gemma2PreTrainedModel {\n            }\n            class Gemma3PreTrainedModel extends PreTrainedModel {\n            }\n            class Gemma3Model extends Gemma3PreTrainedModel {\n            }\n            class Gemma3ForCausalLM extends Gemma3PreTrainedModel {\n            }\n            class OpenELMPreTrainedModel extends PreTrainedModel {\n            }\n            class OpenELMModel extends OpenELMPreTrainedModel {\n            }\n            class OpenELMForCausalLM extends OpenELMPreTrainedModel {\n            }\n            class Qwen2PreTrainedModel extends PreTrainedModel {\n            }\n            class Qwen2Model extends Qwen2PreTrainedModel {\n            }\n            class Qwen2ForCausalLM extends Qwen2PreTrainedModel {\n            }\n            class Qwen2VLPreTrainedModel extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"forward_params\", [\n                  // Text inputs\n                  \"input_ids\",\n                  \"attention_mask\",\n                  \"position_ids\",\n                  \"past_key_values\",\n                  // Vision inputs\n                  \"pixel_values\",\n                  \"image_grid_thw\"\n                ]);\n              }\n            }\n            class Qwen2VLForConditionalGeneration extends Qwen2VLPreTrainedModel {\n              /**\n               * Calculate the 3D rope index based on image and video's temporal, height and width in LLM.\n               *\n               * Explanation:\n               *     Each embedding sequence contains vision embedding and text embedding or just contains text embedding.\n               *\n               *     For pure text embedding sequence, the rotary position embedding has no difference with mordern LLMs.\n               *     Examples:\n               *         input_ids: [T T T T T], here T is for text.\n               *         temporal position_ids: [0, 1, 2, 3, 4]\n               *         height position_ids: [0, 1, 2, 3, 4]\n               *         width position_ids: [0, 1, 2, 3, 4]\n               *\n               *     For vision and text embedding sequence, we calculate 3D rotary position embedding for vision part\n               *     and 1D rotary position embeddin for text part.\n               *     Examples:\n               *         Assume we have a video input with 3 temporal patches, 2 height patches and 2 width patches.\n               *         input_ids: [V V V V V V V V V V V V T T T T T], here V is for vision.\n               *         vision temporal position_ids: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2]\n               *         vision height position_ids: [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]\n               *         vision width position_ids: [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]\n               *         text temporal position_ids: [3, 4, 5, 6, 7]\n               *         text height position_ids: [3, 4, 5, 6, 7]\n               *         text width position_ids: [3, 4, 5, 6, 7]\n               *         Here we calculate the text start position_ids as the max vision position_ids plus 1.\n               * \n               * @param {Tensor} input_ids Indices of input sequence tokens in the vocabulary. Tensor of shape `(batch_size, sequence_length)`.\n               * @param {Tensor} image_grid_thw (Optional) The temporal, height and width of feature shape of each image in LLM. Tensor of shape `(num_images, 3)`.\n               * @param {Tensor} video_grid_thw (Optional) The temporal, height and width of feature shape of each video in LLM. Tensor of shape `(num_videos, 3)`.\n               * @param {Tensor} attention_mask (Optional) Mask to avoid performing attention on padding token indices. Tensor of shape `(batch_size, sequence_length)`. Mask values selected in `[0, 1]`:\n               * - 1 for tokens that are **not masked**,\n               * - 0 for tokens that are **masked**.\n               * @returns {[Tensor, Tensor]} [position_ids, mrope_position_deltas] with:\n               * - position_ids: Tensor of shape `(3, batch_size, sequence_length)`.\n               * - mrope_position_deltas: Tensor of shape `(batch_size)`.\n               */\n              get_rope_index(input_ids, image_grid_thw, video_grid_thw, attention_mask) {\n                const { vision_config, image_token_id, video_token_id, vision_start_token_id } = this.config;\n                const spatial_merge_size = vision_config.spatial_merge_size ?? 2;\n                const mrope_position_deltas = [];\n                if (image_grid_thw || video_grid_thw) {\n                  let total_input_ids = input_ids.tolist();\n                  if (!attention_mask) {\n                    attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones_like)(input_ids);\n                  }\n                  const attention_mask_list = attention_mask.tolist();\n                  const position_ids_list = Array.from({ length: 3 }, (_) => Array.from({ length: input_ids.dims[0] }, (_2) => Array.from({ length: input_ids.dims[1] }, (_3) => 1)));\n                  const image_grid_thw_list = image_grid_thw ? image_grid_thw.tolist() : [];\n                  const video_grid_thw_list = video_grid_thw ? video_grid_thw.tolist() : [];\n                  let image_index = 0;\n                  let video_index = 0;\n                  for (let i = 0; i < total_input_ids.length; ++i) {\n                    const ids = total_input_ids[i].filter((_, j) => attention_mask_list[i][j] == 1);\n                    const vision_start_indices = ids.reduce((acc, x, idx) => {\n                      if (x == vision_start_token_id) acc.push(idx);\n                      return acc;\n                    }, []);\n                    const vision_tokens = vision_start_indices.map((x) => ids[x + 1]);\n                    const image_nums = vision_tokens.filter((x) => x == image_token_id).length;\n                    const video_nums = vision_tokens.filter((x) => x == video_token_id).length;\n                    let llm_pos_ids_list = [];\n                    let st2 = 0;\n                    let remain_images = image_nums;\n                    let remain_videos = video_nums;\n                    for (let j = 0; j < vision_tokens.length; ++j) {\n                      const next_image_token = ids.findIndex((x, i2) => i2 > st2 && x == image_token_id);\n                      const next_video_token = ids.findIndex((x, i2) => i2 > st2 && x == video_token_id);\n                      const ed_image = remain_images > 0 && next_image_token !== -1 ? next_image_token : ids.length + 1;\n                      const ed_video = remain_videos > 0 && next_video_token !== -1 ? next_video_token : ids.length + 1;\n                      let ed2;\n                      let t, h, w;\n                      if (ed_image < ed_video) {\n                        [t, h, w] = image_grid_thw_list[image_index];\n                        ++image_index;\n                        --remain_images;\n                        ed2 = ed_image;\n                      } else {\n                        [t, h, w] = video_grid_thw_list[video_index];\n                        ++video_index;\n                        --remain_videos;\n                        ed2 = ed_video;\n                      }\n                      const [llm_grid_t, llm_grid_h, llm_grid_w] = [\n                        Number(t),\n                        Math.floor(Number(h) / spatial_merge_size),\n                        Math.floor(Number(w) / spatial_merge_size)\n                      ];\n                      const text_len = ed2 - st2;\n                      const st_idx = llm_pos_ids_list.length > 0 ? (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_11__.max)(llm_pos_ids_list.at(-1))[0] + 1 : 0;\n                      llm_pos_ids_list.push(\n                        Array.from({ length: 3 * text_len }, (_, i2) => st_idx + i2 % text_len)\n                      );\n                      const offset = text_len + st_idx;\n                      const grid_size = llm_grid_t * llm_grid_h * llm_grid_w;\n                      const t_index = Array.from({ length: grid_size }, (_, i2) => offset + Math.floor(i2 / (llm_grid_h * llm_grid_w)));\n                      const h_index = Array.from({ length: grid_size }, (_, i2) => offset + Math.floor(i2 / llm_grid_w) % llm_grid_h);\n                      const w_index = Array.from({ length: grid_size }, (_, i2) => offset + i2 % llm_grid_w);\n                      llm_pos_ids_list.push([t_index, h_index, w_index].flat());\n                      st2 = ed2 + grid_size;\n                    }\n                    if (st2 < ids.length) {\n                      const st_idx = llm_pos_ids_list.length > 0 ? (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_11__.max)(llm_pos_ids_list.at(-1))[0] + 1 : 0;\n                      const text_len = ids.length - st2;\n                      llm_pos_ids_list.push(\n                        Array.from({ length: 3 * text_len }, (_, i2) => st_idx + i2 % text_len)\n                      );\n                    }\n                    const num_items = llm_pos_ids_list.reduce((acc, x) => acc + x.length, 0);\n                    const llm_positions = new Array(num_items);\n                    let index = 0;\n                    for (let x = 0; x < 3; ++x) {\n                      for (let y = 0; y < llm_pos_ids_list.length; ++y) {\n                        const val = llm_pos_ids_list[y];\n                        const text_len = val.length / 3;\n                        for (let z = x * text_len; z < (x + 1) * text_len; ++z) {\n                          llm_positions[index++] = val[z];\n                        }\n                      }\n                    }\n                    let count = 0;\n                    const attn_mask = attention_mask_list[i];\n                    for (let y = 0; y < attn_mask.length; ++y) {\n                      if (attn_mask[y] == 1) {\n                        for (let x = 0; x < 3; ++x) {\n                          position_ids_list[x][i][y] = llm_positions[x * num_items / 3 + count];\n                        }\n                        ++count;\n                      }\n                    }\n                    const max_llm_positions = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_11__.max)(llm_positions)[0];\n                    mrope_position_deltas.push(max_llm_positions + 1 - total_input_ids[i].length);\n                  }\n                  return [\n                    new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\"int64\", position_ids_list.flat(Infinity), [3, input_ids.dims[0], input_ids.dims[1]]),\n                    new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\"int64\", mrope_position_deltas, [mrope_position_deltas.length, 1])\n                  ];\n                } else {\n                  if (attention_mask) {\n                    const { data, dims } = cumsum_masked_fill(attention_mask);\n                    const position_ids = BigInt64Array.from(\n                      { length: 3 * data.length },\n                      (_, i) => data[i % data.length]\n                    );\n                    const mrope_position_deltas2 = Array.from(\n                      { length: dims[0] },\n                      (_, i) => (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_11__.max)(data.subarray(dims[1] * i, dims[1] * (i + 1)))[0] + 1n + BigInt(dims[1])\n                    );\n                    return [\n                      new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\"int64\", position_ids, [3, ...dims]),\n                      new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\"int64\", mrope_position_deltas2, [mrope_position_deltas2.length, 1])\n                    ];\n                  } else {\n                    const [batch_size, seq_length] = input_ids.dims;\n                    const position_ids = BigInt64Array.from(\n                      { length: 3 * batch_size * seq_length },\n                      (_, i) => BigInt(Math.floor(i % seq_length / batch_size))\n                    );\n                    return [\n                      new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\"int64\", position_ids, [3, ...input_ids.dims]),\n                      (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.zeros)([batch_size, 1])\n                    ];\n                  }\n                }\n              }\n              async encode_image({ pixel_values, image_grid_thw }) {\n                const features = (await sessionRun(this.sessions[\"vision_encoder\"], { pixel_values, grid_thw: image_grid_thw })).image_features;\n                return features;\n              }\n              _merge_input_ids_with_image_features(kwargs) {\n                return default_merge_input_ids_with_image_features({\n                  // @ts-ignore\n                  image_token_id: this.config.image_token_id,\n                  ...kwargs\n                });\n              }\n              prepare_inputs_for_generation(input_ids, model_inputs, generation_config) {\n                if (model_inputs.attention_mask && !model_inputs.position_ids) {\n                  if (!model_inputs.past_key_values) {\n                    [model_inputs.position_ids, model_inputs.rope_deltas] = this.get_rope_index(\n                      model_inputs.input_ids,\n                      model_inputs.image_grid_thw,\n                      model_inputs.video_grid_thw,\n                      model_inputs.attention_mask\n                    );\n                  } else {\n                    model_inputs.pixel_values = null;\n                    const delta = BigInt(Object.values(model_inputs.past_key_values)[0].dims.at(-2));\n                    const rope_deltas_list = model_inputs.rope_deltas.map((x) => delta + x);\n                    model_inputs.position_ids = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.stack)([rope_deltas_list, rope_deltas_list, rope_deltas_list], 0);\n                  }\n                }\n                return model_inputs;\n              }\n            }\n            class PhiPreTrainedModel extends PreTrainedModel {\n            }\n            class PhiModel extends PhiPreTrainedModel {\n            }\n            class PhiForCausalLM extends PhiPreTrainedModel {\n            }\n            class Phi3PreTrainedModel extends PreTrainedModel {\n            }\n            class Phi3Model extends Phi3PreTrainedModel {\n            }\n            class Phi3ForCausalLM extends Phi3PreTrainedModel {\n            }\n            class BloomPreTrainedModel extends PreTrainedModel {\n            }\n            class BloomModel extends BloomPreTrainedModel {\n            }\n            class BloomForCausalLM extends BloomPreTrainedModel {\n            }\n            class MptPreTrainedModel extends PreTrainedModel {\n            }\n            class MptModel extends MptPreTrainedModel {\n            }\n            class MptForCausalLM extends MptPreTrainedModel {\n            }\n            class OPTPreTrainedModel extends PreTrainedModel {\n            }\n            class OPTModel extends OPTPreTrainedModel {\n            }\n            class OPTForCausalLM extends OPTPreTrainedModel {\n            }\n            class ViTPreTrainedModel extends PreTrainedModel {\n            }\n            class ViTModel extends ViTPreTrainedModel {\n            }\n            class ViTForImageClassification extends ViTPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class IJepaPreTrainedModel extends PreTrainedModel {\n            }\n            class IJepaModel extends IJepaPreTrainedModel {\n            }\n            class IJepaForImageClassification extends IJepaPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class VitPosePreTrainedModel extends PreTrainedModel {\n            }\n            class VitPoseForPoseEstimation extends VitPosePreTrainedModel {\n            }\n            class PvtPreTrainedModel extends PreTrainedModel {\n            }\n            class PvtModel extends PvtPreTrainedModel {\n            }\n            class PvtForImageClassification extends PvtPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class ViTMAEPreTrainedModel extends PreTrainedModel {\n            }\n            class ViTMAEModel extends ViTMAEPreTrainedModel {\n            }\n            class ViTMSNPreTrainedModel extends PreTrainedModel {\n            }\n            class ViTMSNModel extends ViTMSNPreTrainedModel {\n            }\n            class ViTMSNForImageClassification extends ViTMSNPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class GroupViTPreTrainedModel extends PreTrainedModel {\n            }\n            class GroupViTModel extends GroupViTPreTrainedModel {\n            }\n            class FastViTPreTrainedModel extends PreTrainedModel {\n            }\n            class FastViTModel extends FastViTPreTrainedModel {\n            }\n            class FastViTForImageClassification extends FastViTPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class VitMattePreTrainedModel extends PreTrainedModel {\n            }\n            class VitMatteForImageMatting extends VitMattePreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new ImageMattingOutput(await super._call(model_inputs));\n              }\n            }\n            class MobileViTPreTrainedModel extends PreTrainedModel {\n            }\n            class MobileViTModel extends MobileViTPreTrainedModel {\n            }\n            class MobileViTForImageClassification extends MobileViTPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class MobileViTV2PreTrainedModel extends PreTrainedModel {\n            }\n            class MobileViTV2Model extends MobileViTV2PreTrainedModel {\n            }\n            class MobileViTV2ForImageClassification extends MobileViTV2PreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class OwlViTPreTrainedModel extends PreTrainedModel {\n            }\n            class OwlViTModel extends OwlViTPreTrainedModel {\n            }\n            class OwlViTForObjectDetection extends OwlViTPreTrainedModel {\n            }\n            class Owlv2PreTrainedModel extends PreTrainedModel {\n            }\n            class Owlv2Model extends Owlv2PreTrainedModel {\n            }\n            class Owlv2ForObjectDetection extends Owlv2PreTrainedModel {\n            }\n            class BeitPreTrainedModel extends PreTrainedModel {\n            }\n            class BeitModel extends BeitPreTrainedModel {\n            }\n            class BeitForImageClassification extends BeitPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class DetrPreTrainedModel extends PreTrainedModel {\n            }\n            class DetrModel extends DetrPreTrainedModel {\n            }\n            class DetrForObjectDetection extends DetrPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new DetrObjectDetectionOutput(await super._call(model_inputs));\n              }\n            }\n            class DetrForSegmentation extends DetrPreTrainedModel {\n              /**\n               * Runs the model with the provided inputs\n               * @param {Object} model_inputs Model inputs\n               * @returns {Promise<DetrSegmentationOutput>} Object containing segmentation outputs\n               */\n              async _call(model_inputs) {\n                return new DetrSegmentationOutput(await super._call(model_inputs));\n              }\n            }\n            class DetrObjectDetectionOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.logits Classification logits (including no-object) for all queries.\n               * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).\n               * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).\n               */\n              constructor({ logits, pred_boxes }) {\n                super();\n                this.logits = logits;\n                this.pred_boxes = pred_boxes;\n              }\n            }\n            class DetrSegmentationOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.logits The output logits of the model.\n               * @param {Tensor} output.pred_boxes Predicted boxes.\n               * @param {Tensor} output.pred_masks Predicted masks.\n               */\n              constructor({ logits, pred_boxes, pred_masks }) {\n                super();\n                this.logits = logits;\n                this.pred_boxes = pred_boxes;\n                this.pred_masks = pred_masks;\n              }\n            }\n            class RTDetrPreTrainedModel extends PreTrainedModel {\n            }\n            class RTDetrModel extends RTDetrPreTrainedModel {\n            }\n            class RTDetrForObjectDetection extends RTDetrPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new RTDetrObjectDetectionOutput(await super._call(model_inputs));\n              }\n            }\n            class RTDetrObjectDetectionOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.logits Classification logits (including no-object) for all queries.\n               * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).\n               * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).\n               */\n              constructor({ logits, pred_boxes }) {\n                super();\n                this.logits = logits;\n                this.pred_boxes = pred_boxes;\n              }\n            }\n            class RTDetrV2PreTrainedModel extends PreTrainedModel {\n            }\n            class RTDetrV2Model extends RTDetrV2PreTrainedModel {\n            }\n            class RTDetrV2ForObjectDetection extends RTDetrV2PreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new RTDetrV2ObjectDetectionOutput(await super._call(model_inputs));\n              }\n            }\n            class RTDetrV2ObjectDetectionOutput extends RTDetrObjectDetectionOutput {\n            }\n            class RFDetrPreTrainedModel extends PreTrainedModel {\n            }\n            class RFDetrModel extends RFDetrPreTrainedModel {\n            }\n            class RFDetrForObjectDetection extends RFDetrPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new RFDetrObjectDetectionOutput(await super._call(model_inputs));\n              }\n            }\n            class RFDetrObjectDetectionOutput extends RTDetrObjectDetectionOutput {\n            }\n            class TableTransformerPreTrainedModel extends PreTrainedModel {\n            }\n            class TableTransformerModel extends TableTransformerPreTrainedModel {\n            }\n            class TableTransformerForObjectDetection extends TableTransformerPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new TableTransformerObjectDetectionOutput(await super._call(model_inputs));\n              }\n            }\n            class TableTransformerObjectDetectionOutput extends DetrObjectDetectionOutput {\n            }\n            class DeiTPreTrainedModel extends PreTrainedModel {\n            }\n            class DeiTModel extends DeiTPreTrainedModel {\n            }\n            class DeiTForImageClassification extends DeiTPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class HieraPreTrainedModel extends PreTrainedModel {\n            }\n            class HieraModel extends HieraPreTrainedModel {\n            }\n            class HieraForImageClassification extends HieraPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class ResNetPreTrainedModel extends PreTrainedModel {\n            }\n            class ResNetModel extends ResNetPreTrainedModel {\n            }\n            class ResNetForImageClassification extends ResNetPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class SwinPreTrainedModel extends PreTrainedModel {\n            }\n            class SwinModel extends SwinPreTrainedModel {\n            }\n            class SwinForImageClassification extends SwinPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class SwinForSemanticSegmentation extends SwinPreTrainedModel {\n            }\n            class Swin2SRPreTrainedModel extends PreTrainedModel {\n            }\n            class Swin2SRModel extends Swin2SRPreTrainedModel {\n            }\n            class Swin2SRForImageSuperResolution extends Swin2SRPreTrainedModel {\n            }\n            class DPTPreTrainedModel extends PreTrainedModel {\n            }\n            class DPTModel extends DPTPreTrainedModel {\n            }\n            class DPTForDepthEstimation extends DPTPreTrainedModel {\n            }\n            class DepthAnythingPreTrainedModel extends PreTrainedModel {\n            }\n            class DepthAnythingForDepthEstimation extends DepthAnythingPreTrainedModel {\n            }\n            class SapiensPreTrainedModel extends PreTrainedModel {\n            }\n            class SapiensForSemanticSegmentation extends SapiensPreTrainedModel {\n            }\n            class SapiensForDepthEstimation extends SapiensPreTrainedModel {\n            }\n            class SapiensForNormalEstimation extends SapiensPreTrainedModel {\n            }\n            class DepthProPreTrainedModel extends PreTrainedModel {\n            }\n            class DepthProForDepthEstimation extends DepthProPreTrainedModel {\n            }\n            class Metric3DPreTrainedModel extends PreTrainedModel {\n            }\n            class Metric3DForDepthEstimation extends Metric3DPreTrainedModel {\n            }\n            class Metric3Dv2PreTrainedModel extends PreTrainedModel {\n            }\n            class Metric3Dv2ForDepthEstimation extends Metric3Dv2PreTrainedModel {\n            }\n            class MaskFormerPreTrainedModel extends PreTrainedModel {\n            }\n            class MaskFormerModel extends MaskFormerPreTrainedModel {\n            }\n            class MaskFormerForInstanceSegmentation extends MaskFormerPreTrainedModel {\n            }\n            class GLPNPreTrainedModel extends PreTrainedModel {\n            }\n            class GLPNModel extends GLPNPreTrainedModel {\n            }\n            class GLPNForDepthEstimation extends GLPNPreTrainedModel {\n            }\n            class DonutSwinPreTrainedModel extends PreTrainedModel {\n            }\n            class DonutSwinModel extends DonutSwinPreTrainedModel {\n            }\n            class ConvNextPreTrainedModel extends PreTrainedModel {\n            }\n            class ConvNextModel extends ConvNextPreTrainedModel {\n            }\n            class ConvNextForImageClassification extends ConvNextPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class ConvNextV2PreTrainedModel extends PreTrainedModel {\n            }\n            class ConvNextV2Model extends ConvNextV2PreTrainedModel {\n            }\n            class ConvNextV2ForImageClassification extends ConvNextV2PreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class Dinov2PreTrainedModel extends PreTrainedModel {\n            }\n            class Dinov2Model extends Dinov2PreTrainedModel {\n            }\n            class Dinov2ForImageClassification extends Dinov2PreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class Dinov2WithRegistersPreTrainedModel extends PreTrainedModel {\n            }\n            class Dinov2WithRegistersModel extends Dinov2WithRegistersPreTrainedModel {\n            }\n            class Dinov2WithRegistersForImageClassification extends Dinov2WithRegistersPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class GroundingDinoPreTrainedModel extends PreTrainedModel {\n            }\n            class GroundingDinoForObjectDetection extends GroundingDinoPreTrainedModel {\n            }\n            class YolosPreTrainedModel extends PreTrainedModel {\n            }\n            class YolosModel extends YolosPreTrainedModel {\n            }\n            class YolosForObjectDetection extends YolosPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new YolosObjectDetectionOutput(await super._call(model_inputs));\n              }\n            }\n            class YolosObjectDetectionOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.logits Classification logits (including no-object) for all queries.\n               * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).\n               * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).\n               */\n              constructor({ logits, pred_boxes }) {\n                super();\n                this.logits = logits;\n                this.pred_boxes = pred_boxes;\n              }\n            }\n            class SamPreTrainedModel extends PreTrainedModel {\n            }\n            class SamModel extends SamPreTrainedModel {\n              /**\n               * Compute image embeddings and positional image embeddings, given the pixel values of an image.\n               * @param {Object} model_inputs Object containing the model inputs.\n               * @param {Tensor} model_inputs.pixel_values Pixel values obtained using a `SamProcessor`.\n               * @returns {Promise<{ image_embeddings: Tensor, image_positional_embeddings: Tensor }>} The image embeddings and positional image embeddings.\n               */\n              async get_image_embeddings({ pixel_values }) {\n                return await encoderForward(this, { pixel_values });\n              }\n              /**\n               * @typedef {Object} SamModelInputs Object containing the model inputs.\n               * @property {Tensor} pixel_values Pixel values as a Tensor with shape `(batch_size, num_channels, height, width)`.\n               * These can be obtained using a `SamProcessor`.\n               * @property {Tensor} [input_points] Input 2D spatial points with shape `(batch_size, num_points, 2)`.\n               * This is used by the prompt encoder to encode the prompt.\n               * @property {Tensor} [input_labels] Input labels for the points, as a Tensor of shape `(batch_size, point_batch_size, num_points)`.\n               * This is used by the prompt encoder to encode the prompt. There are 4 types of labels:\n               *  - `1`: the point is a point that contains the object of interest\n               *  - `0`: the point is a point that does not contain the object of interest\n               *  - `-1`: the point corresponds to the background\n               *  - `-10`: the point is a padding point, thus should be ignored by the prompt encoder\n               * @property {Tensor} [input_boxes] Input bounding boxes with shape `(batch_size, num_boxes, 4)`.\n               * @property {Tensor} [image_embeddings] Image embeddings used by the mask decoder.\n               * @property {Tensor} [image_positional_embeddings] Image positional embeddings used by the mask decoder.\n               */\n              /**\n               * @param {SamModelInputs} model_inputs Object containing the model inputs.\n               * @returns {Promise<Object>} The output of the model.\n               */\n              async forward(model_inputs) {\n                if (!model_inputs.image_embeddings || !model_inputs.image_positional_embeddings) {\n                  model_inputs = {\n                    ...model_inputs,\n                    ...await this.get_image_embeddings(model_inputs)\n                  };\n                }\n                if (!model_inputs.input_labels && model_inputs.input_points) {\n                  const shape = model_inputs.input_points.dims.slice(0, -1);\n                  const numElements = shape.reduce((a, b) => a * b, 1);\n                  model_inputs.input_labels = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\n                    \"int64\",\n                    new BigInt64Array(numElements).fill(1n),\n                    shape\n                  );\n                }\n                const decoder_inputs = {\n                  image_embeddings: model_inputs.image_embeddings,\n                  image_positional_embeddings: model_inputs.image_positional_embeddings\n                };\n                if (model_inputs.input_points) {\n                  decoder_inputs.input_points = model_inputs.input_points;\n                }\n                if (model_inputs.input_labels) {\n                  decoder_inputs.input_labels = model_inputs.input_labels;\n                }\n                if (model_inputs.input_boxes) {\n                  decoder_inputs.input_boxes = model_inputs.input_boxes;\n                }\n                return await sessionRun(this.sessions[\"prompt_encoder_mask_decoder\"], decoder_inputs);\n              }\n              /**\n               * Runs the model with the provided inputs\n               * @param {Object} model_inputs Model inputs\n               * @returns {Promise<SamImageSegmentationOutput>} Object containing segmentation outputs\n               */\n              async _call(model_inputs) {\n                return new SamImageSegmentationOutput(await super._call(model_inputs));\n              }\n            }\n            class SamImageSegmentationOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.iou_scores The output logits of the model.\n               * @param {Tensor} output.pred_masks Predicted boxes.\n               */\n              constructor({ iou_scores, pred_masks }) {\n                super();\n                this.iou_scores = iou_scores;\n                this.pred_masks = pred_masks;\n              }\n            }\n            class MarianPreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class MarianModel extends MarianPreTrainedModel {\n            }\n            class MarianMTModel extends MarianPreTrainedModel {\n            }\n            class M2M100PreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class M2M100Model extends M2M100PreTrainedModel {\n            }\n            class M2M100ForConditionalGeneration extends M2M100PreTrainedModel {\n            }\n            class Wav2Vec2PreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class Wav2Vec2Model extends Wav2Vec2PreTrainedModel {\n            }\n            class Wav2Vec2ForCTC extends Wav2Vec2PreTrainedModel {\n              /**\n               * @param {Object} model_inputs\n               * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.\n               * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]\n               */\n              async _call(model_inputs) {\n                return new CausalLMOutput(await super._call(model_inputs));\n              }\n            }\n            class Wav2Vec2ForSequenceClassification extends Wav2Vec2PreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class Wav2Vec2ForAudioFrameClassification extends Wav2Vec2PreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class PyAnnotePreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class PyAnnoteModel extends PyAnnotePreTrainedModel {\n            }\n            class PyAnnoteForAudioFrameClassification extends PyAnnotePreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class WeSpeakerResNetPreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class WeSpeakerResNetModel extends WeSpeakerResNetPreTrainedModel {\n            }\n            class UniSpeechPreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class UniSpeechModel extends UniSpeechPreTrainedModel {\n            }\n            class UniSpeechForCTC extends UniSpeechPreTrainedModel {\n              /**\n               * @param {Object} model_inputs\n               * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.\n               * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]\n               */\n              async _call(model_inputs) {\n                return new CausalLMOutput(await super._call(model_inputs));\n              }\n            }\n            class UniSpeechForSequenceClassification extends UniSpeechPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class UniSpeechSatPreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class UniSpeechSatModel extends UniSpeechSatPreTrainedModel {\n            }\n            class UniSpeechSatForCTC extends UniSpeechSatPreTrainedModel {\n              /**\n               * @param {Object} model_inputs\n               * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.\n               * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]\n               */\n              async _call(model_inputs) {\n                return new CausalLMOutput(await super._call(model_inputs));\n              }\n            }\n            class UniSpeechSatForSequenceClassification extends UniSpeechSatPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class UniSpeechSatForAudioFrameClassification extends UniSpeechSatPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class Wav2Vec2BertPreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class Wav2Vec2BertModel extends Wav2Vec2BertPreTrainedModel {\n            }\n            class Wav2Vec2BertForCTC extends Wav2Vec2BertPreTrainedModel {\n              /**\n               * @param {Object} model_inputs\n               * @param {Tensor} model_inputs.input_features Float values of input mel-spectrogram.\n               * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]\n               */\n              async _call(model_inputs) {\n                return new CausalLMOutput(await super._call(model_inputs));\n              }\n            }\n            class Wav2Vec2BertForSequenceClassification extends Wav2Vec2BertPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class HubertPreTrainedModel extends PreTrainedModel {\n            }\n            class HubertModel extends Wav2Vec2PreTrainedModel {\n            }\n            class HubertForCTC extends Wav2Vec2PreTrainedModel {\n              /**\n               * @param {Object} model_inputs\n               * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.\n               * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]\n               */\n              async _call(model_inputs) {\n                return new CausalLMOutput(await super._call(model_inputs));\n              }\n            }\n            class HubertForSequenceClassification extends Wav2Vec2PreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class WavLMPreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class WavLMModel extends WavLMPreTrainedModel {\n            }\n            class WavLMForCTC extends WavLMPreTrainedModel {\n              /**\n               * @param {Object} model_inputs\n               * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.\n               * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]\n               */\n              async _call(model_inputs) {\n                return new CausalLMOutput(await super._call(model_inputs));\n              }\n            }\n            class WavLMForSequenceClassification extends WavLMPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class WavLMForXVector extends WavLMPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<XVectorOutput>} An object containing the model's output logits and speaker embeddings.\n               */\n              async _call(model_inputs) {\n                return new XVectorOutput(await super._call(model_inputs));\n              }\n            }\n            class WavLMForAudioFrameClassification extends WavLMPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.\n               */\n              async _call(model_inputs) {\n                return new TokenClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class StyleTextToSpeech2PreTrainedModel extends PreTrainedModel {\n            }\n            class StyleTextToSpeech2Model extends StyleTextToSpeech2PreTrainedModel {\n            }\n            class SpeechT5PreTrainedModel extends PreTrainedModel {\n            }\n            ;\n            class SpeechT5Model extends SpeechT5PreTrainedModel {\n            }\n            ;\n            class SpeechT5ForSpeechToText extends SpeechT5PreTrainedModel {\n            }\n            class SpeechT5ForTextToSpeech extends SpeechT5PreTrainedModel {\n              /**\n               * @typedef {Object} SpeechOutput\n               * @property {Tensor} [spectrogram] The predicted log-mel spectrogram of shape\n               * `(output_sequence_length, config.num_mel_bins)`. Returned when no `vocoder` is provided\n               * @property {Tensor} [waveform] The predicted waveform of shape `(num_frames,)`. Returned when a `vocoder` is provided.\n               * @property {Tensor} [cross_attentions] The outputs of the decoder's cross-attention layers of shape\n               * `(config.decoder_layers, config.decoder_attention_heads, output_sequence_length, input_sequence_length)`. returned when `output_cross_attentions` is `true`.\n               */\n              /**\n               * Converts a sequence of input tokens into a sequence of mel spectrograms, which are subsequently turned into a speech waveform using a vocoder.\n               * @param {Tensor} input_values Indices of input sequence tokens in the vocabulary.\n               * @param {Tensor} speaker_embeddings Tensor containing the speaker embeddings.\n               * @param {Object} options Optional parameters for generating speech.\n               * @param {number} [options.threshold=0.5] The generated sequence ends when the predicted stop token probability exceeds this value.\n               * @param {number} [options.minlenratio=0.0] Used to calculate the minimum required length for the output sequence.\n               * @param {number} [options.maxlenratio=20.0] Used to calculate the maximum allowed length for the output sequence.\n               * @param {Object} [options.vocoder=null] The vocoder that converts the mel spectrogram into a speech waveform. If `null`, the output is the mel spectrogram.\n               * @param {boolean} [options.output_cross_attentions=false] Whether or not to return the attentions tensors of the decoder's cross-attention layers.\n               * @returns {Promise<SpeechOutput>} A promise which resolves to an object containing the spectrogram, waveform, and cross-attention tensors.\n               */\n              async generate_speech(input_values, speaker_embeddings, {\n                threshold = 0.5,\n                minlenratio = 0,\n                maxlenratio = 20,\n                vocoder = null\n                // output_cross_attentions = false, // TODO add\n              } = {}) {\n                const model_inputs = {\n                  input_ids: input_values\n                };\n                const { encoder_outputs, encoder_attention_mask } = await encoderForward(this, model_inputs);\n                const r = encoder_outputs.dims[1] / this.config.reduction_factor;\n                const maxlen = Math.floor(r * maxlenratio);\n                const minlen = Math.floor(r * minlenratio);\n                const num_mel_bins = this.config.num_mel_bins;\n                let spectrogramParts = [];\n                let past_key_values = null;\n                let decoder_outputs = null;\n                let idx = 0;\n                while (true) {\n                  ++idx;\n                  const use_cache_branch = boolTensor(!!decoder_outputs);\n                  let output_sequence;\n                  if (decoder_outputs) {\n                    output_sequence = decoder_outputs.output_sequence_out;\n                  } else {\n                    output_sequence = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\n                      \"float32\",\n                      new Float32Array(num_mel_bins),\n                      [1, 1, num_mel_bins]\n                    );\n                  }\n                  let decoderFeeds = {\n                    use_cache_branch,\n                    output_sequence,\n                    encoder_attention_mask,\n                    speaker_embeddings,\n                    encoder_hidden_states: encoder_outputs\n                  };\n                  this.addPastKeyValues(decoderFeeds, past_key_values);\n                  decoder_outputs = await sessionRun(this.sessions[\"decoder_model_merged\"], decoderFeeds);\n                  past_key_values = this.getPastKeyValues(decoder_outputs, past_key_values);\n                  const { prob, spectrum } = decoder_outputs;\n                  spectrogramParts.push(spectrum);\n                  if (idx >= minlen && // Finished when stop token or maximum length is reached.\n                  (Array.from(prob.data).filter((p) => p >= threshold).length > 0 || idx >= maxlen)) {\n                    break;\n                  }\n                }\n                const spectrogram = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)(spectrogramParts);\n                const { waveform } = await sessionRun(vocoder.sessions[\"model\"], { spectrogram });\n                return {\n                  spectrogram,\n                  waveform\n                  // cross_attentions: null, // TODO add\n                };\n              }\n            }\n            class SpeechT5HifiGan extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"main_input_name\", \"spectrogram\");\n              }\n            }\n            class TrOCRPreTrainedModel extends PreTrainedModel {\n            }\n            class TrOCRForCausalLM extends TrOCRPreTrainedModel {\n            }\n            class MistralPreTrainedModel extends PreTrainedModel {\n            }\n            class MistralModel extends MistralPreTrainedModel {\n            }\n            class MistralForCausalLM extends MistralPreTrainedModel {\n            }\n            class Starcoder2PreTrainedModel extends PreTrainedModel {\n            }\n            class Starcoder2Model extends Starcoder2PreTrainedModel {\n            }\n            class Starcoder2ForCausalLM extends Starcoder2PreTrainedModel {\n            }\n            class FalconPreTrainedModel extends PreTrainedModel {\n            }\n            class FalconModel extends FalconPreTrainedModel {\n            }\n            class FalconForCausalLM extends FalconPreTrainedModel {\n            }\n            class ClapPreTrainedModel extends PreTrainedModel {\n            }\n            class ClapModel extends ClapPreTrainedModel {\n            }\n            class ClapTextModelWithProjection extends ClapPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"text_model\"\n                });\n              }\n            }\n            class ClapAudioModelWithProjection extends ClapPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"audio_model\"\n                });\n              }\n            }\n            class VitsPreTrainedModel extends PreTrainedModel {\n            }\n            class VitsModel extends VitsPreTrainedModel {\n              /**\n               * Calls the model on new inputs.\n               * @param {Object} model_inputs The inputs to the model.\n               * @returns {Promise<VitsModelOutput>} The outputs for the VITS model.\n               */\n              async _call(model_inputs) {\n                return new VitsModelOutput(await super._call(model_inputs));\n              }\n            }\n            class SegformerPreTrainedModel extends PreTrainedModel {\n            }\n            class SegformerModel extends SegformerPreTrainedModel {\n            }\n            class SegformerForImageClassification extends SegformerPreTrainedModel {\n            }\n            class SegformerForSemanticSegmentation extends SegformerPreTrainedModel {\n            }\n            class StableLmPreTrainedModel extends PreTrainedModel {\n            }\n            class StableLmModel extends StableLmPreTrainedModel {\n            }\n            class StableLmForCausalLM extends StableLmPreTrainedModel {\n            }\n            class EfficientNetPreTrainedModel extends PreTrainedModel {\n            }\n            class EfficientNetModel extends EfficientNetPreTrainedModel {\n            }\n            class EfficientNetForImageClassification extends EfficientNetPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class MusicgenPreTrainedModel extends PreTrainedModel {\n            }\n            class MusicgenModel extends MusicgenPreTrainedModel {\n            }\n            class MusicgenForCausalLM extends MusicgenPreTrainedModel {\n            }\n            class MusicgenForConditionalGeneration extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                // NOTE: not MusicgenPreTrainedModel\n                __publicField(this, \"forward_params\", [\n                  \"input_ids\",\n                  \"attention_mask\",\n                  \"encoder_outputs\",\n                  \"decoder_input_ids\",\n                  \"decoder_attention_mask\",\n                  \"past_key_values\"\n                ]);\n              }\n              /**\n               * Apply the pattern mask to the final ids,\n               * then revert the pattern delay mask by filtering the pad token id in a single step.\n               * @param {Tensor} outputs The output tensor from the model.\n               * @returns {Tensor} The filtered output tensor.\n               */\n              _apply_and_filter_by_delay_pattern_mask(outputs) {\n                const [bs_x_codebooks, seqLength] = outputs.dims;\n                const num_codebooks = this.config.decoder.num_codebooks;\n                const upperBound = seqLength - num_codebooks;\n                let newDataSize = 0;\n                for (let i = 0; i < outputs.size; ++i) {\n                  if (outputs.data[i] === this.config.decoder.pad_token_id) {\n                    continue;\n                  }\n                  const row = i % seqLength;\n                  const col = Math.floor(i / seqLength) % num_codebooks;\n                  const diff = row - col;\n                  if (diff > 0 && diff <= upperBound) {\n                    outputs.data[newDataSize++] = outputs.data[i];\n                  }\n                }\n                const batch_size = Math.floor(bs_x_codebooks / num_codebooks);\n                const inferred = newDataSize / (batch_size * num_codebooks);\n                return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(\n                  outputs.type,\n                  outputs.data.slice(0, newDataSize),\n                  [batch_size, num_codebooks, inferred]\n                );\n              }\n              prepare_inputs_for_generation(input_ids, model_inputs, generation_config) {\n                let clonedInputIds = structuredClone(input_ids);\n                for (let i = 0; i < clonedInputIds.length; ++i) {\n                  for (let j = 0; j < clonedInputIds[i].length; ++j) {\n                    if (i % this.config.decoder.num_codebooks >= j) {\n                      clonedInputIds[i][j] = BigInt(this.config.decoder.pad_token_id);\n                    }\n                  }\n                }\n                if (generation_config.guidance_scale !== null && generation_config.guidance_scale > 1) {\n                  clonedInputIds = clonedInputIds.concat(clonedInputIds);\n                }\n                const prepped = super.prepare_inputs_for_generation(clonedInputIds, model_inputs, generation_config);\n                return prepped;\n              }\n              /**\n               * Generates sequences of token ids for models with a language modeling head.\n               * @param {import('./generation/parameters.js').GenerationFunctionParameters} options\n               * @returns {Promise<ModelOutput|Tensor>} The output of the model, which can contain the generated token ids, attentions, and scores.\n               */\n              async generate(options) {\n                const output_ids = await super.generate(options);\n                const audio_codes = this._apply_and_filter_by_delay_pattern_mask(\n                  /** @type {Tensor} */\n                  output_ids\n                ).unsqueeze_(0);\n                const { audio_values } = await sessionRun(this.sessions[\"encodec_decode\"], { audio_codes });\n                return audio_values;\n              }\n            }\n            class MobileNetV1PreTrainedModel extends PreTrainedModel {\n            }\n            class MobileNetV1Model extends MobileNetV1PreTrainedModel {\n            }\n            class MobileNetV1ForImageClassification extends MobileNetV1PreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class MobileNetV1ForSemanticSegmentation extends MobileNetV1PreTrainedModel {\n            }\n            class MobileNetV2PreTrainedModel extends PreTrainedModel {\n            }\n            class MobileNetV2Model extends MobileNetV2PreTrainedModel {\n            }\n            class MobileNetV2ForImageClassification extends MobileNetV2PreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class MobileNetV2ForSemanticSegmentation extends MobileNetV2PreTrainedModel {\n            }\n            class MobileNetV3PreTrainedModel extends PreTrainedModel {\n            }\n            class MobileNetV3Model extends MobileNetV3PreTrainedModel {\n            }\n            class MobileNetV3ForImageClassification extends MobileNetV3PreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class MobileNetV3ForSemanticSegmentation extends MobileNetV3PreTrainedModel {\n            }\n            class MobileNetV4PreTrainedModel extends PreTrainedModel {\n            }\n            class MobileNetV4Model extends MobileNetV4PreTrainedModel {\n            }\n            class MobileNetV4ForImageClassification extends MobileNetV4PreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new SequenceClassifierOutput(await super._call(model_inputs));\n              }\n            }\n            class MobileNetV4ForSemanticSegmentation extends MobileNetV4PreTrainedModel {\n            }\n            class DecisionTransformerPreTrainedModel extends PreTrainedModel {\n            }\n            class DecisionTransformerModel extends DecisionTransformerPreTrainedModel {\n            }\n            class MultiModalityPreTrainedModel extends PreTrainedModel {\n            }\n            class MultiModalityCausalLM extends MultiModalityPreTrainedModel {\n              /**\n               * @param {ConstructorParameters<typeof MultiModalityPreTrainedModel>} args\n               */\n              constructor(...args) {\n                super(...args);\n                __publicField(this, \"forward_params\", [\n                  // prepare_inputs_embeds\n                  \"input_ids\",\n                  \"pixel_values\",\n                  \"images_seq_mask\",\n                  \"images_emb_mask\",\n                  // language_model\n                  \"attention_mask\",\n                  \"position_ids\",\n                  \"past_key_values\"\n                ]);\n                this._generation_mode = \"text\";\n              }\n              async forward(model_inputs) {\n                const mode = this._generation_mode ?? \"text\";\n                let output_1;\n                if (mode === \"text\" || !model_inputs.past_key_values) {\n                  const session = this.sessions[\"prepare_inputs_embeds\"];\n                  const prep_inputs = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(model_inputs, session.inputNames);\n                  output_1 = await sessionRun(session, prep_inputs);\n                } else {\n                  const session = this.sessions[\"gen_img_embeds\"];\n                  const prep_inputs = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)({\n                    image_ids: model_inputs.input_ids\n                  }, session.inputNames);\n                  output_1 = await sessionRun(session, prep_inputs);\n                }\n                const input_2 = { ...model_inputs, ...output_1 };\n                const output_2 = await decoderForward(this, input_2);\n                const head = this.sessions[mode === \"text\" ? \"lm_head\" : \"gen_head\"];\n                if (!head) {\n                  throw new Error(`Unable to find \"${head}\" generation head`);\n                }\n                const output_3 = await sessionRun(head, (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(output_2, head.inputNames));\n                return {\n                  ...output_1,\n                  ...output_2,\n                  ...output_3\n                };\n              }\n              /**\n               * @param {import('./generation/parameters.js').GenerationFunctionParameters} options\n               */\n              async generate(options) {\n                this._generation_mode = \"text\";\n                return super.generate(options);\n              }\n              /**\n               * @param {import('./generation/parameters.js').GenerationFunctionParameters} options\n               */\n              async generate_images(options) {\n                this._generation_mode = \"image\";\n                const start_num_tokens = (options.inputs ?? options[this.main_input_name]).dims[1];\n                const all_tokens = await super.generate(options);\n                const generated_tokens = (\n                  /** @type {Tensor} */\n                  all_tokens.slice(null, [start_num_tokens, null])\n                );\n                const image_decode = this.sessions[\"image_decode\"];\n                const { decoded_image } = await sessionRun(image_decode, {\n                  generated_tokens\n                });\n                const clamped = decoded_image.add_(1).mul_(255 / 2).clamp_(0, 255).to(\"uint8\");\n                const images = [];\n                for (const tensor of clamped) {\n                  const img = _utils_image_js__WEBPACK_IMPORTED_MODULE_10__.RawImage.fromTensor(tensor);\n                  images.push(img);\n                }\n                return images;\n              }\n            }\n            class MgpstrModelOutput extends ModelOutput {\n              constructor({ char_logits, bpe_logits, wp_logits }) {\n                super();\n                this.char_logits = char_logits;\n                this.bpe_logits = bpe_logits;\n                this.wp_logits = wp_logits;\n              }\n              get logits() {\n                return [this.char_logits, this.bpe_logits, this.wp_logits];\n              }\n            }\n            class MgpstrPreTrainedModel extends PreTrainedModel {\n            }\n            class MgpstrForSceneTextRecognition extends MgpstrPreTrainedModel {\n              /**\n               * @param {any} model_inputs\n               */\n              async _call(model_inputs) {\n                return new MgpstrModelOutput(await super._call(model_inputs));\n              }\n            }\n            class PatchTSTPreTrainedModel extends PreTrainedModel {\n            }\n            class PatchTSTModel extends PatchTSTPreTrainedModel {\n            }\n            class PatchTSTForPrediction extends PatchTSTPreTrainedModel {\n            }\n            class PatchTSMixerPreTrainedModel extends PreTrainedModel {\n            }\n            class PatchTSMixerModel extends PatchTSMixerPreTrainedModel {\n            }\n            class PatchTSMixerForPrediction extends PatchTSMixerPreTrainedModel {\n            }\n            class UltravoxPreTrainedModel extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"forward_params\", [\n                  \"input_ids\",\n                  \"attention_mask\",\n                  \"position_ids\",\n                  \"audio_values\",\n                  \"past_key_values\"\n                ]);\n              }\n            }\n            class UltravoxModel extends UltravoxPreTrainedModel {\n              _merge_input_ids_with_audio_features(kwargs) {\n                const audio_hidden_size = kwargs.audio_features.dims.at(-1);\n                const reshaped_audio_features = kwargs.audio_features.view(-1, audio_hidden_size);\n                return default_merge_input_ids_with_audio_features({\n                  // @ts-ignore\n                  audio_token_id: this.config.ignore_index,\n                  ...kwargs,\n                  audio_features: reshaped_audio_features\n                });\n              }\n            }\n            class MimiPreTrainedModel extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"main_input_name\", \"input_values\");\n                __publicField(this, \"forward_params\", [\"input_values\"]);\n              }\n            }\n            class MimiEncoderOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.audio_codes Discrete code embeddings, of shape `(batch_size, num_quantizers, codes_length)`.\n               */\n              constructor({ audio_codes }) {\n                super();\n                this.audio_codes = audio_codes;\n              }\n            }\n            class MimiDecoderOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.audio_values Decoded audio values, of shape `(batch_size, num_channels, sequence_length)`.\n               */\n              constructor({ audio_values }) {\n                super();\n                this.audio_values = audio_values;\n              }\n            }\n            class MimiModel extends MimiPreTrainedModel {\n              /**\n               * Encodes the input audio waveform into discrete codes.\n               * @param {Object} inputs Model inputs\n               * @param {Tensor} [inputs.input_values] Float values of the input audio waveform, of shape `(batch_size, channels, sequence_length)`).\n               * @returns {Promise<MimiEncoderOutput>} The output tensor of shape `(batch_size, num_codebooks, sequence_length)`.\n               */\n              async encode(inputs) {\n                return new MimiEncoderOutput(await sessionRun(this.sessions[\"encoder_model\"], inputs));\n              }\n              /**\n               * Decodes the given frames into an output audio waveform.\n               * @param {MimiEncoderOutput} inputs The encoded audio codes.\n               * @returns {Promise<MimiDecoderOutput>} The output tensor of shape `(batch_size, num_channels, sequence_length)`.\n               */\n              async decode(inputs) {\n                return new MimiDecoderOutput(await sessionRun(this.sessions[\"decoder_model\"], inputs));\n              }\n            }\n            class MimiEncoderModel extends MimiPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"encoder_model\"\n                });\n              }\n            }\n            class MimiDecoderModel extends MimiPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"decoder_model\"\n                });\n              }\n            }\n            class DacPreTrainedModel extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"main_input_name\", \"input_values\");\n                __publicField(this, \"forward_params\", [\"input_values\"]);\n              }\n            }\n            class DacEncoderOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.audio_codes Discrete code embeddings, of shape `(batch_size, num_quantizers, codes_length)`.\n               */\n              constructor({ audio_codes }) {\n                super();\n                this.audio_codes = audio_codes;\n              }\n            }\n            class DacDecoderOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.audio_values Decoded audio values, of shape `(batch_size, num_channels, sequence_length)`.\n               */\n              constructor({ audio_values }) {\n                super();\n                this.audio_values = audio_values;\n              }\n            }\n            class DacModel extends DacPreTrainedModel {\n              /**\n               * Encodes the input audio waveform into discrete codes.\n               * @param {Object} inputs Model inputs\n               * @param {Tensor} [inputs.input_values] Float values of the input audio waveform, of shape `(batch_size, channels, sequence_length)`).\n               * @returns {Promise<DacEncoderOutput>} The output tensor of shape `(batch_size, num_codebooks, sequence_length)`.\n               */\n              async encode(inputs) {\n                return new DacEncoderOutput(await sessionRun(this.sessions[\"encoder_model\"], inputs));\n              }\n              /**\n               * Decodes the given frames into an output audio waveform.\n               * @param {DacEncoderOutput} inputs The encoded audio codes.\n               * @returns {Promise<DacDecoderOutput>} The output tensor of shape `(batch_size, num_channels, sequence_length)`.\n               */\n              async decode(inputs) {\n                return new DacDecoderOutput(await sessionRun(this.sessions[\"decoder_model\"], inputs));\n              }\n            }\n            class DacEncoderModel extends DacPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"encoder_model\"\n                });\n              }\n            }\n            class DacDecoderModel extends DacPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"decoder_model\"\n                });\n              }\n            }\n            class SnacPreTrainedModel extends PreTrainedModel {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"main_input_name\", \"input_values\");\n                __publicField(this, \"forward_params\", [\"input_values\"]);\n              }\n            }\n            class SnacModel extends SnacPreTrainedModel {\n              /**\n               * Encodes the input audio waveform into discrete codes.\n               * @param {Object} inputs Model inputs\n               * @param {Tensor} [inputs.input_values] Float values of the input audio waveform, of shape `(batch_size, channels, sequence_length)`).\n               * @returns {Promise<Record<string, Tensor>>} The output tensors of shape `(batch_size, num_codebooks, sequence_length)`.\n               */\n              async encode(inputs) {\n                return await sessionRun(this.sessions[\"encoder_model\"], inputs);\n              }\n              /**\n               * Decodes the given frames into an output audio waveform.\n               * @param {Record<string, Tensor>} inputs The encoded audio codes.\n               * @returns {Promise<{audio_values: Tensor}>} The output tensor of shape `(batch_size, num_channels, sequence_length)`.\n               */\n              async decode(inputs) {\n                return await sessionRun(this.sessions[\"decoder_model\"], inputs);\n              }\n            }\n            class SnacEncoderModel extends SnacPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"encoder_model\"\n                });\n              }\n            }\n            class SnacDecoderModel extends SnacPreTrainedModel {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                return super.from_pretrained(pretrained_model_name_or_path, {\n                  ...options,\n                  // Update default model file name if not provided\n                  model_file_name: options.model_file_name ?? \"decoder_model\"\n                });\n              }\n            }\n            class PretrainedMixin {\n              /** @type {typeof PreTrainedModel.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, {\n                progress_callback = null,\n                config = null,\n                cache_dir = null,\n                local_files_only = false,\n                revision = \"main\",\n                model_file_name = null,\n                subfolder = \"onnx\",\n                device = null,\n                dtype = null,\n                use_external_data_format = null,\n                session_options = {}\n              } = {}) {\n                const options = {\n                  progress_callback,\n                  config,\n                  cache_dir,\n                  local_files_only,\n                  revision,\n                  model_file_name,\n                  subfolder,\n                  device,\n                  dtype,\n                  use_external_data_format,\n                  session_options\n                };\n                options.config = await _configs_js__WEBPACK_IMPORTED_MODULE_0__.AutoConfig.from_pretrained(pretrained_model_name_or_path, options);\n                if (!this.MODEL_CLASS_MAPPINGS) {\n                  throw new Error(\"`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: \" + this.name);\n                }\n                const model_type = options.config.model_type;\n                for (const MODEL_CLASS_MAPPING of this.MODEL_CLASS_MAPPINGS) {\n                  let modelInfo = MODEL_CLASS_MAPPING.get(model_type);\n                  if (!modelInfo) {\n                    for (const cls of MODEL_CLASS_MAPPING.values()) {\n                      if (cls[0] === model_type) {\n                        modelInfo = cls;\n                        break;\n                      }\n                    }\n                    if (!modelInfo) continue;\n                  }\n                  return await modelInfo[1].from_pretrained(pretrained_model_name_or_path, options);\n                }\n                if (this.BASE_IF_FAIL) {\n                  if (!CUSTOM_ARCHITECTURES.has(model_type)) {\n                    console.warn(`Unknown model class \"${model_type}\", attempting to construct from base class.`);\n                  }\n                  return await PreTrainedModel.from_pretrained(pretrained_model_name_or_path, options);\n                } else {\n                  throw Error(`Unsupported model type: ${model_type}`);\n                }\n              }\n            }\n            /**\n             * Mapping from model type to model class.\n             * @type {Map<string, Object>[]}\n             */\n            __publicField(PretrainedMixin, \"MODEL_CLASS_MAPPINGS\", null);\n            /**\n             * Whether to attempt to instantiate the base class (`PretrainedModel`) if \n             * the model type is not found in the mapping.\n             */\n            __publicField(PretrainedMixin, \"BASE_IF_FAIL\", false);\n            const MODEL_MAPPING_NAMES_ENCODER_ONLY = /* @__PURE__ */ new Map([\n              [\"bert\", [\"BertModel\", BertModel]],\n              [\"modernbert\", [\"ModernBertModel\", ModernBertModel]],\n              [\"nomic_bert\", [\"NomicBertModel\", NomicBertModel]],\n              [\"roformer\", [\"RoFormerModel\", RoFormerModel]],\n              [\"electra\", [\"ElectraModel\", ElectraModel]],\n              [\"esm\", [\"EsmModel\", EsmModel]],\n              [\"convbert\", [\"ConvBertModel\", ConvBertModel]],\n              [\"camembert\", [\"CamembertModel\", CamembertModel]],\n              [\"deberta\", [\"DebertaModel\", DebertaModel]],\n              [\"deberta-v2\", [\"DebertaV2Model\", DebertaV2Model]],\n              [\"mpnet\", [\"MPNetModel\", MPNetModel]],\n              [\"albert\", [\"AlbertModel\", AlbertModel]],\n              [\"distilbert\", [\"DistilBertModel\", DistilBertModel]],\n              [\"roberta\", [\"RobertaModel\", RobertaModel]],\n              [\"xlm\", [\"XLMModel\", XLMModel]],\n              [\"xlm-roberta\", [\"XLMRobertaModel\", XLMRobertaModel]],\n              [\"clap\", [\"ClapModel\", ClapModel]],\n              [\"clip\", [\"CLIPModel\", CLIPModel]],\n              [\"clipseg\", [\"CLIPSegModel\", CLIPSegModel]],\n              [\"chinese_clip\", [\"ChineseCLIPModel\", ChineseCLIPModel]],\n              [\"siglip\", [\"SiglipModel\", SiglipModel]],\n              [\"jina_clip\", [\"JinaCLIPModel\", JinaCLIPModel]],\n              [\"mobilebert\", [\"MobileBertModel\", MobileBertModel]],\n              [\"squeezebert\", [\"SqueezeBertModel\", SqueezeBertModel]],\n              [\"wav2vec2\", [\"Wav2Vec2Model\", Wav2Vec2Model]],\n              [\"wav2vec2-bert\", [\"Wav2Vec2BertModel\", Wav2Vec2BertModel]],\n              [\"unispeech\", [\"UniSpeechModel\", UniSpeechModel]],\n              [\"unispeech-sat\", [\"UniSpeechSatModel\", UniSpeechSatModel]],\n              [\"hubert\", [\"HubertModel\", HubertModel]],\n              [\"wavlm\", [\"WavLMModel\", WavLMModel]],\n              [\"audio-spectrogram-transformer\", [\"ASTModel\", ASTModel]],\n              [\"vits\", [\"VitsModel\", VitsModel]],\n              [\"pyannote\", [\"PyAnnoteModel\", PyAnnoteModel]],\n              [\"wespeaker-resnet\", [\"WeSpeakerResNetModel\", WeSpeakerResNetModel]],\n              [\"detr\", [\"DetrModel\", DetrModel]],\n              [\"rt_detr\", [\"RTDetrModel\", RTDetrModel]],\n              [\"rt_detr_v2\", [\"RTDetrV2Model\", RTDetrV2Model]],\n              [\"rf_detr\", [\"RFDetrModel\", RFDetrModel]],\n              [\"table-transformer\", [\"TableTransformerModel\", TableTransformerModel]],\n              [\"vit\", [\"ViTModel\", ViTModel]],\n              [\"ijepa\", [\"IJepaModel\", IJepaModel]],\n              [\"pvt\", [\"PvtModel\", PvtModel]],\n              [\"vit_msn\", [\"ViTMSNModel\", ViTMSNModel]],\n              [\"vit_mae\", [\"ViTMAEModel\", ViTMAEModel]],\n              [\"groupvit\", [\"GroupViTModel\", GroupViTModel]],\n              [\"fastvit\", [\"FastViTModel\", FastViTModel]],\n              [\"mobilevit\", [\"MobileViTModel\", MobileViTModel]],\n              [\"mobilevitv2\", [\"MobileViTV2Model\", MobileViTV2Model]],\n              [\"owlvit\", [\"OwlViTModel\", OwlViTModel]],\n              [\"owlv2\", [\"Owlv2Model\", Owlv2Model]],\n              [\"beit\", [\"BeitModel\", BeitModel]],\n              [\"deit\", [\"DeiTModel\", DeiTModel]],\n              [\"hiera\", [\"HieraModel\", HieraModel]],\n              [\"convnext\", [\"ConvNextModel\", ConvNextModel]],\n              [\"convnextv2\", [\"ConvNextV2Model\", ConvNextV2Model]],\n              [\"dinov2\", [\"Dinov2Model\", Dinov2Model]],\n              [\"dinov2_with_registers\", [\"Dinov2WithRegistersModel\", Dinov2WithRegistersModel]],\n              [\"resnet\", [\"ResNetModel\", ResNetModel]],\n              [\"swin\", [\"SwinModel\", SwinModel]],\n              [\"swin2sr\", [\"Swin2SRModel\", Swin2SRModel]],\n              [\"donut-swin\", [\"DonutSwinModel\", DonutSwinModel]],\n              [\"yolos\", [\"YolosModel\", YolosModel]],\n              [\"dpt\", [\"DPTModel\", DPTModel]],\n              [\"glpn\", [\"GLPNModel\", GLPNModel]],\n              [\"hifigan\", [\"SpeechT5HifiGan\", SpeechT5HifiGan]],\n              [\"efficientnet\", [\"EfficientNetModel\", EfficientNetModel]],\n              [\"decision_transformer\", [\"DecisionTransformerModel\", DecisionTransformerModel]],\n              [\"patchtst\", [\"PatchTSTForPrediction\", PatchTSTModel]],\n              [\"patchtsmixer\", [\"PatchTSMixerForPrediction\", PatchTSMixerModel]],\n              [\"mobilenet_v1\", [\"MobileNetV1Model\", MobileNetV1Model]],\n              [\"mobilenet_v2\", [\"MobileNetV2Model\", MobileNetV2Model]],\n              [\"mobilenet_v3\", [\"MobileNetV3Model\", MobileNetV3Model]],\n              [\"mobilenet_v4\", [\"MobileNetV4Model\", MobileNetV4Model]],\n              [\"maskformer\", [\"MaskFormerModel\", MaskFormerModel]],\n              [\"mgp-str\", [\"MgpstrForSceneTextRecognition\", MgpstrForSceneTextRecognition]],\n              [\"style_text_to_speech_2\", [\"StyleTextToSpeech2Model\", StyleTextToSpeech2Model]]\n            ]);\n            const MODEL_MAPPING_NAMES_ENCODER_DECODER = /* @__PURE__ */ new Map([\n              [\"t5\", [\"T5Model\", T5Model]],\n              [\"longt5\", [\"LongT5Model\", LongT5Model]],\n              [\"mt5\", [\"MT5Model\", MT5Model]],\n              [\"bart\", [\"BartModel\", BartModel]],\n              [\"mbart\", [\"MBartModel\", MBartModel]],\n              [\"marian\", [\"MarianModel\", MarianModel]],\n              [\"whisper\", [\"WhisperModel\", WhisperModel]],\n              [\"m2m_100\", [\"M2M100Model\", M2M100Model]],\n              [\"blenderbot\", [\"BlenderbotModel\", BlenderbotModel]],\n              [\"blenderbot-small\", [\"BlenderbotSmallModel\", BlenderbotSmallModel]]\n            ]);\n            const MODEL_MAPPING_NAMES_AUTO_ENCODER = /* @__PURE__ */ new Map([\n              [\"mimi\", [\"MimiModel\", MimiModel]],\n              [\"dac\", [\"DacModel\", DacModel]],\n              [\"snac\", [\"SnacModel\", SnacModel]]\n            ]);\n            const MODEL_MAPPING_NAMES_DECODER_ONLY = /* @__PURE__ */ new Map([\n              [\"bloom\", [\"BloomModel\", BloomModel]],\n              [\"jais\", [\"JAISModel\", JAISModel]],\n              [\"gpt2\", [\"GPT2Model\", GPT2Model]],\n              [\"gptj\", [\"GPTJModel\", GPTJModel]],\n              [\"gpt_bigcode\", [\"GPTBigCodeModel\", GPTBigCodeModel]],\n              [\"gpt_neo\", [\"GPTNeoModel\", GPTNeoModel]],\n              [\"gpt_neox\", [\"GPTNeoXModel\", GPTNeoXModel]],\n              [\"codegen\", [\"CodeGenModel\", CodeGenModel]],\n              [\"llama\", [\"LlamaModel\", LlamaModel]],\n              [\"exaone\", [\"ExaoneModel\", ExaoneModel]],\n              [\"olmo\", [\"OlmoModel\", OlmoModel]],\n              [\"olmo2\", [\"Olmo2Model\", Olmo2Model]],\n              [\"mobilellm\", [\"MobileLLMModel\", MobileLLMModel]],\n              [\"granite\", [\"GraniteModel\", GraniteModel]],\n              [\"cohere\", [\"CohereModel\", CohereModel]],\n              [\"gemma\", [\"GemmaModel\", GemmaModel]],\n              [\"gemma2\", [\"Gemma2Model\", Gemma2Model]],\n              [\"gemma3_text\", [\"Gemma3Model\", Gemma3Model]],\n              [\"helium\", [\"HeliumModel\", HeliumModel]],\n              [\"glm\", [\"GlmModel\", GlmModel]],\n              [\"openelm\", [\"OpenELMModel\", OpenELMModel]],\n              [\"qwen2\", [\"Qwen2Model\", Qwen2Model]],\n              [\"phi\", [\"PhiModel\", PhiModel]],\n              [\"phi3\", [\"Phi3Model\", Phi3Model]],\n              [\"mpt\", [\"MptModel\", MptModel]],\n              [\"opt\", [\"OPTModel\", OPTModel]],\n              [\"mistral\", [\"MistralModel\", MistralModel]],\n              [\"starcoder2\", [\"Starcoder2Model\", Starcoder2Model]],\n              [\"falcon\", [\"FalconModel\", FalconModel]],\n              [\"stablelm\", [\"StableLmModel\", StableLmModel]]\n            ]);\n            const MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"speecht5\", [\"SpeechT5ForSpeechToText\", SpeechT5ForSpeechToText]],\n              [\"whisper\", [\"WhisperForConditionalGeneration\", WhisperForConditionalGeneration]],\n              [\"lite-whisper\", [\"LiteWhisperForConditionalGeneration\", LiteWhisperForConditionalGeneration]],\n              [\"moonshine\", [\"MoonshineForConditionalGeneration\", MoonshineForConditionalGeneration]]\n            ]);\n            const MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"speecht5\", [\"SpeechT5ForTextToSpeech\", SpeechT5ForTextToSpeech]]\n            ]);\n            const MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"vits\", [\"VitsModel\", VitsModel]],\n              [\"musicgen\", [\"MusicgenForConditionalGeneration\", MusicgenForConditionalGeneration]]\n            ]);\n            const MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"bert\", [\"BertForSequenceClassification\", BertForSequenceClassification]],\n              [\"modernbert\", [\"ModernBertForSequenceClassification\", ModernBertForSequenceClassification]],\n              [\"roformer\", [\"RoFormerForSequenceClassification\", RoFormerForSequenceClassification]],\n              [\"electra\", [\"ElectraForSequenceClassification\", ElectraForSequenceClassification]],\n              [\"esm\", [\"EsmForSequenceClassification\", EsmForSequenceClassification]],\n              [\"convbert\", [\"ConvBertForSequenceClassification\", ConvBertForSequenceClassification]],\n              [\"camembert\", [\"CamembertForSequenceClassification\", CamembertForSequenceClassification]],\n              [\"deberta\", [\"DebertaForSequenceClassification\", DebertaForSequenceClassification]],\n              [\"deberta-v2\", [\"DebertaV2ForSequenceClassification\", DebertaV2ForSequenceClassification]],\n              [\"mpnet\", [\"MPNetForSequenceClassification\", MPNetForSequenceClassification]],\n              [\"albert\", [\"AlbertForSequenceClassification\", AlbertForSequenceClassification]],\n              [\"distilbert\", [\"DistilBertForSequenceClassification\", DistilBertForSequenceClassification]],\n              [\"roberta\", [\"RobertaForSequenceClassification\", RobertaForSequenceClassification]],\n              [\"xlm\", [\"XLMForSequenceClassification\", XLMForSequenceClassification]],\n              [\"xlm-roberta\", [\"XLMRobertaForSequenceClassification\", XLMRobertaForSequenceClassification]],\n              [\"bart\", [\"BartForSequenceClassification\", BartForSequenceClassification]],\n              [\"mbart\", [\"MBartForSequenceClassification\", MBartForSequenceClassification]],\n              [\"mobilebert\", [\"MobileBertForSequenceClassification\", MobileBertForSequenceClassification]],\n              [\"squeezebert\", [\"SqueezeBertForSequenceClassification\", SqueezeBertForSequenceClassification]]\n            ]);\n            const MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"bert\", [\"BertForTokenClassification\", BertForTokenClassification]],\n              [\"modernbert\", [\"ModernBertForTokenClassification\", ModernBertForTokenClassification]],\n              [\"roformer\", [\"RoFormerForTokenClassification\", RoFormerForTokenClassification]],\n              [\"electra\", [\"ElectraForTokenClassification\", ElectraForTokenClassification]],\n              [\"esm\", [\"EsmForTokenClassification\", EsmForTokenClassification]],\n              [\"convbert\", [\"ConvBertForTokenClassification\", ConvBertForTokenClassification]],\n              [\"camembert\", [\"CamembertForTokenClassification\", CamembertForTokenClassification]],\n              [\"deberta\", [\"DebertaForTokenClassification\", DebertaForTokenClassification]],\n              [\"deberta-v2\", [\"DebertaV2ForTokenClassification\", DebertaV2ForTokenClassification]],\n              [\"mpnet\", [\"MPNetForTokenClassification\", MPNetForTokenClassification]],\n              [\"distilbert\", [\"DistilBertForTokenClassification\", DistilBertForTokenClassification]],\n              [\"roberta\", [\"RobertaForTokenClassification\", RobertaForTokenClassification]],\n              [\"xlm\", [\"XLMForTokenClassification\", XLMForTokenClassification]],\n              [\"xlm-roberta\", [\"XLMRobertaForTokenClassification\", XLMRobertaForTokenClassification]]\n            ]);\n            const MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"t5\", [\"T5ForConditionalGeneration\", T5ForConditionalGeneration]],\n              [\"longt5\", [\"LongT5ForConditionalGeneration\", LongT5ForConditionalGeneration]],\n              [\"mt5\", [\"MT5ForConditionalGeneration\", MT5ForConditionalGeneration]],\n              [\"bart\", [\"BartForConditionalGeneration\", BartForConditionalGeneration]],\n              [\"mbart\", [\"MBartForConditionalGeneration\", MBartForConditionalGeneration]],\n              [\"marian\", [\"MarianMTModel\", MarianMTModel]],\n              [\"m2m_100\", [\"M2M100ForConditionalGeneration\", M2M100ForConditionalGeneration]],\n              [\"blenderbot\", [\"BlenderbotForConditionalGeneration\", BlenderbotForConditionalGeneration]],\n              [\"blenderbot-small\", [\"BlenderbotSmallForConditionalGeneration\", BlenderbotSmallForConditionalGeneration]]\n            ]);\n            const MODEL_FOR_CAUSAL_LM_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"bloom\", [\"BloomForCausalLM\", BloomForCausalLM]],\n              [\"gpt2\", [\"GPT2LMHeadModel\", GPT2LMHeadModel]],\n              [\"jais\", [\"JAISLMHeadModel\", JAISLMHeadModel]],\n              [\"gptj\", [\"GPTJForCausalLM\", GPTJForCausalLM]],\n              [\"gpt_bigcode\", [\"GPTBigCodeForCausalLM\", GPTBigCodeForCausalLM]],\n              [\"gpt_neo\", [\"GPTNeoForCausalLM\", GPTNeoForCausalLM]],\n              [\"gpt_neox\", [\"GPTNeoXForCausalLM\", GPTNeoXForCausalLM]],\n              [\"codegen\", [\"CodeGenForCausalLM\", CodeGenForCausalLM]],\n              [\"llama\", [\"LlamaForCausalLM\", LlamaForCausalLM]],\n              [\"exaone\", [\"ExaoneForCausalLM\", ExaoneForCausalLM]],\n              [\"olmo\", [\"OlmoForCausalLM\", OlmoForCausalLM]],\n              [\"olmo2\", [\"Olmo2ForCausalLM\", Olmo2ForCausalLM]],\n              [\"mobilellm\", [\"MobileLLMForCausalLM\", MobileLLMForCausalLM]],\n              [\"granite\", [\"GraniteForCausalLM\", GraniteForCausalLM]],\n              [\"cohere\", [\"CohereForCausalLM\", CohereForCausalLM]],\n              [\"gemma\", [\"GemmaForCausalLM\", GemmaForCausalLM]],\n              [\"gemma2\", [\"Gemma2ForCausalLM\", Gemma2ForCausalLM]],\n              [\"gemma3_text\", [\"Gemma3ForCausalLM\", Gemma3ForCausalLM]],\n              [\"helium\", [\"HeliumForCausalLM\", HeliumForCausalLM]],\n              [\"glm\", [\"GlmForCausalLM\", GlmForCausalLM]],\n              [\"openelm\", [\"OpenELMForCausalLM\", OpenELMForCausalLM]],\n              [\"qwen2\", [\"Qwen2ForCausalLM\", Qwen2ForCausalLM]],\n              [\"phi\", [\"PhiForCausalLM\", PhiForCausalLM]],\n              [\"phi3\", [\"Phi3ForCausalLM\", Phi3ForCausalLM]],\n              [\"mpt\", [\"MptForCausalLM\", MptForCausalLM]],\n              [\"opt\", [\"OPTForCausalLM\", OPTForCausalLM]],\n              [\"mbart\", [\"MBartForCausalLM\", MBartForCausalLM]],\n              [\"mistral\", [\"MistralForCausalLM\", MistralForCausalLM]],\n              [\"starcoder2\", [\"Starcoder2ForCausalLM\", Starcoder2ForCausalLM]],\n              [\"falcon\", [\"FalconForCausalLM\", FalconForCausalLM]],\n              [\"trocr\", [\"TrOCRForCausalLM\", TrOCRForCausalLM]],\n              [\"stablelm\", [\"StableLmForCausalLM\", StableLmForCausalLM]],\n              // Also image-text-to-text\n              [\"phi3_v\", [\"Phi3VForCausalLM\", Phi3VForCausalLM]]\n            ]);\n            const MODEL_FOR_MULTIMODALITY_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"multi_modality\", [\"MultiModalityCausalLM\", MultiModalityCausalLM]]\n            ]);\n            const MODEL_FOR_MASKED_LM_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"bert\", [\"BertForMaskedLM\", BertForMaskedLM]],\n              [\"modernbert\", [\"ModernBertForMaskedLM\", ModernBertForMaskedLM]],\n              [\"roformer\", [\"RoFormerForMaskedLM\", RoFormerForMaskedLM]],\n              [\"electra\", [\"ElectraForMaskedLM\", ElectraForMaskedLM]],\n              [\"esm\", [\"EsmForMaskedLM\", EsmForMaskedLM]],\n              [\"convbert\", [\"ConvBertForMaskedLM\", ConvBertForMaskedLM]],\n              [\"camembert\", [\"CamembertForMaskedLM\", CamembertForMaskedLM]],\n              [\"deberta\", [\"DebertaForMaskedLM\", DebertaForMaskedLM]],\n              [\"deberta-v2\", [\"DebertaV2ForMaskedLM\", DebertaV2ForMaskedLM]],\n              [\"mpnet\", [\"MPNetForMaskedLM\", MPNetForMaskedLM]],\n              [\"albert\", [\"AlbertForMaskedLM\", AlbertForMaskedLM]],\n              [\"distilbert\", [\"DistilBertForMaskedLM\", DistilBertForMaskedLM]],\n              [\"roberta\", [\"RobertaForMaskedLM\", RobertaForMaskedLM]],\n              [\"xlm\", [\"XLMWithLMHeadModel\", XLMWithLMHeadModel]],\n              [\"xlm-roberta\", [\"XLMRobertaForMaskedLM\", XLMRobertaForMaskedLM]],\n              [\"mobilebert\", [\"MobileBertForMaskedLM\", MobileBertForMaskedLM]],\n              [\"squeezebert\", [\"SqueezeBertForMaskedLM\", SqueezeBertForMaskedLM]]\n            ]);\n            const MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"bert\", [\"BertForQuestionAnswering\", BertForQuestionAnswering]],\n              [\"roformer\", [\"RoFormerForQuestionAnswering\", RoFormerForQuestionAnswering]],\n              [\"electra\", [\"ElectraForQuestionAnswering\", ElectraForQuestionAnswering]],\n              [\"convbert\", [\"ConvBertForQuestionAnswering\", ConvBertForQuestionAnswering]],\n              [\"camembert\", [\"CamembertForQuestionAnswering\", CamembertForQuestionAnswering]],\n              [\"deberta\", [\"DebertaForQuestionAnswering\", DebertaForQuestionAnswering]],\n              [\"deberta-v2\", [\"DebertaV2ForQuestionAnswering\", DebertaV2ForQuestionAnswering]],\n              [\"mpnet\", [\"MPNetForQuestionAnswering\", MPNetForQuestionAnswering]],\n              [\"albert\", [\"AlbertForQuestionAnswering\", AlbertForQuestionAnswering]],\n              [\"distilbert\", [\"DistilBertForQuestionAnswering\", DistilBertForQuestionAnswering]],\n              [\"roberta\", [\"RobertaForQuestionAnswering\", RobertaForQuestionAnswering]],\n              [\"xlm\", [\"XLMForQuestionAnswering\", XLMForQuestionAnswering]],\n              [\"xlm-roberta\", [\"XLMRobertaForQuestionAnswering\", XLMRobertaForQuestionAnswering]],\n              [\"mobilebert\", [\"MobileBertForQuestionAnswering\", MobileBertForQuestionAnswering]],\n              [\"squeezebert\", [\"SqueezeBertForQuestionAnswering\", SqueezeBertForQuestionAnswering]]\n            ]);\n            const MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"vision-encoder-decoder\", [\"VisionEncoderDecoderModel\", VisionEncoderDecoderModel]],\n              [\"idefics3\", [\"Idefics3ForConditionalGeneration\", Idefics3ForConditionalGeneration]],\n              [\"smolvlm\", [\"SmolVLMForConditionalGeneration\", SmolVLMForConditionalGeneration]]\n            ]);\n            const MODEL_FOR_IMAGE_TEXT_TO_TEXT_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"llava\", [\"LlavaForConditionalGeneration\", LlavaForConditionalGeneration]],\n              [\"llava_onevision\", [\"LlavaOnevisionForConditionalGeneration\", LlavaOnevisionForConditionalGeneration]],\n              [\"moondream1\", [\"Moondream1ForConditionalGeneration\", Moondream1ForConditionalGeneration]],\n              [\"florence2\", [\"Florence2ForConditionalGeneration\", Florence2ForConditionalGeneration]],\n              [\"qwen2-vl\", [\"Qwen2VLForConditionalGeneration\", Qwen2VLForConditionalGeneration]],\n              [\"idefics3\", [\"Idefics3ForConditionalGeneration\", Idefics3ForConditionalGeneration]],\n              [\"smolvlm\", [\"SmolVLMForConditionalGeneration\", SmolVLMForConditionalGeneration]],\n              [\"paligemma\", [\"PaliGemmaForConditionalGeneration\", PaliGemmaForConditionalGeneration]]\n            ]);\n            const MODEL_FOR_AUDIO_TEXT_TO_TEXT_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"ultravox\", [\"UltravoxModel\", UltravoxModel]]\n            ]);\n            const MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"vision-encoder-decoder\", [\"VisionEncoderDecoderModel\", VisionEncoderDecoderModel]]\n            ]);\n            const MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"vit\", [\"ViTForImageClassification\", ViTForImageClassification]],\n              [\"ijepa\", [\"IJepaForImageClassification\", IJepaForImageClassification]],\n              [\"pvt\", [\"PvtForImageClassification\", PvtForImageClassification]],\n              [\"vit_msn\", [\"ViTMSNForImageClassification\", ViTMSNForImageClassification]],\n              [\"fastvit\", [\"FastViTForImageClassification\", FastViTForImageClassification]],\n              [\"mobilevit\", [\"MobileViTForImageClassification\", MobileViTForImageClassification]],\n              [\"mobilevitv2\", [\"MobileViTV2ForImageClassification\", MobileViTV2ForImageClassification]],\n              [\"beit\", [\"BeitForImageClassification\", BeitForImageClassification]],\n              [\"deit\", [\"DeiTForImageClassification\", DeiTForImageClassification]],\n              [\"hiera\", [\"HieraForImageClassification\", HieraForImageClassification]],\n              [\"convnext\", [\"ConvNextForImageClassification\", ConvNextForImageClassification]],\n              [\"convnextv2\", [\"ConvNextV2ForImageClassification\", ConvNextV2ForImageClassification]],\n              [\"dinov2\", [\"Dinov2ForImageClassification\", Dinov2ForImageClassification]],\n              [\"dinov2_with_registers\", [\"Dinov2WithRegistersForImageClassification\", Dinov2WithRegistersForImageClassification]],\n              [\"resnet\", [\"ResNetForImageClassification\", ResNetForImageClassification]],\n              [\"swin\", [\"SwinForImageClassification\", SwinForImageClassification]],\n              [\"segformer\", [\"SegformerForImageClassification\", SegformerForImageClassification]],\n              [\"efficientnet\", [\"EfficientNetForImageClassification\", EfficientNetForImageClassification]],\n              [\"mobilenet_v1\", [\"MobileNetV1ForImageClassification\", MobileNetV1ForImageClassification]],\n              [\"mobilenet_v2\", [\"MobileNetV2ForImageClassification\", MobileNetV2ForImageClassification]],\n              [\"mobilenet_v3\", [\"MobileNetV3ForImageClassification\", MobileNetV3ForImageClassification]],\n              [\"mobilenet_v4\", [\"MobileNetV4ForImageClassification\", MobileNetV4ForImageClassification]]\n            ]);\n            const MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"detr\", [\"DetrForObjectDetection\", DetrForObjectDetection]],\n              [\"rt_detr\", [\"RTDetrForObjectDetection\", RTDetrForObjectDetection]],\n              [\"rt_detr_v2\", [\"RTDetrV2ForObjectDetection\", RTDetrV2ForObjectDetection]],\n              [\"rf_detr\", [\"RFDetrForObjectDetection\", RFDetrForObjectDetection]],\n              [\"table-transformer\", [\"TableTransformerForObjectDetection\", TableTransformerForObjectDetection]],\n              [\"yolos\", [\"YolosForObjectDetection\", YolosForObjectDetection]]\n            ]);\n            const MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"owlvit\", [\"OwlViTForObjectDetection\", OwlViTForObjectDetection]],\n              [\"owlv2\", [\"Owlv2ForObjectDetection\", Owlv2ForObjectDetection]],\n              [\"grounding-dino\", [\"GroundingDinoForObjectDetection\", GroundingDinoForObjectDetection]]\n            ]);\n            const MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              // TODO: Do not add new models here\n              [\"detr\", [\"DetrForSegmentation\", DetrForSegmentation]],\n              [\"clipseg\", [\"CLIPSegForImageSegmentation\", CLIPSegForImageSegmentation]]\n            ]);\n            const MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"segformer\", [\"SegformerForSemanticSegmentation\", SegformerForSemanticSegmentation]],\n              [\"sapiens\", [\"SapiensForSemanticSegmentation\", SapiensForSemanticSegmentation]],\n              [\"swin\", [\"SwinForSemanticSegmentation\", SwinForSemanticSegmentation]],\n              [\"mobilenet_v1\", [\"MobileNetV1ForSemanticSegmentation\", MobileNetV1ForSemanticSegmentation]],\n              [\"mobilenet_v2\", [\"MobileNetV2ForSemanticSegmentation\", MobileNetV2ForSemanticSegmentation]],\n              [\"mobilenet_v3\", [\"MobileNetV3ForSemanticSegmentation\", MobileNetV3ForSemanticSegmentation]],\n              [\"mobilenet_v4\", [\"MobileNetV4ForSemanticSegmentation\", MobileNetV4ForSemanticSegmentation]]\n            ]);\n            const MODEL_FOR_UNIVERSAL_SEGMENTATION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"detr\", [\"DetrForSegmentation\", DetrForSegmentation]],\n              [\"maskformer\", [\"MaskFormerForInstanceSegmentation\", MaskFormerForInstanceSegmentation]]\n            ]);\n            const MODEL_FOR_MASK_GENERATION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"sam\", [\"SamModel\", SamModel]]\n            ]);\n            const MODEL_FOR_CTC_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"wav2vec2\", [\"Wav2Vec2ForCTC\", Wav2Vec2ForCTC]],\n              [\"wav2vec2-bert\", [\"Wav2Vec2BertForCTC\", Wav2Vec2BertForCTC]],\n              [\"unispeech\", [\"UniSpeechForCTC\", UniSpeechForCTC]],\n              [\"unispeech-sat\", [\"UniSpeechSatForCTC\", UniSpeechSatForCTC]],\n              [\"wavlm\", [\"WavLMForCTC\", WavLMForCTC]],\n              [\"hubert\", [\"HubertForCTC\", HubertForCTC]]\n            ]);\n            const MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"wav2vec2\", [\"Wav2Vec2ForSequenceClassification\", Wav2Vec2ForSequenceClassification]],\n              [\"wav2vec2-bert\", [\"Wav2Vec2BertForSequenceClassification\", Wav2Vec2BertForSequenceClassification]],\n              [\"unispeech\", [\"UniSpeechForSequenceClassification\", UniSpeechForSequenceClassification]],\n              [\"unispeech-sat\", [\"UniSpeechSatForSequenceClassification\", UniSpeechSatForSequenceClassification]],\n              [\"wavlm\", [\"WavLMForSequenceClassification\", WavLMForSequenceClassification]],\n              [\"hubert\", [\"HubertForSequenceClassification\", HubertForSequenceClassification]],\n              [\"audio-spectrogram-transformer\", [\"ASTForAudioClassification\", ASTForAudioClassification]]\n            ]);\n            const MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"wavlm\", [\"WavLMForXVector\", WavLMForXVector]]\n            ]);\n            const MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"unispeech-sat\", [\"UniSpeechSatForAudioFrameClassification\", UniSpeechSatForAudioFrameClassification]],\n              [\"wavlm\", [\"WavLMForAudioFrameClassification\", WavLMForAudioFrameClassification]],\n              [\"wav2vec2\", [\"Wav2Vec2ForAudioFrameClassification\", Wav2Vec2ForAudioFrameClassification]],\n              [\"pyannote\", [\"PyAnnoteForAudioFrameClassification\", PyAnnoteForAudioFrameClassification]]\n            ]);\n            const MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"vitmatte\", [\"VitMatteForImageMatting\", VitMatteForImageMatting]]\n            ]);\n            const MODEL_FOR_TIME_SERIES_PREDICTION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"patchtst\", [\"PatchTSTForPrediction\", PatchTSTForPrediction]],\n              [\"patchtsmixer\", [\"PatchTSMixerForPrediction\", PatchTSMixerForPrediction]]\n            ]);\n            const MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"swin2sr\", [\"Swin2SRForImageSuperResolution\", Swin2SRForImageSuperResolution]]\n            ]);\n            const MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"dpt\", [\"DPTForDepthEstimation\", DPTForDepthEstimation]],\n              [\"depth_anything\", [\"DepthAnythingForDepthEstimation\", DepthAnythingForDepthEstimation]],\n              [\"glpn\", [\"GLPNForDepthEstimation\", GLPNForDepthEstimation]],\n              [\"sapiens\", [\"SapiensForDepthEstimation\", SapiensForDepthEstimation]],\n              [\"depth_pro\", [\"DepthProForDepthEstimation\", DepthProForDepthEstimation]],\n              [\"metric3d\", [\"Metric3DForDepthEstimation\", Metric3DForDepthEstimation]],\n              [\"metric3dv2\", [\"Metric3Dv2ForDepthEstimation\", Metric3Dv2ForDepthEstimation]]\n            ]);\n            const MODEL_FOR_NORMAL_ESTIMATION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"sapiens\", [\"SapiensForNormalEstimation\", SapiensForNormalEstimation]]\n            ]);\n            const MODEL_FOR_POSE_ESTIMATION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"vitpose\", [\"VitPoseForPoseEstimation\", VitPoseForPoseEstimation]]\n            ]);\n            const MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES = /* @__PURE__ */ new Map([\n              [\"clip\", [\"CLIPVisionModelWithProjection\", CLIPVisionModelWithProjection]],\n              [\"siglip\", [\"SiglipVisionModel\", SiglipVisionModel]],\n              [\"jina_clip\", [\"JinaCLIPVisionModel\", JinaCLIPVisionModel]]\n            ]);\n            const MODEL_CLASS_TYPE_MAPPING = [\n              // MODEL_MAPPING_NAMES:\n              [MODEL_MAPPING_NAMES_ENCODER_ONLY, MODEL_TYPES.EncoderOnly],\n              [MODEL_MAPPING_NAMES_ENCODER_DECODER, MODEL_TYPES.EncoderDecoder],\n              [MODEL_MAPPING_NAMES_DECODER_ONLY, MODEL_TYPES.DecoderOnly],\n              [MODEL_MAPPING_NAMES_AUTO_ENCODER, MODEL_TYPES.AutoEncoder],\n              [MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],\n              [MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],\n              [MODEL_FOR_CAUSAL_LM_MAPPING_NAMES, MODEL_TYPES.DecoderOnly],\n              [MODEL_FOR_MULTIMODALITY_MAPPING_NAMES, MODEL_TYPES.MultiModality],\n              [MODEL_FOR_MASKED_LM_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES, MODEL_TYPES.Vision2Seq],\n              [MODEL_FOR_IMAGE_TEXT_TO_TEXT_MAPPING_NAMES, MODEL_TYPES.ImageTextToText],\n              [MODEL_FOR_AUDIO_TEXT_TO_TEXT_MAPPING_NAMES, MODEL_TYPES.AudioTextToText],\n              [MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_UNIVERSAL_SEGMENTATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_TIME_SERIES_PREDICTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_NORMAL_ESTIMATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_POSE_ESTIMATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_MASK_GENERATION_MAPPING_NAMES, MODEL_TYPES.MaskGeneration],\n              [MODEL_FOR_CTC_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],\n              [MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              [MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n              // Custom:\n              [MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly]\n            ];\n            for (const [mappings, type] of MODEL_CLASS_TYPE_MAPPING) {\n              for (const [name, model] of mappings.values()) {\n                MODEL_TYPE_MAPPING.set(name, type);\n                MODEL_CLASS_TO_NAME_MAPPING.set(model, name);\n                MODEL_NAME_TO_CLASS_MAPPING.set(name, model);\n              }\n            }\n            const CUSTOM_MAPPING = [\n              // OVERRIDE:\n              // TODO: Refactor to allow class to specify model\n              [\"MusicgenForConditionalGeneration\", MusicgenForConditionalGeneration, MODEL_TYPES.Musicgen],\n              [\"Phi3VForCausalLM\", Phi3VForCausalLM, MODEL_TYPES.Phi3V],\n              [\"CLIPTextModelWithProjection\", CLIPTextModelWithProjection, MODEL_TYPES.EncoderOnly],\n              [\"SiglipTextModel\", SiglipTextModel, MODEL_TYPES.EncoderOnly],\n              [\"JinaCLIPTextModel\", JinaCLIPTextModel, MODEL_TYPES.EncoderOnly],\n              [\"ClapTextModelWithProjection\", ClapTextModelWithProjection, MODEL_TYPES.EncoderOnly],\n              [\"ClapAudioModelWithProjection\", ClapAudioModelWithProjection, MODEL_TYPES.EncoderOnly],\n              [\"DacEncoderModel\", DacEncoderModel, MODEL_TYPES.EncoderOnly],\n              [\"DacDecoderModel\", DacDecoderModel, MODEL_TYPES.EncoderOnly],\n              [\"MimiEncoderModel\", MimiEncoderModel, MODEL_TYPES.EncoderOnly],\n              [\"MimiDecoderModel\", MimiDecoderModel, MODEL_TYPES.EncoderOnly],\n              [\"SnacEncoderModel\", SnacEncoderModel, MODEL_TYPES.EncoderOnly],\n              [\"SnacDecoderModel\", SnacDecoderModel, MODEL_TYPES.EncoderOnly]\n            ];\n            for (const [name, model, type] of CUSTOM_MAPPING) {\n              MODEL_TYPE_MAPPING.set(name, type);\n              MODEL_CLASS_TO_NAME_MAPPING.set(model, name);\n              MODEL_NAME_TO_CLASS_MAPPING.set(name, model);\n            }\n            const CUSTOM_ARCHITECTURES = /* @__PURE__ */ new Map([\n              [\"modnet\", MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES],\n              [\"birefnet\", MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES],\n              [\"isnet\", MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES],\n              [\"ben\", MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES]\n            ]);\n            for (const [name, mapping] of CUSTOM_ARCHITECTURES.entries()) {\n              mapping.set(name, [\"PreTrainedModel\", PreTrainedModel]);\n              MODEL_TYPE_MAPPING.set(name, MODEL_TYPES.EncoderOnly);\n              MODEL_CLASS_TO_NAME_MAPPING.set(PreTrainedModel, name);\n              MODEL_NAME_TO_CLASS_MAPPING.set(name, PreTrainedModel);\n            }\n            class AutoModel extends PretrainedMixin {\n            }\n            /** @type {Map<string, Object>[]} */\n            // @ts-ignore\n            __publicField(AutoModel, \"MODEL_CLASS_MAPPINGS\", MODEL_CLASS_TYPE_MAPPING.map((x) => x[0]));\n            __publicField(AutoModel, \"BASE_IF_FAIL\", true);\n            class AutoModelForSequenceClassification extends PretrainedMixin {\n            }\n            __publicField(AutoModelForSequenceClassification, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES]);\n            class AutoModelForTokenClassification extends PretrainedMixin {\n            }\n            __publicField(AutoModelForTokenClassification, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES]);\n            class AutoModelForSeq2SeqLM extends PretrainedMixin {\n            }\n            __publicField(AutoModelForSeq2SeqLM, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES]);\n            class AutoModelForSpeechSeq2Seq extends PretrainedMixin {\n            }\n            __publicField(AutoModelForSpeechSeq2Seq, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES]);\n            class AutoModelForTextToSpectrogram extends PretrainedMixin {\n            }\n            __publicField(AutoModelForTextToSpectrogram, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES]);\n            class AutoModelForTextToWaveform extends PretrainedMixin {\n            }\n            __publicField(AutoModelForTextToWaveform, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES]);\n            class AutoModelForCausalLM extends PretrainedMixin {\n            }\n            __publicField(AutoModelForCausalLM, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_CAUSAL_LM_MAPPING_NAMES]);\n            class AutoModelForMaskedLM extends PretrainedMixin {\n            }\n            __publicField(AutoModelForMaskedLM, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_MASKED_LM_MAPPING_NAMES]);\n            class AutoModelForQuestionAnswering extends PretrainedMixin {\n            }\n            __publicField(AutoModelForQuestionAnswering, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES]);\n            class AutoModelForVision2Seq extends PretrainedMixin {\n            }\n            __publicField(AutoModelForVision2Seq, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES]);\n            class AutoModelForImageClassification extends PretrainedMixin {\n            }\n            __publicField(AutoModelForImageClassification, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES]);\n            class AutoModelForImageSegmentation extends PretrainedMixin {\n            }\n            __publicField(AutoModelForImageSegmentation, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES]);\n            class AutoModelForSemanticSegmentation extends PretrainedMixin {\n            }\n            __publicField(AutoModelForSemanticSegmentation, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES]);\n            class AutoModelForUniversalSegmentation extends PretrainedMixin {\n            }\n            __publicField(AutoModelForUniversalSegmentation, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_UNIVERSAL_SEGMENTATION_MAPPING_NAMES]);\n            class AutoModelForObjectDetection extends PretrainedMixin {\n            }\n            __publicField(AutoModelForObjectDetection, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES]);\n            class AutoModelForZeroShotObjectDetection extends PretrainedMixin {\n            }\n            __publicField(AutoModelForZeroShotObjectDetection, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES]);\n            class AutoModelForMaskGeneration extends PretrainedMixin {\n            }\n            __publicField(AutoModelForMaskGeneration, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_MASK_GENERATION_MAPPING_NAMES]);\n            class AutoModelForCTC extends PretrainedMixin {\n            }\n            __publicField(AutoModelForCTC, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_CTC_MAPPING_NAMES]);\n            class AutoModelForAudioClassification extends PretrainedMixin {\n            }\n            __publicField(AutoModelForAudioClassification, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES]);\n            class AutoModelForXVector extends PretrainedMixin {\n            }\n            __publicField(AutoModelForXVector, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES]);\n            class AutoModelForAudioFrameClassification extends PretrainedMixin {\n            }\n            __publicField(AutoModelForAudioFrameClassification, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES]);\n            class AutoModelForDocumentQuestionAnswering extends PretrainedMixin {\n            }\n            __publicField(AutoModelForDocumentQuestionAnswering, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES]);\n            class AutoModelForImageMatting extends PretrainedMixin {\n            }\n            __publicField(AutoModelForImageMatting, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES]);\n            class AutoModelForImageToImage extends PretrainedMixin {\n            }\n            __publicField(AutoModelForImageToImage, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES]);\n            class AutoModelForDepthEstimation extends PretrainedMixin {\n            }\n            __publicField(AutoModelForDepthEstimation, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES]);\n            class AutoModelForNormalEstimation extends PretrainedMixin {\n            }\n            __publicField(AutoModelForNormalEstimation, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_NORMAL_ESTIMATION_MAPPING_NAMES]);\n            class AutoModelForPoseEstimation extends PretrainedMixin {\n            }\n            __publicField(AutoModelForPoseEstimation, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_POSE_ESTIMATION_MAPPING_NAMES]);\n            class AutoModelForImageFeatureExtraction extends PretrainedMixin {\n            }\n            __publicField(AutoModelForImageFeatureExtraction, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES]);\n            class AutoModelForImageTextToText extends PretrainedMixin {\n            }\n            __publicField(AutoModelForImageTextToText, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_IMAGE_TEXT_TO_TEXT_MAPPING_NAMES]);\n            class AutoModelForAudioTextToText extends PretrainedMixin {\n            }\n            __publicField(AutoModelForAudioTextToText, \"MODEL_CLASS_MAPPINGS\", [MODEL_FOR_AUDIO_TEXT_TO_TEXT_MAPPING_NAMES]);\n            class Seq2SeqLMOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.logits The output logits of the model.\n               * @param {Tensor} output.past_key_values An tensor of key/value pairs that represent the previous state of the model.\n               * @param {Tensor} output.encoder_outputs The output of the encoder in a sequence-to-sequence model.\n               * @param {Tensor} [output.decoder_attentions] Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the self-attention heads.\n               * @param {Tensor} [output.cross_attentions] Attentions weights of the decoder's cross-attention layer, after the attention softmax, used to compute the weighted average in the cross-attention heads.\n               */\n              constructor({ logits, past_key_values, encoder_outputs, decoder_attentions = null, cross_attentions = null }) {\n                super();\n                this.logits = logits;\n                this.past_key_values = past_key_values;\n                this.encoder_outputs = encoder_outputs;\n                this.decoder_attentions = decoder_attentions;\n                this.cross_attentions = cross_attentions;\n              }\n            }\n            class SequenceClassifierOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.logits classification (or regression if config.num_labels==1) scores (before SoftMax).\n               * @param {Record<string, Tensor>} [output.attentions] Object of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.\n               * Attentions weights after the attention softmax, used to compute the weighted average in the self-attention heads.\n               */\n              constructor({ logits, ...attentions }) {\n                super();\n                this.logits = logits;\n                const attentions_list = Object.values(attentions);\n                if (attentions_list.length > 0) {\n                  this.attentions = attentions_list;\n                }\n              }\n            }\n            class XVectorOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.logits Classification hidden states before AMSoftmax, of shape `(batch_size, config.xvector_output_dim)`.\n               * @param {Tensor} output.embeddings Utterance embeddings used for vector similarity-based retrieval, of shape `(batch_size, config.xvector_output_dim)`.\n               */\n              constructor({ logits, embeddings }) {\n                super();\n                this.logits = logits;\n                this.embeddings = embeddings;\n              }\n            }\n            class TokenClassifierOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.logits Classification scores (before SoftMax).\n               */\n              constructor({ logits }) {\n                super();\n                this.logits = logits;\n              }\n            }\n            class MaskedLMOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).\n               */\n              constructor({ logits }) {\n                super();\n                this.logits = logits;\n              }\n            }\n            class QuestionAnsweringModelOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.start_logits Span-start scores (before SoftMax).\n               * @param {Tensor} output.end_logits Span-end scores (before SoftMax).\n               */\n              constructor({ start_logits, end_logits }) {\n                super();\n                this.start_logits = start_logits;\n                this.end_logits = end_logits;\n              }\n            }\n            class CausalLMOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before softmax).\n               */\n              constructor({ logits }) {\n                super();\n                this.logits = logits;\n              }\n            }\n            class CausalLMOutputWithPast extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before softmax).\n               * @param {Tensor} output.past_key_values Contains pre-computed hidden-states (key and values in the self-attention blocks)\n               * that can be used (see `past_key_values` input) to speed up sequential decoding.\n               */\n              constructor({ logits, past_key_values }) {\n                super();\n                this.logits = logits;\n                this.past_key_values = past_key_values;\n              }\n            }\n            class ImageMattingOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.alphas Estimated alpha values, of shape `(batch_size, num_channels, height, width)`.\n               */\n              constructor({ alphas }) {\n                super();\n                this.alphas = alphas;\n              }\n            }\n            class VitsModelOutput extends ModelOutput {\n              /**\n               * @param {Object} output The output of the model.\n               * @param {Tensor} output.waveform The final audio waveform predicted by the model, of shape `(batch_size, sequence_length)`.\n               * @param {Tensor} output.spectrogram The log-mel spectrogram predicted at the output of the flow model.\n               * This spectrogram is passed to the Hi-Fi GAN decoder model to obtain the final audio waveform.\n               */\n              constructor({ waveform, spectrogram }) {\n                super();\n                this.waveform = waveform;\n                this.spectrogram = spectrogram;\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js\": (\n          /*!******************************************************************************************************!*\\\n            !*** ./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js ***!\n            \\******************************************************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              ASTFeatureExtractor: () => (\n                /* binding */\n                ASTFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/feature_extraction_utils.js */\n              \"./src/base/feature_extraction_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../utils/audio.js */\n              \"./src/utils/audio.js\"\n            );\n            class ASTFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {\n              constructor(config) {\n                super(config);\n                const sampling_rate = this.config.sampling_rate;\n                const mel_filters = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.mel_filter_bank)(\n                  257,\n                  // num_frequency_bins\n                  this.config.num_mel_bins,\n                  // num_mel_filters\n                  20,\n                  // min_frequency\n                  Math.floor(sampling_rate / 2),\n                  // max_frequency\n                  sampling_rate,\n                  // sampling_rate\n                  null,\n                  // norm\n                  \"kaldi\",\n                  // mel_scale\n                  true\n                  // triangularize_in_mel_space\n                );\n                this.mel_filters = mel_filters;\n                this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.window_function)(400, \"hann\", {\n                  periodic: false\n                });\n                this.mean = this.config.mean;\n                this.std = this.config.std;\n              }\n              /**\n               * Computes the log-Mel spectrogram of the provided audio waveform.\n               * @param {Float32Array|Float64Array} waveform The audio waveform to process.\n               * @param {number} max_length The maximum number of frames to return.\n               * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.\n               */\n              async _extract_fbank_features(waveform, max_length) {\n                return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.spectrogram)(\n                  waveform,\n                  this.window,\n                  // window\n                  400,\n                  // frame_length\n                  160,\n                  // hop_length\n                  {\n                    fft_length: 512,\n                    power: 2,\n                    center: false,\n                    preemphasis: 0.97,\n                    mel_filters: this.mel_filters,\n                    log_mel: \"log\",\n                    mel_floor: 1192092955078125e-22,\n                    remove_dc_offset: true,\n                    // Custom\n                    max_num_frames: max_length,\n                    transpose: true\n                  }\n                );\n              }\n              /**\n               * Asynchronously extracts features from a given audio using the provided configuration.\n               * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n               * @returns {Promise<{ input_values: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.\n               */\n              async _call(audio) {\n                (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, \"ASTFeatureExtractor\");\n                const features = await this._extract_fbank_features(audio, this.config.max_length);\n                if (this.config.do_normalize) {\n                  const denom = this.std * 2;\n                  const features_data = features.data;\n                  for (let i = 0; i < features_data.length; ++i) {\n                    features_data[i] = (features_data[i] - this.mean) / denom;\n                  }\n                }\n                return {\n                  input_values: features.unsqueeze_(0)\n                };\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/auto/feature_extraction_auto.js\": (\n          /*!****************************************************!*\\\n            !*** ./src/models/auto/feature_extraction_auto.js ***!\n            \\****************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              AutoFeatureExtractor: () => (\n                /* binding */\n                AutoFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../utils/constants.js */\n              \"./src/utils/constants.js\"\n            );\n            var _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/hub.js */\n              \"./src/utils/hub.js\"\n            );\n            var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../base/feature_extraction_utils.js */\n              \"./src/base/feature_extraction_utils.js\"\n            );\n            var _feature_extractors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ../feature_extractors.js */\n              \"./src/models/feature_extractors.js\"\n            );\n            class AutoFeatureExtractor {\n              /** @type {typeof FeatureExtractor.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                const preprocessorConfig = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__.getModelJSON)(pretrained_model_name_or_path, _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__.FEATURE_EXTRACTOR_NAME, true, options);\n                const key = preprocessorConfig.feature_extractor_type;\n                const feature_extractor_class = _feature_extractors_js__WEBPACK_IMPORTED_MODULE_3__[key];\n                if (!feature_extractor_class) {\n                  throw new Error(`Unknown feature_extractor_type: '${key}'. Please report this at ${_utils_constants_js__WEBPACK_IMPORTED_MODULE_0__.GITHUB_ISSUE_URL}.`);\n                }\n                return new feature_extractor_class(preprocessorConfig);\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/auto/image_processing_auto.js\": (\n          /*!**************************************************!*\\\n            !*** ./src/models/auto/image_processing_auto.js ***!\n            \\**************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              AutoImageProcessor: () => (\n                /* binding */\n                AutoImageProcessor\n              )\n              /* harmony export */\n            });\n            var _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../utils/constants.js */\n              \"./src/utils/constants.js\"\n            );\n            var _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/hub.js */\n              \"./src/utils/hub.js\"\n            );\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            var _image_processors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ../image_processors.js */\n              \"./src/models/image_processors.js\"\n            );\n            class AutoImageProcessor {\n              /** @type {typeof ImageProcessor.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                const preprocessorConfig = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__.getModelJSON)(pretrained_model_name_or_path, _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__.IMAGE_PROCESSOR_NAME, true, options);\n                const key = preprocessorConfig.image_processor_type ?? preprocessorConfig.feature_extractor_type;\n                let image_processor_class = _image_processors_js__WEBPACK_IMPORTED_MODULE_3__[key];\n                if (!image_processor_class) {\n                  if (key !== void 0) {\n                    console.warn(`Image processor type '${key}' not found, assuming base ImageProcessor. Please report this at ${_utils_constants_js__WEBPACK_IMPORTED_MODULE_0__.GITHUB_ISSUE_URL}.`);\n                  }\n                  image_processor_class = _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_2__.ImageProcessor;\n                }\n                return new image_processor_class(preprocessorConfig);\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/auto/processing_auto.js\": (\n          /*!********************************************!*\\\n            !*** ./src/models/auto/processing_auto.js ***!\n            \\********************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              AutoProcessor: () => (\n                /* binding */\n                AutoProcessor\n              )\n              /* harmony export */\n            });\n            var _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../utils/constants.js */\n              \"./src/utils/constants.js\"\n            );\n            var _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/hub.js */\n              \"./src/utils/hub.js\"\n            );\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _processors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ../processors.js */\n              \"./src/models/processors.js\"\n            );\n            var _image_processors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(\n              /*! ../image_processors.js */\n              \"./src/models/image_processors.js\"\n            );\n            var _feature_extractors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(\n              /*! ../feature_extractors.js */\n              \"./src/models/feature_extractors.js\"\n            );\n            class AutoProcessor {\n              /** @type {typeof Processor.from_pretrained} */\n              static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n                const preprocessorConfig = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__.getModelJSON)(pretrained_model_name_or_path, _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__.IMAGE_PROCESSOR_NAME, true, options);\n                const { image_processor_type, feature_extractor_type, processor_class } = preprocessorConfig;\n                if (processor_class && _processors_js__WEBPACK_IMPORTED_MODULE_3__[processor_class]) {\n                  return _processors_js__WEBPACK_IMPORTED_MODULE_3__[processor_class].from_pretrained(pretrained_model_name_or_path, options);\n                }\n                if (!image_processor_type && !feature_extractor_type) {\n                  throw new Error(\"No `image_processor_type` or `feature_extractor_type` found in the config.\");\n                }\n                const components = {};\n                if (image_processor_type) {\n                  const image_processor_class = _image_processors_js__WEBPACK_IMPORTED_MODULE_4__[image_processor_type];\n                  if (!image_processor_class) {\n                    throw new Error(`Unknown image_processor_type: '${image_processor_type}'.`);\n                  }\n                  components.image_processor = new image_processor_class(preprocessorConfig);\n                }\n                if (feature_extractor_type) {\n                  const image_processor_class = _image_processors_js__WEBPACK_IMPORTED_MODULE_4__[feature_extractor_type];\n                  if (image_processor_class) {\n                    components.image_processor = new image_processor_class(preprocessorConfig);\n                  } else {\n                    const feature_extractor_class = _feature_extractors_js__WEBPACK_IMPORTED_MODULE_5__[feature_extractor_type];\n                    if (!feature_extractor_class) {\n                      throw new Error(`Unknown feature_extractor_type: '${feature_extractor_type}'.`);\n                    }\n                    components.feature_extractor = new feature_extractor_class(preprocessorConfig);\n                  }\n                }\n                const config = {};\n                return new _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__.Processor(config, components);\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/beit/image_processing_beit.js\": (\n          /*!**************************************************!*\\\n            !*** ./src/models/beit/image_processing_beit.js ***!\n            \\**************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              BeitFeatureExtractor: () => (\n                /* binding */\n                BeitFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class BeitFeatureExtractor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/bit/image_processing_bit.js\": (\n          /*!************************************************!*\\\n            !*** ./src/models/bit/image_processing_bit.js ***!\n            \\************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              BitImageProcessor: () => (\n                /* binding */\n                BitImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class BitImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/chinese_clip/image_processing_chinese_clip.js\": (\n          /*!******************************************************************!*\\\n            !*** ./src/models/chinese_clip/image_processing_chinese_clip.js ***!\n            \\******************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              ChineseCLIPFeatureExtractor: () => (\n                /* binding */\n                ChineseCLIPFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class ChineseCLIPFeatureExtractor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/clap/feature_extraction_clap.js\": (\n          /*!****************************************************!*\\\n            !*** ./src/models/clap/feature_extraction_clap.js ***!\n            \\****************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              ClapFeatureExtractor: () => (\n                /* binding */\n                ClapFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/feature_extraction_utils.js */\n              \"./src/base/feature_extraction_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../utils/audio.js */\n              \"./src/utils/audio.js\"\n            );\n            class ClapFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {\n              constructor(config) {\n                super(config);\n                this.mel_filters = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.mel_filter_bank)(\n                  this.config.nb_frequency_bins,\n                  // num_frequency_bins\n                  this.config.feature_size,\n                  // num_mel_filters\n                  this.config.frequency_min,\n                  // min_frequency\n                  this.config.frequency_max,\n                  // max_frequency\n                  this.config.sampling_rate,\n                  // sampling_rate\n                  null,\n                  // norm\n                  \"htk\"\n                  // mel_scale\n                );\n                this.mel_filters_slaney = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.mel_filter_bank)(\n                  this.config.nb_frequency_bins,\n                  // num_frequency_bins\n                  this.config.feature_size,\n                  // num_mel_filters\n                  this.config.frequency_min,\n                  // min_frequency\n                  this.config.frequency_max,\n                  // max_frequency\n                  this.config.sampling_rate,\n                  // sampling_rate\n                  \"slaney\",\n                  // norm\n                  \"slaney\"\n                  // mel_scale\n                );\n                this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.window_function)(this.config.fft_window_size, \"hann\");\n              }\n              /**\n               * Extracts the mel spectrogram and prepares it for the mode based on the `truncation` and `padding` arguments.\n               * \n               * Four different path are possible:\n               *   - `truncation=\"fusion\"` and the length of the waveform is greater than the max length: the mel spectrogram\n               *     will be computed on the entire audio. 3 random crops and a dowsampled version of the full mel spectrogram\n               *     are then stacked together. They will later be used for `feature_fusion`.\n               *   - `truncation=\"rand_trunc\"` and the length of the waveform is smaller than the max length: the audio is\n               *     padded based on `padding`.\n               *   - `truncation=\"fusion\"` and the length of the waveform is smaller than the max length: the audio is padded\n               *     based on `padding`, and is repeated `4` times.\n               *   - `truncation=\"rand_trunc\"` and the length of the waveform is greater than the max length: the mel\n               *     spectrogram will be computed on a random crop of the waveform.\n               * \n               * @param {Float32Array|Float64Array} waveform The input waveform.\n               * @param {number} max_length The maximum length of the waveform.\n               * @param {string} truncation The truncation strategy to use.\n               * @param {string} padding The padding strategy to use.\n               * @returns {Promise<Tensor>} An object containing the mel spectrogram data as a Float32Array, its dimensions as an array of numbers, and a boolean indicating whether the waveform was longer than the max length.\n               * @private\n               */\n              async _get_input_mel(waveform, max_length, truncation, padding) {\n                let input_mel;\n                let longer = false;\n                const diff = waveform.length - max_length;\n                if (diff > 0) {\n                  if (truncation === \"rand_trunc\") {\n                    longer = true;\n                    const idx = Math.floor(Math.random() * (diff + 1));\n                    waveform = waveform.subarray(idx, idx + max_length);\n                    input_mel = await this._extract_fbank_features(waveform, this.mel_filters_slaney, this.config.nb_max_samples);\n                  } else {\n                    throw new Error(`Truncation strategy \"${truncation}\" not implemented`);\n                  }\n                } else {\n                  if (diff < 0) {\n                    let padded = new Float64Array(max_length);\n                    padded.set(waveform);\n                    if (padding === \"repeat\") {\n                      for (let i = waveform.length; i < max_length; i += waveform.length) {\n                        padded.set(waveform.subarray(0, Math.min(waveform.length, max_length - i)), i);\n                      }\n                    } else if (padding === \"repeatpad\") {\n                      for (let i = waveform.length; i < -diff; i += waveform.length) {\n                        padded.set(waveform, i);\n                      }\n                    }\n                    waveform = padded;\n                  }\n                  if (truncation === \"fusion\") {\n                    throw new Error(`Truncation strategy \"${truncation}\" not implemented`);\n                  }\n                  input_mel = await this._extract_fbank_features(waveform, this.mel_filters_slaney, this.config.nb_max_samples);\n                }\n                return input_mel.unsqueeze_(0);\n              }\n              /**\n               * Compute the log-mel spectrogram of the provided `waveform` using the Hann window.\n               * In CLAP, two different filter banks are used depending on the truncation pattern:\n               *  - `self.mel_filters`: they correspond to the default parameters of `torchaudio` which can be obtained from\n               *    calling `torchaudio.transforms.MelSpectrogram().mel_scale.fb`. These filters are used when `truncation`\n               *    is set to `\"fusion\"`.\n               *  - `self.mel_filteres_slaney` : they correspond to the default parameters of `librosa` which used\n               *    `librosa.filters.mel` when computing the mel spectrogram. These filters were only used in the original\n               *    implementation when the truncation mode is not `\"fusion\"`.\n               * \n               * @param {Float32Array|Float64Array} waveform The audio waveform to process.\n               * @param {number[][]} mel_filters The mel filters to use.\n               * @param {number} [max_length=null] The maximum number of frames to return.\n               * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.\n               */\n              async _extract_fbank_features(waveform, mel_filters, max_length = null) {\n                return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.spectrogram)(\n                  waveform,\n                  this.window,\n                  // window\n                  this.config.fft_window_size,\n                  // frame_length\n                  this.config.hop_length,\n                  // hop_length\n                  {\n                    power: 2,\n                    mel_filters,\n                    log_mel: \"dB\",\n                    // Custom\n                    max_num_frames: max_length,\n                    do_pad: false,\n                    transpose: true\n                  }\n                );\n              }\n              /**\n               * Asynchronously extracts features from a given audio using the provided configuration.\n               * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n               * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.\n               */\n              async _call(audio, {\n                max_length = null\n              } = {}) {\n                (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, \"ClapFeatureExtractor\");\n                const padded_inputs = await this._get_input_mel(\n                  audio,\n                  max_length ?? this.config.nb_max_samples,\n                  this.config.truncation,\n                  this.config.padding\n                );\n                return {\n                  input_features: padded_inputs.unsqueeze_(0)\n                };\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/clip/image_processing_clip.js\": (\n          /*!**************************************************!*\\\n            !*** ./src/models/clip/image_processing_clip.js ***!\n            \\**************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              CLIPFeatureExtractor: () => (\n                /* binding */\n                CLIPFeatureExtractor\n              ),\n              /* harmony export */\n              CLIPImageProcessor: () => (\n                /* binding */\n                CLIPImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class CLIPImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n            class CLIPFeatureExtractor extends CLIPImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/convnext/image_processing_convnext.js\": (\n          /*!**********************************************************!*\\\n            !*** ./src/models/convnext/image_processing_convnext.js ***!\n            \\**********************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              ConvNextFeatureExtractor: () => (\n                /* binding */\n                ConvNextFeatureExtractor\n              ),\n              /* harmony export */\n              ConvNextImageProcessor: () => (\n                /* binding */\n                ConvNextImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class ConvNextImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              constructor(config) {\n                super(config);\n                this.crop_pct = this.config.crop_pct ?? 224 / 256;\n              }\n              async resize(image) {\n                const shortest_edge = this.size?.shortest_edge;\n                if (shortest_edge === void 0) {\n                  throw new Error(`Size dictionary must contain 'shortest_edge' key.`);\n                }\n                if (shortest_edge < 384) {\n                  const resize_shortest_edge = Math.floor(shortest_edge / this.crop_pct);\n                  const [newWidth, newHeight] = this.get_resize_output_image_size(image, {\n                    shortest_edge: resize_shortest_edge\n                  });\n                  image = await image.resize(newWidth, newHeight, {\n                    resample: this.resample\n                  });\n                  image = await image.center_crop(shortest_edge, shortest_edge);\n                } else {\n                  image = await image.resize(shortest_edge, shortest_edge, {\n                    resample: this.resample\n                  });\n                }\n                return image;\n              }\n            }\n            class ConvNextFeatureExtractor extends ConvNextImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/dac/feature_extraction_dac.js\": (\n          /*!**************************************************!*\\\n            !*** ./src/models/dac/feature_extraction_dac.js ***!\n            \\**************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              DacFeatureExtractor: () => (\n                /* binding */\n                DacFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _encodec_feature_extraction_encodec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../encodec/feature_extraction_encodec.js */\n              \"./src/models/encodec/feature_extraction_encodec.js\"\n            );\n            class DacFeatureExtractor extends _encodec_feature_extraction_encodec_js__WEBPACK_IMPORTED_MODULE_0__.EncodecFeatureExtractor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/deit/image_processing_deit.js\": (\n          /*!**************************************************!*\\\n            !*** ./src/models/deit/image_processing_deit.js ***!\n            \\**************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              DeiTFeatureExtractor: () => (\n                /* binding */\n                DeiTFeatureExtractor\n              ),\n              /* harmony export */\n              DeiTImageProcessor: () => (\n                /* binding */\n                DeiTImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class DeiTImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n            class DeiTFeatureExtractor extends DeiTImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/detr/image_processing_detr.js\": (\n          /*!**************************************************!*\\\n            !*** ./src/models/detr/image_processing_detr.js ***!\n            \\**************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              DetrFeatureExtractor: () => (\n                /* binding */\n                DetrFeatureExtractor\n              ),\n              /* harmony export */\n              DetrImageProcessor: () => (\n                /* binding */\n                DetrImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            class DetrImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              /**\n               * Calls the feature extraction process on an array of images, preprocesses\n               * each image, and concatenates the resulting features into a single Tensor.\n               * @param {import('../../utils/image.js').RawImage[]} images The image(s) to extract features from.\n               * @returns {Promise<DetrFeatureExtractorResult>} An object containing the concatenated pixel values of the preprocessed images.\n               */\n              async _call(images) {\n                const result = await super._call(images);\n                const maskSize = [result.pixel_values.dims[0], 64, 64];\n                const pixel_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.full)(maskSize, 1n);\n                return { ...result, pixel_mask };\n              }\n              /** @type {typeof post_process_object_detection} */\n              post_process_object_detection(...args) {\n                return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_object_detection)(...args);\n              }\n              /** @type {typeof post_process_panoptic_segmentation} */\n              post_process_panoptic_segmentation(...args) {\n                return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_panoptic_segmentation)(...args);\n              }\n              /** @type {typeof post_process_instance_segmentation} */\n              post_process_instance_segmentation(...args) {\n                return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_instance_segmentation)(...args);\n              }\n            }\n            class DetrFeatureExtractor extends DetrImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/donut/image_processing_donut.js\": (\n          /*!****************************************************!*\\\n            !*** ./src/models/donut/image_processing_donut.js ***!\n            \\****************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              DonutFeatureExtractor: () => (\n                /* binding */\n                DonutFeatureExtractor\n              ),\n              /* harmony export */\n              DonutImageProcessor: () => (\n                /* binding */\n                DonutImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class DonutImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              pad_image(pixelData, imgDims, padSize, options = {}) {\n                const [imageHeight, imageWidth, imageChannels] = imgDims;\n                let image_mean = this.image_mean;\n                if (!Array.isArray(this.image_mean)) {\n                  image_mean = new Array(imageChannels).fill(image_mean);\n                }\n                let image_std = this.image_std;\n                if (!Array.isArray(image_std)) {\n                  image_std = new Array(imageChannels).fill(image_mean);\n                }\n                const constant_values = image_mean.map((x, i) => -x / image_std[i]);\n                return super.pad_image(pixelData, imgDims, padSize, {\n                  center: true,\n                  // Since normalization is done after padding, we need to use certain constant values to ensure the same behaviour is observed.\n                  // For more information, see https://github.com/huggingface/transformers/blob/main/src/transformers/models/donut/image_processing_donut.py#L433-L451\n                  constant_values,\n                  ...options\n                });\n              }\n            }\n            class DonutFeatureExtractor extends DonutImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/dpt/image_processing_dpt.js\": (\n          /*!************************************************!*\\\n            !*** ./src/models/dpt/image_processing_dpt.js ***!\n            \\************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              DPTFeatureExtractor: () => (\n                /* binding */\n                DPTFeatureExtractor\n              ),\n              /* harmony export */\n              DPTImageProcessor: () => (\n                /* binding */\n                DPTImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class DPTImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n            class DPTFeatureExtractor extends DPTImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/efficientnet/image_processing_efficientnet.js\": (\n          /*!******************************************************************!*\\\n            !*** ./src/models/efficientnet/image_processing_efficientnet.js ***!\n            \\******************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              EfficientNetImageProcessor: () => (\n                /* binding */\n                EfficientNetImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class EfficientNetImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              constructor(config) {\n                super(config);\n                this.include_top = this.config.include_top ?? true;\n                if (this.include_top) {\n                  this.image_std = this.image_std.map((x) => x * x);\n                }\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/encodec/feature_extraction_encodec.js\": (\n          /*!**********************************************************!*\\\n            !*** ./src/models/encodec/feature_extraction_encodec.js ***!\n            \\**********************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              EncodecFeatureExtractor: () => (\n                /* binding */\n                EncodecFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/feature_extraction_utils.js */\n              \"./src/base/feature_extraction_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            class EncodecFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {\n              /**\n               * Asynchronously extracts input values from a given audio using the provided configuration.\n               * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n               * @returns {Promise<{ input_values: Tensor; }>} The extracted input values.\n               */\n              async _call(audio) {\n                (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, \"EncodecFeatureExtractor\");\n                if (audio instanceof Float64Array) {\n                  audio = new Float32Array(audio);\n                }\n                const num_channels = this.config.feature_size;\n                if (audio.length % num_channels !== 0) {\n                  throw new Error(`The length of the audio data must be a multiple of the number of channels (${num_channels}).`);\n                }\n                const shape = [\n                  1,\n                  /* batch_size */\n                  num_channels,\n                  /* num_channels */\n                  audio.length / num_channels\n                  /* num_samples */\n                ];\n                return {\n                  input_values: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\"float32\", audio, shape)\n                };\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/feature_extractors.js\": (\n          /*!******************************************!*\\\n            !*** ./src/models/feature_extractors.js ***!\n            \\******************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              ASTFeatureExtractor: () => (\n                /* reexport safe */\n                _audio_spectrogram_transformer_feature_extraction_audio_spectrogram_transformer_js__WEBPACK_IMPORTED_MODULE_0__.ASTFeatureExtractor\n              ),\n              /* harmony export */\n              ClapFeatureExtractor: () => (\n                /* reexport safe */\n                _clap_feature_extraction_clap_js__WEBPACK_IMPORTED_MODULE_2__.ClapFeatureExtractor\n              ),\n              /* harmony export */\n              DacFeatureExtractor: () => (\n                /* reexport safe */\n                _dac_feature_extraction_dac_js__WEBPACK_IMPORTED_MODULE_3__.DacFeatureExtractor\n              ),\n              /* harmony export */\n              EncodecFeatureExtractor: () => (\n                /* reexport safe */\n                _encodec_feature_extraction_encodec_js__WEBPACK_IMPORTED_MODULE_1__.EncodecFeatureExtractor\n              ),\n              /* harmony export */\n              ImageFeatureExtractor: () => (\n                /* reexport safe */\n                _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_12__.ImageProcessor\n              ),\n              /* harmony export */\n              MoonshineFeatureExtractor: () => (\n                /* reexport safe */\n                _moonshine_feature_extraction_moonshine_js__WEBPACK_IMPORTED_MODULE_4__.MoonshineFeatureExtractor\n              ),\n              /* harmony export */\n              PyAnnoteFeatureExtractor: () => (\n                /* reexport safe */\n                _pyannote_feature_extraction_pyannote_js__WEBPACK_IMPORTED_MODULE_5__.PyAnnoteFeatureExtractor\n              ),\n              /* harmony export */\n              SeamlessM4TFeatureExtractor: () => (\n                /* reexport safe */\n                _seamless_m4t_feature_extraction_seamless_m4t_js__WEBPACK_IMPORTED_MODULE_6__.SeamlessM4TFeatureExtractor\n              ),\n              /* harmony export */\n              SnacFeatureExtractor: () => (\n                /* reexport safe */\n                _snac_feature_extraction_snac_js__WEBPACK_IMPORTED_MODULE_7__.SnacFeatureExtractor\n              ),\n              /* harmony export */\n              SpeechT5FeatureExtractor: () => (\n                /* reexport safe */\n                _speecht5_feature_extraction_speecht5_js__WEBPACK_IMPORTED_MODULE_8__.SpeechT5FeatureExtractor\n              ),\n              /* harmony export */\n              Wav2Vec2FeatureExtractor: () => (\n                /* reexport safe */\n                _wav2vec2_feature_extraction_wav2vec2_js__WEBPACK_IMPORTED_MODULE_9__.Wav2Vec2FeatureExtractor\n              ),\n              /* harmony export */\n              WeSpeakerFeatureExtractor: () => (\n                /* reexport safe */\n                _wespeaker_feature_extraction_wespeaker_js__WEBPACK_IMPORTED_MODULE_10__.WeSpeakerFeatureExtractor\n              ),\n              /* harmony export */\n              WhisperFeatureExtractor: () => (\n                /* reexport safe */\n                _whisper_feature_extraction_whisper_js__WEBPACK_IMPORTED_MODULE_11__.WhisperFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _audio_spectrogram_transformer_feature_extraction_audio_spectrogram_transformer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ./audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js */\n              \"./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js\"\n            );\n            var _encodec_feature_extraction_encodec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ./encodec/feature_extraction_encodec.js */\n              \"./src/models/encodec/feature_extraction_encodec.js\"\n            );\n            var _clap_feature_extraction_clap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ./clap/feature_extraction_clap.js */\n              \"./src/models/clap/feature_extraction_clap.js\"\n            );\n            var _dac_feature_extraction_dac_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ./dac/feature_extraction_dac.js */\n              \"./src/models/dac/feature_extraction_dac.js\"\n            );\n            var _moonshine_feature_extraction_moonshine_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(\n              /*! ./moonshine/feature_extraction_moonshine.js */\n              \"./src/models/moonshine/feature_extraction_moonshine.js\"\n            );\n            var _pyannote_feature_extraction_pyannote_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(\n              /*! ./pyannote/feature_extraction_pyannote.js */\n              \"./src/models/pyannote/feature_extraction_pyannote.js\"\n            );\n            var _seamless_m4t_feature_extraction_seamless_m4t_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(\n              /*! ./seamless_m4t/feature_extraction_seamless_m4t.js */\n              \"./src/models/seamless_m4t/feature_extraction_seamless_m4t.js\"\n            );\n            var _snac_feature_extraction_snac_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(\n              /*! ./snac/feature_extraction_snac.js */\n              \"./src/models/snac/feature_extraction_snac.js\"\n            );\n            var _speecht5_feature_extraction_speecht5_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(\n              /*! ./speecht5/feature_extraction_speecht5.js */\n              \"./src/models/speecht5/feature_extraction_speecht5.js\"\n            );\n            var _wav2vec2_feature_extraction_wav2vec2_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(\n              /*! ./wav2vec2/feature_extraction_wav2vec2.js */\n              \"./src/models/wav2vec2/feature_extraction_wav2vec2.js\"\n            );\n            var _wespeaker_feature_extraction_wespeaker_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(\n              /*! ./wespeaker/feature_extraction_wespeaker.js */\n              \"./src/models/wespeaker/feature_extraction_wespeaker.js\"\n            );\n            var _whisper_feature_extraction_whisper_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(\n              /*! ./whisper/feature_extraction_whisper.js */\n              \"./src/models/whisper/feature_extraction_whisper.js\"\n            );\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(\n              /*! ../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n          }\n        ),\n        /***/\n        \"./src/models/florence2/processing_florence2.js\": (\n          /*!******************************************************!*\\\n            !*** ./src/models/florence2/processing_florence2.js ***!\n            \\******************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Florence2Processor: () => (\n                /* binding */\n                Florence2Processor\n              )\n              /* harmony export */\n            });\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../auto/image_processing_auto.js */\n              \"./src/models/auto/image_processing_auto.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            class Florence2Processor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {\n              constructor(config, components) {\n                super(config, components);\n                const {\n                  // @ts-expect-error TS2339\n                  tasks_answer_post_processing_type,\n                  // @ts-expect-error TS2339\n                  task_prompts_without_inputs,\n                  // @ts-expect-error TS2339\n                  task_prompts_with_input\n                } = this.image_processor.config;\n                this.tasks_answer_post_processing_type = new Map(Object.entries(tasks_answer_post_processing_type ?? {}));\n                this.task_prompts_without_inputs = new Map(Object.entries(task_prompts_without_inputs ?? {}));\n                this.task_prompts_with_input = new Map(Object.entries(task_prompts_with_input ?? {}));\n                this.regexes = {\n                  quad_boxes: /(.+?)<loc_(\\d+)><loc_(\\d+)><loc_(\\d+)><loc_(\\d+)><loc_(\\d+)><loc_(\\d+)><loc_(\\d+)><loc_(\\d+)>/gm,\n                  bboxes: /([^<]+)?<loc_(\\d+)><loc_(\\d+)><loc_(\\d+)><loc_(\\d+)>/gm\n                };\n                this.size_per_bin = 1e3;\n              }\n              /**\n               * Helper function to construct prompts from input texts\n               * @param {string|string[]} text\n               * @returns {string[]}\n               */\n              construct_prompts(text) {\n                if (typeof text === \"string\") {\n                  text = [text];\n                }\n                const prompts = [];\n                for (const t of text) {\n                  if (this.task_prompts_without_inputs.has(t)) {\n                    prompts.push(this.task_prompts_without_inputs.get(t));\n                  } else {\n                    for (const [task, prompt] of this.task_prompts_with_input) {\n                      if (t.includes(task)) {\n                        prompts.push(prompt.replaceAll(\"{input}\", t).replaceAll(task, \"\"));\n                        break;\n                      }\n                    }\n                    if (prompts.length !== text.length) {\n                      prompts.push(t);\n                    }\n                  }\n                }\n                return prompts;\n              }\n              /**\n               * Post-process the output of the model to each of the task outputs.\n               * @param {string} text The text to post-process.\n               * @param {string} task The task to post-process the text for.\n               * @param {[number, number]} image_size The size of the image. height x width.\n               */\n              post_process_generation(text, task, image_size) {\n                const task_answer_post_processing_type = this.tasks_answer_post_processing_type.get(task) ?? \"pure_text\";\n                text = text.replaceAll(\"<s>\", \"\").replaceAll(\"</s>\", \"\");\n                let final_answer;\n                switch (task_answer_post_processing_type) {\n                  case \"pure_text\":\n                    final_answer = text;\n                    break;\n                  case \"description_with_bboxes\":\n                  case \"bboxes\":\n                  case \"phrase_grounding\":\n                  case \"ocr\":\n                    const key = task_answer_post_processing_type === \"ocr\" ? \"quad_boxes\" : \"bboxes\";\n                    const matches = text.matchAll(this.regexes[key]);\n                    const labels = [];\n                    const items = [];\n                    for (const [_, label, ...locations] of matches) {\n                      labels.push(label ? label.trim() : labels.at(-1) ?? \"\");\n                      items.push(\n                        locations.map((x, i) => (\n                          // NOTE: Add 0.5 to use the center position of the bin as the coordinate.\n                          (Number(x) + 0.5) / this.size_per_bin * image_size[i % 2]\n                        ))\n                      );\n                    }\n                    final_answer = { labels, [key]: items };\n                    break;\n                  default:\n                    throw new Error(`Task \"${task}\" (of type \"${task_answer_post_processing_type}\") not yet implemented.`);\n                }\n                return { [task]: final_answer };\n              }\n              // NOTE: images and text are switched from the python version\n              // `images` is required, `text` is optional\n              async _call(images, text = null, kwargs = {}) {\n                if (!images && !text) {\n                  throw new Error(\"Either text or images must be provided\");\n                }\n                const image_inputs = await this.image_processor(images, kwargs);\n                const text_inputs = text ? this.tokenizer(text, kwargs) : {};\n                return {\n                  ...image_inputs,\n                  ...text_inputs\n                };\n              }\n            }\n            __publicField(Florence2Processor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);\n            __publicField(Florence2Processor, \"image_processor_class\", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);\n          }\n        ),\n        /***/\n        \"./src/models/glpn/image_processing_glpn.js\": (\n          /*!**************************************************!*\\\n            !*** ./src/models/glpn/image_processing_glpn.js ***!\n            \\**************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              GLPNFeatureExtractor: () => (\n                /* binding */\n                GLPNFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class GLPNFeatureExtractor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/grounding_dino/image_processing_grounding_dino.js\": (\n          /*!**********************************************************************!*\\\n            !*** ./src/models/grounding_dino/image_processing_grounding_dino.js ***!\n            \\**********************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              GroundingDinoImageProcessor: () => (\n                /* binding */\n                GroundingDinoImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            class GroundingDinoImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              /**\n               * Calls the feature extraction process on an array of images, preprocesses\n               * each image, and concatenates the resulting features into a single Tensor.\n               * @param {import('../../utils/image.js').RawImage[]} images The image(s) to extract features from.\n               * @returns {Promise<GroundingDinoFeatureExtractorResult>} An object containing the concatenated pixel values of the preprocessed images.\n               */\n              async _call(images) {\n                const result = await super._call(images);\n                const dims = result.pixel_values.dims;\n                const pixel_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.ones)([dims[0], dims[2], dims[3]]);\n                return { ...result, pixel_mask };\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/grounding_dino/processing_grounding_dino.js\": (\n          /*!****************************************************************!*\\\n            !*** ./src/models/grounding_dino/processing_grounding_dino.js ***!\n            \\****************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              GroundingDinoProcessor: () => (\n                /* binding */\n                GroundingDinoProcessor\n              )\n              /* harmony export */\n            });\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../auto/image_processing_auto.js */\n              \"./src/models/auto/image_processing_auto.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            function get_phrases_from_posmap(posmaps, input_ids) {\n              const left_idx = 0;\n              const right_idx = posmaps.dims.at(-1) - 1;\n              const posmaps_list = posmaps.tolist();\n              posmaps_list.fill(false, 0, left_idx + 1);\n              posmaps_list.fill(false, right_idx);\n              const input_ids_list = input_ids.tolist();\n              return posmaps_list.map((val, idx) => val ? idx : null).filter((idx) => idx !== null).map((i) => input_ids_list[i]);\n            }\n            class GroundingDinoProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {\n              /**\n               * @typedef {import('../../utils/image.js').RawImage} RawImage\n               */\n              /**\n               * \n               * @param {RawImage|RawImage[]|RawImage[][]} images  \n               * @param {string|string[]} text \n               * @returns {Promise<any>}\n               */\n              async _call(images, text, options = {}) {\n                const image_inputs = images ? await this.image_processor(images, options) : {};\n                const text_inputs = text ? this.tokenizer(text, options) : {};\n                return {\n                  ...text_inputs,\n                  ...image_inputs\n                };\n              }\n              post_process_grounded_object_detection(outputs, input_ids, {\n                box_threshold = 0.25,\n                text_threshold = 0.25,\n                target_sizes = null\n              } = {}) {\n                const { logits, pred_boxes } = outputs;\n                const batch_size = logits.dims[0];\n                if (target_sizes !== null && target_sizes.length !== batch_size) {\n                  throw Error(\"Make sure that you pass in as many target sizes as the batch dimension of the logits\");\n                }\n                const num_queries = logits.dims.at(1);\n                const probs = logits.sigmoid();\n                const scores = probs.max(-1).tolist();\n                const boxes = pred_boxes.tolist().map((batch) => batch.map((box) => (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_3__.center_to_corners_format)(box)));\n                const results = [];\n                for (let i = 0; i < batch_size; ++i) {\n                  const target_size = target_sizes !== null ? target_sizes[i] : null;\n                  if (target_size !== null) {\n                    boxes[i] = boxes[i].map((box) => box.map((x, j) => x * target_size[(j + 1) % 2]));\n                  }\n                  const batch_scores = scores[i];\n                  const final_scores = [];\n                  const final_phrases = [];\n                  const final_boxes = [];\n                  for (let j = 0; j < num_queries; ++j) {\n                    const score = batch_scores[j];\n                    if (score <= box_threshold) {\n                      continue;\n                    }\n                    const box = boxes[i][j];\n                    const prob = probs[i][j];\n                    final_scores.push(score);\n                    final_boxes.push(box);\n                    const phrases = get_phrases_from_posmap(prob.gt(text_threshold), input_ids[i]);\n                    final_phrases.push(phrases);\n                  }\n                  results.push({ scores: final_scores, boxes: final_boxes, labels: this.batch_decode(final_phrases) });\n                }\n                return results;\n              }\n            }\n            __publicField(GroundingDinoProcessor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);\n            __publicField(GroundingDinoProcessor, \"image_processor_class\", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);\n          }\n        ),\n        /***/\n        \"./src/models/idefics3/image_processing_idefics3.js\": (\n          /*!**********************************************************!*\\\n            !*** ./src/models/idefics3/image_processing_idefics3.js ***!\n            \\**********************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Idefics3ImageProcessor: () => (\n                /* binding */\n                Idefics3ImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            class Idefics3ImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              constructor(config) {\n                super(config);\n                this.do_image_splitting = config.do_image_splitting ?? true;\n                this.max_image_size = config.max_image_size;\n              }\n              /**\n               * @typedef {import('../../utils/image.js').RawImage} RawImage\n               * @typedef {import('../../utils/tensor.js').Tensor} Tensor\n               */\n              /**\n               * Calculate size to resize images to, to be multiples of `vision_encoder_max_size` while preserving the aspect ratio.\n               * @param {Tensor} pixel_values Tensor of the image to resize.\n               * @param {number} vision_encoder_max_size Maximum size of the output image. If the image is larger than this size,\n               * it will be split into patches of this size, and the original image will be concatenated with the patches, resized to max_size.\n               */\n              get_resize_for_vision_encoder(pixel_values, vision_encoder_max_size) {\n                let [height, width] = pixel_values.dims.slice(-2);\n                const aspect_ratio = width / height;\n                if (width >= height) {\n                  width = Math.ceil(width / vision_encoder_max_size) * vision_encoder_max_size;\n                  height = Math.floor(width / aspect_ratio);\n                  height = Math.ceil(height / vision_encoder_max_size) * vision_encoder_max_size;\n                } else {\n                  height = Math.ceil(height / vision_encoder_max_size) * vision_encoder_max_size;\n                  width = Math.floor(height * aspect_ratio);\n                  width = Math.ceil(width / vision_encoder_max_size) * vision_encoder_max_size;\n                }\n                return { height, width };\n              }\n              /** @param {RawImage|RawImage[]|RawImage[][]} images */\n              async _call(images, {\n                do_image_splitting = null,\n                return_row_col_info = false\n              } = {}) {\n                let batched_2d_images;\n                if (!Array.isArray(images)) {\n                  batched_2d_images = [[images]];\n                } else {\n                  if (images.length === 0 || !images[0]) {\n                    throw new Error(\"No images provided.\");\n                  }\n                  if (!Array.isArray(images[0])) {\n                    batched_2d_images = [\n                      /** @type {RawImage[]} */\n                      images\n                    ];\n                  } else {\n                    batched_2d_images = /** @type {RawImage[][]} */\n                    images;\n                  }\n                }\n                let all_pixel_values = [];\n                let images_list_rows = [];\n                let images_list_cols = [];\n                const original_sizes = [];\n                const reshaped_input_sizes = [];\n                for (const image_batch of batched_2d_images) {\n                  let images_list = await Promise.all(image_batch.map((x) => this.preprocess(x)));\n                  original_sizes.push(...images_list.map((x) => x.original_size));\n                  reshaped_input_sizes.push(...images_list.map((x) => x.reshaped_input_size));\n                  images_list.forEach((x) => x.pixel_values.unsqueeze_(0));\n                  const { longest_edge } = this.max_image_size;\n                  let images_tensor;\n                  if (do_image_splitting ?? this.do_image_splitting) {\n                    let image_rows = new Array(images_list.length);\n                    let image_cols = new Array(images_list.length);\n                    images_tensor = await Promise.all(images_list.map(async (x, i) => {\n                      const new_size = this.get_resize_for_vision_encoder(x.pixel_values, longest_edge);\n                      const resized = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.interpolate_4d)(x.pixel_values, {\n                        size: [new_size.height, new_size.width]\n                      });\n                      const { frames, num_splits_h, num_splits_w } = await this.split_image(resized, this.max_image_size);\n                      image_rows[i] = num_splits_h;\n                      image_cols[i] = num_splits_w;\n                      return (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.cat)(frames, 0);\n                    }));\n                    images_list_rows.push(image_rows);\n                    images_list_cols.push(image_cols);\n                  } else {\n                    const size = [longest_edge, longest_edge];\n                    images_tensor = await Promise.all(\n                      images_list.map((x) => (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.interpolate_4d)(x.pixel_values, { size }))\n                    );\n                    images_list_rows.push(new Array(images_list.length).fill(0));\n                    images_list_cols.push(new Array(images_list.length).fill(0));\n                  }\n                  all_pixel_values.push((0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.cat)(images_tensor, 0));\n                }\n                const batch_size = all_pixel_values.length;\n                const [n, c, h, w] = all_pixel_values[0].dims;\n                let pixel_values;\n                let pixel_attention_mask;\n                if (batch_size === 1) {\n                  pixel_values = all_pixel_values[0].unsqueeze_(0);\n                  pixel_attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.full)([batch_size, n, h, w], true);\n                } else {\n                  const max_num_patches = Math.max(...all_pixel_values.map((x) => x.dims.at(0)));\n                  pixel_attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.full)([batch_size, max_num_patches, h, w], true);\n                  const pixel_attention_mask_data = pixel_attention_mask.data;\n                  const pixel_attention_mask_stride = max_num_patches * h * w;\n                  for (let i = 0; i < batch_size; ++i) {\n                    const num_patches = all_pixel_values[i].dims[0];\n                    if (num_patches < max_num_patches) {\n                      all_pixel_values[i] = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.cat)([\n                        all_pixel_values[i],\n                        (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.full)([max_num_patches - num_patches, c, h, w], 0)\n                      ], 0);\n                      const start_offset = i * pixel_attention_mask_stride + num_patches * h * w;\n                      const end_offset = (i + 1) * pixel_attention_mask_stride;\n                      pixel_attention_mask_data.fill(false, start_offset, end_offset);\n                    }\n                  }\n                  pixel_values = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.stack)(all_pixel_values, 0);\n                }\n                return {\n                  pixel_values,\n                  pixel_attention_mask,\n                  original_sizes,\n                  reshaped_input_sizes,\n                  ...return_row_col_info ? { rows: images_list_rows, cols: images_list_cols } : {}\n                };\n              }\n              async split_image(pixel_values, { longest_edge }) {\n                const max_height = longest_edge;\n                const max_width = longest_edge;\n                const frames = [];\n                const [height, width] = pixel_values.dims.slice(-2);\n                let num_splits_h = 0, num_splits_w = 0;\n                if (height > max_height || width > max_width) {\n                  num_splits_h = Math.ceil(height / max_height);\n                  num_splits_w = Math.ceil(width / max_width);\n                  const optimal_height = Math.ceil(height / num_splits_h);\n                  const optimal_width = Math.ceil(width / num_splits_w);\n                  for (let r = 0; r < num_splits_h; ++r) {\n                    for (let c = 0; c < num_splits_w; ++c) {\n                      let start_x, start_y, end_x, end_y;\n                      if (r === num_splits_h - 1) {\n                        start_y = height - optimal_height;\n                        end_y = height;\n                      } else {\n                        start_y = r * optimal_height;\n                        end_y = (r + 1) * optimal_height;\n                      }\n                      if (c === num_splits_w - 1) {\n                        start_x = width - optimal_width;\n                        end_x = width;\n                      } else {\n                        start_x = c * optimal_width;\n                        end_x = (c + 1) * optimal_width;\n                      }\n                      const starts = [start_y, start_x];\n                      const ends = [end_y, end_x];\n                      const patch = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.slice)(pixel_values, starts, ends, [2, 3]);\n                      frames.push(patch);\n                    }\n                  }\n                  const global_image_height = max_height;\n                  const global_image_width = max_width;\n                  if (height !== global_image_height || width !== global_image_width) {\n                    pixel_values = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.interpolate_4d)(pixel_values, {\n                      size: [global_image_height, global_image_width]\n                    });\n                  }\n                }\n                frames.push(pixel_values);\n                return { frames, num_splits_h, num_splits_w };\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/idefics3/processing_idefics3.js\": (\n          /*!****************************************************!*\\\n            !*** ./src/models/idefics3/processing_idefics3.js ***!\n            \\****************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Idefics3Processor: () => (\n                /* binding */\n                Idefics3Processor\n              )\n              /* harmony export */\n            });\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../auto/image_processing_auto.js */\n              \"./src/models/auto/image_processing_auto.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            var _utils_image_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ../../utils/image.js */\n              \"./src/utils/image.js\"\n            );\n            var _utils_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(\n              /*! ../../utils/core.js */\n              \"./src/utils/core.js\"\n            );\n            function _prompt_split_image(image_seq_len, image_rows, image_cols, fake_token_around_image, image_token, global_img_token) {\n              let text_split_images = \"\";\n              for (let n_h = 0; n_h < image_rows; ++n_h) {\n                for (let n_w = 0; n_w < image_cols; ++n_w) {\n                  text_split_images += fake_token_around_image + `<row_${n_h + 1}_col_${n_w + 1}>` + image_token.repeat(image_seq_len);\n                }\n                text_split_images += \"\\n\";\n              }\n              text_split_images += `\n${fake_token_around_image}${global_img_token}` + image_token.repeat(image_seq_len) + `${fake_token_around_image}`;\n              return text_split_images;\n            }\n            function _prompt_single_image(image_seq_len, fake_token_around_image, image_token, global_img_token) {\n              return `${fake_token_around_image}${global_img_token}` + image_token.repeat(image_seq_len) + `${fake_token_around_image}`;\n            }\n            function get_image_prompt_string(image_rows, image_cols, image_seq_len, fake_token_around_image, image_token, global_img_token) {\n              if (image_rows === 0 && image_cols === 0) {\n                return _prompt_single_image(\n                  image_seq_len,\n                  fake_token_around_image,\n                  image_token,\n                  global_img_token\n                );\n              }\n              return _prompt_split_image(\n                image_seq_len,\n                image_rows,\n                image_cols,\n                fake_token_around_image,\n                image_token,\n                global_img_token\n              );\n            }\n            class Idefics3Processor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"fake_image_token\", \"<fake_token_around_image>\");\n                __publicField(this, \"image_token\", \"<image>\");\n                __publicField(this, \"global_img_token\", \"<global-img>\");\n              }\n              /**\n               * \n               * @param {string|string[]} text \n               * @param {RawImage|RawImage[]|RawImage[][]} images  \n               * @returns {Promise<any>}\n               */\n              async _call(text, images = null, options = {}) {\n                options.return_row_col_info ?? (options.return_row_col_info = true);\n                let image_inputs;\n                if (images) {\n                  image_inputs = await this.image_processor(images, options);\n                }\n                if (!Array.isArray(text)) {\n                  text = [text];\n                }\n                const image_rows = image_inputs.rows ?? [new Array(text.length).fill(0)];\n                const image_cols = image_inputs.cols ?? [new Array(text.length).fill(0)];\n                const image_seq_len = this.config.image_seq_len;\n                const n_images_in_text = [];\n                const prompt_strings = [];\n                for (let i = 0; i < text.length; ++i) {\n                  const sample = text[i];\n                  const sample_rows = image_rows[i];\n                  const sample_cols = image_cols[i];\n                  n_images_in_text.push((0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.count)(sample, this.image_token));\n                  const image_prompt_strings = sample_rows.map(\n                    (n_rows, j) => get_image_prompt_string(\n                      n_rows,\n                      sample_cols[j],\n                      image_seq_len,\n                      this.fake_image_token,\n                      this.image_token,\n                      this.global_img_token\n                    )\n                  );\n                  const split_sample = sample.split(this.image_token);\n                  if (split_sample.length === 0) {\n                    throw new Error(\"The image token should be present in the text.\");\n                  }\n                  let new_sample = split_sample[0];\n                  for (let j = 0; j < image_prompt_strings.length; ++j) {\n                    new_sample += image_prompt_strings[j] + split_sample[j + 1];\n                  }\n                  prompt_strings.push(new_sample);\n                }\n                const text_inputs = this.tokenizer(prompt_strings);\n                return {\n                  ...text_inputs,\n                  ...image_inputs\n                };\n              }\n            }\n            __publicField(Idefics3Processor, \"image_processor_class\", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);\n            __publicField(Idefics3Processor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);\n            __publicField(Idefics3Processor, \"uses_processor_config\", true);\n          }\n        ),\n        /***/\n        \"./src/models/image_processors.js\": (\n          /*!****************************************!*\\\n            !*** ./src/models/image_processors.js ***!\n            \\****************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              BeitFeatureExtractor: () => (\n                /* reexport safe */\n                _beit_image_processing_beit_js__WEBPACK_IMPORTED_MODULE_0__.BeitFeatureExtractor\n              ),\n              /* harmony export */\n              BitImageProcessor: () => (\n                /* reexport safe */\n                _bit_image_processing_bit_js__WEBPACK_IMPORTED_MODULE_1__.BitImageProcessor\n              ),\n              /* harmony export */\n              CLIPFeatureExtractor: () => (\n                /* reexport safe */\n                _clip_image_processing_clip_js__WEBPACK_IMPORTED_MODULE_3__.CLIPFeatureExtractor\n              ),\n              /* harmony export */\n              CLIPImageProcessor: () => (\n                /* reexport safe */\n                _clip_image_processing_clip_js__WEBPACK_IMPORTED_MODULE_3__.CLIPImageProcessor\n              ),\n              /* harmony export */\n              ChineseCLIPFeatureExtractor: () => (\n                /* reexport safe */\n                _chinese_clip_image_processing_chinese_clip_js__WEBPACK_IMPORTED_MODULE_2__.ChineseCLIPFeatureExtractor\n              ),\n              /* harmony export */\n              ConvNextFeatureExtractor: () => (\n                /* reexport safe */\n                _convnext_image_processing_convnext_js__WEBPACK_IMPORTED_MODULE_4__.ConvNextFeatureExtractor\n              ),\n              /* harmony export */\n              ConvNextImageProcessor: () => (\n                /* reexport safe */\n                _convnext_image_processing_convnext_js__WEBPACK_IMPORTED_MODULE_4__.ConvNextImageProcessor\n              ),\n              /* harmony export */\n              DPTFeatureExtractor: () => (\n                /* reexport safe */\n                _dpt_image_processing_dpt_js__WEBPACK_IMPORTED_MODULE_8__.DPTFeatureExtractor\n              ),\n              /* harmony export */\n              DPTImageProcessor: () => (\n                /* reexport safe */\n                _dpt_image_processing_dpt_js__WEBPACK_IMPORTED_MODULE_8__.DPTImageProcessor\n              ),\n              /* harmony export */\n              DeiTFeatureExtractor: () => (\n                /* reexport safe */\n                _deit_image_processing_deit_js__WEBPACK_IMPORTED_MODULE_5__.DeiTFeatureExtractor\n              ),\n              /* harmony export */\n              DeiTImageProcessor: () => (\n                /* reexport safe */\n                _deit_image_processing_deit_js__WEBPACK_IMPORTED_MODULE_5__.DeiTImageProcessor\n              ),\n              /* harmony export */\n              DetrFeatureExtractor: () => (\n                /* reexport safe */\n                _detr_image_processing_detr_js__WEBPACK_IMPORTED_MODULE_6__.DetrFeatureExtractor\n              ),\n              /* harmony export */\n              DetrImageProcessor: () => (\n                /* reexport safe */\n                _detr_image_processing_detr_js__WEBPACK_IMPORTED_MODULE_6__.DetrImageProcessor\n              ),\n              /* harmony export */\n              DonutFeatureExtractor: () => (\n                /* reexport safe */\n                _donut_image_processing_donut_js__WEBPACK_IMPORTED_MODULE_7__.DonutFeatureExtractor\n              ),\n              /* harmony export */\n              DonutImageProcessor: () => (\n                /* reexport safe */\n                _donut_image_processing_donut_js__WEBPACK_IMPORTED_MODULE_7__.DonutImageProcessor\n              ),\n              /* harmony export */\n              EfficientNetImageProcessor: () => (\n                /* reexport safe */\n                _efficientnet_image_processing_efficientnet_js__WEBPACK_IMPORTED_MODULE_9__.EfficientNetImageProcessor\n              ),\n              /* harmony export */\n              GLPNFeatureExtractor: () => (\n                /* reexport safe */\n                _glpn_image_processing_glpn_js__WEBPACK_IMPORTED_MODULE_10__.GLPNFeatureExtractor\n              ),\n              /* harmony export */\n              GroundingDinoImageProcessor: () => (\n                /* reexport safe */\n                _grounding_dino_image_processing_grounding_dino_js__WEBPACK_IMPORTED_MODULE_11__.GroundingDinoImageProcessor\n              ),\n              /* harmony export */\n              Idefics3ImageProcessor: () => (\n                /* reexport safe */\n                _idefics3_image_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_12__.Idefics3ImageProcessor\n              ),\n              /* harmony export */\n              JinaCLIPImageProcessor: () => (\n                /* reexport safe */\n                _jina_clip_image_processing_jina_clip_js__WEBPACK_IMPORTED_MODULE_14__.JinaCLIPImageProcessor\n              ),\n              /* harmony export */\n              LlavaOnevisionImageProcessor: () => (\n                /* reexport safe */\n                _llava_onevision_image_processing_llava_onevision_js__WEBPACK_IMPORTED_MODULE_15__.LlavaOnevisionImageProcessor\n              ),\n              /* harmony export */\n              Mask2FormerImageProcessor: () => (\n                /* reexport safe */\n                _mask2former_image_processing_mask2former_js__WEBPACK_IMPORTED_MODULE_16__.Mask2FormerImageProcessor\n              ),\n              /* harmony export */\n              MaskFormerFeatureExtractor: () => (\n                /* reexport safe */\n                _maskformer_image_processing_maskformer_js__WEBPACK_IMPORTED_MODULE_17__.MaskFormerFeatureExtractor\n              ),\n              /* harmony export */\n              MaskFormerImageProcessor: () => (\n                /* reexport safe */\n                _maskformer_image_processing_maskformer_js__WEBPACK_IMPORTED_MODULE_17__.MaskFormerImageProcessor\n              ),\n              /* harmony export */\n              MobileNetV1FeatureExtractor: () => (\n                /* reexport safe */\n                _mobilenet_v1_image_processing_mobilenet_v1_js__WEBPACK_IMPORTED_MODULE_18__.MobileNetV1FeatureExtractor\n              ),\n              /* harmony export */\n              MobileNetV1ImageProcessor: () => (\n                /* reexport safe */\n                _mobilenet_v1_image_processing_mobilenet_v1_js__WEBPACK_IMPORTED_MODULE_18__.MobileNetV1ImageProcessor\n              ),\n              /* harmony export */\n              MobileNetV2FeatureExtractor: () => (\n                /* reexport safe */\n                _mobilenet_v2_image_processing_mobilenet_v2_js__WEBPACK_IMPORTED_MODULE_19__.MobileNetV2FeatureExtractor\n              ),\n              /* harmony export */\n              MobileNetV2ImageProcessor: () => (\n                /* reexport safe */\n                _mobilenet_v2_image_processing_mobilenet_v2_js__WEBPACK_IMPORTED_MODULE_19__.MobileNetV2ImageProcessor\n              ),\n              /* harmony export */\n              MobileNetV3FeatureExtractor: () => (\n                /* reexport safe */\n                _mobilenet_v3_image_processing_mobilenet_v3_js__WEBPACK_IMPORTED_MODULE_20__.MobileNetV3FeatureExtractor\n              ),\n              /* harmony export */\n              MobileNetV3ImageProcessor: () => (\n                /* reexport safe */\n                _mobilenet_v3_image_processing_mobilenet_v3_js__WEBPACK_IMPORTED_MODULE_20__.MobileNetV3ImageProcessor\n              ),\n              /* harmony export */\n              MobileNetV4FeatureExtractor: () => (\n                /* reexport safe */\n                _mobilenet_v4_image_processing_mobilenet_v4_js__WEBPACK_IMPORTED_MODULE_21__.MobileNetV4FeatureExtractor\n              ),\n              /* harmony export */\n              MobileNetV4ImageProcessor: () => (\n                /* reexport safe */\n                _mobilenet_v4_image_processing_mobilenet_v4_js__WEBPACK_IMPORTED_MODULE_21__.MobileNetV4ImageProcessor\n              ),\n              /* harmony export */\n              MobileViTFeatureExtractor: () => (\n                /* reexport safe */\n                _mobilevit_image_processing_mobilevit_js__WEBPACK_IMPORTED_MODULE_22__.MobileViTFeatureExtractor\n              ),\n              /* harmony export */\n              MobileViTImageProcessor: () => (\n                /* reexport safe */\n                _mobilevit_image_processing_mobilevit_js__WEBPACK_IMPORTED_MODULE_22__.MobileViTImageProcessor\n              ),\n              /* harmony export */\n              NougatImageProcessor: () => (\n                /* reexport safe */\n                _nougat_image_processing_nougat_js__WEBPACK_IMPORTED_MODULE_23__.NougatImageProcessor\n              ),\n              /* harmony export */\n              OwlViTFeatureExtractor: () => (\n                /* reexport safe */\n                _owlvit_image_processing_owlvit_js__WEBPACK_IMPORTED_MODULE_25__.OwlViTFeatureExtractor\n              ),\n              /* harmony export */\n              OwlViTImageProcessor: () => (\n                /* reexport safe */\n                _owlvit_image_processing_owlvit_js__WEBPACK_IMPORTED_MODULE_25__.OwlViTImageProcessor\n              ),\n              /* harmony export */\n              Owlv2ImageProcessor: () => (\n                /* reexport safe */\n                _owlv2_image_processing_owlv2_js__WEBPACK_IMPORTED_MODULE_24__.Owlv2ImageProcessor\n              ),\n              /* harmony export */\n              Phi3VImageProcessor: () => (\n                /* reexport safe */\n                _phi3_v_image_processing_phi3_v_js__WEBPACK_IMPORTED_MODULE_26__.Phi3VImageProcessor\n              ),\n              /* harmony export */\n              PvtImageProcessor: () => (\n                /* reexport safe */\n                _pvt_image_processing_pvt_js__WEBPACK_IMPORTED_MODULE_27__.PvtImageProcessor\n              ),\n              /* harmony export */\n              Qwen2VLImageProcessor: () => (\n                /* reexport safe */\n                _qwen2_vl_image_processing_qwen2_vl_js__WEBPACK_IMPORTED_MODULE_28__.Qwen2VLImageProcessor\n              ),\n              /* harmony export */\n              RTDetrImageProcessor: () => (\n                /* reexport safe */\n                _rt_detr_image_processing_rt_detr_js__WEBPACK_IMPORTED_MODULE_29__.RTDetrImageProcessor\n              ),\n              /* harmony export */\n              SamImageProcessor: () => (\n                /* reexport safe */\n                _sam_image_processing_sam_js__WEBPACK_IMPORTED_MODULE_30__.SamImageProcessor\n              ),\n              /* harmony export */\n              SegformerFeatureExtractor: () => (\n                /* reexport safe */\n                _segformer_image_processing_segformer_js__WEBPACK_IMPORTED_MODULE_31__.SegformerFeatureExtractor\n              ),\n              /* harmony export */\n              SegformerImageProcessor: () => (\n                /* reexport safe */\n                _segformer_image_processing_segformer_js__WEBPACK_IMPORTED_MODULE_31__.SegformerImageProcessor\n              ),\n              /* harmony export */\n              SiglipImageProcessor: () => (\n                /* reexport safe */\n                _siglip_image_processing_siglip_js__WEBPACK_IMPORTED_MODULE_32__.SiglipImageProcessor\n              ),\n              /* harmony export */\n              SmolVLMImageProcessor: () => (\n                /* reexport safe */\n                _smolvlm_image_processing_smolvlm_js__WEBPACK_IMPORTED_MODULE_33__.SmolVLMImageProcessor\n              ),\n              /* harmony export */\n              Swin2SRImageProcessor: () => (\n                /* reexport safe */\n                _swin2sr_image_processing_swin2sr_js__WEBPACK_IMPORTED_MODULE_34__.Swin2SRImageProcessor\n              ),\n              /* harmony export */\n              VLMImageProcessor: () => (\n                /* reexport safe */\n                _janus_image_processing_janus_js__WEBPACK_IMPORTED_MODULE_13__.VLMImageProcessor\n              ),\n              /* harmony export */\n              ViTFeatureExtractor: () => (\n                /* reexport safe */\n                _vit_image_processing_vit_js__WEBPACK_IMPORTED_MODULE_35__.ViTFeatureExtractor\n              ),\n              /* harmony export */\n              ViTImageProcessor: () => (\n                /* reexport safe */\n                _vit_image_processing_vit_js__WEBPACK_IMPORTED_MODULE_35__.ViTImageProcessor\n              ),\n              /* harmony export */\n              VitMatteImageProcessor: () => (\n                /* reexport safe */\n                _vitmatte_image_processing_vitmatte_js__WEBPACK_IMPORTED_MODULE_36__.VitMatteImageProcessor\n              ),\n              /* harmony export */\n              VitPoseImageProcessor: () => (\n                /* reexport safe */\n                _vitpose_image_processing_vitpose_js__WEBPACK_IMPORTED_MODULE_37__.VitPoseImageProcessor\n              ),\n              /* harmony export */\n              YolosFeatureExtractor: () => (\n                /* reexport safe */\n                _yolos_image_processing_yolos_js__WEBPACK_IMPORTED_MODULE_38__.YolosFeatureExtractor\n              ),\n              /* harmony export */\n              YolosImageProcessor: () => (\n                /* reexport safe */\n                _yolos_image_processing_yolos_js__WEBPACK_IMPORTED_MODULE_38__.YolosImageProcessor\n              )\n              /* harmony export */\n            });\n            var _beit_image_processing_beit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ./beit/image_processing_beit.js */\n              \"./src/models/beit/image_processing_beit.js\"\n            );\n            var _bit_image_processing_bit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ./bit/image_processing_bit.js */\n              \"./src/models/bit/image_processing_bit.js\"\n            );\n            var _chinese_clip_image_processing_chinese_clip_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ./chinese_clip/image_processing_chinese_clip.js */\n              \"./src/models/chinese_clip/image_processing_chinese_clip.js\"\n            );\n            var _clip_image_processing_clip_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ./clip/image_processing_clip.js */\n              \"./src/models/clip/image_processing_clip.js\"\n            );\n            var _convnext_image_processing_convnext_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(\n              /*! ./convnext/image_processing_convnext.js */\n              \"./src/models/convnext/image_processing_convnext.js\"\n            );\n            var _deit_image_processing_deit_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(\n              /*! ./deit/image_processing_deit.js */\n              \"./src/models/deit/image_processing_deit.js\"\n            );\n            var _detr_image_processing_detr_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(\n              /*! ./detr/image_processing_detr.js */\n              \"./src/models/detr/image_processing_detr.js\"\n            );\n            var _donut_image_processing_donut_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(\n              /*! ./donut/image_processing_donut.js */\n              \"./src/models/donut/image_processing_donut.js\"\n            );\n            var _dpt_image_processing_dpt_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(\n              /*! ./dpt/image_processing_dpt.js */\n              \"./src/models/dpt/image_processing_dpt.js\"\n            );\n            var _efficientnet_image_processing_efficientnet_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(\n              /*! ./efficientnet/image_processing_efficientnet.js */\n              \"./src/models/efficientnet/image_processing_efficientnet.js\"\n            );\n            var _glpn_image_processing_glpn_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(\n              /*! ./glpn/image_processing_glpn.js */\n              \"./src/models/glpn/image_processing_glpn.js\"\n            );\n            var _grounding_dino_image_processing_grounding_dino_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(\n              /*! ./grounding_dino/image_processing_grounding_dino.js */\n              \"./src/models/grounding_dino/image_processing_grounding_dino.js\"\n            );\n            var _idefics3_image_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(\n              /*! ./idefics3/image_processing_idefics3.js */\n              \"./src/models/idefics3/image_processing_idefics3.js\"\n            );\n            var _janus_image_processing_janus_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__2(\n              /*! ./janus/image_processing_janus.js */\n              \"./src/models/janus/image_processing_janus.js\"\n            );\n            var _jina_clip_image_processing_jina_clip_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__2(\n              /*! ./jina_clip/image_processing_jina_clip.js */\n              \"./src/models/jina_clip/image_processing_jina_clip.js\"\n            );\n            var _llava_onevision_image_processing_llava_onevision_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__2(\n              /*! ./llava_onevision/image_processing_llava_onevision.js */\n              \"./src/models/llava_onevision/image_processing_llava_onevision.js\"\n            );\n            var _mask2former_image_processing_mask2former_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__2(\n              /*! ./mask2former/image_processing_mask2former.js */\n              \"./src/models/mask2former/image_processing_mask2former.js\"\n            );\n            var _maskformer_image_processing_maskformer_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__2(\n              /*! ./maskformer/image_processing_maskformer.js */\n              \"./src/models/maskformer/image_processing_maskformer.js\"\n            );\n            var _mobilenet_v1_image_processing_mobilenet_v1_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__2(\n              /*! ./mobilenet_v1/image_processing_mobilenet_v1.js */\n              \"./src/models/mobilenet_v1/image_processing_mobilenet_v1.js\"\n            );\n            var _mobilenet_v2_image_processing_mobilenet_v2_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__2(\n              /*! ./mobilenet_v2/image_processing_mobilenet_v2.js */\n              \"./src/models/mobilenet_v2/image_processing_mobilenet_v2.js\"\n            );\n            var _mobilenet_v3_image_processing_mobilenet_v3_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__2(\n              /*! ./mobilenet_v3/image_processing_mobilenet_v3.js */\n              \"./src/models/mobilenet_v3/image_processing_mobilenet_v3.js\"\n            );\n            var _mobilenet_v4_image_processing_mobilenet_v4_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__2(\n              /*! ./mobilenet_v4/image_processing_mobilenet_v4.js */\n              \"./src/models/mobilenet_v4/image_processing_mobilenet_v4.js\"\n            );\n            var _mobilevit_image_processing_mobilevit_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__2(\n              /*! ./mobilevit/image_processing_mobilevit.js */\n              \"./src/models/mobilevit/image_processing_mobilevit.js\"\n            );\n            var _nougat_image_processing_nougat_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__2(\n              /*! ./nougat/image_processing_nougat.js */\n              \"./src/models/nougat/image_processing_nougat.js\"\n            );\n            var _owlv2_image_processing_owlv2_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__2(\n              /*! ./owlv2/image_processing_owlv2.js */\n              \"./src/models/owlv2/image_processing_owlv2.js\"\n            );\n            var _owlvit_image_processing_owlvit_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__2(\n              /*! ./owlvit/image_processing_owlvit.js */\n              \"./src/models/owlvit/image_processing_owlvit.js\"\n            );\n            var _phi3_v_image_processing_phi3_v_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__2(\n              /*! ./phi3_v/image_processing_phi3_v.js */\n              \"./src/models/phi3_v/image_processing_phi3_v.js\"\n            );\n            var _pvt_image_processing_pvt_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__2(\n              /*! ./pvt/image_processing_pvt.js */\n              \"./src/models/pvt/image_processing_pvt.js\"\n            );\n            var _qwen2_vl_image_processing_qwen2_vl_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__2(\n              /*! ./qwen2_vl/image_processing_qwen2_vl.js */\n              \"./src/models/qwen2_vl/image_processing_qwen2_vl.js\"\n            );\n            var _rt_detr_image_processing_rt_detr_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__2(\n              /*! ./rt_detr/image_processing_rt_detr.js */\n              \"./src/models/rt_detr/image_processing_rt_detr.js\"\n            );\n            var _sam_image_processing_sam_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__2(\n              /*! ./sam/image_processing_sam.js */\n              \"./src/models/sam/image_processing_sam.js\"\n            );\n            var _segformer_image_processing_segformer_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__2(\n              /*! ./segformer/image_processing_segformer.js */\n              \"./src/models/segformer/image_processing_segformer.js\"\n            );\n            var _siglip_image_processing_siglip_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__2(\n              /*! ./siglip/image_processing_siglip.js */\n              \"./src/models/siglip/image_processing_siglip.js\"\n            );\n            var _smolvlm_image_processing_smolvlm_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__2(\n              /*! ./smolvlm/image_processing_smolvlm.js */\n              \"./src/models/smolvlm/image_processing_smolvlm.js\"\n            );\n            var _swin2sr_image_processing_swin2sr_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__2(\n              /*! ./swin2sr/image_processing_swin2sr.js */\n              \"./src/models/swin2sr/image_processing_swin2sr.js\"\n            );\n            var _vit_image_processing_vit_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__2(\n              /*! ./vit/image_processing_vit.js */\n              \"./src/models/vit/image_processing_vit.js\"\n            );\n            var _vitmatte_image_processing_vitmatte_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__2(\n              /*! ./vitmatte/image_processing_vitmatte.js */\n              \"./src/models/vitmatte/image_processing_vitmatte.js\"\n            );\n            var _vitpose_image_processing_vitpose_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__2(\n              /*! ./vitpose/image_processing_vitpose.js */\n              \"./src/models/vitpose/image_processing_vitpose.js\"\n            );\n            var _yolos_image_processing_yolos_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__2(\n              /*! ./yolos/image_processing_yolos.js */\n              \"./src/models/yolos/image_processing_yolos.js\"\n            );\n          }\n        ),\n        /***/\n        \"./src/models/janus/image_processing_janus.js\": (\n          /*!****************************************************!*\\\n            !*** ./src/models/janus/image_processing_janus.js ***!\n            \\****************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              VLMImageProcessor: () => (\n                /* binding */\n                VLMImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class VLMImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              constructor(config) {\n                super({\n                  do_pad: true,\n                  pad_size: {\n                    width: config.image_size,\n                    height: config.image_size\n                  },\n                  ...config\n                });\n                this.constant_values = this.config.background_color.map((x) => x * this.rescale_factor);\n              }\n              pad_image(pixelData, imgDims, padSize, options) {\n                return super.pad_image(pixelData, imgDims, padSize, {\n                  constant_values: this.constant_values,\n                  center: true,\n                  ...options\n                });\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/janus/processing_janus.js\": (\n          /*!**********************************************!*\\\n            !*** ./src/models/janus/processing_janus.js ***!\n            \\**********************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              VLChatProcessor: () => (\n                /* binding */\n                VLChatProcessor\n              )\n              /* harmony export */\n            });\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../auto/image_processing_auto.js */\n              \"./src/models/auto/image_processing_auto.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            var _utils_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ../../utils/core.js */\n              \"./src/utils/core.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var _utils_image_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(\n              /*! ../../utils/image.js */\n              \"./src/utils/image.js\"\n            );\n            class VLChatProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {\n              constructor(config, components) {\n                super(config, components);\n                this.image_tag = this.config.image_tag;\n                this.image_start_tag = this.config.image_start_tag;\n                this.image_end_tag = this.config.image_end_tag;\n                this.num_image_tokens = this.config.num_image_tokens;\n              }\n              /**\n               * @typedef {Object} MultimodalMessageProperties Additional properties for multimodal messages.\n               * @property {(RawImage | string | URL)[]} [images] The images in the message.\n               * @typedef {(import('../../tokenizers.js').Message & MultimodalMessageProperties)[]} MultimodalConversation The conversation possibly containing multimodal inputs.\n               */\n              /**\n               * @typedef {Object} VLCChatProcessorResult The processed input.\n               * @property {Tensor} input_ids The input IDs.\n               * @property {Tensor} attention_mask The attention mask.\n               * @property {Tensor} images_seq_mask The image sequence mask.\n               * @property {Tensor} images_emb_mask The image embedding mask.\n               */\n              /**\n               * @param {MultimodalConversation} conversation The chat messages to process.\n               * @param {Object} options Additional options for processing.\n               * @param {RawImage|RawImage[]} [options.images] The images to process, if not set in the conversation.\n               * @param {string} [options.chat_template=\"default\"] The chat template to use.\n               * @returns {Promise<VLCChatProcessorResult | VLCChatProcessorResult & import('../../base/image_processors_utils.js').ImageProcessorResult>} The processed input.\n               */\n              async _call(conversation, {\n                images = null,\n                chat_template = \"default\"\n              } = {}) {\n                if (!images) {\n                  images = await Promise.all(\n                    conversation.filter((msg) => msg.images).flatMap((msg) => msg.images).map((img) => _utils_image_js__WEBPACK_IMPORTED_MODULE_5__.RawImage.read(img))\n                  );\n                } else if (!Array.isArray(images)) {\n                  images = [images];\n                }\n                const tokenizer = this.tokenizer;\n                const result = tokenizer.apply_chat_template(conversation, {\n                  tokenize: false,\n                  add_generation_prompt: true,\n                  chat_template\n                });\n                const encode5 = (text) => tokenizer.encode(text, { add_special_tokens: false });\n                const parts = (\n                  /** @type {string} */\n                  result.split(this.image_tag)\n                );\n                const num_images = parts.length - 1;\n                if (images.length !== num_images) {\n                  throw new Error(`Number of images provided (${images.length}) does not match number of \"${this.image_tag}\" image tags (${num_images})`);\n                }\n                const [\n                  image_placeholder_tag_id,\n                  image_start_tag_id,\n                  image_end_tag_id\n                ] = tokenizer.model.convert_tokens_to_ids([\n                  this.image_tag,\n                  this.image_start_tag,\n                  this.image_end_tag\n                ]);\n                let input_ids = encode5(parts[0]);\n                let images_seq_mask = new Array(input_ids.length).fill(false);\n                for (let i = 1; i < parts.length; ++i) {\n                  const placeholder_image_tokens = new Array(this.num_image_tokens).fill(image_placeholder_tag_id);\n                  const tokens = encode5(parts[i]);\n                  input_ids = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_3__.mergeArrays)(\n                    input_ids,\n                    [image_start_tag_id],\n                    placeholder_image_tokens,\n                    [image_end_tag_id],\n                    tokens\n                  );\n                  const image_mask = new Array(this.num_image_tokens).fill(true);\n                  images_seq_mask = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_3__.mergeArrays)(\n                    images_seq_mask,\n                    [false],\n                    image_mask,\n                    [false],\n                    new Array(tokens.length).fill(false)\n                  );\n                }\n                const dims = [1, input_ids.length];\n                const final = {\n                  input_ids: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(\"int64\", input_ids, dims),\n                  attention_mask: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(\"int64\", new Array(input_ids.length).fill(1), dims),\n                  images_seq_mask: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(\"bool\", images_seq_mask, dims),\n                  images_emb_mask: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(\n                    \"bool\",\n                    new Array(num_images * this.num_image_tokens).fill(true),\n                    [1, num_images, this.num_image_tokens]\n                  )\n                };\n                if (images && images.length > 0) {\n                  const image_inputs = await this.image_processor(images);\n                  image_inputs.pixel_values.unsqueeze_(0);\n                  return { ...final, ...image_inputs };\n                }\n                return final;\n              }\n            }\n            __publicField(VLChatProcessor, \"image_processor_class\", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);\n            __publicField(VLChatProcessor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);\n            __publicField(VLChatProcessor, \"uses_processor_config\", true);\n          }\n        ),\n        /***/\n        \"./src/models/jina_clip/image_processing_jina_clip.js\": (\n          /*!************************************************************!*\\\n            !*** ./src/models/jina_clip/image_processing_jina_clip.js ***!\n            \\************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              JinaCLIPImageProcessor: () => (\n                /* binding */\n                JinaCLIPImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class JinaCLIPImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              constructor(config) {\n                const { resize_mode, fill_color, interpolation, size, ...other } = config;\n                const new_size = resize_mode === \"squash\" ? { width: size, height: size } : resize_mode === \"shortest\" ? { shortest_edge: size } : { longest_edge: size };\n                const resample2 = interpolation === \"bicubic\" ? 3 : 2;\n                super({\n                  ...other,\n                  size: new_size,\n                  resample: resample2,\n                  do_center_crop: true,\n                  crop_size: size,\n                  do_normalize: true\n                });\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/jina_clip/processing_jina_clip.js\": (\n          /*!******************************************************!*\\\n            !*** ./src/models/jina_clip/processing_jina_clip.js ***!\n            \\******************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              JinaCLIPProcessor: () => (\n                /* binding */\n                JinaCLIPProcessor\n              )\n              /* harmony export */\n            });\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../auto/image_processing_auto.js */\n              \"./src/models/auto/image_processing_auto.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            class JinaCLIPProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {\n              async _call(text = null, images = null, kwargs = {}) {\n                if (!text && !images) {\n                  throw new Error(\"Either text or images must be provided\");\n                }\n                const text_inputs = text ? this.tokenizer(text, kwargs) : {};\n                const image_inputs = images ? await this.image_processor(images, kwargs) : {};\n                return {\n                  ...text_inputs,\n                  ...image_inputs\n                };\n              }\n            }\n            __publicField(JinaCLIPProcessor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);\n            __publicField(JinaCLIPProcessor, \"image_processor_class\", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);\n          }\n        ),\n        /***/\n        \"./src/models/llava_onevision/image_processing_llava_onevision.js\": (\n          /*!************************************************************************!*\\\n            !*** ./src/models/llava_onevision/image_processing_llava_onevision.js ***!\n            \\************************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              LlavaOnevisionImageProcessor: () => (\n                /* binding */\n                LlavaOnevisionImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class LlavaOnevisionImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/mask2former/image_processing_mask2former.js\": (\n          /*!****************************************************************!*\\\n            !*** ./src/models/mask2former/image_processing_mask2former.js ***!\n            \\****************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Mask2FormerImageProcessor: () => (\n                /* binding */\n                Mask2FormerImageProcessor\n              )\n              /* harmony export */\n            });\n            var _maskformer_image_processing_maskformer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../maskformer/image_processing_maskformer.js */\n              \"./src/models/maskformer/image_processing_maskformer.js\"\n            );\n            class Mask2FormerImageProcessor extends _maskformer_image_processing_maskformer_js__WEBPACK_IMPORTED_MODULE_0__.MaskFormerImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/maskformer/image_processing_maskformer.js\": (\n          /*!**************************************************************!*\\\n            !*** ./src/models/maskformer/image_processing_maskformer.js ***!\n            \\**************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              MaskFormerFeatureExtractor: () => (\n                /* binding */\n                MaskFormerFeatureExtractor\n              ),\n              /* harmony export */\n              MaskFormerImageProcessor: () => (\n                /* binding */\n                MaskFormerImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class MaskFormerImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              /** @type {typeof post_process_panoptic_segmentation} */\n              post_process_panoptic_segmentation(...args) {\n                return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_panoptic_segmentation)(...args);\n              }\n              /** @type {typeof post_process_instance_segmentation} */\n              post_process_instance_segmentation(...args) {\n                return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_instance_segmentation)(...args);\n              }\n            }\n            class MaskFormerFeatureExtractor extends MaskFormerImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/mgp_str/processing_mgp_str.js\": (\n          /*!**************************************************!*\\\n            !*** ./src/models/mgp_str/processing_mgp_str.js ***!\n            \\**************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              MgpstrProcessor: () => (\n                /* binding */\n                MgpstrProcessor\n              )\n              /* harmony export */\n            });\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../auto/image_processing_auto.js */\n              \"./src/models/auto/image_processing_auto.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            var _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ../../utils/maths.js */\n              \"./src/utils/maths.js\"\n            );\n            const DECODE_TYPE_MAPPING = {\n              \"char\": [\"char_decode\", 1],\n              \"bpe\": [\"bpe_decode\", 2],\n              \"wp\": [\"wp_decode\", 102]\n            };\n            class MgpstrProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {\n              /**\n               * @returns {import('../../tokenizers.js').MgpstrTokenizer} The character tokenizer.\n               */\n              get char_tokenizer() {\n                return this.components.char_tokenizer;\n              }\n              /**\n               * @returns {import('../../tokenizers.js').GPT2Tokenizer} The BPE tokenizer.\n               */\n              get bpe_tokenizer() {\n                return this.components.bpe_tokenizer;\n              }\n              /**\n               * @returns {import('../../tokenizers.js').BertTokenizer} The WordPiece tokenizer.\n               */\n              get wp_tokenizer() {\n                return this.components.wp_tokenizer;\n              }\n              /**\n               * Helper function to decode the model prediction logits.\n               * @param {import('../../utils/tensor.js').Tensor} pred_logits Model prediction logits.\n               * @param {string} format Type of model prediction. Must be one of ['char', 'bpe', 'wp'].\n               * @returns {[string[], number[]]} The decoded sentences and their confidence scores.\n               */\n              _decode_helper(pred_logits, format) {\n                if (!DECODE_TYPE_MAPPING.hasOwnProperty(format)) {\n                  throw new Error(`Format ${format} is not supported.`);\n                }\n                const [decoder_name, eos_token] = DECODE_TYPE_MAPPING[format];\n                const decoder = this[decoder_name].bind(this);\n                const [batch_size, batch_max_length] = pred_logits.dims;\n                const conf_scores = [];\n                const all_ids = [];\n                const pred_logits_list = pred_logits.tolist();\n                for (let i = 0; i < batch_size; ++i) {\n                  const logits = pred_logits_list[i];\n                  const ids = [];\n                  const scores = [];\n                  for (let j = 1; j < batch_max_length; ++j) {\n                    const [max_prob, max_prob_index] = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.max)((0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.softmax)(logits[j]));\n                    scores.push(max_prob);\n                    if (max_prob_index == eos_token) {\n                      break;\n                    }\n                    ids.push(max_prob_index);\n                  }\n                  const confidence_score = scores.length > 0 ? scores.reduce((a, b) => a * b, 1) : 0;\n                  all_ids.push(ids);\n                  conf_scores.push(confidence_score);\n                }\n                const decoded = decoder(all_ids);\n                return [decoded, conf_scores];\n              }\n              /**\n               * Convert a list of lists of char token ids into a list of strings by calling char tokenizer.\n               * @param {number[][]} sequences List of tokenized input ids.\n               * @returns {string[]} The list of char decoded sentences.\n               */\n              char_decode(sequences) {\n                return this.char_tokenizer.batch_decode(sequences).map((str) => str.replaceAll(\" \", \"\"));\n              }\n              /**\n               * Convert a list of lists of BPE token ids into a list of strings by calling BPE tokenizer.\n               * @param {number[][]} sequences List of tokenized input ids.\n               * @returns {string[]} The list of BPE decoded sentences.\n               */\n              bpe_decode(sequences) {\n                return this.bpe_tokenizer.batch_decode(sequences);\n              }\n              /**\n               * Convert a list of lists of word piece token ids into a list of strings by calling word piece tokenizer.\n               * @param {number[][]} sequences List of tokenized input ids.\n               * @returns {string[]} The list of wp decoded sentences.\n               */\n              wp_decode(sequences) {\n                return this.wp_tokenizer.batch_decode(sequences).map((str) => str.replaceAll(\" \", \"\"));\n              }\n              /**\n               * Convert a list of lists of token ids into a list of strings by calling decode.\n               * @param {import('../../utils/tensor.js').Tensor[]} sequences List of tokenized input ids.\n               * @returns {{generated_text: string[], scores: number[], char_preds: string[], bpe_preds: string[], wp_preds: string[]}}\n               * Dictionary of all the outputs of the decoded results.\n               * - generated_text: The final results after fusion of char, bpe, and wp.\n               * - scores: The final scores after fusion of char, bpe, and wp.\n               * - char_preds: The list of character decoded sentences.\n               * - bpe_preds: The list of BPE decoded sentences.\n               * - wp_preds: The list of wp decoded sentences.\n               */\n              // @ts-expect-error The type of this method is not compatible with the one\n              // in the base class. It might be a good idea to fix this.\n              batch_decode([char_logits, bpe_logits, wp_logits]) {\n                const [char_preds, char_scores] = this._decode_helper(char_logits, \"char\");\n                const [bpe_preds, bpe_scores] = this._decode_helper(bpe_logits, \"bpe\");\n                const [wp_preds, wp_scores] = this._decode_helper(wp_logits, \"wp\");\n                const generated_text = [];\n                const scores = [];\n                for (let i = 0; i < char_preds.length; ++i) {\n                  const [max_score, max_score_index] = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.max)([char_scores[i], bpe_scores[i], wp_scores[i]]);\n                  generated_text.push([char_preds[i], bpe_preds[i], wp_preds[i]][max_score_index]);\n                  scores.push(max_score);\n                }\n                return {\n                  generated_text,\n                  scores,\n                  char_preds,\n                  bpe_preds,\n                  wp_preds\n                };\n              }\n              /** @type {typeof Processor.from_pretrained} */\n              static async from_pretrained(...args) {\n                const base = await super.from_pretrained(...args);\n                const bpe_tokenizer = await _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer.from_pretrained(\"Xenova/gpt2\");\n                const wp_tokenizer = await _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer.from_pretrained(\"Xenova/bert-base-uncased\");\n                base.components = {\n                  image_processor: base.image_processor,\n                  char_tokenizer: base.tokenizer,\n                  bpe_tokenizer,\n                  wp_tokenizer\n                };\n                return base;\n              }\n              async _call(images, text = null) {\n                const result = await this.image_processor(images);\n                if (text) {\n                  result.labels = this.tokenizer(text).input_ids;\n                }\n                return result;\n              }\n            }\n            __publicField(MgpstrProcessor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);\n            __publicField(MgpstrProcessor, \"image_processor_class\", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);\n          }\n        ),\n        /***/\n        \"./src/models/mobilenet_v1/image_processing_mobilenet_v1.js\": (\n          /*!******************************************************************!*\\\n            !*** ./src/models/mobilenet_v1/image_processing_mobilenet_v1.js ***!\n            \\******************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              MobileNetV1FeatureExtractor: () => (\n                /* binding */\n                MobileNetV1FeatureExtractor\n              ),\n              /* harmony export */\n              MobileNetV1ImageProcessor: () => (\n                /* binding */\n                MobileNetV1ImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class MobileNetV1ImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n            class MobileNetV1FeatureExtractor extends MobileNetV1ImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/mobilenet_v2/image_processing_mobilenet_v2.js\": (\n          /*!******************************************************************!*\\\n            !*** ./src/models/mobilenet_v2/image_processing_mobilenet_v2.js ***!\n            \\******************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              MobileNetV2FeatureExtractor: () => (\n                /* binding */\n                MobileNetV2FeatureExtractor\n              ),\n              /* harmony export */\n              MobileNetV2ImageProcessor: () => (\n                /* binding */\n                MobileNetV2ImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class MobileNetV2ImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n            class MobileNetV2FeatureExtractor extends MobileNetV2ImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/mobilenet_v3/image_processing_mobilenet_v3.js\": (\n          /*!******************************************************************!*\\\n            !*** ./src/models/mobilenet_v3/image_processing_mobilenet_v3.js ***!\n            \\******************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              MobileNetV3FeatureExtractor: () => (\n                /* binding */\n                MobileNetV3FeatureExtractor\n              ),\n              /* harmony export */\n              MobileNetV3ImageProcessor: () => (\n                /* binding */\n                MobileNetV3ImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class MobileNetV3ImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n            class MobileNetV3FeatureExtractor extends MobileNetV3ImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/mobilenet_v4/image_processing_mobilenet_v4.js\": (\n          /*!******************************************************************!*\\\n            !*** ./src/models/mobilenet_v4/image_processing_mobilenet_v4.js ***!\n            \\******************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              MobileNetV4FeatureExtractor: () => (\n                /* binding */\n                MobileNetV4FeatureExtractor\n              ),\n              /* harmony export */\n              MobileNetV4ImageProcessor: () => (\n                /* binding */\n                MobileNetV4ImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class MobileNetV4ImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n            class MobileNetV4FeatureExtractor extends MobileNetV4ImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/mobilevit/image_processing_mobilevit.js\": (\n          /*!************************************************************!*\\\n            !*** ./src/models/mobilevit/image_processing_mobilevit.js ***!\n            \\************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              MobileViTFeatureExtractor: () => (\n                /* binding */\n                MobileViTFeatureExtractor\n              ),\n              /* harmony export */\n              MobileViTImageProcessor: () => (\n                /* binding */\n                MobileViTImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class MobileViTImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n            class MobileViTFeatureExtractor extends MobileViTImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/moonshine/feature_extraction_moonshine.js\": (\n          /*!**************************************************************!*\\\n            !*** ./src/models/moonshine/feature_extraction_moonshine.js ***!\n            \\**************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              MoonshineFeatureExtractor: () => (\n                /* binding */\n                MoonshineFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/feature_extraction_utils.js */\n              \"./src/base/feature_extraction_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            class MoonshineFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {\n              /**\n               * Asynchronously extracts input values from a given audio using the provided configuration.\n               * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n               * @returns {Promise<{ input_values: Tensor; }>} The extracted input values.\n               */\n              async _call(audio) {\n                (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, \"MoonshineFeatureExtractor\");\n                if (audio instanceof Float64Array) {\n                  audio = new Float32Array(audio);\n                }\n                const shape = [\n                  1,\n                  /* batch_size */\n                  audio.length\n                  /* num_samples */\n                ];\n                return {\n                  input_values: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\"float32\", audio, shape)\n                };\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/moonshine/processing_moonshine.js\": (\n          /*!******************************************************!*\\\n            !*** ./src/models/moonshine/processing_moonshine.js ***!\n            \\******************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              MoonshineProcessor: () => (\n                /* binding */\n                MoonshineProcessor\n              )\n              /* harmony export */\n            });\n            var _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../auto/feature_extraction_auto.js */\n              \"./src/models/auto/feature_extraction_auto.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            class MoonshineProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__.Processor {\n              /**\n               * Calls the feature_extractor function with the given audio input.\n               * @param {any} audio The audio input to extract features from.\n               * @returns {Promise<any>} A Promise that resolves with the extracted features.\n               */\n              async _call(audio) {\n                return await this.feature_extractor(audio);\n              }\n            }\n            __publicField(MoonshineProcessor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__.AutoTokenizer);\n            __publicField(MoonshineProcessor, \"feature_extractor_class\", _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_0__.AutoFeatureExtractor);\n          }\n        ),\n        /***/\n        \"./src/models/nougat/image_processing_nougat.js\": (\n          /*!******************************************************!*\\\n            !*** ./src/models/nougat/image_processing_nougat.js ***!\n            \\******************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              NougatImageProcessor: () => (\n                /* binding */\n                NougatImageProcessor\n              )\n              /* harmony export */\n            });\n            var _donut_image_processing_donut_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../donut/image_processing_donut.js */\n              \"./src/models/donut/image_processing_donut.js\"\n            );\n            class NougatImageProcessor extends _donut_image_processing_donut_js__WEBPACK_IMPORTED_MODULE_0__.DonutImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/owlv2/image_processing_owlv2.js\": (\n          /*!****************************************************!*\\\n            !*** ./src/models/owlv2/image_processing_owlv2.js ***!\n            \\****************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Owlv2ImageProcessor: () => (\n                /* binding */\n                Owlv2ImageProcessor\n              )\n              /* harmony export */\n            });\n            var _owlvit_image_processing_owlvit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../owlvit/image_processing_owlvit.js */\n              \"./src/models/owlvit/image_processing_owlvit.js\"\n            );\n            class Owlv2ImageProcessor extends _owlvit_image_processing_owlvit_js__WEBPACK_IMPORTED_MODULE_0__.OwlViTImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/owlvit/image_processing_owlvit.js\": (\n          /*!******************************************************!*\\\n            !*** ./src/models/owlvit/image_processing_owlvit.js ***!\n            \\******************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              OwlViTFeatureExtractor: () => (\n                /* binding */\n                OwlViTFeatureExtractor\n              ),\n              /* harmony export */\n              OwlViTImageProcessor: () => (\n                /* binding */\n                OwlViTImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class OwlViTImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              /** @type {typeof post_process_object_detection} */\n              post_process_object_detection(...args) {\n                return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_object_detection)(...args);\n              }\n            }\n            class OwlViTFeatureExtractor extends OwlViTImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/owlvit/processing_owlvit.js\": (\n          /*!************************************************!*\\\n            !*** ./src/models/owlvit/processing_owlvit.js ***!\n            \\************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              OwlViTProcessor: () => (\n                /* binding */\n                OwlViTProcessor\n              )\n              /* harmony export */\n            });\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../auto/image_processing_auto.js */\n              \"./src/models/auto/image_processing_auto.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            class OwlViTProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {\n            }\n            __publicField(OwlViTProcessor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);\n            __publicField(OwlViTProcessor, \"image_processor_class\", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);\n          }\n        ),\n        /***/\n        \"./src/models/paligemma/processing_paligemma.js\": (\n          /*!******************************************************!*\\\n            !*** ./src/models/paligemma/processing_paligemma.js ***!\n            \\******************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              PaliGemmaProcessor: () => (\n                /* binding */\n                PaliGemmaProcessor\n              )\n              /* harmony export */\n            });\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../auto/image_processing_auto.js */\n              \"./src/models/auto/image_processing_auto.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            const IMAGE_TOKEN = \"<image>\";\n            function build_string_from_input(prompt, bos_token, image_seq_len, image_token, num_images) {\n              return `${image_token.repeat(image_seq_len * num_images)}${bos_token}${prompt}\n`;\n            }\n            class PaliGemmaProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {\n              /**\n               * @typedef {import('../../utils/image.js').RawImage} RawImage\n               */\n              // `images` is required, `text` is optional\n              async _call(images, text = null, kwargs = {}) {\n                if (!text) {\n                  console.warn(\n                    \"You are using PaliGemma without a text prefix. It will perform as a picture-captioning model.\"\n                  );\n                  text = \"\";\n                }\n                if (!Array.isArray(images)) {\n                  images = [images];\n                }\n                if (!Array.isArray(text)) {\n                  text = [text];\n                }\n                const bos_token = this.tokenizer.bos_token;\n                const image_seq_length = this.image_processor.config.image_seq_length;\n                let input_strings;\n                if (text.some((t) => t.includes(IMAGE_TOKEN))) {\n                  input_strings = text.map(\n                    (sample) => {\n                      const expanded_sample = sample.replaceAll(IMAGE_TOKEN, IMAGE_TOKEN.repeat(image_seq_length));\n                      const bos_rfind_index = expanded_sample.lastIndexOf(IMAGE_TOKEN);\n                      const bos_index = bos_rfind_index === -1 ? 0 : bos_rfind_index + IMAGE_TOKEN.length;\n                      return expanded_sample.slice(0, bos_index) + bos_token + expanded_sample.slice(bos_index) + \"\\n\";\n                    }\n                  );\n                } else {\n                  console.warn(\n                    \"You are passing both `text` and `images` to `PaliGemmaProcessor`. The processor expects special image tokens in the text, as many tokens as there are images per each text. It is recommended to add `<image>` tokens in the very beginning of your text. For this call, we will infer how many images each text has and add special tokens.\"\n                  );\n                  input_strings = text.map(\n                    (sample) => build_string_from_input(\n                      sample,\n                      bos_token,\n                      image_seq_length,\n                      IMAGE_TOKEN,\n                      images.length\n                    )\n                  );\n                }\n                const text_inputs = this.tokenizer(input_strings, kwargs);\n                const image_inputs = await this.image_processor(images, kwargs);\n                return {\n                  ...image_inputs,\n                  ...text_inputs\n                };\n              }\n            }\n            __publicField(PaliGemmaProcessor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);\n            __publicField(PaliGemmaProcessor, \"image_processor_class\", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);\n            __publicField(PaliGemmaProcessor, \"uses_processor_config\", false);\n          }\n        ),\n        /***/\n        \"./src/models/phi3_v/image_processing_phi3_v.js\": (\n          /*!******************************************************!*\\\n            !*** ./src/models/phi3_v/image_processing_phi3_v.js ***!\n            \\******************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Phi3VImageProcessor: () => (\n                /* binding */\n                Phi3VImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            const IMAGE_SIZE = 336;\n            const SLICE_AXES = [2, 3];\n            const { ceil, floor, sqrt } = Math;\n            class Phi3VImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              constructor(config) {\n                super({\n                  ...config,\n                  do_normalize: true,\n                  do_pad: true,\n                  pad_size: \"custom\",\n                  do_convert_rgb: true,\n                  do_resize: true\n                  // Smart resizing \"hd_transform\"\n                });\n                this._num_crops = config.num_crops;\n              }\n              calc_num_image_tokens_from_image_size(width, height) {\n                const { num_img_tokens } = this.config;\n                return floor((floor(height / IMAGE_SIZE) * floor(width / IMAGE_SIZE) + 1) * num_img_tokens + 1 + (floor(height / IMAGE_SIZE) + 1) * sqrt(num_img_tokens));\n              }\n              /** @type {ImageProcessor['get_resize_output_image_size']} */\n              get_resize_output_image_size(image, size) {\n                const hd_num = this._num_crops;\n                const [width, height] = image.size;\n                let ratio = width / height;\n                let scale = 1;\n                while (scale * Math.ceil(scale / ratio) <= hd_num) {\n                  scale += 1;\n                }\n                scale -= 1;\n                const new_w = Math.floor(scale * 336);\n                const new_h = Math.floor(new_w / ratio);\n                return [new_w, new_h];\n              }\n              /** @type {ImageProcessor['pad_image']} */\n              pad_image(pixelData, imgDims, padSize, options = {}) {\n                const [imageHeight, imageWidth] = imgDims;\n                const height = IMAGE_SIZE * ceil(imageHeight / IMAGE_SIZE);\n                const width = IMAGE_SIZE * ceil(imageWidth / IMAGE_SIZE);\n                const constant_values = [1, 1, 1].map((x, i) => (x - this.image_mean[i]) / this.image_std[i]);\n                return super.pad_image(pixelData, imgDims, { width, height }, {\n                  center: true,\n                  constant_values,\n                  ...options\n                });\n              }\n              async _call(images, {\n                num_crops = null\n              } = {}) {\n                this._num_crops = num_crops ?? (num_crops = this.config.num_crops);\n                if (num_crops < 4 || sqrt(num_crops) % 1 !== 0) {\n                  throw new Error(\"num_crops must be a square number >= 4\");\n                }\n                if (!Array.isArray(images)) {\n                  images = [images];\n                }\n                const num_images = images.length;\n                const imageData = await Promise.all(images.map((x) => this.preprocess(x)));\n                const original_sizes = imageData.map((x) => x.original_size);\n                const reshaped_input_sizes = imageData.map((x) => x.reshaped_input_size);\n                const all_pixel_values = [];\n                for (const { pixel_values: pixel_values2 } of imageData) {\n                  pixel_values2.unsqueeze_(0);\n                  const [height, width] = pixel_values2.dims.slice(-2);\n                  const batch_pixel_values = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.interpolate_4d)(pixel_values2, {\n                    size: [IMAGE_SIZE, IMAGE_SIZE],\n                    mode: \"bicubic\"\n                  });\n                  if (num_crops > 0) {\n                    const patches = [];\n                    const sqrt_patches = sqrt(num_crops);\n                    const patch_width = floor(width / sqrt_patches);\n                    const patch_height = floor(height / sqrt_patches);\n                    for (let y = 0; y < sqrt_patches; ++y) {\n                      for (let x = 0; x < sqrt_patches; ++x) {\n                        let start_x, start_y, end_x, end_y;\n                        if (y === sqrt_patches - 1) {\n                          start_y = height - patch_height;\n                          end_y = height;\n                        } else {\n                          start_y = y * patch_height;\n                          end_y = (y + 1) * patch_height;\n                        }\n                        if (x === sqrt_patches - 1) {\n                          start_x = width - patch_width;\n                          end_x = width;\n                        } else {\n                          start_x = x * patch_width;\n                          end_x = (x + 1) * patch_width;\n                        }\n                        const starts = [start_y, start_x];\n                        const ends = [end_y, end_x];\n                        const patch = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.slice)(pixel_values2, starts, ends, SLICE_AXES);\n                        patches.push(patch);\n                      }\n                    }\n                    const resized_tensors = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.interpolate_4d)((0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.cat)(patches, 0), {\n                      size: [IMAGE_SIZE, IMAGE_SIZE],\n                      mode: \"bicubic\"\n                    });\n                    all_pixel_values.push((0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.cat)([batch_pixel_values, resized_tensors], 0));\n                  } else {\n                    all_pixel_values.push(batch_pixel_values);\n                  }\n                }\n                const pixel_values = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.stack)(all_pixel_values, 0);\n                const sizes = reshaped_input_sizes.map((x) => x.map((y) => IMAGE_SIZE * ceil(y / IMAGE_SIZE)));\n                const image_sizes = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\n                  \"int64\",\n                  sizes.flat(),\n                  [num_images, 2]\n                );\n                const num_img_tokens = sizes.map(\n                  ([height, width]) => this.calc_num_image_tokens_from_image_size(width, height)\n                );\n                return { pixel_values, original_sizes, reshaped_input_sizes, image_sizes, num_img_tokens };\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/phi3_v/processing_phi3_v.js\": (\n          /*!************************************************!*\\\n            !*** ./src/models/phi3_v/processing_phi3_v.js ***!\n            \\************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Phi3VProcessor: () => (\n                /* binding */\n                Phi3VProcessor\n              )\n              /* harmony export */\n            });\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../auto/image_processing_auto.js */\n              \"./src/models/auto/image_processing_auto.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            var _utils_image_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ../../utils/image.js */\n              \"./src/utils/image.js\"\n            );\n            const IMAGE_TOKEN = \"<|image|>\";\n            const IMAGE_TOKEN_PATTERN = /<\\|image_\\d+\\|>/g;\n            class Phi3VProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {\n              /**\n               * \n               * @param {string|string[]} text \n               * @param {RawImage|RawImage[]} images \n               * @param  { { padding?: boolean, truncation?: boolean, num_crops?: number } | undefined } options\n               * @returns {Promise<any>}\n               */\n              async _call(text, images = null, {\n                padding = true,\n                truncation = true,\n                num_crops = null\n              } = {}) {\n                if (!Array.isArray(text)) {\n                  text = [text];\n                }\n                let text_inputs, image_inputs;\n                if (images) {\n                  image_inputs = await this.image_processor(images, { num_crops });\n                  const { num_img_tokens } = image_inputs;\n                  const prompt_chunks = text.map((t, i) => t.split(IMAGE_TOKEN_PATTERN).join(IMAGE_TOKEN.repeat(num_img_tokens[i])));\n                  text_inputs = this.tokenizer(prompt_chunks, { padding, truncation });\n                  const image_token_id = this.tokenizer.model.convert_tokens_to_ids([IMAGE_TOKEN])[0];\n                  text_inputs.input_ids.map_((id2) => id2 == image_token_id ? -id2 : id2);\n                } else {\n                  text_inputs = this.tokenizer(text);\n                }\n                return {\n                  ...text_inputs,\n                  ...image_inputs\n                };\n              }\n            }\n            __publicField(Phi3VProcessor, \"image_processor_class\", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);\n            __publicField(Phi3VProcessor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);\n          }\n        ),\n        /***/\n        \"./src/models/processors.js\": (\n          /*!**********************************!*\\\n            !*** ./src/models/processors.js ***!\n            \\**********************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Florence2Processor: () => (\n                /* reexport safe */\n                _florence2_processing_florence2_js__WEBPACK_IMPORTED_MODULE_0__.Florence2Processor\n              ),\n              /* harmony export */\n              GroundingDinoProcessor: () => (\n                /* reexport safe */\n                _grounding_dino_processing_grounding_dino_js__WEBPACK_IMPORTED_MODULE_1__.GroundingDinoProcessor\n              ),\n              /* harmony export */\n              Idefics3Processor: () => (\n                /* reexport safe */\n                _idefics3_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_2__.Idefics3Processor\n              ),\n              /* harmony export */\n              JinaCLIPProcessor: () => (\n                /* reexport safe */\n                _jina_clip_processing_jina_clip_js__WEBPACK_IMPORTED_MODULE_4__.JinaCLIPProcessor\n              ),\n              /* harmony export */\n              MgpstrProcessor: () => (\n                /* reexport safe */\n                _mgp_str_processing_mgp_str_js__WEBPACK_IMPORTED_MODULE_5__.MgpstrProcessor\n              ),\n              /* harmony export */\n              MoonshineProcessor: () => (\n                /* reexport safe */\n                _moonshine_processing_moonshine_js__WEBPACK_IMPORTED_MODULE_6__.MoonshineProcessor\n              ),\n              /* harmony export */\n              OwlViTProcessor: () => (\n                /* reexport safe */\n                _owlvit_processing_owlvit_js__WEBPACK_IMPORTED_MODULE_7__.OwlViTProcessor\n              ),\n              /* harmony export */\n              PaliGemmaProcessor: () => (\n                /* reexport safe */\n                _paligemma_processing_paligemma_js__WEBPACK_IMPORTED_MODULE_9__.PaliGemmaProcessor\n              ),\n              /* harmony export */\n              Phi3VProcessor: () => (\n                /* reexport safe */\n                _phi3_v_processing_phi3_v_js__WEBPACK_IMPORTED_MODULE_8__.Phi3VProcessor\n              ),\n              /* harmony export */\n              PyAnnoteProcessor: () => (\n                /* reexport safe */\n                _pyannote_processing_pyannote_js__WEBPACK_IMPORTED_MODULE_10__.PyAnnoteProcessor\n              ),\n              /* harmony export */\n              Qwen2VLProcessor: () => (\n                /* reexport safe */\n                _qwen2_vl_processing_qwen2_vl_js__WEBPACK_IMPORTED_MODULE_11__.Qwen2VLProcessor\n              ),\n              /* harmony export */\n              SamProcessor: () => (\n                /* reexport safe */\n                _sam_processing_sam_js__WEBPACK_IMPORTED_MODULE_12__.SamProcessor\n              ),\n              /* harmony export */\n              SmolVLMProcessor: () => (\n                /* reexport safe */\n                _smolvlm_processing_smolvlm_js__WEBPACK_IMPORTED_MODULE_13__.SmolVLMProcessor\n              ),\n              /* harmony export */\n              SpeechT5Processor: () => (\n                /* reexport safe */\n                _speecht5_processing_speecht5_js__WEBPACK_IMPORTED_MODULE_14__.SpeechT5Processor\n              ),\n              /* harmony export */\n              UltravoxProcessor: () => (\n                /* reexport safe */\n                _ultravox_processing_ultravox_js__WEBPACK_IMPORTED_MODULE_15__.UltravoxProcessor\n              ),\n              /* harmony export */\n              VLChatProcessor: () => (\n                /* reexport safe */\n                _janus_processing_janus_js__WEBPACK_IMPORTED_MODULE_3__.VLChatProcessor\n              ),\n              /* harmony export */\n              Wav2Vec2Processor: () => (\n                /* reexport safe */\n                _wav2vec2_processing_wav2vec2_js__WEBPACK_IMPORTED_MODULE_16__.Wav2Vec2Processor\n              ),\n              /* harmony export */\n              Wav2Vec2ProcessorWithLM: () => (\n                /* reexport safe */\n                _wav2vec2_with_lm_processing_wav2vec2_with_lm_js__WEBPACK_IMPORTED_MODULE_17__.Wav2Vec2ProcessorWithLM\n              ),\n              /* harmony export */\n              WhisperProcessor: () => (\n                /* reexport safe */\n                _whisper_processing_whisper_js__WEBPACK_IMPORTED_MODULE_18__.WhisperProcessor\n              )\n              /* harmony export */\n            });\n            var _florence2_processing_florence2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ./florence2/processing_florence2.js */\n              \"./src/models/florence2/processing_florence2.js\"\n            );\n            var _grounding_dino_processing_grounding_dino_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ./grounding_dino/processing_grounding_dino.js */\n              \"./src/models/grounding_dino/processing_grounding_dino.js\"\n            );\n            var _idefics3_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ./idefics3/processing_idefics3.js */\n              \"./src/models/idefics3/processing_idefics3.js\"\n            );\n            var _janus_processing_janus_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ./janus/processing_janus.js */\n              \"./src/models/janus/processing_janus.js\"\n            );\n            var _jina_clip_processing_jina_clip_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(\n              /*! ./jina_clip/processing_jina_clip.js */\n              \"./src/models/jina_clip/processing_jina_clip.js\"\n            );\n            var _mgp_str_processing_mgp_str_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(\n              /*! ./mgp_str/processing_mgp_str.js */\n              \"./src/models/mgp_str/processing_mgp_str.js\"\n            );\n            var _moonshine_processing_moonshine_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(\n              /*! ./moonshine/processing_moonshine.js */\n              \"./src/models/moonshine/processing_moonshine.js\"\n            );\n            var _owlvit_processing_owlvit_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(\n              /*! ./owlvit/processing_owlvit.js */\n              \"./src/models/owlvit/processing_owlvit.js\"\n            );\n            var _phi3_v_processing_phi3_v_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(\n              /*! ./phi3_v/processing_phi3_v.js */\n              \"./src/models/phi3_v/processing_phi3_v.js\"\n            );\n            var _paligemma_processing_paligemma_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(\n              /*! ./paligemma/processing_paligemma.js */\n              \"./src/models/paligemma/processing_paligemma.js\"\n            );\n            var _pyannote_processing_pyannote_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(\n              /*! ./pyannote/processing_pyannote.js */\n              \"./src/models/pyannote/processing_pyannote.js\"\n            );\n            var _qwen2_vl_processing_qwen2_vl_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(\n              /*! ./qwen2_vl/processing_qwen2_vl.js */\n              \"./src/models/qwen2_vl/processing_qwen2_vl.js\"\n            );\n            var _sam_processing_sam_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(\n              /*! ./sam/processing_sam.js */\n              \"./src/models/sam/processing_sam.js\"\n            );\n            var _smolvlm_processing_smolvlm_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__2(\n              /*! ./smolvlm/processing_smolvlm.js */\n              \"./src/models/smolvlm/processing_smolvlm.js\"\n            );\n            var _speecht5_processing_speecht5_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__2(\n              /*! ./speecht5/processing_speecht5.js */\n              \"./src/models/speecht5/processing_speecht5.js\"\n            );\n            var _ultravox_processing_ultravox_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__2(\n              /*! ./ultravox/processing_ultravox.js */\n              \"./src/models/ultravox/processing_ultravox.js\"\n            );\n            var _wav2vec2_processing_wav2vec2_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__2(\n              /*! ./wav2vec2/processing_wav2vec2.js */\n              \"./src/models/wav2vec2/processing_wav2vec2.js\"\n            );\n            var _wav2vec2_with_lm_processing_wav2vec2_with_lm_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__2(\n              /*! ./wav2vec2_with_lm/processing_wav2vec2_with_lm.js */\n              \"./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js\"\n            );\n            var _whisper_processing_whisper_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__2(\n              /*! ./whisper/processing_whisper.js */\n              \"./src/models/whisper/processing_whisper.js\"\n            );\n          }\n        ),\n        /***/\n        \"./src/models/pvt/image_processing_pvt.js\": (\n          /*!************************************************!*\\\n            !*** ./src/models/pvt/image_processing_pvt.js ***!\n            \\************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              PvtImageProcessor: () => (\n                /* binding */\n                PvtImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class PvtImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/pyannote/feature_extraction_pyannote.js\": (\n          /*!************************************************************!*\\\n            !*** ./src/models/pyannote/feature_extraction_pyannote.js ***!\n            \\************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              PyAnnoteFeatureExtractor: () => (\n                /* binding */\n                PyAnnoteFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/feature_extraction_utils.js */\n              \"./src/base/feature_extraction_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../utils/maths.js */\n              \"./src/utils/maths.js\"\n            );\n            class PyAnnoteFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {\n              /**\n               * Asynchronously extracts features from a given audio using the provided configuration.\n               * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n               * @returns {Promise<{ input_values: Tensor; }>} The extracted input features.\n               */\n              async _call(audio) {\n                (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, \"PyAnnoteFeatureExtractor\");\n                if (audio instanceof Float64Array) {\n                  audio = new Float32Array(audio);\n                }\n                const shape = [\n                  1,\n                  /* batch_size */\n                  1,\n                  /* num_channels */\n                  audio.length\n                  /* num_samples */\n                ];\n                return {\n                  input_values: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\"float32\", audio, shape)\n                };\n              }\n              /**\n               * NOTE: Can return fractional values. `Math.ceil` will ensure correct value.\n               * @param {number} samples The number of frames in the audio.\n               * @returns {number} The number of frames in the audio.\n               */\n              samples_to_frames(samples) {\n                return (samples - this.config.offset) / this.config.step;\n              }\n              /**\n               * Post-processes the speaker diarization logits output by the model.\n               * @param {import('../../utils/tensor.js').Tensor} logits The speaker diarization logits output by the model.\n               * @param {number} num_samples Number of samples in the input audio.\n               * @returns {Array<Array<{ id: number, start: number, end: number, confidence: number }>>} The post-processed speaker diarization results.\n               */\n              post_process_speaker_diarization(logits, num_samples) {\n                const ratio = num_samples / this.samples_to_frames(num_samples) / this.config.sampling_rate;\n                const results = [];\n                for (const scores of logits.tolist()) {\n                  const accumulated_segments = [];\n                  let current_speaker = -1;\n                  for (let i = 0; i < scores.length; ++i) {\n                    const probabilities = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.softmax)(scores[i]);\n                    const [score, id2] = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.max)(probabilities);\n                    const [start, end] = [i, i + 1];\n                    if (id2 !== current_speaker) {\n                      current_speaker = id2;\n                      accumulated_segments.push({ id: id2, start, end, score });\n                    } else {\n                      accumulated_segments.at(-1).end = end;\n                      accumulated_segments.at(-1).score += score;\n                    }\n                  }\n                  results.push(accumulated_segments.map(\n                    // Convert frame-space to time-space\n                    // and compute the confidence\n                    ({ id: id2, start, end, score }) => ({\n                      id: id2,\n                      start: start * ratio,\n                      end: end * ratio,\n                      confidence: score / (end - start)\n                    })\n                  ));\n                }\n                return results;\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/pyannote/processing_pyannote.js\": (\n          /*!****************************************************!*\\\n            !*** ./src/models/pyannote/processing_pyannote.js ***!\n            \\****************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              PyAnnoteProcessor: () => (\n                /* binding */\n                PyAnnoteProcessor\n              )\n              /* harmony export */\n            });\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _feature_extraction_pyannote_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ./feature_extraction_pyannote.js */\n              \"./src/models/pyannote/feature_extraction_pyannote.js\"\n            );\n            class PyAnnoteProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {\n              /**\n               * Calls the feature_extractor function with the given audio input.\n               * @param {any} audio The audio input to extract features from.\n               * @returns {Promise<any>} A Promise that resolves with the extracted features.\n               */\n              async _call(audio) {\n                return await this.feature_extractor(audio);\n              }\n              /** @type {PyAnnoteFeatureExtractor['post_process_speaker_diarization']} */\n              post_process_speaker_diarization(...args) {\n                return (\n                  /** @type {PyAnnoteFeatureExtractor} */\n                  this.feature_extractor.post_process_speaker_diarization(...args)\n                );\n              }\n              get sampling_rate() {\n                return this.feature_extractor.config.sampling_rate;\n              }\n            }\n            __publicField(PyAnnoteProcessor, \"feature_extractor_class\", _feature_extraction_pyannote_js__WEBPACK_IMPORTED_MODULE_1__.PyAnnoteFeatureExtractor);\n          }\n        ),\n        /***/\n        \"./src/models/qwen2_vl/image_processing_qwen2_vl.js\": (\n          /*!**********************************************************!*\\\n            !*** ./src/models/qwen2_vl/image_processing_qwen2_vl.js ***!\n            \\**********************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Qwen2VLImageProcessor: () => (\n                /* binding */\n                Qwen2VLImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            class Qwen2VLImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              async _call(images, ...args) {\n                const { pixel_values, original_sizes, reshaped_input_sizes } = await super._call(images, ...args);\n                let patches = pixel_values;\n                const { temporal_patch_size, merge_size, patch_size } = this.config;\n                if (patches.dims[0] === 1) {\n                  patches = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.cat)(Array.from({ length: temporal_patch_size }, () => patches), 0);\n                }\n                const grid_t = patches.dims[0] / temporal_patch_size;\n                const channel = patches.dims[1];\n                const grid_h = Math.floor(patches.dims[2] / patch_size);\n                const grid_w = Math.floor(patches.dims[3] / patch_size);\n                const flatten_patches = patches.view(\n                  grid_t,\n                  temporal_patch_size,\n                  channel,\n                  Math.floor(grid_h / merge_size),\n                  merge_size,\n                  patch_size,\n                  Math.floor(grid_w / merge_size),\n                  merge_size,\n                  patch_size\n                ).permute(0, 3, 6, 4, 7, 2, 1, 5, 8).view(\n                  grid_t * grid_h * grid_w,\n                  channel * temporal_patch_size * patch_size * patch_size\n                );\n                const image_grid_thw = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\"int64\", [grid_t, grid_h, grid_w], [1, 3]);\n                return {\n                  pixel_values: flatten_patches,\n                  image_grid_thw,\n                  original_sizes,\n                  reshaped_input_sizes\n                };\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/qwen2_vl/processing_qwen2_vl.js\": (\n          /*!****************************************************!*\\\n            !*** ./src/models/qwen2_vl/processing_qwen2_vl.js ***!\n            \\****************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Qwen2VLProcessor: () => (\n                /* binding */\n                Qwen2VLProcessor\n              )\n              /* harmony export */\n            });\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../auto/image_processing_auto.js */\n              \"./src/models/auto/image_processing_auto.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            var _utils_image_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ../../utils/image.js */\n              \"./src/utils/image.js\"\n            );\n            class Qwen2VLProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {\n              /**\n               * \n               * @param {string|string[]} text \n               * @param {RawImage|RawImage[]} images \n               * @param  {...any} args \n               * @returns {Promise<any>}\n               */\n              async _call(text, images = null, ...args) {\n                if (!Array.isArray(text)) {\n                  text = [text];\n                }\n                let image_inputs, image_grid_thw;\n                if (images) {\n                  image_inputs = await this.image_processor(images);\n                  image_grid_thw = image_inputs.image_grid_thw;\n                }\n                if (image_grid_thw) {\n                  let merge_length = this.image_processor.config.merge_size ** 2;\n                  let index = 0;\n                  const image_grid_thw_list = image_grid_thw.tolist();\n                  text = text.map((t) => {\n                    while (t.includes(\"<|image_pad|>\")) {\n                      const prod = Number(image_grid_thw_list[index++].reduce((a, b) => a * b, 1n));\n                      t = t.replace(\"<|image_pad|>\", \"<|placeholder|>\".repeat(Math.floor(prod / merge_length)));\n                    }\n                    return t.replaceAll(\"<|placeholder|>\", \"<|image_pad|>\");\n                  });\n                }\n                const text_inputs = this.tokenizer(text);\n                return {\n                  ...text_inputs,\n                  ...image_inputs\n                  // TODO: ...videos_inputs,\n                };\n              }\n            }\n            __publicField(Qwen2VLProcessor, \"image_processor_class\", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);\n            __publicField(Qwen2VLProcessor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);\n          }\n        ),\n        /***/\n        \"./src/models/rt_detr/image_processing_rt_detr.js\": (\n          /*!********************************************************!*\\\n            !*** ./src/models/rt_detr/image_processing_rt_detr.js ***!\n            \\********************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              RTDetrImageProcessor: () => (\n                /* binding */\n                RTDetrImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class RTDetrImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              /** @type {typeof post_process_object_detection} */\n              post_process_object_detection(...args) {\n                return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_object_detection)(...args);\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/sam/image_processing_sam.js\": (\n          /*!************************************************!*\\\n            !*** ./src/models/sam/image_processing_sam.js ***!\n            \\************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              SamImageProcessor: () => (\n                /* binding */\n                SamImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            var _utils_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/core.js */\n              \"./src/utils/core.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            class SamImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              /**\n               * \n               * @param {any} input_points \n               * @param {import(\"../../base/image_processors_utils.js\").HeightWidth[]} original_sizes \n               * @param {import(\"../../base/image_processors_utils.js\").HeightWidth[]} reshaped_input_sizes \n               * @returns {Tensor}\n               */\n              reshape_input_points(input_points, original_sizes, reshaped_input_sizes, is_bounding_box = false) {\n                input_points = structuredClone(input_points);\n                let shape = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.calculateDimensions)(input_points);\n                if (shape.length === 3) {\n                  if (!is_bounding_box) {\n                    shape = [1, ...shape];\n                  }\n                  input_points = [input_points];\n                } else if (shape.length !== 4) {\n                  throw Error(\"The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.\");\n                }\n                for (let i = 0; i < input_points.length; ++i) {\n                  let originalImageSize = original_sizes[i];\n                  let reshapedImageSize = reshaped_input_sizes[i];\n                  let resizeFactors = [\n                    reshapedImageSize[0] / originalImageSize[0],\n                    reshapedImageSize[1] / originalImageSize[1]\n                  ];\n                  for (let j = 0; j < input_points[i].length; ++j) {\n                    for (let k2 = 0; k2 < input_points[i][j].length; ++k2) {\n                      for (let w = 0; w < input_points[i][j][k2].length; ++w) {\n                        input_points[i][j][k2][w] *= resizeFactors[w % 2];\n                      }\n                    }\n                  }\n                }\n                return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_2__.Tensor(\n                  \"float32\",\n                  Float32Array.from(input_points.flat(Infinity)),\n                  shape\n                );\n              }\n              /**\n               * \n               * @param {any} input_labels \n               * @param {Tensor} input_points \n               * @returns {Tensor}\n               */\n              add_input_labels(input_labels, input_points) {\n                let shape = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.calculateDimensions)(input_labels);\n                if (shape.length === 2) {\n                  shape = [1, ...shape];\n                  input_labels = [input_labels];\n                } else if (shape.length !== 3) {\n                  throw Error(\"The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.\");\n                }\n                if (shape.some((x, i) => x !== input_points.dims[i])) {\n                  throw Error(`The first ${shape.length} dimensions of 'input_points' and 'input_labels' must be the same.`);\n                }\n                return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_2__.Tensor(\n                  \"int64\",\n                  input_labels.flat(Infinity).map(BigInt),\n                  shape\n                );\n              }\n              /**\n               * @param {any[]} images The URL(s) of the image(s) to extract features from.\n               * @param {Object} [options] Additional options for the processor.\n               * @param {any} [options.input_points=null] A 3D or 4D array, representing the input points provided by the user.\n               * - 3D: `[point_batch_size, nb_points_per_image, 2]`. In this case, `batch_size` is assumed to be 1.\n               * - 4D: `[batch_size, point_batch_size, nb_points_per_image, 2]`.\n               * @param {any} [options.input_labels=null] A 2D or 3D array, representing the input labels for the points, used by the prompt encoder to encode the prompt.\n               * - 2D: `[point_batch_size, nb_points_per_image]`. In this case, `batch_size` is assumed to be 1.\n               * - 3D: `[batch_size, point_batch_size, nb_points_per_image]`.\n               * @param {number[][][]} [options.input_boxes=null] A 3D array of shape `(batch_size, num_boxes, 4)`, representing the input boxes provided by the user.\n               * This is used by the prompt encoder to encode the prompt. Generally yields to much better generated masks.\n               * The processor will generate a tensor, with each dimension corresponding respectively to the image batch size,\n               * the number of boxes per image and the coordinates of the top left and botton right point of the box.\n               * In the order (`x1`, `y1`, `x2`, `y2`):\n               * - `x1`: the x coordinate of the top left point of the input box\n               * - `y1`: the y coordinate of the top left point of the input box\n               * - `x2`: the x coordinate of the bottom right point of the input box\n               * - `y2`: the y coordinate of the bottom right point of the input box\n               * @returns {Promise<SamImageProcessorResult>}\n               */\n              async _call(images, {\n                input_points = null,\n                input_labels = null,\n                input_boxes = null\n              } = {}) {\n                const processed = await super._call(images);\n                if (input_points) {\n                  processed.input_points = this.reshape_input_points(\n                    input_points,\n                    processed.original_sizes,\n                    processed.reshaped_input_sizes\n                  );\n                }\n                if (input_labels) {\n                  if (!processed.input_points) {\n                    throw Error(\"`input_points` must be provided if `input_labels` are provided.\");\n                  }\n                  processed.input_labels = this.add_input_labels(input_labels, processed.input_points);\n                }\n                if (input_boxes) {\n                  processed.input_boxes = this.reshape_input_points(\n                    input_boxes,\n                    processed.original_sizes,\n                    processed.reshaped_input_sizes,\n                    true\n                  );\n                }\n                return processed;\n              }\n              /**\n               * Remove padding and upscale masks to the original image size.\n               * @param {Tensor} masks Batched masks from the mask_decoder in (batch_size, num_channels, height, width) format.\n               * @param {[number, number][]} original_sizes The original sizes of each image before it was resized to the model's expected input shape, in (height, width) format.\n               * @param {[number, number][]} reshaped_input_sizes The size of each image as it is fed to the model, in (height, width) format. Used to remove padding.\n               * @param {Object} options Optional parameters for post-processing.\n               * @param {number} [options.mask_threshold] The threshold to use for binarizing the masks.\n               * @param {boolean} [options.binarize] Whether to binarize the masks.\n               * @param {Object} [options.pad_size] The target size the images were padded to before being passed to the model. If `null`, the target size is assumed to be the processor's `pad_size`.\n               * @param {number} [options.pad_size.height] The height the images were padded to.\n               * @param {number} [options.pad_size.width] The width the images were padded to.\n               * @returns {Promise<Tensor[]>} Batched masks in batch_size, num_channels, height, width) format, where (height, width) is given by original_size.\n               */\n              async post_process_masks(masks, original_sizes, reshaped_input_sizes, {\n                mask_threshold = 0,\n                binarize = true,\n                pad_size = null\n              } = {}) {\n                const output_masks = [];\n                pad_size = pad_size ?? this.pad_size;\n                const target_image_size = [pad_size.height, pad_size.width];\n                for (let i = 0; i < original_sizes.length; ++i) {\n                  const original_size = original_sizes[i];\n                  const reshaped_input_size = reshaped_input_sizes[i];\n                  let interpolated_mask = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_2__.interpolate_4d)(\n                    masks[i],\n                    { mode: \"bilinear\", size: target_image_size }\n                  );\n                  interpolated_mask = interpolated_mask.slice(null, null, [0, reshaped_input_size[0]], [0, reshaped_input_size[1]]);\n                  interpolated_mask = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_2__.interpolate_4d)(\n                    interpolated_mask,\n                    { mode: \"bilinear\", size: original_size }\n                  );\n                  if (binarize) {\n                    const data = interpolated_mask.data;\n                    const binarizedMaskData = new Uint8Array(data.length);\n                    for (let i2 = 0; i2 < data.length; ++i2) {\n                      if (data[i2] > mask_threshold) {\n                        binarizedMaskData[i2] = 1;\n                      }\n                    }\n                    interpolated_mask = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_2__.Tensor(\n                      \"bool\",\n                      binarizedMaskData,\n                      interpolated_mask.dims\n                    );\n                  }\n                  output_masks.push(interpolated_mask);\n                }\n                return output_masks;\n              }\n              /**\n               * Generates a list of crop boxes of different sizes. Each layer has (2**i)**2 boxes for the ith layer.\n               * @param {import(\"../../utils/image.js\").RawImage} image Input original image\n               * @param {number} target_size Target size of the resized image\n               * @param {Object} options Options for generating crop boxes \n               * @param {number} [options.crop_n_layers] If >0, mask prediction will be run again on crops of the image.\n               * Sets the number of layers to run, where each layer has 2**i_layer number of image crops.\n               * @param {number} [options.overlap_ratio] Sets the degree to which crops overlap. In the first crop layer,\n               * crops will overlap by this fraction of the image length. Later layers with more crops scale down this overlap.\n               * @param {number} [options.points_per_crop] Number of points to sample from each crop.\n               * @param {number} [options.crop_n_points_downscale_factor] The number of points-per-side sampled in layer n is\n               * scaled down by crop_n_points_downscale_factor**n.\n               * @returns {Object} An object containing the crop boxes, number of points per crop, cropped images, and input labels.\n               */\n              generate_crop_boxes(image, target_size, {\n                crop_n_layers = 0,\n                overlap_ratio = 512 / 1500,\n                points_per_crop = 32,\n                crop_n_points_downscale_factor = 1\n              } = {}) {\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/sam/processing_sam.js\": (\n          /*!******************************************!*\\\n            !*** ./src/models/sam/processing_sam.js ***!\n            \\******************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              SamProcessor: () => (\n                /* binding */\n                SamProcessor\n              )\n              /* harmony export */\n            });\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../auto/image_processing_auto.js */\n              \"./src/models/auto/image_processing_auto.js\"\n            );\n            class SamProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {\n              async _call(...args) {\n                return await this.image_processor(...args);\n              }\n              post_process_masks(...args) {\n                return this.image_processor.post_process_masks(...args);\n              }\n              reshape_input_points(...args) {\n                return this.image_processor.reshape_input_points(...args);\n              }\n            }\n            __publicField(SamProcessor, \"image_processor_class\", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);\n          }\n        ),\n        /***/\n        \"./src/models/seamless_m4t/feature_extraction_seamless_m4t.js\": (\n          /*!********************************************************************!*\\\n            !*** ./src/models/seamless_m4t/feature_extraction_seamless_m4t.js ***!\n            \\********************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              SeamlessM4TFeatureExtractor: () => (\n                /* binding */\n                SeamlessM4TFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/feature_extraction_utils.js */\n              \"./src/base/feature_extraction_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../utils/audio.js */\n              \"./src/utils/audio.js\"\n            );\n            class SeamlessM4TFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {\n              constructor(config) {\n                super(config);\n                const sampling_rate = this.config.sampling_rate;\n                const mel_filters = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.mel_filter_bank)(\n                  257,\n                  // num_frequency_bins\n                  this.config.num_mel_bins,\n                  // num_mel_filters\n                  20,\n                  // min_frequency\n                  Math.floor(sampling_rate / 2),\n                  // max_frequency\n                  sampling_rate,\n                  // sampling_rate\n                  null,\n                  // norm\n                  \"kaldi\",\n                  // mel_scale\n                  true\n                  // triangularize_in_mel_space\n                );\n                this.mel_filters = mel_filters;\n                this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.window_function)(400, \"povey\", {\n                  periodic: false\n                });\n              }\n              /**\n               * Computes the log-Mel spectrogram of the provided audio waveform.\n               * @param {Float32Array|Float64Array} waveform The audio waveform to process.\n               * @param {number} max_length The maximum number of frames to return.\n               * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.\n               */\n              async _extract_fbank_features(waveform, max_length) {\n                waveform = waveform.map((x) => x * 32768);\n                return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.spectrogram)(\n                  waveform,\n                  this.window,\n                  // window\n                  400,\n                  // frame_length\n                  160,\n                  // hop_length\n                  {\n                    fft_length: 512,\n                    power: 2,\n                    center: false,\n                    preemphasis: 0.97,\n                    mel_filters: this.mel_filters,\n                    log_mel: \"log\",\n                    mel_floor: 1192092955078125e-22,\n                    remove_dc_offset: true,\n                    // Custom\n                    max_num_frames: max_length,\n                    transpose: true\n                  }\n                );\n              }\n              /**\n               * Asynchronously extracts features from a given audio using the provided configuration.\n               * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n               * @param {Object} options Optional parameters for feature extraction.\n               * @param {boolean} [options.padding=true] Whether to pad the sequence to a multiple of `pad_to_multiple_of`.\n               * @param {number} [options.pad_to_multiple_of=2] The number to pad the sequence to a multiple of.\n               * @param {boolean} [options.do_normalize_per_mel_bins=true] Whether or not to zero-mean unit-variance normalize the input per mel-channel.\n               * @param {boolean} [options.return_attention_mask=true] Whether to return the attention mask.\n               * @returns {Promise<{ input_features: Tensor, attention_mask?: Tensor }>} A Promise resolving to an object containing the extracted input features and attention masks as Tensors.\n               */\n              async _call(audio, {\n                padding = true,\n                pad_to_multiple_of = 2,\n                do_normalize_per_mel_bins = true,\n                return_attention_mask = true\n              } = {}) {\n                (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, \"SeamlessM4TFeatureExtractor\");\n                let features = await this._extract_fbank_features(audio, this.config.max_length);\n                if (do_normalize_per_mel_bins) {\n                  const [num_features, feature_size] = features.dims;\n                  const data = features.data;\n                  for (let i = 0; i < feature_size; ++i) {\n                    let sum = 0;\n                    for (let j = 0; j < num_features; ++j) {\n                      sum += data[j * feature_size + i];\n                    }\n                    const mean = sum / num_features;\n                    let variance = 0;\n                    for (let j = 0; j < num_features; ++j) {\n                      variance += (data[j * feature_size + i] - mean) ** 2;\n                    }\n                    variance /= num_features - 1;\n                    const std = Math.sqrt(variance + 1e-7);\n                    for (let j = 0; j < num_features; ++j) {\n                      const index = j * feature_size + i;\n                      data[index] = (data[index] - mean) / std;\n                    }\n                  }\n                }\n                let padded_attention_mask;\n                if (padding) {\n                  const [num_frames2, num_channels2] = features.dims;\n                  const data = (\n                    /** @type {Float32Array} */\n                    features.data\n                  );\n                  const pad_size = num_frames2 % pad_to_multiple_of;\n                  if (pad_size > 0) {\n                    const padded_data = new Float32Array(num_channels2 * (num_frames2 + pad_size));\n                    padded_data.set(data);\n                    padded_data.fill(this.config.padding_value, data.length);\n                    const numPaddedFrames = num_frames2 + pad_size;\n                    features = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\n                      features.type,\n                      padded_data,\n                      [numPaddedFrames, num_channels2]\n                    );\n                    if (return_attention_mask) {\n                      padded_attention_mask = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\n                        \"int64\",\n                        new BigInt64Array(numPaddedFrames),\n                        [1, numPaddedFrames]\n                      );\n                      padded_attention_mask.data.fill(1n, 0, num_frames2);\n                    }\n                  }\n                }\n                const [num_frames, num_channels] = features.dims;\n                const stride = this.config.stride;\n                const remainder = num_frames % stride;\n                if (remainder !== 0) {\n                  throw new Error(`The number of frames (${num_frames}) must be a multiple of the stride (${stride}).`);\n                }\n                const input_features = features.view(\n                  1,\n                  Math.floor(num_frames / stride),\n                  num_channels * stride\n                );\n                const result = { input_features };\n                if (return_attention_mask) {\n                  const reshapedNumFrames = input_features.dims[1];\n                  const attention_mask_data = new BigInt64Array(reshapedNumFrames);\n                  if (padded_attention_mask) {\n                    const padded_attention_mask_data = padded_attention_mask.data;\n                    for (let i = 1, j = 0; i < num_frames; i += stride, ++j) {\n                      attention_mask_data[j] = padded_attention_mask_data[i];\n                    }\n                  } else {\n                    attention_mask_data.fill(1n);\n                  }\n                  result.attention_mask = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\n                    \"int64\",\n                    attention_mask_data,\n                    [1, reshapedNumFrames]\n                  );\n                }\n                return result;\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/segformer/image_processing_segformer.js\": (\n          /*!************************************************************!*\\\n            !*** ./src/models/segformer/image_processing_segformer.js ***!\n            \\************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              SegformerFeatureExtractor: () => (\n                /* binding */\n                SegformerFeatureExtractor\n              ),\n              /* harmony export */\n              SegformerImageProcessor: () => (\n                /* binding */\n                SegformerImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class SegformerImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              /** @type {typeof post_process_semantic_segmentation} */\n              post_process_semantic_segmentation(...args) {\n                return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_semantic_segmentation)(...args);\n              }\n            }\n            class SegformerFeatureExtractor extends SegformerImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/siglip/image_processing_siglip.js\": (\n          /*!******************************************************!*\\\n            !*** ./src/models/siglip/image_processing_siglip.js ***!\n            \\******************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              SiglipImageProcessor: () => (\n                /* binding */\n                SiglipImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class SiglipImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/smolvlm/image_processing_smolvlm.js\": (\n          /*!********************************************************!*\\\n            !*** ./src/models/smolvlm/image_processing_smolvlm.js ***!\n            \\********************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              SmolVLMImageProcessor: () => (\n                /* reexport safe */\n                _idefics3_image_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_0__.Idefics3ImageProcessor\n              )\n              /* harmony export */\n            });\n            var _idefics3_image_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../idefics3/image_processing_idefics3.js */\n              \"./src/models/idefics3/image_processing_idefics3.js\"\n            );\n          }\n        ),\n        /***/\n        \"./src/models/smolvlm/processing_smolvlm.js\": (\n          /*!**************************************************!*\\\n            !*** ./src/models/smolvlm/processing_smolvlm.js ***!\n            \\**************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              SmolVLMProcessor: () => (\n                /* reexport safe */\n                _idefics3_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_0__.Idefics3Processor\n              )\n              /* harmony export */\n            });\n            var _idefics3_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../idefics3/processing_idefics3.js */\n              \"./src/models/idefics3/processing_idefics3.js\"\n            );\n          }\n        ),\n        /***/\n        \"./src/models/snac/feature_extraction_snac.js\": (\n          /*!****************************************************!*\\\n            !*** ./src/models/snac/feature_extraction_snac.js ***!\n            \\****************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              SnacFeatureExtractor: () => (\n                /* binding */\n                SnacFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _dac_feature_extraction_dac_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../dac/feature_extraction_dac.js */\n              \"./src/models/dac/feature_extraction_dac.js\"\n            );\n            class SnacFeatureExtractor extends _dac_feature_extraction_dac_js__WEBPACK_IMPORTED_MODULE_0__.DacFeatureExtractor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/speecht5/feature_extraction_speecht5.js\": (\n          /*!************************************************************!*\\\n            !*** ./src/models/speecht5/feature_extraction_speecht5.js ***!\n            \\************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              SpeechT5FeatureExtractor: () => (\n                /* binding */\n                SpeechT5FeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/feature_extraction_utils.js */\n              \"./src/base/feature_extraction_utils.js\"\n            );\n            class SpeechT5FeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/speecht5/processing_speecht5.js\": (\n          /*!****************************************************!*\\\n            !*** ./src/models/speecht5/processing_speecht5.js ***!\n            \\****************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              SpeechT5Processor: () => (\n                /* binding */\n                SpeechT5Processor\n              )\n              /* harmony export */\n            });\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            var _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../auto/feature_extraction_auto.js */\n              \"./src/models/auto/feature_extraction_auto.js\"\n            );\n            class SpeechT5Processor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {\n              /**\n               * Calls the feature_extractor function with the given input.\n               * @param {any} input The input to extract features from.\n               * @returns {Promise<any>} A Promise that resolves with the extracted features.\n               */\n              async _call(input) {\n                return await this.feature_extractor(input);\n              }\n            }\n            __publicField(SpeechT5Processor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__.AutoTokenizer);\n            __publicField(SpeechT5Processor, \"feature_extractor_class\", _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoFeatureExtractor);\n          }\n        ),\n        /***/\n        \"./src/models/swin2sr/image_processing_swin2sr.js\": (\n          /*!********************************************************!*\\\n            !*** ./src/models/swin2sr/image_processing_swin2sr.js ***!\n            \\********************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Swin2SRImageProcessor: () => (\n                /* binding */\n                Swin2SRImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class Swin2SRImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              pad_image(pixelData, imgDims, padSize, options = {}) {\n                const [imageHeight, imageWidth, imageChannels] = imgDims;\n                return super.pad_image(pixelData, imgDims, {\n                  // NOTE: For Swin2SR models, the original python implementation adds padding even when the image's width/height is already\n                  // a multiple of `pad_size`. However, this is most likely a bug (PR: https://github.com/mv-lab/swin2sr/pull/19).\n                  // For this reason, we only add padding when the image's width/height is not a multiple of `pad_size`.\n                  width: imageWidth + (padSize - imageWidth % padSize) % padSize,\n                  height: imageHeight + (padSize - imageHeight % padSize) % padSize\n                }, {\n                  mode: \"symmetric\",\n                  center: false,\n                  constant_values: -1,\n                  ...options\n                });\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/ultravox/processing_ultravox.js\": (\n          /*!****************************************************!*\\\n            !*** ./src/models/ultravox/processing_ultravox.js ***!\n            \\****************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              UltravoxProcessor: () => (\n                /* binding */\n                UltravoxProcessor\n              )\n              /* harmony export */\n            });\n            var _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../auto/feature_extraction_auto.js */\n              \"./src/models/auto/feature_extraction_auto.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            class UltravoxProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__.Processor {\n              /**\n               * @param {string} text The text input to process.\n               * @param {Float32Array} audio The audio input to process.\n               */\n              async _call(text, audio = null, kwargs = {}) {\n                if (Array.isArray(text)) {\n                  throw new Error(\"Batched inputs are not supported yet.\");\n                }\n                let audio_inputs = {};\n                if (audio) {\n                  const audio_len = audio.length;\n                  const { input_features } = await this.feature_extractor(audio, {\n                    ...kwargs,\n                    max_length: audio_len\n                  });\n                  const nb_encoder_frames = Math.round(audio_len / this.config.encoder_ds_factor + 1e-4);\n                  const audio_embed_frames = 1 + Math.ceil(nb_encoder_frames / this.config.stack_factor);\n                  audio_inputs[\"audio_token_len\"] = [audio_embed_frames];\n                  audio_inputs[\"audio_values\"] = input_features;\n                  const image_token = this.config.audio_placeholder;\n                  if (!text.includes(image_token)) {\n                    throw new Error(`The input text does not contain the image token ${image_token}.`);\n                  }\n                  text = text.replaceAll(image_token, image_token.repeat(audio_embed_frames));\n                }\n                const text_inputs = this.tokenizer(text, {\n                  add_special_tokens: false,\n                  ...kwargs\n                });\n                return {\n                  ...text_inputs,\n                  ...audio_inputs\n                };\n              }\n            }\n            __publicField(UltravoxProcessor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__.AutoTokenizer);\n            __publicField(UltravoxProcessor, \"feature_extractor_class\", _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_0__.AutoFeatureExtractor);\n            __publicField(UltravoxProcessor, \"uses_processor_config\", true);\n          }\n        ),\n        /***/\n        \"./src/models/vit/image_processing_vit.js\": (\n          /*!************************************************!*\\\n            !*** ./src/models/vit/image_processing_vit.js ***!\n            \\************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              ViTFeatureExtractor: () => (\n                /* binding */\n                ViTFeatureExtractor\n              ),\n              /* harmony export */\n              ViTImageProcessor: () => (\n                /* binding */\n                ViTImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class ViTImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n            }\n            class ViTFeatureExtractor extends ViTImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/models/vitmatte/image_processing_vitmatte.js\": (\n          /*!**********************************************************!*\\\n            !*** ./src/models/vitmatte/image_processing_vitmatte.js ***!\n            \\**********************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              VitMatteImageProcessor: () => (\n                /* binding */\n                VitMatteImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            class VitMatteImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              /**\n               * Calls the feature extraction process on an array of images, preprocesses\n               * each image, and concatenates the resulting features into a single Tensor.\n               * @param {import(\"../../utils/image.js\").RawImage[]} images The image(s) to extract features from.\n               * @param {import(\"../../utils/image.js\").RawImage[]} trimaps The trimaps(s) to extract features from.\n               * @returns {Promise<import(\"../../base/image_processors_utils.js\").ImageProcessorResult>} An object containing the concatenated pixel values of the preprocessed images.\n               */\n              async _call(images, trimaps) {\n                if (!Array.isArray(images)) {\n                  images = [images];\n                }\n                if (!Array.isArray(trimaps)) {\n                  trimaps = [trimaps];\n                }\n                const imageData = await Promise.all(images.map((x) => this.preprocess(x)));\n                const trimapData = await Promise.all(trimaps.map((x) => this.preprocess(x, {\n                  do_normalize: false,\n                  do_convert_rgb: false,\n                  do_convert_grayscale: true\n                })));\n                const pixel_values = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.stack)(imageData.map(\n                  // Concatenate images and trimaps\n                  (x, i) => (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.cat)([x.pixel_values, trimapData[i].pixel_values], 0)\n                ), 0);\n                return {\n                  pixel_values,\n                  // Original sizes of images\n                  original_sizes: imageData.map((x) => x.original_size),\n                  // Reshaped sizes of images, before padding or cropping\n                  reshaped_input_sizes: imageData.map((x) => x.reshaped_input_size)\n                };\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/vitpose/image_processing_vitpose.js\": (\n          /*!********************************************************!*\\\n            !*** ./src/models/vitpose/image_processing_vitpose.js ***!\n            \\********************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              VitPoseImageProcessor: () => (\n                /* binding */\n                VitPoseImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class VitPoseImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              /**\n               * Transform the heatmaps into keypoint predictions and transform them back to the image.\n               * NOTE: This is a naive implementation and does not include advanced post-processing techniques,\n               * so the results may not be as accurate as the original implementation.\n               * @param {import('../../utils/tensor.js').Tensor} outputs The model outputs.\n               * @param {[number, number, number, number][][]} boxes List or array of bounding boxes for each image.\n               * Each box should be a list of 4 floats representing the bounding box coordinates in COCO format (top_left_x, top_left_y, width, height).\n               * @returns {{\n               *   bbox: [number, number, number, number],\n               *   scores: number[],\n               *   labels: number[],\n               *   keypoints: [number, number][]\n               * }[][]} List of keypoints predictions for each image.\n               */\n              post_process_pose_estimation(outputs, boxes, {\n                threshold = null\n                // TODO:\n                // kernel_size = 11,\n                // target_sizes = null,\n              } = {}) {\n                const heatmaps = outputs.tolist();\n                const [batch_size, num_classes, height, width] = outputs.dims;\n                const results = [];\n                for (let b = 0; b < batch_size; ++b) {\n                  const heatmap = heatmaps[b];\n                  const bboxes = boxes[b];\n                  const batch_results = [];\n                  for (let n = 0; n < bboxes.length; ++n) {\n                    const bbox = bboxes[n];\n                    const keypoints = [];\n                    const scores = [];\n                    const labels = [];\n                    const xScale = bbox.at(-2) / width;\n                    const yScale = bbox.at(-1) / height;\n                    for (let c = 0; c < heatmap.length; ++c) {\n                      let [xWeightedSum, yWeightedSum] = [0, 0];\n                      let sum = 0;\n                      let score = -Infinity;\n                      const row = heatmap[c];\n                      for (let y = 0; y < row.length; ++y) {\n                        const col = row[y];\n                        for (let x = 0; x < col.length; ++x) {\n                          const value = col[x];\n                          sum += value;\n                          score = Math.max(score, value);\n                          xWeightedSum += (x + 0.5) * value;\n                          yWeightedSum += y * value;\n                        }\n                      }\n                      if (threshold != null && score < threshold) continue;\n                      const keypoint = [\n                        xScale * xWeightedSum / sum,\n                        yScale * yWeightedSum / sum\n                      ];\n                      keypoints.push(keypoint);\n                      labels.push(c);\n                      scores.push(score);\n                    }\n                    batch_results.push({\n                      bbox,\n                      scores,\n                      labels,\n                      keypoints\n                    });\n                  }\n                  results.push(batch_results);\n                }\n                return results;\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/wav2vec2/feature_extraction_wav2vec2.js\": (\n          /*!************************************************************!*\\\n            !*** ./src/models/wav2vec2/feature_extraction_wav2vec2.js ***!\n            \\************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Wav2Vec2FeatureExtractor: () => (\n                /* binding */\n                Wav2Vec2FeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/feature_extraction_utils.js */\n              \"./src/base/feature_extraction_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            class Wav2Vec2FeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {\n              /**\n               * @param {Float32Array} input_values \n               * @returns {Float32Array} \n               */\n              _zero_mean_unit_var_norm(input_values) {\n                const sum = input_values.reduce((a, b) => a + b, 0);\n                const mean = sum / input_values.length;\n                const variance = input_values.reduce((a, b) => a + (b - mean) ** 2, 0) / input_values.length;\n                return input_values.map((x) => (x - mean) / Math.sqrt(variance + 1e-7));\n              }\n              /**\n               * Asynchronously extracts features from a given audio using the provided configuration.\n               * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n               * @returns {Promise<{ input_values: Tensor; attention_mask: Tensor }>} A Promise resolving to an object containing the extracted input features and attention mask as Tensors.\n               */\n              async _call(audio) {\n                (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, \"Wav2Vec2FeatureExtractor\");\n                if (audio instanceof Float64Array) {\n                  audio = new Float32Array(audio);\n                }\n                let input_values = audio;\n                if (this.config.do_normalize) {\n                  input_values = this._zero_mean_unit_var_norm(input_values);\n                }\n                const shape = [1, input_values.length];\n                return {\n                  input_values: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\"float32\", input_values, shape),\n                  attention_mask: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\"int64\", new BigInt64Array(input_values.length).fill(1n), shape)\n                };\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/wav2vec2/processing_wav2vec2.js\": (\n          /*!****************************************************!*\\\n            !*** ./src/models/wav2vec2/processing_wav2vec2.js ***!\n            \\****************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Wav2Vec2Processor: () => (\n                /* binding */\n                Wav2Vec2Processor\n              )\n              /* harmony export */\n            });\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            var _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../auto/feature_extraction_auto.js */\n              \"./src/models/auto/feature_extraction_auto.js\"\n            );\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            class Wav2Vec2Processor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__.Processor {\n              /**\n               * Calls the feature_extractor function with the given audio input.\n               * @param {any} audio The audio input to extract features from.\n               * @returns {Promise<any>} A Promise that resolves with the extracted features.\n               */\n              async _call(audio) {\n                return await this.feature_extractor(audio);\n              }\n            }\n            __publicField(Wav2Vec2Processor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer);\n            __publicField(Wav2Vec2Processor, \"feature_extractor_class\", _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoFeatureExtractor);\n          }\n        ),\n        /***/\n        \"./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js\": (\n          /*!********************************************************************!*\\\n            !*** ./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js ***!\n            \\********************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Wav2Vec2ProcessorWithLM: () => (\n                /* binding */\n                Wav2Vec2ProcessorWithLM\n              )\n              /* harmony export */\n            });\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            var _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../auto/feature_extraction_auto.js */\n              \"./src/models/auto/feature_extraction_auto.js\"\n            );\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            class Wav2Vec2ProcessorWithLM extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__.Processor {\n              /**\n               * Calls the feature_extractor function with the given audio input.\n               * @param {any} audio The audio input to extract features from.\n               * @returns {Promise<any>} A Promise that resolves with the extracted features.\n               */\n              async _call(audio) {\n                return await this.feature_extractor(audio);\n              }\n            }\n            __publicField(Wav2Vec2ProcessorWithLM, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer);\n            __publicField(Wav2Vec2ProcessorWithLM, \"feature_extractor_class\", _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoFeatureExtractor);\n          }\n        ),\n        /***/\n        \"./src/models/wespeaker/feature_extraction_wespeaker.js\": (\n          /*!**************************************************************!*\\\n            !*** ./src/models/wespeaker/feature_extraction_wespeaker.js ***!\n            \\**************************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              WeSpeakerFeatureExtractor: () => (\n                /* binding */\n                WeSpeakerFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/feature_extraction_utils.js */\n              \"./src/base/feature_extraction_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../utils/audio.js */\n              \"./src/utils/audio.js\"\n            );\n            class WeSpeakerFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {\n              constructor(config) {\n                super(config);\n                const sampling_rate = this.config.sampling_rate;\n                const mel_filters = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.mel_filter_bank)(\n                  257,\n                  // num_frequency_bins\n                  this.config.num_mel_bins,\n                  // num_mel_filters\n                  20,\n                  // min_frequency\n                  Math.floor(sampling_rate / 2),\n                  // max_frequency\n                  sampling_rate,\n                  // sampling_rate\n                  null,\n                  // norm\n                  \"kaldi\",\n                  // mel_scale\n                  true\n                  // triangularize_in_mel_space\n                );\n                this.mel_filters = mel_filters;\n                this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.window_function)(400, \"hamming\", {\n                  periodic: false\n                });\n                this.min_num_frames = this.config.min_num_frames;\n              }\n              /**\n               * Computes the log-Mel spectrogram of the provided audio waveform.\n               * @param {Float32Array|Float64Array} waveform The audio waveform to process.\n               * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.\n               */\n              async _extract_fbank_features(waveform) {\n                waveform = waveform.map((x) => x * 32768);\n                return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.spectrogram)(\n                  waveform,\n                  this.window,\n                  // window\n                  400,\n                  // frame_length\n                  160,\n                  // hop_length\n                  {\n                    fft_length: 512,\n                    power: 2,\n                    center: false,\n                    preemphasis: 0.97,\n                    mel_filters: this.mel_filters,\n                    log_mel: \"log\",\n                    mel_floor: 1192092955078125e-22,\n                    remove_dc_offset: true,\n                    // Custom\n                    transpose: true,\n                    min_num_frames: this.min_num_frames\n                  }\n                );\n              }\n              /**\n               * Asynchronously extracts features from a given audio using the provided configuration.\n               * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n               * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.\n               */\n              async _call(audio) {\n                (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, \"WeSpeakerFeatureExtractor\");\n                const features = (await this._extract_fbank_features(audio)).unsqueeze_(0);\n                if (this.config.fbank_centering_span === null) {\n                  const meanData = (\n                    /** @type {Float32Array} */\n                    features.mean(1).data\n                  );\n                  const featuresData = (\n                    /** @type {Float32Array} */\n                    features.data\n                  );\n                  const [batch_size, num_frames, feature_size] = features.dims;\n                  for (let i = 0; i < batch_size; ++i) {\n                    const offset1 = i * num_frames * feature_size;\n                    const offset2 = i * feature_size;\n                    for (let j = 0; j < num_frames; ++j) {\n                      const offset3 = offset1 + j * feature_size;\n                      for (let k2 = 0; k2 < feature_size; ++k2) {\n                        featuresData[offset3 + k2] -= meanData[offset2 + k2];\n                      }\n                    }\n                  }\n                }\n                return {\n                  input_features: features\n                };\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/whisper/common_whisper.js\": (\n          /*!**********************************************!*\\\n            !*** ./src/models/whisper/common_whisper.js ***!\n            \\**********************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              WHISPER_LANGUAGE_MAPPING: () => (\n                /* binding */\n                WHISPER_LANGUAGE_MAPPING\n              ),\n              /* harmony export */\n              WHISPER_TO_LANGUAGE_CODE_MAPPING: () => (\n                /* binding */\n                WHISPER_TO_LANGUAGE_CODE_MAPPING\n              ),\n              /* harmony export */\n              whisper_language_to_code: () => (\n                /* binding */\n                whisper_language_to_code\n              )\n              /* harmony export */\n            });\n            const WHISPER_LANGUAGES = [\n              [\"en\", \"english\"],\n              [\"zh\", \"chinese\"],\n              [\"de\", \"german\"],\n              [\"es\", \"spanish\"],\n              [\"ru\", \"russian\"],\n              [\"ko\", \"korean\"],\n              [\"fr\", \"french\"],\n              [\"ja\", \"japanese\"],\n              [\"pt\", \"portuguese\"],\n              [\"tr\", \"turkish\"],\n              [\"pl\", \"polish\"],\n              [\"ca\", \"catalan\"],\n              [\"nl\", \"dutch\"],\n              [\"ar\", \"arabic\"],\n              [\"sv\", \"swedish\"],\n              [\"it\", \"italian\"],\n              [\"id\", \"indonesian\"],\n              [\"hi\", \"hindi\"],\n              [\"fi\", \"finnish\"],\n              [\"vi\", \"vietnamese\"],\n              [\"he\", \"hebrew\"],\n              [\"uk\", \"ukrainian\"],\n              [\"el\", \"greek\"],\n              [\"ms\", \"malay\"],\n              [\"cs\", \"czech\"],\n              [\"ro\", \"romanian\"],\n              [\"da\", \"danish\"],\n              [\"hu\", \"hungarian\"],\n              [\"ta\", \"tamil\"],\n              [\"no\", \"norwegian\"],\n              [\"th\", \"thai\"],\n              [\"ur\", \"urdu\"],\n              [\"hr\", \"croatian\"],\n              [\"bg\", \"bulgarian\"],\n              [\"lt\", \"lithuanian\"],\n              [\"la\", \"latin\"],\n              [\"mi\", \"maori\"],\n              [\"ml\", \"malayalam\"],\n              [\"cy\", \"welsh\"],\n              [\"sk\", \"slovak\"],\n              [\"te\", \"telugu\"],\n              [\"fa\", \"persian\"],\n              [\"lv\", \"latvian\"],\n              [\"bn\", \"bengali\"],\n              [\"sr\", \"serbian\"],\n              [\"az\", \"azerbaijani\"],\n              [\"sl\", \"slovenian\"],\n              [\"kn\", \"kannada\"],\n              [\"et\", \"estonian\"],\n              [\"mk\", \"macedonian\"],\n              [\"br\", \"breton\"],\n              [\"eu\", \"basque\"],\n              [\"is\", \"icelandic\"],\n              [\"hy\", \"armenian\"],\n              [\"ne\", \"nepali\"],\n              [\"mn\", \"mongolian\"],\n              [\"bs\", \"bosnian\"],\n              [\"kk\", \"kazakh\"],\n              [\"sq\", \"albanian\"],\n              [\"sw\", \"swahili\"],\n              [\"gl\", \"galician\"],\n              [\"mr\", \"marathi\"],\n              [\"pa\", \"punjabi\"],\n              [\"si\", \"sinhala\"],\n              [\"km\", \"khmer\"],\n              [\"sn\", \"shona\"],\n              [\"yo\", \"yoruba\"],\n              [\"so\", \"somali\"],\n              [\"af\", \"afrikaans\"],\n              [\"oc\", \"occitan\"],\n              [\"ka\", \"georgian\"],\n              [\"be\", \"belarusian\"],\n              [\"tg\", \"tajik\"],\n              [\"sd\", \"sindhi\"],\n              [\"gu\", \"gujarati\"],\n              [\"am\", \"amharic\"],\n              [\"yi\", \"yiddish\"],\n              [\"lo\", \"lao\"],\n              [\"uz\", \"uzbek\"],\n              [\"fo\", \"faroese\"],\n              [\"ht\", \"haitian creole\"],\n              [\"ps\", \"pashto\"],\n              [\"tk\", \"turkmen\"],\n              [\"nn\", \"nynorsk\"],\n              [\"mt\", \"maltese\"],\n              [\"sa\", \"sanskrit\"],\n              [\"lb\", \"luxembourgish\"],\n              [\"my\", \"myanmar\"],\n              [\"bo\", \"tibetan\"],\n              [\"tl\", \"tagalog\"],\n              [\"mg\", \"malagasy\"],\n              [\"as\", \"assamese\"],\n              [\"tt\", \"tatar\"],\n              [\"haw\", \"hawaiian\"],\n              [\"ln\", \"lingala\"],\n              [\"ha\", \"hausa\"],\n              [\"ba\", \"bashkir\"],\n              [\"jw\", \"javanese\"],\n              [\"su\", \"sundanese\"]\n            ];\n            const WHISPER_LANGUAGE_MAPPING = new Map(WHISPER_LANGUAGES);\n            const WHISPER_TO_LANGUAGE_CODE_MAPPING = new Map([\n              ...WHISPER_LANGUAGES.map(([k2, v]) => [v, k2]),\n              ...[\n                [\"burmese\", \"my\"],\n                [\"valencian\", \"ca\"],\n                [\"flemish\", \"nl\"],\n                [\"haitian\", \"ht\"],\n                [\"letzeburgesch\", \"lb\"],\n                [\"pushto\", \"ps\"],\n                [\"panjabi\", \"pa\"],\n                [\"moldavian\", \"ro\"],\n                [\"moldovan\", \"ro\"],\n                [\"sinhalese\", \"si\"],\n                [\"castilian\", \"es\"]\n              ]\n            ]);\n            function whisper_language_to_code(language) {\n              language = language.toLowerCase();\n              let language_code = WHISPER_TO_LANGUAGE_CODE_MAPPING.get(language);\n              if (language_code === void 0) {\n                const language_special_token = language.match(/^<\\|([a-z]{2})\\|>$/);\n                if (language_special_token) {\n                  language = language_special_token[1];\n                }\n                if (WHISPER_LANGUAGE_MAPPING.has(language)) {\n                  language_code = language;\n                } else {\n                  const is_language_code = language.length === 2;\n                  const langs = is_language_code ? WHISPER_LANGUAGE_MAPPING.keys() : WHISPER_LANGUAGE_MAPPING.values();\n                  throw new Error(`Language \"${language}\" is not supported. Must be one of: ${JSON.stringify(Array.from(langs))}`);\n                }\n              }\n              return language_code;\n            }\n          }\n        ),\n        /***/\n        \"./src/models/whisper/feature_extraction_whisper.js\": (\n          /*!**********************************************************!*\\\n            !*** ./src/models/whisper/feature_extraction_whisper.js ***!\n            \\**********************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              WhisperFeatureExtractor: () => (\n                /* binding */\n                WhisperFeatureExtractor\n              )\n              /* harmony export */\n            });\n            var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/feature_extraction_utils.js */\n              \"./src/base/feature_extraction_utils.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../utils/audio.js */\n              \"./src/utils/audio.js\"\n            );\n            var _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ../../utils/maths.js */\n              \"./src/utils/maths.js\"\n            );\n            class WhisperFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {\n              constructor(config) {\n                var _a2;\n                super(config);\n                (_a2 = this.config).mel_filters ?? (_a2.mel_filters = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.mel_filter_bank)(\n                  Math.floor(1 + this.config.n_fft / 2),\n                  // num_frequency_bins\n                  this.config.feature_size,\n                  // num_mel_filters\n                  0,\n                  // min_frequency\n                  8e3,\n                  // max_frequency\n                  this.config.sampling_rate,\n                  // sampling_rate\n                  \"slaney\",\n                  // norm\n                  \"slaney\"\n                  // mel_scale\n                ));\n                this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.window_function)(this.config.n_fft, \"hann\");\n              }\n              /**\n               * Computes the log-Mel spectrogram of the provided audio waveform.\n               * @param {Float32Array|Float64Array} waveform The audio waveform to process.\n               * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.\n               */\n              async _extract_fbank_features(waveform) {\n                const features = await (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.spectrogram)(\n                  waveform,\n                  this.window,\n                  // window\n                  this.config.n_fft,\n                  // frame_length\n                  this.config.hop_length,\n                  // hop_length\n                  {\n                    power: 2,\n                    mel_filters: this.config.mel_filters,\n                    log_mel: \"log10\",\n                    // Custom\n                    max_num_frames: Math.min(\n                      Math.floor(waveform.length / this.config.hop_length),\n                      this.config.nb_max_frames\n                      // 3000\n                    )\n                  }\n                );\n                const data = features.data;\n                const maxValue = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.max)(\n                  /** @type {Float32Array} */\n                  data\n                )[0];\n                for (let i = 0; i < data.length; ++i) {\n                  data[i] = (Math.max(data[i], maxValue - 8) + 4) / 4;\n                }\n                return features;\n              }\n              /**\n               * Asynchronously extracts features from a given audio using the provided configuration.\n               * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n               * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.\n               */\n              async _call(audio, {\n                max_length = null\n              } = {}) {\n                (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, \"WhisperFeatureExtractor\");\n                let waveform;\n                const length = max_length ?? this.config.n_samples;\n                if (audio.length > length) {\n                  if (audio.length > this.config.n_samples) {\n                    console.warn(\n                      \"Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`.\"\n                    );\n                  }\n                  waveform = audio.slice(0, length);\n                } else {\n                  waveform = new Float32Array(length);\n                  waveform.set(audio);\n                }\n                const features = await this._extract_fbank_features(waveform);\n                return {\n                  input_features: features.unsqueeze_(0)\n                };\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/whisper/generation_whisper.js\": (\n          /*!**************************************************!*\\\n            !*** ./src/models/whisper/generation_whisper.js ***!\n            \\**************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              WhisperGenerationConfig: () => (\n                /* binding */\n                WhisperGenerationConfig\n              )\n              /* harmony export */\n            });\n            var _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../generation/configuration_utils.js */\n              \"./src/generation/configuration_utils.js\"\n            );\n            class WhisperGenerationConfig extends _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_0__.GenerationConfig {\n              constructor() {\n                super(...arguments);\n                /**\n                 * Whether to return the timestamps with the text. This enables the `WhisperTimestampsLogitsProcessor`.\n                 * @type {boolean}\n                 */\n                __publicField(this, \"return_timestamps\", null);\n                /**\n                 * Whether to return token-level timestamps\n                 * with the text. This can be used with or without the `return_timestamps` option. To get word-level\n                 * timestamps, use the tokenizer to group the tokens into words.\n                 * @type {boolean}\n                 */\n                __publicField(this, \"return_token_timestamps\", null);\n                /**\n                 * The number of audio frames available in this chunk. This is only used generating word-level timestamps.\n                 * @type {number}\n                 */\n                __publicField(this, \"num_frames\", null);\n                /**\n                 * Alignment heads to predict word-level timestamps. This is a list of [layer, head] pairs that\n                 * select the cross-attention heads that are highly correlated to word-level timing.\n                 * @type {[number, number][]}\n                 */\n                __publicField(this, \"alignment_heads\", null);\n                /**\n                 * Task to use for generation, either \"translate\" or \"transcribe\".\n                 * @type {string}\n                 */\n                __publicField(this, \"task\", null);\n                /**\n                 * Language token to use for generation, can be either in the form of `<|en|>`, `en` or `english`.\n                 * You can find all the possible language tokens in the `model.generation_config.lang_to_id` dictionary.\n                 * @type {string}\n                 */\n                __publicField(this, \"language\", null);\n                /**\n                 * The id of the `\"<|notimestamps|>\"` token.\n                 * @type {number}\n                 */\n                __publicField(this, \"no_timestamps_token_id\", null);\n                /**\n                 * Rank-1 list of token IDs created by passing text to [`~WhisperProcessor.get_prompt_ids`] that is\n                 * provided as a prompt to each chunk. This can be used to provide or \"prompt-engineer\" a context for\n                 * transcription, e.g. custom vocabularies or proper nouns to make it more likely to predict those words\n                 * correctly. It cannot be used in conjunction with `decoder_start_token_id` as it overwrites this value.\n                 * @type {number[]}\n                 */\n                __publicField(this, \"prompt_ids\", null);\n                /**\n                 * Whether the model is multilingual or not.\n                 * @type {boolean}\n                 */\n                __publicField(this, \"is_multilingual\", null);\n                /**\n                 * (Optional) A mapping from language tokens to their corresponding IDs.\n                 * Only required if the model is multilingual.\n                 * @type {Record<string, number>|null}\n                 */\n                __publicField(this, \"lang_to_id\", null);\n                /**\n                 * (Optional) A mapping from task tokens to their corresponding IDs.\n                 * @type {Record<string, number>|null}\n                 */\n                __publicField(this, \"task_to_id\", null);\n                /**\n                 * Used to set the maximum value of the initial timestamp. This is used to prevent the model from\n                 * predicting timestamps that are too far in the future.\n                 * @type {number}\n                 */\n                __publicField(this, \"max_initial_timestamp_index\", 1);\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/models/whisper/processing_whisper.js\": (\n          /*!**************************************************!*\\\n            !*** ./src/models/whisper/processing_whisper.js ***!\n            \\**************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              WhisperProcessor: () => (\n                /* binding */\n                WhisperProcessor\n              )\n              /* harmony export */\n            });\n            var _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../auto/feature_extraction_auto.js */\n              \"./src/models/auto/feature_extraction_auto.js\"\n            );\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../../tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../../base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            class WhisperProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__.Processor {\n              /**\n               * Calls the feature_extractor function with the given audio input.\n               * @param {any} audio The audio input to extract features from.\n               * @returns {Promise<any>} A Promise that resolves with the extracted features.\n               */\n              async _call(audio) {\n                return await this.feature_extractor(audio);\n              }\n            }\n            __publicField(WhisperProcessor, \"tokenizer_class\", _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__.AutoTokenizer);\n            __publicField(WhisperProcessor, \"feature_extractor_class\", _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_0__.AutoFeatureExtractor);\n          }\n        ),\n        /***/\n        \"./src/models/yolos/image_processing_yolos.js\": (\n          /*!****************************************************!*\\\n            !*** ./src/models/yolos/image_processing_yolos.js ***!\n            \\****************************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              YolosFeatureExtractor: () => (\n                /* binding */\n                YolosFeatureExtractor\n              ),\n              /* harmony export */\n              YolosImageProcessor: () => (\n                /* binding */\n                YolosImageProcessor\n              )\n              /* harmony export */\n            });\n            var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../../base/image_processors_utils.js */\n              \"./src/base/image_processors_utils.js\"\n            );\n            class YolosImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {\n              /** @type {typeof post_process_object_detection} */\n              post_process_object_detection(...args) {\n                return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_object_detection)(...args);\n              }\n            }\n            class YolosFeatureExtractor extends YolosImageProcessor {\n            }\n          }\n        ),\n        /***/\n        \"./src/ops/registry.js\": (\n          /*!*****************************!*\\\n            !*** ./src/ops/registry.js ***!\n            \\*****************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              TensorOpRegistry: () => (\n                /* binding */\n                TensorOpRegistry\n              )\n              /* harmony export */\n            });\n            var _backends_onnx_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../backends/onnx.js */\n              \"./src/backends/onnx.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var _env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../env.js */\n              \"./src/env.js\"\n            );\n            const IS_WEB_ENV = _env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_BROWSER_ENV || _env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_WEBWORKER_ENV;\n            const wrap = async (session_bytes, session_options, names) => {\n              const session = await (0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_0__.createInferenceSession)(\n                new Uint8Array(session_bytes),\n                session_options\n              );\n              let chain = Promise.resolve();\n              return (\n                /** @type {any} */\n                async (inputs) => {\n                  const proxied = (0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_0__.isONNXProxy)();\n                  const ortFeed = Object.fromEntries(Object.entries(inputs).map(([k2, v]) => [k2, (proxied ? v.clone() : v).ort_tensor]));\n                  const outputs = await (chain = IS_WEB_ENV ? chain.then(() => session.run(ortFeed)) : session.run(ortFeed));\n                  if (Array.isArray(names)) {\n                    return names.map((n) => new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(outputs[n]));\n                  } else {\n                    return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(outputs[\n                      /** @type {string} */\n                      names\n                    ]);\n                  }\n                }\n              );\n            };\n            class TensorOpRegistry {\n              static get nearest_interpolate_4d() {\n                if (!this._nearest_interpolate_4d) {\n                  this._nearest_interpolate_4d = wrap(\n                    [8, 10, 18, 0, 58, 129, 1, 10, 41, 10, 1, 120, 10, 0, 10, 0, 10, 1, 115, 18, 1, 121, 34, 6, 82, 101, 115, 105, 122, 101, 42, 18, 10, 4, 109, 111, 100, 101, 34, 7, 110, 101, 97, 114, 101, 115, 116, 160, 1, 3, 18, 1, 114, 90, 31, 10, 1, 120, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 90, 15, 10, 1, 115, 18, 10, 10, 8, 8, 7, 18, 4, 10, 2, 8, 4, 98, 31, 10, 1, 121, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 66, 2, 16, 21],\n                    this.session_options,\n                    \"y\"\n                  );\n                }\n                return this._nearest_interpolate_4d;\n              }\n              static get bilinear_interpolate_4d() {\n                if (!this._bilinear_interpolate_4d) {\n                  this._bilinear_interpolate_4d = wrap(\n                    [8, 9, 18, 0, 58, 128, 1, 10, 40, 10, 1, 120, 10, 0, 10, 0, 10, 1, 115, 18, 1, 121, 34, 6, 82, 101, 115, 105, 122, 101, 42, 17, 10, 4, 109, 111, 100, 101, 34, 6, 108, 105, 110, 101, 97, 114, 160, 1, 3, 18, 1, 114, 90, 31, 10, 1, 120, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 90, 15, 10, 1, 115, 18, 10, 10, 8, 8, 7, 18, 4, 10, 2, 8, 4, 98, 31, 10, 1, 121, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 66, 2, 16, 20],\n                    this.session_options,\n                    \"y\"\n                  );\n                }\n                return this._bilinear_interpolate_4d;\n              }\n              static get bicubic_interpolate_4d() {\n                if (!this._bicubic_interpolate_4d) {\n                  this._bicubic_interpolate_4d = wrap(\n                    [8, 9, 18, 0, 58, 127, 10, 39, 10, 1, 120, 10, 0, 10, 0, 10, 1, 115, 18, 1, 121, 34, 6, 82, 101, 115, 105, 122, 101, 42, 16, 10, 4, 109, 111, 100, 101, 34, 5, 99, 117, 98, 105, 99, 160, 1, 3, 18, 1, 114, 90, 31, 10, 1, 120, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 90, 15, 10, 1, 115, 18, 10, 10, 8, 8, 7, 18, 4, 10, 2, 8, 4, 98, 31, 10, 1, 121, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 66, 2, 16, 20],\n                    this.session_options,\n                    \"y\"\n                  );\n                }\n                return this._bicubic_interpolate_4d;\n              }\n              static get matmul() {\n                if (!this._matmul) {\n                  this._matmul = wrap(\n                    [8, 9, 18, 0, 58, 55, 10, 17, 10, 1, 97, 10, 1, 98, 18, 1, 99, 34, 6, 77, 97, 116, 77, 117, 108, 18, 1, 114, 90, 9, 10, 1, 97, 18, 4, 10, 2, 8, 1, 90, 9, 10, 1, 98, 18, 4, 10, 2, 8, 1, 98, 9, 10, 1, 99, 18, 4, 10, 2, 8, 1, 66, 2, 16, 20],\n                    this.session_options,\n                    \"c\"\n                  );\n                }\n                return this._matmul;\n              }\n              static get stft() {\n                if (!this._stft) {\n                  this._stft = wrap(\n                    [8, 7, 18, 0, 58, 148, 1, 10, 38, 10, 1, 115, 10, 1, 106, 10, 1, 119, 10, 1, 108, 18, 1, 111, 34, 4, 83, 84, 70, 84, 42, 15, 10, 8, 111, 110, 101, 115, 105, 100, 101, 100, 24, 1, 160, 1, 2, 18, 1, 115, 90, 26, 10, 1, 115, 18, 21, 10, 19, 8, 1, 18, 15, 10, 3, 18, 1, 98, 10, 3, 18, 1, 115, 10, 3, 18, 1, 99, 90, 11, 10, 1, 106, 18, 6, 10, 4, 8, 7, 18, 0, 90, 16, 10, 1, 119, 18, 11, 10, 9, 8, 1, 18, 5, 10, 3, 18, 1, 119, 90, 11, 10, 1, 108, 18, 6, 10, 4, 8, 7, 18, 0, 98, 31, 10, 1, 111, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 102, 10, 3, 18, 1, 100, 10, 3, 18, 1, 99, 66, 2, 16, 17],\n                    this.session_options,\n                    \"o\"\n                  );\n                }\n                return this._stft;\n              }\n              static get rfft() {\n                if (!this._rfft) {\n                  this._rfft = wrap(\n                    [8, 9, 18, 0, 58, 97, 10, 33, 10, 1, 120, 10, 0, 10, 1, 97, 18, 1, 121, 34, 3, 68, 70, 84, 42, 15, 10, 8, 111, 110, 101, 115, 105, 100, 101, 100, 24, 1, 160, 1, 2, 18, 1, 100, 90, 21, 10, 1, 120, 18, 16, 10, 14, 8, 1, 18, 10, 10, 3, 18, 1, 115, 10, 3, 18, 1, 99, 90, 11, 10, 1, 97, 18, 6, 10, 4, 8, 7, 18, 0, 98, 21, 10, 1, 121, 18, 16, 10, 14, 8, 1, 18, 10, 10, 3, 18, 1, 115, 10, 3, 18, 1, 99, 66, 2, 16, 20],\n                    this.session_options,\n                    \"y\"\n                  );\n                }\n                return this._rfft;\n              }\n              static get top_k() {\n                if (!this._top_k) {\n                  this._top_k = wrap(\n                    [8, 10, 18, 0, 58, 73, 10, 18, 10, 1, 120, 10, 1, 107, 18, 1, 118, 18, 1, 105, 34, 4, 84, 111, 112, 75, 18, 1, 116, 90, 9, 10, 1, 120, 18, 4, 10, 2, 8, 1, 90, 15, 10, 1, 107, 18, 10, 10, 8, 8, 7, 18, 4, 10, 2, 8, 1, 98, 9, 10, 1, 118, 18, 4, 10, 2, 8, 1, 98, 9, 10, 1, 105, 18, 4, 10, 2, 8, 7, 66, 2, 16, 21],\n                    this.session_options,\n                    [\n                      /* Values */\n                      \"v\",\n                      /* Indices */\n                      \"i\"\n                    ]\n                  );\n                }\n                return this._top_k;\n              }\n              static get slice() {\n                if (!this._slice) {\n                  this._slice = wrap(\n                    [8, 7, 18, 0, 58, 96, 10, 25, 10, 1, 120, 10, 1, 115, 10, 1, 101, 10, 1, 97, 10, 1, 116, 18, 1, 121, 34, 5, 83, 108, 105, 99, 101, 18, 1, 114, 90, 9, 10, 1, 120, 18, 4, 10, 2, 8, 1, 90, 9, 10, 1, 115, 18, 4, 10, 2, 8, 7, 90, 9, 10, 1, 101, 18, 4, 10, 2, 8, 7, 90, 9, 10, 1, 97, 18, 4, 10, 2, 8, 7, 90, 9, 10, 1, 116, 18, 4, 10, 2, 8, 7, 98, 9, 10, 1, 121, 18, 4, 10, 2, 8, 1, 66, 2, 16, 13],\n                    this.session_options,\n                    \"y\"\n                  );\n                }\n                return this._slice;\n              }\n            }\n            __publicField(TensorOpRegistry, \"session_options\", {\n              // TODO: Allow for multiple execution providers\n              // executionProviders: ['webgpu'],\n            });\n          }\n        ),\n        /***/\n        \"./src/pipelines.js\": (\n          /*!**************************!*\\\n            !*** ./src/pipelines.js ***!\n            \\**************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              AudioClassificationPipeline: () => (\n                /* binding */\n                AudioClassificationPipeline\n              ),\n              /* harmony export */\n              AutomaticSpeechRecognitionPipeline: () => (\n                /* binding */\n                AutomaticSpeechRecognitionPipeline\n              ),\n              /* harmony export */\n              BackgroundRemovalPipeline: () => (\n                /* binding */\n                BackgroundRemovalPipeline\n              ),\n              /* harmony export */\n              DepthEstimationPipeline: () => (\n                /* binding */\n                DepthEstimationPipeline\n              ),\n              /* harmony export */\n              DocumentQuestionAnsweringPipeline: () => (\n                /* binding */\n                DocumentQuestionAnsweringPipeline\n              ),\n              /* harmony export */\n              FeatureExtractionPipeline: () => (\n                /* binding */\n                FeatureExtractionPipeline\n              ),\n              /* harmony export */\n              FillMaskPipeline: () => (\n                /* binding */\n                FillMaskPipeline\n              ),\n              /* harmony export */\n              ImageClassificationPipeline: () => (\n                /* binding */\n                ImageClassificationPipeline\n              ),\n              /* harmony export */\n              ImageFeatureExtractionPipeline: () => (\n                /* binding */\n                ImageFeatureExtractionPipeline\n              ),\n              /* harmony export */\n              ImageSegmentationPipeline: () => (\n                /* binding */\n                ImageSegmentationPipeline\n              ),\n              /* harmony export */\n              ImageToImagePipeline: () => (\n                /* binding */\n                ImageToImagePipeline\n              ),\n              /* harmony export */\n              ImageToTextPipeline: () => (\n                /* binding */\n                ImageToTextPipeline\n              ),\n              /* harmony export */\n              ObjectDetectionPipeline: () => (\n                /* binding */\n                ObjectDetectionPipeline\n              ),\n              /* harmony export */\n              Pipeline: () => (\n                /* binding */\n                Pipeline\n              ),\n              /* harmony export */\n              QuestionAnsweringPipeline: () => (\n                /* binding */\n                QuestionAnsweringPipeline\n              ),\n              /* harmony export */\n              SummarizationPipeline: () => (\n                /* binding */\n                SummarizationPipeline\n              ),\n              /* harmony export */\n              Text2TextGenerationPipeline: () => (\n                /* binding */\n                Text2TextGenerationPipeline\n              ),\n              /* harmony export */\n              TextClassificationPipeline: () => (\n                /* binding */\n                TextClassificationPipeline\n              ),\n              /* harmony export */\n              TextGenerationPipeline: () => (\n                /* binding */\n                TextGenerationPipeline\n              ),\n              /* harmony export */\n              TextToAudioPipeline: () => (\n                /* binding */\n                TextToAudioPipeline\n              ),\n              /* harmony export */\n              TokenClassificationPipeline: () => (\n                /* binding */\n                TokenClassificationPipeline\n              ),\n              /* harmony export */\n              TranslationPipeline: () => (\n                /* binding */\n                TranslationPipeline\n              ),\n              /* harmony export */\n              ZeroShotAudioClassificationPipeline: () => (\n                /* binding */\n                ZeroShotAudioClassificationPipeline\n              ),\n              /* harmony export */\n              ZeroShotClassificationPipeline: () => (\n                /* binding */\n                ZeroShotClassificationPipeline\n              ),\n              /* harmony export */\n              ZeroShotImageClassificationPipeline: () => (\n                /* binding */\n                ZeroShotImageClassificationPipeline\n              ),\n              /* harmony export */\n              ZeroShotObjectDetectionPipeline: () => (\n                /* binding */\n                ZeroShotObjectDetectionPipeline\n              ),\n              /* harmony export */\n              pipeline: () => (\n                /* binding */\n                pipeline\n              )\n              /* harmony export */\n            });\n            var _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ./tokenizers.js */\n              \"./src/tokenizers.js\"\n            );\n            var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ./models.js */\n              \"./src/models.js\"\n            );\n            var _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ./models/auto/processing_auto.js */\n              \"./src/models/auto/processing_auto.js\"\n            );\n            var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ./base/processing_utils.js */\n              \"./src/base/processing_utils.js\"\n            );\n            var _utils_generic_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(\n              /*! ./utils/generic.js */\n              \"./src/utils/generic.js\"\n            );\n            var _utils_core_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(\n              /*! ./utils/core.js */\n              \"./src/utils/core.js\"\n            );\n            var _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(\n              /*! ./utils/maths.js */\n              \"./src/utils/maths.js\"\n            );\n            var _utils_audio_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(\n              /*! ./utils/audio.js */\n              \"./src/utils/audio.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(\n              /*! ./utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var _utils_image_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(\n              /*! ./utils/image.js */\n              \"./src/utils/image.js\"\n            );\n            async function prepareImages(images) {\n              if (!Array.isArray(images)) {\n                images = [images];\n              }\n              return await Promise.all(images.map((x) => _utils_image_js__WEBPACK_IMPORTED_MODULE_9__.RawImage.read(x)));\n            }\n            async function prepareAudios(audios, sampling_rate) {\n              if (!Array.isArray(audios)) {\n                audios = [audios];\n              }\n              return await Promise.all(audios.map((x) => {\n                if (typeof x === \"string\" || x instanceof URL) {\n                  return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_7__.read_audio)(x, sampling_rate);\n                } else if (x instanceof Float64Array) {\n                  return new Float32Array(x);\n                }\n                return x;\n              }));\n            }\n            function get_bounding_box(box, asInteger) {\n              if (asInteger) {\n                box = box.map((x) => x | 0);\n              }\n              const [xmin, ymin, xmax, ymax] = box;\n              return { xmin, ymin, xmax, ymax };\n            }\n            class Pipeline extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_4__.Callable {\n              /**\n               * Create a new Pipeline.\n               * @param {Object} options An object containing the following properties:\n               * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.\n               * @param {PreTrainedModel} [options.model] The model used by the pipeline.\n               * @param {PreTrainedTokenizer} [options.tokenizer=null] The tokenizer used by the pipeline (if any).\n               * @param {Processor} [options.processor=null] The processor used by the pipeline (if any).\n               */\n              constructor({ task, model, tokenizer = null, processor = null }) {\n                super();\n                this.task = task;\n                this.model = model;\n                this.tokenizer = tokenizer;\n                this.processor = processor;\n              }\n              /** @type {DisposeType} */\n              async dispose() {\n                await this.model.dispose();\n              }\n            }\n            class TextClassificationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => TextClassificationPipelineType} */\n            Pipeline {\n              /**\n               * Create a new TextClassificationPipeline.\n               * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {TextClassificationPipelineCallback} */\n              async _call(texts, {\n                top_k = 1\n              } = {}) {\n                const model_inputs = this.tokenizer(texts, {\n                  padding: true,\n                  truncation: true\n                });\n                const outputs = await this.model(model_inputs);\n                const function_to_apply = (\n                  // @ts-expect-error TS2339\n                  this.model.config.problem_type === \"multi_label_classification\" ? (batch) => batch.sigmoid() : (batch) => new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor(\n                    \"float32\",\n                    (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(batch.data),\n                    batch.dims\n                  )\n                );\n                const id2label = this.model.config.id2label;\n                const toReturn = [];\n                for (const batch of outputs.logits) {\n                  const output = function_to_apply(batch);\n                  const scores = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.topk)(output, top_k);\n                  const values = scores[0].tolist();\n                  const indices = scores[1].tolist();\n                  const vals = indices.map((x, i) => ({\n                    label: id2label ? id2label[x] : `LABEL_${x}`,\n                    score: values[i]\n                  }));\n                  if (top_k === 1) {\n                    toReturn.push(...vals);\n                  } else {\n                    toReturn.push(vals);\n                  }\n                }\n                return Array.isArray(texts) || top_k === 1 ? (\n                  /** @type {TextClassificationOutput} */\n                  toReturn\n                ) : (\n                  /** @type {TextClassificationOutput[]} */\n                  toReturn[0]\n                );\n              }\n            }\n            class TokenClassificationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => TokenClassificationPipelineType} */\n            Pipeline {\n              /**\n               * Create a new TokenClassificationPipeline.\n               * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {TokenClassificationPipelineCallback} */\n              async _call(texts, {\n                ignore_labels = [\"O\"]\n              } = {}) {\n                const isBatched = Array.isArray(texts);\n                const model_inputs = this.tokenizer(isBatched ? texts : [texts], {\n                  padding: true,\n                  truncation: true\n                });\n                const outputs = await this.model(model_inputs);\n                const logits = outputs.logits;\n                const id2label = this.model.config.id2label;\n                const toReturn = [];\n                for (let i = 0; i < logits.dims[0]; ++i) {\n                  const ids = model_inputs.input_ids[i];\n                  const batch = logits[i];\n                  const tokens = [];\n                  for (let j = 0; j < batch.dims[0]; ++j) {\n                    const tokenData = batch[j];\n                    const topScoreIndex = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.max)(tokenData.data)[1];\n                    const entity = id2label ? id2label[topScoreIndex] : `LABEL_${topScoreIndex}`;\n                    if (ignore_labels.includes(entity)) {\n                      continue;\n                    }\n                    const word = this.tokenizer.decode([ids[j].item()], { skip_special_tokens: true });\n                    if (word === \"\") {\n                      continue;\n                    }\n                    const scores = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(tokenData.data);\n                    tokens.push({\n                      entity,\n                      score: scores[topScoreIndex],\n                      index: j,\n                      word\n                      // TODO: Add support for start and end\n                      // start: null,\n                      // end: null,\n                    });\n                  }\n                  toReturn.push(tokens);\n                }\n                return isBatched ? toReturn : toReturn[0];\n              }\n            }\n            class QuestionAnsweringPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => QuestionAnsweringPipelineType} */\n            Pipeline {\n              /**\n               * Create a new QuestionAnsweringPipeline.\n               * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {QuestionAnsweringPipelineCallback} */\n              async _call(question, context, {\n                top_k = 1\n              } = {}) {\n                const inputs = this.tokenizer(question, {\n                  text_pair: context,\n                  padding: true,\n                  truncation: true\n                });\n                const { start_logits, end_logits } = await this.model(inputs);\n                const input_ids = inputs.input_ids.tolist();\n                const attention_mask = inputs.attention_mask.tolist();\n                const special_tokens = this.tokenizer.all_special_ids;\n                const toReturn = [];\n                for (let j = 0; j < start_logits.dims[0]; ++j) {\n                  const ids = input_ids[j];\n                  const sepIndex = ids.findIndex(\n                    (x) => (\n                      // We use == to match bigint with number\n                      // @ts-ignore\n                      x == this.tokenizer.sep_token_id\n                    )\n                  );\n                  const valid_mask = attention_mask[j].map((y, ix) => y == 1 && (ix === 0 || ix > sepIndex && special_tokens.findIndex((x) => x == ids[ix]) === -1));\n                  const start = start_logits[j].tolist();\n                  const end = end_logits[j].tolist();\n                  for (let i = 1; i < start.length; ++i) {\n                    if (attention_mask[j] == 0 || i <= sepIndex || special_tokens.findIndex((x) => x == ids[i]) !== -1) {\n                      start[i] = -Infinity;\n                      end[i] = -Infinity;\n                    }\n                  }\n                  const start_scores = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(start).map((x, i) => [x, i]);\n                  const end_scores = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(end).map((x, i) => [x, i]);\n                  start_scores[0][0] = 0;\n                  end_scores[0][0] = 0;\n                  const options = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_5__.product)(start_scores, end_scores).filter((x) => x[0][1] <= x[1][1]).map((x) => [x[0][1], x[1][1], x[0][0] * x[1][0]]).sort((a, b) => b[2] - a[2]);\n                  for (let k2 = 0; k2 < Math.min(options.length, top_k); ++k2) {\n                    const [start2, end2, score] = options[k2];\n                    const answer_tokens = ids.slice(start2, end2 + 1);\n                    const answer = this.tokenizer.decode(answer_tokens, {\n                      skip_special_tokens: true\n                    });\n                    toReturn.push({\n                      answer,\n                      score\n                    });\n                  }\n                }\n                return top_k === 1 ? toReturn[0] : toReturn;\n              }\n            }\n            class FillMaskPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => FillMaskPipelineType} */\n            Pipeline {\n              /**\n               * Create a new FillMaskPipeline.\n               * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {FillMaskPipelineCallback} */\n              async _call(texts, {\n                top_k = 5\n              } = {}) {\n                const model_inputs = this.tokenizer(texts, {\n                  padding: true,\n                  truncation: true\n                });\n                const { logits } = await this.model(model_inputs);\n                const toReturn = [];\n                const input_ids = model_inputs.input_ids.tolist();\n                for (let i = 0; i < input_ids.length; ++i) {\n                  const ids = input_ids[i];\n                  const mask_token_index = ids.findIndex(\n                    (x) => (\n                      // We use == to match bigint with number\n                      // @ts-ignore\n                      x == this.tokenizer.mask_token_id\n                    )\n                  );\n                  if (mask_token_index === -1) {\n                    throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);\n                  }\n                  const itemLogits = logits[i][mask_token_index];\n                  const scores = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.topk)(new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor(\n                    \"float32\",\n                    (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(itemLogits.data),\n                    itemLogits.dims\n                  ), top_k);\n                  const values = scores[0].tolist();\n                  const indices = scores[1].tolist();\n                  toReturn.push(indices.map((x, i2) => {\n                    const sequence = ids.slice();\n                    sequence[mask_token_index] = x;\n                    return {\n                      score: values[i2],\n                      token: Number(x),\n                      token_str: this.tokenizer.decode([x]),\n                      sequence: this.tokenizer.decode(sequence, { skip_special_tokens: true })\n                    };\n                  }));\n                }\n                return Array.isArray(texts) ? toReturn : toReturn[0];\n              }\n            }\n            class Text2TextGenerationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => Text2TextGenerationPipelineType} */\n            Pipeline {\n              /**\n               * Create a new Text2TextGenerationPipeline.\n               * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n                /** @type {'generated_text'} */\n                __publicField(this, \"_key\", \"generated_text\");\n              }\n              /** @type {Text2TextGenerationPipelineCallback} */\n              async _call(texts, generate_kwargs = {}) {\n                if (!Array.isArray(texts)) {\n                  texts = [texts];\n                }\n                if (this.model.config.prefix) {\n                  texts = texts.map((x) => this.model.config.prefix + x);\n                }\n                const task_specific_params = this.model.config.task_specific_params;\n                if (task_specific_params && task_specific_params[this.task]) {\n                  if (task_specific_params[this.task].prefix) {\n                    texts = texts.map((x) => task_specific_params[this.task].prefix + x);\n                  }\n                }\n                const tokenizer = this.tokenizer;\n                const tokenizer_options = {\n                  padding: true,\n                  truncation: true\n                };\n                let inputs;\n                if (this instanceof TranslationPipeline && \"_build_translation_inputs\" in tokenizer) {\n                  inputs = tokenizer._build_translation_inputs(texts, tokenizer_options, generate_kwargs);\n                } else {\n                  inputs = tokenizer(texts, tokenizer_options);\n                }\n                const outputTokenIds = await this.model.generate({ ...inputs, ...generate_kwargs });\n                return tokenizer.batch_decode(\n                  /** @type {Tensor} */\n                  outputTokenIds,\n                  {\n                    skip_special_tokens: true\n                  }\n                ).map((text) => ({ [this._key]: text }));\n              }\n            }\n            class SummarizationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => SummarizationPipelineType} */\n            /** @type {any} */\n            Text2TextGenerationPipeline {\n              /**\n               * Create a new SummarizationPipeline.\n               * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n                /** @type {'summary_text'} */\n                __publicField(this, \"_key\", \"summary_text\");\n              }\n            }\n            class TranslationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => TranslationPipelineType} */\n            /** @type {any} */\n            Text2TextGenerationPipeline {\n              /**\n               * Create a new TranslationPipeline.\n               * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n                /** @type {'translation_text'} */\n                __publicField(this, \"_key\", \"translation_text\");\n              }\n            }\n            function isChat(x) {\n              return Array.isArray(x) && x.every((x2) => \"role\" in x2 && \"content\" in x2);\n            }\n            class TextGenerationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => TextGenerationPipelineType} */\n            Pipeline {\n              /**\n               * Create a new TextGenerationPipeline.\n               * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {TextGenerationPipelineCallback} */\n              async _call(texts, generate_kwargs = {}) {\n                let isBatched = false;\n                let isChatInput = false;\n                let inputs;\n                if (typeof texts === \"string\") {\n                  inputs = texts = [texts];\n                } else if (Array.isArray(texts) && texts.every((x) => typeof x === \"string\")) {\n                  isBatched = true;\n                  inputs = /** @type {string[]} */\n                  texts;\n                } else {\n                  if (isChat(texts)) {\n                    texts = [\n                      /** @type {Chat} */\n                      texts\n                    ];\n                  } else if (Array.isArray(texts) && texts.every(isChat)) {\n                    isBatched = true;\n                  } else {\n                    throw new Error(\"Input must be a string, an array of strings, a Chat, or an array of Chats\");\n                  }\n                  isChatInput = true;\n                  inputs = /** @type {string[]} */\n                  /** @type {Chat[]} */\n                  texts.map(\n                    (x) => this.tokenizer.apply_chat_template(x, {\n                      tokenize: false,\n                      add_generation_prompt: true\n                    })\n                  );\n                }\n                const add_special_tokens = generate_kwargs.add_special_tokens ?? false;\n                const return_full_text = isChatInput ? false : generate_kwargs.return_full_text ?? true;\n                this.tokenizer.padding_side = \"left\";\n                const text_inputs = this.tokenizer(inputs, {\n                  add_special_tokens,\n                  padding: true,\n                  truncation: true\n                });\n                const outputTokenIds = (\n                  /** @type {Tensor} */\n                  await this.model.generate({\n                    ...text_inputs,\n                    ...generate_kwargs\n                  })\n                );\n                const decoded = this.tokenizer.batch_decode(outputTokenIds, {\n                  skip_special_tokens: true\n                });\n                let promptLengths;\n                if (!return_full_text && text_inputs.input_ids.dims.at(-1) > 0) {\n                  promptLengths = this.tokenizer.batch_decode(text_inputs.input_ids, {\n                    skip_special_tokens: true\n                  }).map((x) => x.length);\n                }\n                const toReturn = Array.from({ length: texts.length }, (_) => []);\n                for (let i = 0; i < decoded.length; ++i) {\n                  const textIndex = Math.floor(i / outputTokenIds.dims[0] * texts.length);\n                  if (promptLengths) {\n                    decoded[i] = decoded[i].slice(promptLengths[textIndex]);\n                  }\n                  toReturn[textIndex].push({\n                    generated_text: isChatInput ? [\n                      .../** @type {Chat[]} */\n                      texts[textIndex],\n                      { role: \"assistant\", content: decoded[i] }\n                    ] : decoded[i]\n                  });\n                }\n                return !isBatched && toReturn.length === 1 ? toReturn[0] : toReturn;\n              }\n            }\n            class ZeroShotClassificationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => ZeroShotClassificationPipelineType} */\n            Pipeline {\n              /**\n               * Create a new ZeroShotClassificationPipeline.\n               * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n                this.label2id = Object.fromEntries(\n                  Object.entries(\n                    /** @type {any} */\n                    this.model.config.label2id\n                  ).map(\n                    ([k2, v]) => [k2.toLowerCase(), v]\n                  )\n                );\n                this.entailment_id = this.label2id[\"entailment\"];\n                if (this.entailment_id === void 0) {\n                  console.warn(\"Could not find 'entailment' in label2id mapping. Using 2 as entailment_id.\");\n                  this.entailment_id = 2;\n                }\n                this.contradiction_id = this.label2id[\"contradiction\"] ?? this.label2id[\"not_entailment\"];\n                if (this.contradiction_id === void 0) {\n                  console.warn(\"Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id.\");\n                  this.contradiction_id = 0;\n                }\n              }\n              /** @type {ZeroShotClassificationPipelineCallback} */\n              async _call(texts, candidate_labels, {\n                hypothesis_template = \"This example is {}.\",\n                multi_label = false\n              } = {}) {\n                const isBatched = Array.isArray(texts);\n                if (!isBatched) {\n                  texts = [\n                    /** @type {string} */\n                    texts\n                  ];\n                }\n                if (!Array.isArray(candidate_labels)) {\n                  candidate_labels = [candidate_labels];\n                }\n                const hypotheses = candidate_labels.map(\n                  (x) => hypothesis_template.replace(\"{}\", x)\n                );\n                const softmaxEach = multi_label || candidate_labels.length === 1;\n                const toReturn = [];\n                for (const premise of texts) {\n                  const entails_logits = [];\n                  for (const hypothesis of hypotheses) {\n                    const inputs = this.tokenizer(premise, {\n                      text_pair: hypothesis,\n                      padding: true,\n                      truncation: true\n                    });\n                    const outputs = await this.model(inputs);\n                    if (softmaxEach) {\n                      entails_logits.push([\n                        outputs.logits.data[this.contradiction_id],\n                        outputs.logits.data[this.entailment_id]\n                      ]);\n                    } else {\n                      entails_logits.push(outputs.logits.data[this.entailment_id]);\n                    }\n                  }\n                  const scores = softmaxEach ? entails_logits.map((x) => (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(x)[1]) : (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(entails_logits);\n                  const scores_sorted = scores.map((x, i) => [x, i]).sort((a, b) => b[0] - a[0]);\n                  toReturn.push({\n                    sequence: premise,\n                    labels: scores_sorted.map((x) => candidate_labels[x[1]]),\n                    scores: scores_sorted.map((x) => x[0])\n                  });\n                }\n                return isBatched ? toReturn : toReturn[0];\n              }\n            }\n            class FeatureExtractionPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => FeatureExtractionPipelineType} */\n            Pipeline {\n              /**\n               * Create a new FeatureExtractionPipeline.\n               * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {FeatureExtractionPipelineCallback} */\n              async _call(texts, {\n                pooling = (\n                  /** @type {'none'} */\n                  \"none\"\n                ),\n                normalize = false,\n                quantize = false,\n                precision = (\n                  /** @type {'binary'} */\n                  \"binary\"\n                )\n              } = {}) {\n                const model_inputs = this.tokenizer(texts, {\n                  padding: true,\n                  truncation: true\n                });\n                const outputs = await this.model(model_inputs);\n                let result = outputs.last_hidden_state ?? outputs.logits ?? outputs.token_embeddings;\n                if (pooling === \"none\") {\n                } else if (pooling === \"mean\") {\n                  result = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.mean_pooling)(result, model_inputs.attention_mask);\n                } else if (pooling === \"cls\") {\n                  result = result.slice(null, 0);\n                } else {\n                  throw Error(`Pooling method '${pooling}' not supported.`);\n                }\n                if (normalize) {\n                  result = result.normalize(2, -1);\n                }\n                if (quantize) {\n                  result = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.quantize_embeddings)(result, precision);\n                }\n                return result;\n              }\n            }\n            class ImageFeatureExtractionPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageFeatureExtractionPipelineType} */\n            Pipeline {\n              /**\n               * Create a new ImageFeatureExtractionPipeline.\n               * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {ImageFeatureExtractionPipelineCallback} */\n              async _call(images, {\n                pool = null\n              } = {}) {\n                const preparedImages = await prepareImages(images);\n                const { pixel_values } = await this.processor(preparedImages);\n                const outputs = await this.model({ pixel_values });\n                let result;\n                if (pool) {\n                  if (!(\"pooler_output\" in outputs)) {\n                    throw Error(`No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.`);\n                  }\n                  result = outputs.pooler_output;\n                } else {\n                  result = outputs.last_hidden_state ?? outputs.logits ?? outputs.image_embeds;\n                }\n                return result;\n              }\n            }\n            class AudioClassificationPipeline extends /** @type {new (options: AudioPipelineConstructorArgs) => AudioClassificationPipelineType} */\n            Pipeline {\n              /**\n               * Create a new AudioClassificationPipeline.\n               * @param {AudioPipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {AudioClassificationPipelineCallback} */\n              async _call(audio, {\n                top_k = 5\n              } = {}) {\n                const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n                const preparedAudios = await prepareAudios(audio, sampling_rate);\n                const id2label = this.model.config.id2label;\n                const toReturn = [];\n                for (const aud of preparedAudios) {\n                  const inputs = await this.processor(aud);\n                  const output = await this.model(inputs);\n                  const logits = output.logits[0];\n                  const scores = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.topk)(new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor(\n                    \"float32\",\n                    (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(logits.data),\n                    logits.dims\n                  ), top_k);\n                  const values = scores[0].tolist();\n                  const indices = scores[1].tolist();\n                  const vals = indices.map((x, i) => ({\n                    label: (\n                      /** @type {string} */\n                      id2label ? id2label[x] : `LABEL_${x}`\n                    ),\n                    score: (\n                      /** @type {number} */\n                      values[i]\n                    )\n                  }));\n                  toReturn.push(vals);\n                }\n                ;\n                return Array.isArray(audio) ? toReturn : toReturn[0];\n              }\n            }\n            class ZeroShotAudioClassificationPipeline extends /** @type {new (options: TextAudioPipelineConstructorArgs) => ZeroShotAudioClassificationPipelineType} */\n            Pipeline {\n              /**\n               * Create a new ZeroShotAudioClassificationPipeline.\n               * @param {TextAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {ZeroShotAudioClassificationPipelineCallback} */\n              async _call(audio, candidate_labels, {\n                hypothesis_template = \"This is a sound of {}.\"\n              } = {}) {\n                const single = !Array.isArray(audio);\n                if (single) {\n                  audio = [\n                    /** @type {AudioInput} */\n                    audio\n                  ];\n                }\n                const texts = candidate_labels.map(\n                  (x) => hypothesis_template.replace(\"{}\", x)\n                );\n                const text_inputs = this.tokenizer(texts, {\n                  padding: true,\n                  truncation: true\n                });\n                const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n                const preparedAudios = await prepareAudios(audio, sampling_rate);\n                const toReturn = [];\n                for (const aud of preparedAudios) {\n                  const audio_inputs = await this.processor(aud);\n                  const output = await this.model({ ...text_inputs, ...audio_inputs });\n                  const probs = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(output.logits_per_audio.data);\n                  toReturn.push([...probs].map((x, i) => ({\n                    score: x,\n                    label: candidate_labels[i]\n                  })));\n                }\n                return single ? toReturn[0] : toReturn;\n              }\n            }\n            class AutomaticSpeechRecognitionPipeline extends /** @type {new (options: TextAudioPipelineConstructorArgs) => AutomaticSpeechRecognitionPipelineType} */\n            Pipeline {\n              /**\n               * Create a new AutomaticSpeechRecognitionPipeline.\n               * @param {TextAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {AutomaticSpeechRecognitionPipelineCallback} */\n              async _call(audio, kwargs = {}) {\n                switch (this.model.config.model_type) {\n                  case \"whisper\":\n                  case \"lite-whisper\":\n                    return this._call_whisper(audio, kwargs);\n                  case \"wav2vec2\":\n                  case \"wav2vec2-bert\":\n                  case \"unispeech\":\n                  case \"unispeech-sat\":\n                  case \"hubert\":\n                    return this._call_wav2vec2(audio, kwargs);\n                  case \"moonshine\":\n                    return this._call_moonshine(audio, kwargs);\n                  default:\n                    throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`);\n                }\n              }\n              /**\n               * @type {AutomaticSpeechRecognitionPipelineCallback}\n               * @private\n               */\n              async _call_wav2vec2(audio, kwargs) {\n                if (kwargs.language) {\n                  console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to \"English\".');\n                }\n                if (kwargs.task) {\n                  console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to \"transcribe\".');\n                }\n                const single = !Array.isArray(audio);\n                if (single) {\n                  audio = [\n                    /** @type {AudioInput} */\n                    audio\n                  ];\n                }\n                const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n                const preparedAudios = await prepareAudios(audio, sampling_rate);\n                const toReturn = [];\n                for (const aud of preparedAudios) {\n                  const inputs = await this.processor(aud);\n                  const output = await this.model(inputs);\n                  const logits = output.logits[0];\n                  const predicted_ids = [];\n                  for (const item of logits) {\n                    predicted_ids.push((0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.max)(item.data)[1]);\n                  }\n                  const predicted_sentences = this.tokenizer.decode(predicted_ids);\n                  toReturn.push({ text: predicted_sentences });\n                }\n                return single ? toReturn[0] : toReturn;\n              }\n              /**\n               * @type {AutomaticSpeechRecognitionPipelineCallback}\n               * @private\n               */\n              async _call_whisper(audio, kwargs) {\n                const return_timestamps = kwargs.return_timestamps ?? false;\n                const chunk_length_s = kwargs.chunk_length_s ?? 0;\n                const force_full_sequences = kwargs.force_full_sequences ?? false;\n                let stride_length_s = kwargs.stride_length_s ?? null;\n                const generation_config = { ...kwargs };\n                if (return_timestamps === \"word\") {\n                  generation_config[\"return_token_timestamps\"] = true;\n                  generation_config[\"return_timestamps\"] = false;\n                }\n                const single = !Array.isArray(audio);\n                if (single) {\n                  audio = [\n                    /** @type {AudioInput} */\n                    audio\n                  ];\n                }\n                const time_precision = this.processor.feature_extractor.config.chunk_length / this.model.config.max_source_positions;\n                const hop_length = this.processor.feature_extractor.config.hop_length;\n                const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n                const preparedAudios = await prepareAudios(audio, sampling_rate);\n                const toReturn = [];\n                for (const aud of preparedAudios) {\n                  let chunks = [];\n                  if (chunk_length_s > 0) {\n                    if (stride_length_s === null) {\n                      stride_length_s = chunk_length_s / 6;\n                    } else if (chunk_length_s <= stride_length_s) {\n                      throw Error(\"`chunk_length_s` must be larger than `stride_length_s`.\");\n                    }\n                    const window2 = sampling_rate * chunk_length_s;\n                    const stride = sampling_rate * stride_length_s;\n                    const jump = window2 - 2 * stride;\n                    let offset = 0;\n                    while (true) {\n                      const offset_end = offset + window2;\n                      const subarr = aud.subarray(offset, offset_end);\n                      const feature = await this.processor(subarr);\n                      const is_first = offset === 0;\n                      const is_last = offset_end >= aud.length;\n                      chunks.push({\n                        stride: [\n                          subarr.length,\n                          is_first ? 0 : stride,\n                          is_last ? 0 : stride\n                        ],\n                        input_features: feature.input_features,\n                        is_last\n                      });\n                      if (is_last) break;\n                      offset += jump;\n                    }\n                  } else {\n                    chunks = [{\n                      stride: [aud.length, 0, 0],\n                      input_features: (await this.processor(aud)).input_features,\n                      is_last: true\n                    }];\n                  }\n                  for (const chunk of chunks) {\n                    generation_config.num_frames = Math.floor(chunk.stride[0] / hop_length);\n                    const data = await this.model.generate({\n                      inputs: chunk.input_features,\n                      ...generation_config\n                    });\n                    if (return_timestamps === \"word\") {\n                      chunk.tokens = data.sequences.tolist()[0];\n                      chunk.token_timestamps = data.token_timestamps.tolist()[0].map(\n                        (x) => (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.round)(x, 2)\n                      );\n                    } else {\n                      chunk.tokens = /** @type {Tensor} */\n                      data[0].tolist();\n                    }\n                    chunk.stride = chunk.stride.map((x) => x / sampling_rate);\n                  }\n                  const [full_text, optional] = this.tokenizer._decode_asr(chunks, {\n                    time_precision,\n                    return_timestamps,\n                    force_full_sequences\n                  });\n                  toReturn.push({ text: full_text, ...optional });\n                }\n                return single ? toReturn[0] : toReturn;\n              }\n              /**\n               * @type {AutomaticSpeechRecognitionPipelineCallback}\n               * @private\n               */\n              async _call_moonshine(audio, kwargs) {\n                const single = !Array.isArray(audio);\n                if (single) {\n                  audio = [\n                    /** @type {AudioInput} */\n                    audio\n                  ];\n                }\n                const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n                const preparedAudios = await prepareAudios(audio, sampling_rate);\n                const toReturn = [];\n                for (const aud of preparedAudios) {\n                  const inputs = await this.processor(aud);\n                  const max_new_tokens = Math.floor(aud.length / sampling_rate) * 6;\n                  const outputs = await this.model.generate({ max_new_tokens, ...kwargs, ...inputs });\n                  const text = this.processor.batch_decode(\n                    /** @type {Tensor} */\n                    outputs,\n                    { skip_special_tokens: true }\n                  )[0];\n                  toReturn.push({ text });\n                }\n                return single ? toReturn[0] : toReturn;\n              }\n            }\n            class ImageToTextPipeline extends /** @type {new (options: TextImagePipelineConstructorArgs) => ImageToTextPipelineType} */\n            Pipeline {\n              /**\n               * Create a new ImageToTextPipeline.\n               * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {ImageToTextPipelineCallback} */\n              async _call(images, generate_kwargs = {}) {\n                const isBatched = Array.isArray(images);\n                const preparedImages = await prepareImages(images);\n                const { pixel_values } = await this.processor(preparedImages);\n                const toReturn = [];\n                for (const batch of pixel_values) {\n                  batch.dims = [1, ...batch.dims];\n                  const output = await this.model.generate({ inputs: batch, ...generate_kwargs });\n                  const decoded = this.tokenizer.batch_decode(\n                    /** @type {Tensor} */\n                    output,\n                    {\n                      skip_special_tokens: true\n                    }\n                  ).map((x) => ({ generated_text: x.trim() }));\n                  toReturn.push(decoded);\n                }\n                return isBatched ? toReturn : toReturn[0];\n              }\n            }\n            class ImageClassificationPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageClassificationPipelineType} */\n            Pipeline {\n              /**\n               * Create a new ImageClassificationPipeline.\n               * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {ImageClassificationPipelineCallback} */\n              async _call(images, {\n                top_k = 5\n              } = {}) {\n                const preparedImages = await prepareImages(images);\n                const { pixel_values } = await this.processor(preparedImages);\n                const output = await this.model({ pixel_values });\n                const id2label = this.model.config.id2label;\n                const toReturn = [];\n                for (const batch of output.logits) {\n                  const scores = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.topk)(new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor(\n                    \"float32\",\n                    (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(batch.data),\n                    batch.dims\n                  ), top_k);\n                  const values = scores[0].tolist();\n                  const indices = scores[1].tolist();\n                  const vals = indices.map((x, i) => ({\n                    label: (\n                      /** @type {string} */\n                      id2label ? id2label[x] : `LABEL_${x}`\n                    ),\n                    score: (\n                      /** @type {number} */\n                      values[i]\n                    )\n                  }));\n                  toReturn.push(vals);\n                }\n                return Array.isArray(images) ? toReturn : toReturn[0];\n              }\n            }\n            class ImageSegmentationPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageSegmentationPipelineType} */\n            Pipeline {\n              /**\n               * Create a new ImageSegmentationPipeline.\n               * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n                this.subtasks_mapping = {\n                  // Mapping of subtasks to their corresponding post-processing function names.\n                  panoptic: \"post_process_panoptic_segmentation\",\n                  instance: \"post_process_instance_segmentation\",\n                  semantic: \"post_process_semantic_segmentation\"\n                };\n              }\n              /** @type {ImageSegmentationPipelineCallback} */\n              async _call(images, {\n                threshold = 0.5,\n                mask_threshold = 0.5,\n                overlap_mask_area_threshold = 0.8,\n                label_ids_to_fuse = null,\n                target_sizes = null,\n                subtask = null\n              } = {}) {\n                const isBatched = Array.isArray(images);\n                if (isBatched && images.length !== 1) {\n                  throw Error(\"Image segmentation pipeline currently only supports a batch size of 1.\");\n                }\n                const preparedImages = await prepareImages(images);\n                const imageSizes = preparedImages.map((x) => [x.height, x.width]);\n                const inputs = await this.processor(preparedImages);\n                const { inputNames, outputNames } = this.model.sessions[\"model\"];\n                if (!inputNames.includes(\"pixel_values\")) {\n                  if (inputNames.length !== 1) {\n                    throw Error(`Expected a single input name, but got ${inputNames.length} inputs: ${inputNames}.`);\n                  }\n                  const newName = inputNames[0];\n                  if (newName in inputs) {\n                    throw Error(`Input name ${newName} already exists in the inputs.`);\n                  }\n                  inputs[newName] = inputs.pixel_values;\n                }\n                const output = await this.model(inputs);\n                let fn = null;\n                if (subtask !== null) {\n                  fn = this.subtasks_mapping[subtask];\n                } else if (this.processor.image_processor) {\n                  for (const [task, func] of Object.entries(this.subtasks_mapping)) {\n                    if (func in this.processor.image_processor) {\n                      fn = this.processor.image_processor[func].bind(this.processor.image_processor);\n                      subtask = task;\n                      break;\n                    }\n                  }\n                }\n                const id2label = this.model.config.id2label;\n                const annotation = [];\n                if (!subtask) {\n                  const epsilon = 1e-5;\n                  const result = output[outputNames[0]];\n                  for (let i = 0; i < imageSizes.length; ++i) {\n                    const size = imageSizes[i];\n                    const item = result[i];\n                    if (item.data.some((x) => x < -epsilon || x > 1 + epsilon)) {\n                      item.sigmoid_();\n                    }\n                    const mask = await _utils_image_js__WEBPACK_IMPORTED_MODULE_9__.RawImage.fromTensor(item.mul_(255).to(\"uint8\")).resize(size[1], size[0]);\n                    annotation.push({\n                      label: null,\n                      score: null,\n                      mask\n                    });\n                  }\n                } else if (subtask === \"panoptic\" || subtask === \"instance\") {\n                  const processed = fn(\n                    output,\n                    threshold,\n                    mask_threshold,\n                    overlap_mask_area_threshold,\n                    label_ids_to_fuse,\n                    target_sizes ?? imageSizes\n                    // TODO FIX?\n                  )[0];\n                  const segmentation = processed.segmentation;\n                  for (const segment of processed.segments_info) {\n                    const maskData = new Uint8ClampedArray(segmentation.data.length);\n                    for (let i = 0; i < segmentation.data.length; ++i) {\n                      if (segmentation.data[i] === segment.id) {\n                        maskData[i] = 255;\n                      }\n                    }\n                    const mask = new _utils_image_js__WEBPACK_IMPORTED_MODULE_9__.RawImage(maskData, segmentation.dims[1], segmentation.dims[0], 1);\n                    annotation.push({\n                      score: segment.score,\n                      label: id2label[segment.label_id],\n                      mask\n                    });\n                  }\n                } else if (subtask === \"semantic\") {\n                  const { segmentation, labels } = fn(output, target_sizes ?? imageSizes)[0];\n                  for (const label of labels) {\n                    const maskData = new Uint8ClampedArray(segmentation.data.length);\n                    for (let i = 0; i < segmentation.data.length; ++i) {\n                      if (segmentation.data[i] === label) {\n                        maskData[i] = 255;\n                      }\n                    }\n                    const mask = new _utils_image_js__WEBPACK_IMPORTED_MODULE_9__.RawImage(maskData, segmentation.dims[1], segmentation.dims[0], 1);\n                    annotation.push({\n                      score: null,\n                      label: id2label[label],\n                      mask\n                    });\n                  }\n                } else {\n                  throw Error(`Subtask ${subtask} not supported.`);\n                }\n                return annotation;\n              }\n            }\n            class BackgroundRemovalPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => BackgroundRemovalPipelineType} */\n            /** @type {any} */\n            ImageSegmentationPipeline {\n              /**\n               * Create a new BackgroundRemovalPipeline.\n               * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {BackgroundRemovalPipelineCallback} */\n              async _call(images, options = {}) {\n                const isBatched = Array.isArray(images);\n                if (isBatched && images.length !== 1) {\n                  throw Error(\"Background removal pipeline currently only supports a batch size of 1.\");\n                }\n                const preparedImages = await prepareImages(images);\n                const masks = await super._call(images, options);\n                const result = preparedImages.map((img, i) => {\n                  const cloned = img.clone();\n                  cloned.putAlpha(masks[i].mask);\n                  return cloned;\n                });\n                return result;\n              }\n            }\n            class ZeroShotImageClassificationPipeline extends /** @type {new (options: TextImagePipelineConstructorArgs) => ZeroShotImageClassificationPipelineType} */\n            Pipeline {\n              /**\n               * Create a new ZeroShotImageClassificationPipeline.\n               * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {ZeroShotImageClassificationPipelineCallback} */\n              async _call(images, candidate_labels, {\n                hypothesis_template = \"This is a photo of {}\"\n              } = {}) {\n                const isBatched = Array.isArray(images);\n                const preparedImages = await prepareImages(images);\n                const texts = candidate_labels.map(\n                  (x) => hypothesis_template.replace(\"{}\", x)\n                );\n                const text_inputs = this.tokenizer(texts, {\n                  padding: this.model.config.model_type === \"siglip\" ? \"max_length\" : true,\n                  truncation: true\n                });\n                const { pixel_values } = await this.processor(preparedImages);\n                const output = await this.model({ ...text_inputs, pixel_values });\n                const function_to_apply = this.model.config.model_type === \"siglip\" ? (batch) => batch.sigmoid().data : (batch) => (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(batch.data);\n                const toReturn = [];\n                for (const batch of output.logits_per_image) {\n                  const probs = function_to_apply(batch);\n                  const result = [...probs].map((x, i) => ({\n                    score: x,\n                    label: candidate_labels[i]\n                  }));\n                  result.sort((a, b) => b.score - a.score);\n                  toReturn.push(result);\n                }\n                return isBatched ? toReturn : toReturn[0];\n              }\n            }\n            class ObjectDetectionPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ObjectDetectionPipelineType} */\n            Pipeline {\n              /**\n               * Create a new ObjectDetectionPipeline.\n               * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {ObjectDetectionPipelineCallback} */\n              async _call(images, {\n                threshold = 0.9,\n                percentage = false\n              } = {}) {\n                const isBatched = Array.isArray(images);\n                if (isBatched && images.length !== 1) {\n                  throw Error(\"Object detection pipeline currently only supports a batch size of 1.\");\n                }\n                const preparedImages = await prepareImages(images);\n                const imageSizes = percentage ? null : preparedImages.map((x) => [x.height, x.width]);\n                const { pixel_values, pixel_mask } = await this.processor(preparedImages);\n                const output = await this.model({ pixel_values, pixel_mask });\n                const processed = this.processor.image_processor.post_process_object_detection(output, threshold, imageSizes);\n                const id2label = this.model.config.id2label;\n                const result = processed.map((batch) => batch.boxes.map((box, i) => ({\n                  score: batch.scores[i],\n                  label: id2label[batch.classes[i]],\n                  box: get_bounding_box(box, !percentage)\n                })));\n                return isBatched ? result : result[0];\n              }\n            }\n            class ZeroShotObjectDetectionPipeline extends /** @type {new (options: TextImagePipelineConstructorArgs) => ZeroShotObjectDetectionPipelineType} */\n            Pipeline {\n              /**\n               * Create a new ZeroShotObjectDetectionPipeline.\n               * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {ZeroShotObjectDetectionPipelineCallback} */\n              async _call(images, candidate_labels, {\n                threshold = 0.1,\n                top_k = null,\n                percentage = false\n              } = {}) {\n                const isBatched = Array.isArray(images);\n                const preparedImages = await prepareImages(images);\n                const text_inputs = this.tokenizer(candidate_labels, {\n                  padding: true,\n                  truncation: true\n                });\n                const model_inputs = await this.processor(preparedImages);\n                const toReturn = [];\n                for (let i = 0; i < preparedImages.length; ++i) {\n                  const image = preparedImages[i];\n                  const imageSize = percentage ? null : [[image.height, image.width]];\n                  const pixel_values = model_inputs.pixel_values[i].unsqueeze_(0);\n                  const output = await this.model({ ...text_inputs, pixel_values });\n                  let result;\n                  if (\"post_process_grounded_object_detection\" in this.processor) {\n                    const processed = this.processor.post_process_grounded_object_detection(\n                      output,\n                      text_inputs.input_ids,\n                      {\n                        // TODO: support separate threshold values\n                        box_threshold: threshold,\n                        text_threshold: threshold,\n                        target_sizes: imageSize\n                      }\n                    )[0];\n                    result = processed.boxes.map((box, i2) => ({\n                      score: processed.scores[i2],\n                      label: processed.labels[i2],\n                      box: get_bounding_box(box, !percentage)\n                    }));\n                  } else {\n                    const processed = this.processor.image_processor.post_process_object_detection(output, threshold, imageSize, true)[0];\n                    result = processed.boxes.map((box, i2) => ({\n                      score: processed.scores[i2],\n                      label: candidate_labels[processed.classes[i2]],\n                      box: get_bounding_box(box, !percentage)\n                    }));\n                  }\n                  result.sort((a, b) => b.score - a.score);\n                  if (top_k !== null) {\n                    result = result.slice(0, top_k);\n                  }\n                  toReturn.push(result);\n                }\n                return isBatched ? toReturn : toReturn[0];\n              }\n            }\n            class DocumentQuestionAnsweringPipeline extends /** @type {new (options: TextImagePipelineConstructorArgs) => DocumentQuestionAnsweringPipelineType} */\n            Pipeline {\n              /**\n               * Create a new DocumentQuestionAnsweringPipeline.\n               * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {DocumentQuestionAnsweringPipelineCallback} */\n              async _call(image, question, generate_kwargs = {}) {\n                const preparedImage = (await prepareImages(image))[0];\n                const { pixel_values } = await this.processor(preparedImage);\n                const task_prompt = `<s_docvqa><s_question>${question}</s_question><s_answer>`;\n                const decoder_input_ids = this.tokenizer(task_prompt, {\n                  add_special_tokens: false,\n                  padding: true,\n                  truncation: true\n                }).input_ids;\n                const output = await this.model.generate({\n                  inputs: pixel_values,\n                  // @ts-expect-error TS2339\n                  max_length: this.model.config.decoder.max_position_embeddings,\n                  decoder_input_ids,\n                  ...generate_kwargs\n                });\n                const decoded = this.tokenizer.batch_decode(\n                  /** @type {Tensor} */\n                  output\n                )[0];\n                const match = decoded.match(/<s_answer>(.*?)<\\/s_answer>/);\n                let answer = null;\n                if (match && match.length >= 2) {\n                  answer = match[1].trim();\n                }\n                return [{ answer }];\n              }\n            }\n            class TextToAudioPipeline extends /** @type {new (options: TextToAudioPipelineConstructorArgs) => TextToAudioPipelineType} */\n            Pipeline {\n              /**\n               * Create a new TextToAudioPipeline.\n               * @param {TextToAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n                __publicField(this, \"DEFAULT_VOCODER_ID\", \"Xenova/speecht5_hifigan\");\n                this.vocoder = options.vocoder ?? null;\n              }\n              /** @type {TextToAudioPipelineCallback} */\n              async _call(text_inputs, {\n                speaker_embeddings = null\n              } = {}) {\n                if (this.processor) {\n                  return this._call_text_to_spectrogram(text_inputs, { speaker_embeddings });\n                } else {\n                  return this._call_text_to_waveform(text_inputs);\n                }\n              }\n              async _call_text_to_waveform(text_inputs) {\n                const inputs = this.tokenizer(text_inputs, {\n                  padding: true,\n                  truncation: true\n                });\n                const { waveform } = await this.model(inputs);\n                const sampling_rate = this.model.config.sampling_rate;\n                return new _utils_audio_js__WEBPACK_IMPORTED_MODULE_7__.RawAudio(\n                  waveform.data,\n                  sampling_rate\n                );\n              }\n              async _call_text_to_spectrogram(text_inputs, { speaker_embeddings }) {\n                if (!this.vocoder) {\n                  console.log(\"No vocoder specified, using default HifiGan vocoder.\");\n                  this.vocoder = await _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID, { dtype: \"fp32\" });\n                }\n                if (typeof speaker_embeddings === \"string\" || speaker_embeddings instanceof URL) {\n                  speaker_embeddings = new Float32Array(\n                    await (await fetch(speaker_embeddings)).arrayBuffer()\n                  );\n                }\n                if (speaker_embeddings instanceof Float32Array) {\n                  speaker_embeddings = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor(\n                    \"float32\",\n                    speaker_embeddings,\n                    [1, speaker_embeddings.length]\n                  );\n                } else if (!(speaker_embeddings instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor)) {\n                  throw new Error(\"Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.\");\n                }\n                const { input_ids } = this.tokenizer(text_inputs, {\n                  padding: true,\n                  truncation: true\n                });\n                const { waveform } = await this.model.generate_speech(input_ids, speaker_embeddings, { vocoder: this.vocoder });\n                const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n                return new _utils_audio_js__WEBPACK_IMPORTED_MODULE_7__.RawAudio(\n                  waveform.data,\n                  sampling_rate\n                );\n              }\n            }\n            class ImageToImagePipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageToImagePipelineType} */\n            Pipeline {\n              /**\n               * Create a new ImageToImagePipeline.\n               * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {ImageToImagePipelineCallback} */\n              async _call(images) {\n                const preparedImages = await prepareImages(images);\n                const inputs = await this.processor(preparedImages);\n                const outputs = await this.model(inputs);\n                const toReturn = [];\n                for (const batch of outputs.reconstruction) {\n                  const output = batch.squeeze().clamp_(0, 1).mul_(255).round_().to(\"uint8\");\n                  toReturn.push(_utils_image_js__WEBPACK_IMPORTED_MODULE_9__.RawImage.fromTensor(output));\n                }\n                return toReturn.length > 1 ? toReturn : toReturn[0];\n              }\n            }\n            class DepthEstimationPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => DepthEstimationPipelineType} */\n            Pipeline {\n              /**\n               * Create a new DepthEstimationPipeline.\n               * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n               */\n              constructor(options) {\n                super(options);\n              }\n              /** @type {DepthEstimationPipelineCallback} */\n              async _call(images) {\n                const preparedImages = await prepareImages(images);\n                const inputs = await this.processor(preparedImages);\n                const { predicted_depth } = await this.model(inputs);\n                const toReturn = [];\n                for (let i = 0; i < preparedImages.length; ++i) {\n                  const batch = predicted_depth[i];\n                  const [height, width] = batch.dims.slice(-2);\n                  const [new_width, new_height] = preparedImages[i].size;\n                  const prediction = (await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.interpolate_4d)(batch.view(1, 1, height, width), {\n                    size: [new_height, new_width],\n                    mode: \"bilinear\"\n                  })).view(new_height, new_width);\n                  const minval = (\n                    /** @type {number} */\n                    prediction.min().item()\n                  );\n                  const maxval = (\n                    /** @type {number} */\n                    prediction.max().item()\n                  );\n                  const formatted = prediction.sub(minval).div_(maxval - minval).mul_(255).to(\"uint8\").unsqueeze(0);\n                  const depth = _utils_image_js__WEBPACK_IMPORTED_MODULE_9__.RawImage.fromTensor(formatted);\n                  toReturn.push({\n                    predicted_depth: prediction,\n                    depth\n                  });\n                }\n                return toReturn.length > 1 ? toReturn : toReturn[0];\n              }\n            }\n            const SUPPORTED_TASKS = Object.freeze({\n              \"text-classification\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": TextClassificationPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSequenceClassification,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"distilbert-base-uncased-finetuned-sst-2-english\",\n                  \"model\": \"Xenova/distilbert-base-uncased-finetuned-sst-2-english\"\n                },\n                \"type\": \"text\"\n              },\n              \"token-classification\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": TokenClassificationPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForTokenClassification,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"Davlan/bert-base-multilingual-cased-ner-hrl\",\n                  \"model\": \"Xenova/bert-base-multilingual-cased-ner-hrl\"\n                },\n                \"type\": \"text\"\n              },\n              \"question-answering\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": QuestionAnsweringPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForQuestionAnswering,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"distilbert-base-cased-distilled-squad\",\n                  \"model\": \"Xenova/distilbert-base-cased-distilled-squad\"\n                },\n                \"type\": \"text\"\n              },\n              \"fill-mask\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": FillMaskPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForMaskedLM,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"bert-base-uncased\",\n                  \"model\": \"Xenova/bert-base-uncased\"\n                },\n                \"type\": \"text\"\n              },\n              \"summarization\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": SummarizationPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSeq2SeqLM,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"sshleifer/distilbart-cnn-6-6\",\n                  \"model\": \"Xenova/distilbart-cnn-6-6\"\n                },\n                \"type\": \"text\"\n              },\n              \"translation\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": TranslationPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSeq2SeqLM,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"t5-small\",\n                  \"model\": \"Xenova/t5-small\"\n                },\n                \"type\": \"text\"\n              },\n              \"text2text-generation\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": Text2TextGenerationPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSeq2SeqLM,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"google/flan-t5-small\",\n                  \"model\": \"Xenova/flan-t5-small\"\n                },\n                \"type\": \"text\"\n              },\n              \"text-generation\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": TextGenerationPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForCausalLM,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"gpt2\",\n                  \"model\": \"Xenova/gpt2\"\n                },\n                \"type\": \"text\"\n              },\n              \"zero-shot-classification\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": ZeroShotClassificationPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSequenceClassification,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"typeform/distilbert-base-uncased-mnli\",\n                  \"model\": \"Xenova/distilbert-base-uncased-mnli\"\n                },\n                \"type\": \"text\"\n              },\n              \"audio-classification\": {\n                \"pipeline\": AudioClassificationPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForAudioClassification,\n                \"processor\": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"superb/wav2vec2-base-superb-ks\",\n                  \"model\": \"Xenova/wav2vec2-base-superb-ks\"\n                },\n                \"type\": \"audio\"\n              },\n              \"zero-shot-audio-classification\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": ZeroShotAudioClassificationPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel,\n                \"processor\": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"laion/clap-htsat-fused\",\n                  \"model\": \"Xenova/clap-htsat-unfused\"\n                },\n                \"type\": \"multimodal\"\n              },\n              \"automatic-speech-recognition\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": AutomaticSpeechRecognitionPipeline,\n                \"model\": [_models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSpeechSeq2Seq, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForCTC],\n                \"processor\": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"openai/whisper-tiny.en\",\n                  \"model\": \"Xenova/whisper-tiny.en\"\n                },\n                \"type\": \"multimodal\"\n              },\n              \"text-to-audio\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": TextToAudioPipeline,\n                \"model\": [_models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForTextToWaveform, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForTextToSpectrogram],\n                \"processor\": [\n                  _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                  /* Some don't use a processor */\n                  null\n                ],\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"microsoft/speecht5_tts\",\n                  \"model\": \"Xenova/speecht5_tts\"\n                },\n                \"type\": \"text\"\n              },\n              \"image-to-text\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": ImageToTextPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForVision2Seq,\n                \"processor\": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"nlpconnect/vit-gpt2-image-captioning\",\n                  \"model\": \"Xenova/vit-gpt2-image-captioning\"\n                },\n                \"type\": \"multimodal\"\n              },\n              \"image-classification\": {\n                // no tokenizer\n                \"pipeline\": ImageClassificationPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForImageClassification,\n                \"processor\": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"google/vit-base-patch16-224\",\n                  \"model\": \"Xenova/vit-base-patch16-224\"\n                },\n                \"type\": \"multimodal\"\n              },\n              \"image-segmentation\": {\n                // no tokenizer\n                \"pipeline\": ImageSegmentationPipeline,\n                \"model\": [_models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForImageSegmentation, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSemanticSegmentation, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForUniversalSegmentation],\n                \"processor\": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"facebook/detr-resnet-50-panoptic\",\n                  \"model\": \"Xenova/detr-resnet-50-panoptic\"\n                },\n                \"type\": \"multimodal\"\n              },\n              \"background-removal\": {\n                // no tokenizer\n                \"pipeline\": BackgroundRemovalPipeline,\n                \"model\": [_models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForImageSegmentation, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSemanticSegmentation, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForUniversalSegmentation],\n                \"processor\": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                \"default\": {\n                  \"model\": \"Xenova/modnet\"\n                },\n                \"type\": \"image\"\n              },\n              \"zero-shot-image-classification\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": ZeroShotImageClassificationPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel,\n                \"processor\": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"openai/clip-vit-base-patch32\",\n                  \"model\": \"Xenova/clip-vit-base-patch32\"\n                },\n                \"type\": \"multimodal\"\n              },\n              \"object-detection\": {\n                // no tokenizer\n                \"pipeline\": ObjectDetectionPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForObjectDetection,\n                \"processor\": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"facebook/detr-resnet-50\",\n                  \"model\": \"Xenova/detr-resnet-50\"\n                },\n                \"type\": \"multimodal\"\n              },\n              \"zero-shot-object-detection\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": ZeroShotObjectDetectionPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForZeroShotObjectDetection,\n                \"processor\": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"google/owlvit-base-patch32\",\n                  \"model\": \"Xenova/owlvit-base-patch32\"\n                },\n                \"type\": \"multimodal\"\n              },\n              \"document-question-answering\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": DocumentQuestionAnsweringPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForDocumentQuestionAnswering,\n                \"processor\": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"naver-clova-ix/donut-base-finetuned-docvqa\",\n                  \"model\": \"Xenova/donut-base-finetuned-docvqa\"\n                },\n                \"type\": \"multimodal\"\n              },\n              \"image-to-image\": {\n                // no tokenizer\n                \"pipeline\": ImageToImagePipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForImageToImage,\n                \"processor\": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"caidas/swin2SR-classical-sr-x2-64\",\n                  \"model\": \"Xenova/swin2SR-classical-sr-x2-64\"\n                },\n                \"type\": \"image\"\n              },\n              \"depth-estimation\": {\n                // no tokenizer\n                \"pipeline\": DepthEstimationPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForDepthEstimation,\n                \"processor\": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"Intel/dpt-large\",\n                  \"model\": \"Xenova/dpt-large\"\n                },\n                \"type\": \"image\"\n              },\n              // This task serves as a useful interface for dealing with sentence-transformers (https://huggingface.co/sentence-transformers).\n              \"feature-extraction\": {\n                \"tokenizer\": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,\n                \"pipeline\": FeatureExtractionPipeline,\n                \"model\": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel,\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"sentence-transformers/all-MiniLM-L6-v2\",\n                  \"model\": \"Xenova/all-MiniLM-L6-v2\"\n                },\n                \"type\": \"text\"\n              },\n              \"image-feature-extraction\": {\n                \"processor\": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,\n                \"pipeline\": ImageFeatureExtractionPipeline,\n                \"model\": [_models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForImageFeatureExtraction, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel],\n                \"default\": {\n                  // TODO: replace with original\n                  // \"model\": \"google/vit-base-patch16-224\",\n                  \"model\": \"Xenova/vit-base-patch16-224-in21k\"\n                },\n                \"type\": \"image\"\n              }\n            });\n            const TASK_ALIASES = Object.freeze({\n              \"sentiment-analysis\": \"text-classification\",\n              \"ner\": \"token-classification\",\n              // \"vqa\": \"visual-question-answering\", // TODO: Add\n              \"asr\": \"automatic-speech-recognition\",\n              \"text-to-speech\": \"text-to-audio\",\n              // Add for backwards compatibility\n              \"embeddings\": \"feature-extraction\"\n            });\n            async function pipeline(task, model = null, {\n              progress_callback = null,\n              config = null,\n              cache_dir = null,\n              local_files_only = false,\n              revision = \"main\",\n              device = null,\n              dtype = null,\n              subfolder = \"onnx\",\n              use_external_data_format = null,\n              model_file_name = null,\n              session_options = {}\n            } = {}) {\n              task = TASK_ALIASES[task] ?? task;\n              const pipelineInfo = SUPPORTED_TASKS[task.split(\"_\", 1)[0]];\n              if (!pipelineInfo) {\n                throw Error(`Unsupported pipeline: ${task}. Must be one of [${Object.keys(SUPPORTED_TASKS)}]`);\n              }\n              if (!model) {\n                model = pipelineInfo.default.model;\n                console.log(`No model specified. Using default model: \"${model}\".`);\n              }\n              const pretrainedOptions = {\n                progress_callback,\n                config,\n                cache_dir,\n                local_files_only,\n                revision,\n                device,\n                dtype,\n                subfolder,\n                use_external_data_format,\n                model_file_name,\n                session_options\n              };\n              const classes = /* @__PURE__ */ new Map([\n                [\"tokenizer\", pipelineInfo.tokenizer],\n                [\"model\", pipelineInfo.model],\n                [\"processor\", pipelineInfo.processor]\n              ]);\n              const results = await loadItems(classes, model, pretrainedOptions);\n              results.task = task;\n              (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_5__.dispatchCallback)(progress_callback, {\n                \"status\": \"ready\",\n                \"task\": task,\n                \"model\": model\n              });\n              const pipelineClass = pipelineInfo.pipeline;\n              return new pipelineClass(results);\n            }\n            async function loadItems(mapping, model, pretrainedOptions) {\n              const result = /* @__PURE__ */ Object.create(null);\n              const promises = [];\n              for (const [name, cls] of mapping.entries()) {\n                if (!cls) continue;\n                let promise;\n                if (Array.isArray(cls)) {\n                  promise = new Promise(async (resolve, reject) => {\n                    let e;\n                    for (const c of cls) {\n                      if (c === null) {\n                        resolve(null);\n                        return;\n                      }\n                      try {\n                        resolve(await c.from_pretrained(model, pretrainedOptions));\n                        return;\n                      } catch (err) {\n                        if (err.message?.includes(\"Unsupported model type\")) {\n                          e = err;\n                        } else if (err.message?.includes(\"Could not locate file\")) {\n                          e = err;\n                        } else {\n                          reject(err);\n                          return;\n                        }\n                      }\n                    }\n                    reject(e);\n                  });\n                } else {\n                  promise = cls.from_pretrained(model, pretrainedOptions);\n                }\n                result[name] = promise;\n                promises.push(promise);\n              }\n              await Promise.all(promises);\n              for (const [name, promise] of Object.entries(result)) {\n                result[name] = await promise;\n              }\n              return result;\n            }\n          }\n        ),\n        /***/\n        \"./src/tokenizers.js\": (\n          /*!***************************!*\\\n            !*** ./src/tokenizers.js ***!\n            \\***************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              AlbertTokenizer: () => (\n                /* binding */\n                AlbertTokenizer\n              ),\n              /* harmony export */\n              AutoTokenizer: () => (\n                /* binding */\n                AutoTokenizer\n              ),\n              /* harmony export */\n              BartTokenizer: () => (\n                /* binding */\n                BartTokenizer\n              ),\n              /* harmony export */\n              BertTokenizer: () => (\n                /* binding */\n                BertTokenizer\n              ),\n              /* harmony export */\n              BlenderbotSmallTokenizer: () => (\n                /* binding */\n                BlenderbotSmallTokenizer\n              ),\n              /* harmony export */\n              BlenderbotTokenizer: () => (\n                /* binding */\n                BlenderbotTokenizer\n              ),\n              /* harmony export */\n              BloomTokenizer: () => (\n                /* binding */\n                BloomTokenizer\n              ),\n              /* harmony export */\n              CLIPTokenizer: () => (\n                /* binding */\n                CLIPTokenizer\n              ),\n              /* harmony export */\n              CamembertTokenizer: () => (\n                /* binding */\n                CamembertTokenizer\n              ),\n              /* harmony export */\n              CodeGenTokenizer: () => (\n                /* binding */\n                CodeGenTokenizer\n              ),\n              /* harmony export */\n              CodeLlamaTokenizer: () => (\n                /* binding */\n                CodeLlamaTokenizer\n              ),\n              /* harmony export */\n              CohereTokenizer: () => (\n                /* binding */\n                CohereTokenizer\n              ),\n              /* harmony export */\n              ConvBertTokenizer: () => (\n                /* binding */\n                ConvBertTokenizer\n              ),\n              /* harmony export */\n              DebertaTokenizer: () => (\n                /* binding */\n                DebertaTokenizer\n              ),\n              /* harmony export */\n              DebertaV2Tokenizer: () => (\n                /* binding */\n                DebertaV2Tokenizer\n              ),\n              /* harmony export */\n              DistilBertTokenizer: () => (\n                /* binding */\n                DistilBertTokenizer\n              ),\n              /* harmony export */\n              ElectraTokenizer: () => (\n                /* binding */\n                ElectraTokenizer\n              ),\n              /* harmony export */\n              EsmTokenizer: () => (\n                /* binding */\n                EsmTokenizer\n              ),\n              /* harmony export */\n              FalconTokenizer: () => (\n                /* binding */\n                FalconTokenizer\n              ),\n              /* harmony export */\n              GPT2Tokenizer: () => (\n                /* binding */\n                GPT2Tokenizer\n              ),\n              /* harmony export */\n              GPTNeoXTokenizer: () => (\n                /* binding */\n                GPTNeoXTokenizer\n              ),\n              /* harmony export */\n              GemmaTokenizer: () => (\n                /* binding */\n                GemmaTokenizer\n              ),\n              /* harmony export */\n              Grok1Tokenizer: () => (\n                /* binding */\n                Grok1Tokenizer\n              ),\n              /* harmony export */\n              HerbertTokenizer: () => (\n                /* binding */\n                HerbertTokenizer\n              ),\n              /* harmony export */\n              LlamaTokenizer: () => (\n                /* binding */\n                LlamaTokenizer\n              ),\n              /* harmony export */\n              M2M100Tokenizer: () => (\n                /* binding */\n                M2M100Tokenizer\n              ),\n              /* harmony export */\n              MBart50Tokenizer: () => (\n                /* binding */\n                MBart50Tokenizer\n              ),\n              /* harmony export */\n              MBartTokenizer: () => (\n                /* binding */\n                MBartTokenizer\n              ),\n              /* harmony export */\n              MPNetTokenizer: () => (\n                /* binding */\n                MPNetTokenizer\n              ),\n              /* harmony export */\n              MarianTokenizer: () => (\n                /* binding */\n                MarianTokenizer\n              ),\n              /* harmony export */\n              MgpstrTokenizer: () => (\n                /* binding */\n                MgpstrTokenizer\n              ),\n              /* harmony export */\n              MobileBertTokenizer: () => (\n                /* binding */\n                MobileBertTokenizer\n              ),\n              /* harmony export */\n              NllbTokenizer: () => (\n                /* binding */\n                NllbTokenizer\n              ),\n              /* harmony export */\n              NougatTokenizer: () => (\n                /* binding */\n                NougatTokenizer\n              ),\n              /* harmony export */\n              PreTrainedTokenizer: () => (\n                /* binding */\n                PreTrainedTokenizer\n              ),\n              /* harmony export */\n              Qwen2Tokenizer: () => (\n                /* binding */\n                Qwen2Tokenizer\n              ),\n              /* harmony export */\n              RoFormerTokenizer: () => (\n                /* binding */\n                RoFormerTokenizer\n              ),\n              /* harmony export */\n              RobertaTokenizer: () => (\n                /* binding */\n                RobertaTokenizer\n              ),\n              /* harmony export */\n              SiglipTokenizer: () => (\n                /* binding */\n                SiglipTokenizer\n              ),\n              /* harmony export */\n              SpeechT5Tokenizer: () => (\n                /* binding */\n                SpeechT5Tokenizer\n              ),\n              /* harmony export */\n              SqueezeBertTokenizer: () => (\n                /* binding */\n                SqueezeBertTokenizer\n              ),\n              /* harmony export */\n              T5Tokenizer: () => (\n                /* binding */\n                T5Tokenizer\n              ),\n              /* harmony export */\n              TokenizerModel: () => (\n                /* binding */\n                TokenizerModel\n              ),\n              /* harmony export */\n              VitsTokenizer: () => (\n                /* binding */\n                VitsTokenizer\n              ),\n              /* harmony export */\n              Wav2Vec2CTCTokenizer: () => (\n                /* binding */\n                Wav2Vec2CTCTokenizer\n              ),\n              /* harmony export */\n              WhisperTokenizer: () => (\n                /* binding */\n                WhisperTokenizer\n              ),\n              /* harmony export */\n              XLMRobertaTokenizer: () => (\n                /* binding */\n                XLMRobertaTokenizer\n              ),\n              /* harmony export */\n              XLMTokenizer: () => (\n                /* binding */\n                XLMTokenizer\n              ),\n              /* harmony export */\n              is_chinese_char: () => (\n                /* binding */\n                is_chinese_char\n              )\n              /* harmony export */\n            });\n            var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ./utils/generic.js */\n              \"./src/utils/generic.js\"\n            );\n            var _utils_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ./utils/core.js */\n              \"./src/utils/core.js\"\n            );\n            var _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ./utils/hub.js */\n              \"./src/utils/hub.js\"\n            );\n            var _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ./utils/maths.js */\n              \"./src/utils/maths.js\"\n            );\n            var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(\n              /*! ./utils/tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(\n              /*! ./utils/data-structures.js */\n              \"./src/utils/data-structures.js\"\n            );\n            var _huggingface_jinja__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(\n              /*! @huggingface/jinja */\n              \"./node_modules/@huggingface/jinja/dist/index.js\"\n            );\n            var _models_whisper_common_whisper_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(\n              /*! ./models/whisper/common_whisper.js */\n              \"./src/models/whisper/common_whisper.js\"\n            );\n            async function loadTokenizer(pretrained_model_name_or_path, options) {\n              const info = await Promise.all([\n                (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__.getModelJSON)(pretrained_model_name_or_path, \"tokenizer.json\", true, options),\n                (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__.getModelJSON)(pretrained_model_name_or_path, \"tokenizer_config.json\", true, options)\n              ]);\n              if (options.legacy !== null) {\n                info[1].legacy = options.legacy;\n              }\n              return info;\n            }\n            function regexSplit(text, regex) {\n              const result = [];\n              let prev = 0;\n              for (const match of text.matchAll(regex)) {\n                const fullMatch = match[0];\n                if (prev < match.index) {\n                  result.push(text.slice(prev, match.index));\n                }\n                if (fullMatch.length > 0) {\n                  result.push(fullMatch);\n                }\n                prev = match.index + fullMatch.length;\n              }\n              if (prev < text.length) {\n                result.push(text.slice(prev));\n              }\n              return result;\n            }\n            function createPattern(pattern, invert = true) {\n              if (pattern.Regex !== void 0) {\n                let regex = pattern.Regex.replace(/\\\\([#&~])/g, \"$1\");\n                for (const [key, value] of PROBLEMATIC_REGEX_MAP) {\n                  regex = regex.replaceAll(key, value);\n                }\n                return new RegExp(regex, \"gu\");\n              } else if (pattern.String !== void 0) {\n                const escaped = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.escapeRegExp)(pattern.String);\n                return new RegExp(invert ? escaped : `(${escaped})`, \"gu\");\n              } else {\n                console.warn(\"Unknown pattern type:\", pattern);\n                return null;\n              }\n            }\n            function objectToMap(obj) {\n              return new Map(Object.entries(obj));\n            }\n            function prepareTensorForDecode(tensor) {\n              const dims = tensor.dims;\n              switch (dims.length) {\n                case 1:\n                  return tensor.tolist();\n                case 2:\n                  if (dims[0] !== 1) {\n                    throw new Error(\"Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.\");\n                  }\n                  return tensor.tolist()[0];\n                default:\n                  throw new Error(`Expected tensor to have 1-2 dimensions, got ${dims.length}.`);\n              }\n            }\n            function clean_up_tokenization(text) {\n              return text.replace(/ \\./g, \".\").replace(/ \\?/g, \"?\").replace(/ \\!/g, \"!\").replace(/ ,/g, \",\").replace(/ \\' /g, \"'\").replace(/ n\\'t/g, \"n't\").replace(/ \\'m/g, \"'m\").replace(/ \\'s/g, \"'s\").replace(/ \\'ve/g, \"'ve\").replace(/ \\'re/g, \"'re\");\n            }\n            function remove_accents(text) {\n              return text.replace(/\\p{M}/gu, \"\");\n            }\n            function lowercase_and_remove_accent(text) {\n              return remove_accents(text.toLowerCase());\n            }\n            function is_chinese_char(cp) {\n              return cp >= 19968 && cp <= 40959 || cp >= 13312 && cp <= 19903 || cp >= 131072 && cp <= 173791 || cp >= 173824 && cp <= 177983 || cp >= 177984 && cp <= 178207 || cp >= 178208 && cp <= 183983 || cp >= 63744 && cp <= 64255 || cp >= 194560 && cp <= 195103;\n            }\n            function fuse_unk(arr, tokens_to_ids, unk_token_id) {\n              const fused = [];\n              let i = 0;\n              while (i < arr.length) {\n                fused.push(arr[i]);\n                if ((tokens_to_ids.get(arr[i]) ?? unk_token_id) !== unk_token_id) {\n                  ++i;\n                  continue;\n                }\n                while (++i < arr.length && (tokens_to_ids.get(arr[i]) ?? unk_token_id) === unk_token_id) {\n                  if (tokens_to_ids.get(fused.at(-1)) !== unk_token_id) {\n                    fused[fused.length - 1] += arr[i];\n                  }\n                }\n              }\n              return fused;\n            }\n            function whitespace_split(text) {\n              return text.match(/\\S+/g) || [];\n            }\n            const PUNCTUATION_REGEX = \"\\\\p{P}\\\\u0021-\\\\u002F\\\\u003A-\\\\u0040\\\\u005B-\\\\u0060\\\\u007B-\\\\u007E\";\n            const PUNCTUATION_ONLY_REGEX = new RegExp(`^[${PUNCTUATION_REGEX}]+$`, \"gu\");\n            const BLOOM_SPLIT_CHARS = \".,!?\\u2026\\u3002\\uFF0C\\u3001\\u0964\\u06D4\\u060C\";\n            const PROBLEMATIC_REGEX_MAP = /* @__PURE__ */ new Map([\n              // This uses the case insensitive group modifier, which is not supported in JavaScript.\n              // When parsing the regex, an \"Invalid group\" error is thrown.\n              [\"(?i:'s|'t|'re|'ve|'m|'ll|'d)\", \"(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))\"],\n              // Used to override the default (invalid) regex of the bloom pretokenizer.\n              // For more information, see https://github.com/huggingface/transformers.js/issues/94\n              [` ?[^(\\\\s|[${BLOOM_SPLIT_CHARS}])]+`, ` ?[^\\\\s${BLOOM_SPLIT_CHARS}]+`]\n            ]);\n            class AddedToken {\n              /**\n               * Creates a new instance of AddedToken.\n               * @param {Object} config Added token configuration object.\n               * @param {string} config.content The content of the added token.\n               * @param {number} config.id The id of the added token.\n               * @param {boolean} [config.single_word=false] Whether this token must be a single word or can break words.\n               * @param {boolean} [config.lstrip=false] Whether this token should strip whitespaces on its left.\n               * @param {boolean} [config.rstrip=false] Whether this token should strip whitespaces on its right.\n               * @param {boolean} [config.normalized=false] Whether this token should be normalized.\n               * @param {boolean} [config.special=false] Whether this token is special.\n               */\n              constructor(config) {\n                this.content = config.content;\n                this.id = config.id;\n                this.single_word = config.single_word ?? false;\n                this.lstrip = config.lstrip ?? false;\n                this.rstrip = config.rstrip ?? false;\n                this.special = config.special ?? false;\n                this.normalized = config.normalized ?? null;\n              }\n            }\n            class TokenizerModel extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {\n              /**\n               * Creates a new instance of TokenizerModel.\n               * @param {Object} config The configuration object for the TokenizerModel.\n               */\n              constructor(config) {\n                super();\n                this.config = config;\n                this.vocab = [];\n                this.tokens_to_ids = /* @__PURE__ */ new Map();\n                this.unk_token_id = void 0;\n                this.unk_token = void 0;\n                this.end_of_word_suffix = void 0;\n                this.fuse_unk = this.config.fuse_unk ?? false;\n              }\n              /**\n               * Instantiates a new TokenizerModel instance based on the configuration object provided.\n               * @param {Object} config The configuration object for the TokenizerModel.\n               * @param {...*} args Optional arguments to pass to the specific TokenizerModel constructor.\n               * @returns {TokenizerModel} A new instance of a TokenizerModel.\n               * @throws Will throw an error if the TokenizerModel type in the config is not recognized.\n               */\n              static fromConfig(config, ...args) {\n                switch (config.type) {\n                  case \"WordPiece\":\n                    return new WordPieceTokenizer(config);\n                  case \"Unigram\":\n                    return new Unigram(config, ...args);\n                  case \"BPE\":\n                    return new BPE(config);\n                  default:\n                    if (config.vocab) {\n                      if (Array.isArray(config.vocab)) {\n                        return new Unigram(config, ...args);\n                      } else if (typeof config.vocab === \"object\" && config.continuing_subword_prefix && config.unk_token) {\n                        return new WordPieceTokenizer(config);\n                      } else {\n                        return new LegacyTokenizerModel(config, ...args);\n                      }\n                    }\n                    throw new Error(`Unknown TokenizerModel type: ${config.type}`);\n                }\n              }\n              /**\n               * Internal function to call the TokenizerModel instance.\n               * @param {string[]} tokens The tokens to encode.\n               * @returns {string[]} The encoded tokens.\n               */\n              _call(tokens) {\n                tokens = this.encode(tokens);\n                if (this.fuse_unk) {\n                  tokens = fuse_unk(tokens, this.tokens_to_ids, this.unk_token_id);\n                }\n                return tokens;\n              }\n              /**\n               * Encodes a list of tokens into a list of token IDs.\n               * @param {string[]} tokens The tokens to encode.\n               * @returns {string[]} The encoded tokens.\n               * @throws Will throw an error if not implemented in a subclass.\n               */\n              encode(tokens) {\n                throw Error(\"encode should be implemented in subclass.\");\n              }\n              /**\n               * Converts a list of tokens into a list of token IDs.\n               * @param {string[]} tokens The tokens to convert.\n               * @returns {number[]} The converted token IDs.\n               */\n              convert_tokens_to_ids(tokens) {\n                return tokens.map((t) => this.tokens_to_ids.get(t) ?? this.unk_token_id);\n              }\n              /**\n               * Converts a list of token IDs into a list of tokens.\n               * @param {number[]|bigint[]} ids The token IDs to convert.\n               * @returns {string[]} The converted tokens.\n               */\n              convert_ids_to_tokens(ids) {\n                return ids.map((i) => this.vocab[i] ?? this.unk_token);\n              }\n            }\n            class WordPieceTokenizer extends TokenizerModel {\n              /**\n               * @param {Object} config The configuration object.\n               * @param {Object} config.vocab A mapping of tokens to ids.\n               * @param {string} config.unk_token The unknown token string.\n               * @param {string} config.continuing_subword_prefix The prefix to use for continuing subwords.\n               * @param {number} [config.max_input_chars_per_word=100] The maximum number of characters per word.\n               */\n              constructor(config) {\n                super(config);\n                this.tokens_to_ids = objectToMap(config.vocab);\n                this.unk_token_id = this.tokens_to_ids.get(config.unk_token);\n                this.unk_token = config.unk_token;\n                this.max_input_chars_per_word = config.max_input_chars_per_word ?? 100;\n                this.vocab = new Array(this.tokens_to_ids.size);\n                for (const [key, value] of this.tokens_to_ids) {\n                  this.vocab[value] = key;\n                }\n              }\n              /**\n               * Encodes an array of tokens using WordPiece encoding.\n               * @param {string[]} tokens The tokens to encode.\n               * @returns {string[]} An array of encoded tokens.\n               */\n              encode(tokens) {\n                const outputTokens = [];\n                for (const token of tokens) {\n                  const chars2 = [...token];\n                  if (chars2.length > this.max_input_chars_per_word) {\n                    outputTokens.push(this.unk_token);\n                    continue;\n                  }\n                  let isUnknown = false;\n                  let start = 0;\n                  const subTokens = [];\n                  while (start < chars2.length) {\n                    let end = chars2.length;\n                    let currentSubstring = null;\n                    while (start < end) {\n                      let substr = chars2.slice(start, end).join(\"\");\n                      if (start > 0) {\n                        substr = this.config.continuing_subword_prefix + substr;\n                      }\n                      if (this.tokens_to_ids.has(substr)) {\n                        currentSubstring = substr;\n                        break;\n                      }\n                      --end;\n                    }\n                    if (currentSubstring === null) {\n                      isUnknown = true;\n                      break;\n                    }\n                    subTokens.push(currentSubstring);\n                    start = end;\n                  }\n                  if (isUnknown) {\n                    outputTokens.push(this.unk_token);\n                  } else {\n                    outputTokens.push(...subTokens);\n                  }\n                }\n                return outputTokens;\n              }\n            }\n            class Unigram extends TokenizerModel {\n              /**\n               * Create a new Unigram tokenizer model.\n               * @param {Object} config The configuration object for the Unigram model.\n               * @param {number} config.unk_id The ID of the unknown token\n               * @param {[string, number][]} config.vocab A 2D array representing a mapping of tokens to scores.\n               * @param {Object} moreConfig Additional configuration object for the Unigram model.\n               */\n              constructor(config, moreConfig) {\n                super(config);\n                const vocabSize = config.vocab.length;\n                this.vocab = new Array(vocabSize);\n                this.scores = new Array(vocabSize);\n                for (let i = 0; i < vocabSize; ++i) {\n                  [this.vocab[i], this.scores[i]] = config.vocab[i];\n                }\n                this.unk_token_id = config.unk_id;\n                this.unk_token = this.vocab[config.unk_id];\n                this.tokens_to_ids = new Map(this.vocab.map((x, i) => [x, i]));\n                this.bos_token = \" \";\n                this.bos_token_id = this.tokens_to_ids.get(this.bos_token);\n                this.eos_token = moreConfig.eos_token;\n                this.eos_token_id = this.tokens_to_ids.get(this.eos_token);\n                this.unk_token = this.vocab[this.unk_token_id];\n                this.minScore = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.min)(this.scores)[0];\n                this.unk_score = this.minScore - 10;\n                this.scores[this.unk_token_id] = this.unk_score;\n                this.trie = new _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__.CharTrie();\n                this.trie.extend(this.vocab);\n                this.fuse_unk = true;\n              }\n              /**\n               * Populates lattice nodes.\n               * @param {TokenLattice} lattice The token lattice to populate with nodes.\n               */\n              populateNodes(lattice) {\n                const chars2 = lattice.chars;\n                const mblen = 1;\n                let beginPos = 0;\n                while (beginPos < chars2.length) {\n                  let hasSingleNode = false;\n                  const tokens = [];\n                  const sliced = chars2.slice(beginPos).join(\"\");\n                  const prefixedTokens = this.trie.commonPrefixSearch(sliced);\n                  for (const token of prefixedTokens) {\n                    tokens.push(token);\n                    const tokenId = this.tokens_to_ids.get(token);\n                    const tokenScore = this.scores[tokenId];\n                    const n = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.len)(token);\n                    lattice.insert(beginPos, n, tokenScore, tokenId);\n                    if (!hasSingleNode && n === mblen) {\n                      hasSingleNode = true;\n                    }\n                  }\n                  if (!hasSingleNode) {\n                    lattice.insert(beginPos, mblen, this.unk_score, this.unk_token_id);\n                  }\n                  beginPos += mblen;\n                }\n              }\n              /**\n               * Encodes an array of tokens into an array of subtokens using the unigram model.\n               *\n               * @param {string} normalized The normalized string.\n               * @returns {string[]} An array of subtokens obtained by encoding the input tokens using the unigram model.\n               */\n              tokenize(normalized) {\n                const lattice = new _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__.TokenLattice(normalized, this.bos_token_id, this.eos_token_id);\n                this.populateNodes(lattice);\n                return lattice.tokens();\n              }\n              /**\n               * Encodes an array of tokens using Unigram encoding.\n               * @param {string[]} tokens The tokens to encode.\n               * @returns {string[]} An array of encoded tokens.\n               */\n              encode(tokens) {\n                const toReturn = [];\n                for (const token of tokens) {\n                  const tokenized = this.tokenize(token);\n                  toReturn.push(...tokenized);\n                }\n                return toReturn;\n              }\n            }\n            const BYTES_TO_UNICODE = (() => {\n              const bs2 = [\n                ...Array.from({ length: \"~\".charCodeAt(0) - \"!\".charCodeAt(0) + 1 }, (_, i) => i + \"!\".charCodeAt(0)),\n                ...Array.from({ length: \"\\xAC\".charCodeAt(0) - \"\\xA1\".charCodeAt(0) + 1 }, (_, i) => i + \"\\xA1\".charCodeAt(0)),\n                ...Array.from({ length: \"\\xFF\".charCodeAt(0) - \"\\xAE\".charCodeAt(0) + 1 }, (_, i) => i + \"\\xAE\".charCodeAt(0))\n              ];\n              const cs2 = bs2.slice();\n              let n = 0;\n              for (let b = 0; b < 256; ++b) {\n                if (!bs2.includes(b)) {\n                  bs2.push(b);\n                  cs2.push(256 + n);\n                  n += 1;\n                }\n              }\n              const ccs = cs2.map((n2) => String.fromCharCode(n2));\n              return Object.fromEntries(bs2.map((b, i) => [b, ccs[i]]));\n            })();\n            const UNICODE_TO_BYTES = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.reverseDictionary)(BYTES_TO_UNICODE);\n            class BPE extends TokenizerModel {\n              /**\n               * Create a BPE instance.\n               * @param {Object} config The configuration object for BPE.\n               * @param {Object} config.vocab A mapping of tokens to ids.\n               * @param {string[]|[string, string][]} config.merges An array of BPE merges as strings.\n               * @param {string} config.unk_token The unknown token used for out of vocabulary words.\n               * @param {string} config.end_of_word_suffix The suffix to place at the end of each word.\n               * @param {string} [config.continuing_subword_suffix] The suffix to insert between words.\n               * @param {boolean} [config.byte_fallback=false] Whether to use spm byte-fallback trick (defaults to False)\n               * @param {boolean} [config.ignore_merges=false] Whether or not to match tokens with the vocab before using merges.\n               */\n              constructor(config) {\n                super(config);\n                this.tokens_to_ids = objectToMap(config.vocab);\n                this.unk_token_id = this.tokens_to_ids.get(config.unk_token);\n                this.unk_token = config.unk_token;\n                this.vocab = new Array(this.tokens_to_ids.size);\n                for (const [key, value] of this.tokens_to_ids) {\n                  this.vocab[value] = key;\n                }\n                const use_new_merge_format = Array.isArray(config.merges[0]);\n                this.merges = use_new_merge_format ? (\n                  /** @type {[string, string][]} */\n                  config.merges\n                ) : (\n                  /** @type {string[]} */\n                  config.merges.map((x) => (\n                    /** @type {[string, string]} */\n                    x.split(\" \", 2)\n                  ))\n                );\n                this.bpe_ranks = new Map(this.merges.map((x, i) => [JSON.stringify(x), i]));\n                this.end_of_word_suffix = config.end_of_word_suffix;\n                this.continuing_subword_suffix = config.continuing_subword_suffix ?? null;\n                this.byte_fallback = this.config.byte_fallback ?? false;\n                if (this.byte_fallback) {\n                  this.text_encoder = new TextEncoder();\n                }\n                this.ignore_merges = this.config.ignore_merges ?? false;\n                this.max_length_to_cache = 256;\n                this.cache_capacity = 1e4;\n                this.cache = new _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__.LRUCache(this.cache_capacity);\n              }\n              /**\n               * Clears the cache.\n               */\n              clear_cache() {\n                this.cache.clear();\n              }\n              /**\n               * Apply Byte-Pair-Encoding (BPE) to a given token. Efficient heap-based priority\n               * queue implementation adapted from https://github.com/belladoreai/llama-tokenizer-js.\n               * @param {string} token The token to encode.\n               * @returns {string[]} The BPE encoded tokens.\n               */\n              bpe(token) {\n                if (token.length === 0) {\n                  return [];\n                }\n                const cached = this.cache.get(token);\n                if (cached !== void 0) {\n                  return cached;\n                }\n                const word = Array.from(token);\n                if (this.end_of_word_suffix) {\n                  word[word.length - 1] += this.end_of_word_suffix;\n                }\n                let result = [];\n                if (word.length > 1) {\n                  const queue = new _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__.PriorityQueue((a, b) => a.score < b.score);\n                  let startingNode = {\n                    token: word[0],\n                    bias: 0,\n                    prev: null,\n                    next: null\n                  };\n                  let previousNode = startingNode;\n                  for (let i = 1; i < word.length; ++i) {\n                    const currentNode = {\n                      bias: i / word.length,\n                      // Add fractional component to break ties\n                      token: word[i],\n                      prev: previousNode,\n                      next: null\n                    };\n                    previousNode.next = currentNode;\n                    this._add_node(queue, previousNode);\n                    previousNode = currentNode;\n                  }\n                  while (!queue.isEmpty()) {\n                    const node = queue.pop();\n                    if (node.deleted || !node.next || node.next.deleted) continue;\n                    node.deleted = true;\n                    node.next.deleted = true;\n                    if (node.prev) {\n                      const newPreviousNode = { ...node.prev };\n                      node.prev.deleted = true;\n                      node.prev = newPreviousNode;\n                      if (newPreviousNode.prev) {\n                        newPreviousNode.prev.next = newPreviousNode;\n                      } else {\n                        startingNode = newPreviousNode;\n                      }\n                    }\n                    const merged = {\n                      token: node.token + node.next.token,\n                      bias: node.bias,\n                      prev: node.prev,\n                      next: node.next.next\n                    };\n                    if (merged.prev) {\n                      merged.prev.next = merged;\n                      this._add_node(queue, merged.prev);\n                    } else {\n                      startingNode = merged;\n                    }\n                    if (merged.next) {\n                      merged.next.prev = merged;\n                      this._add_node(queue, merged);\n                    }\n                  }\n                  for (let currentNode = startingNode; currentNode !== null; currentNode = currentNode.next) {\n                    result.push(currentNode.token);\n                  }\n                } else {\n                  result = word;\n                }\n                if (this.continuing_subword_suffix) {\n                  for (let i = 0; i < result.length - 1; ++i) {\n                    result[i] += this.continuing_subword_suffix;\n                  }\n                }\n                if (token.length < this.max_length_to_cache) {\n                  this.cache.put(token, result);\n                }\n                return result;\n              }\n              /**\n               * Helper function to add a node to the priority queue.\n               * @param {PriorityQueue} queue \n               * @param {BPENode} node\n               * @private\n               */\n              _add_node(queue, node) {\n                const rank = this.bpe_ranks.get(JSON.stringify([node.token, node.next.token]));\n                if (rank !== void 0) {\n                  node.score = rank + node.bias;\n                  queue.push(node);\n                }\n              }\n              /**\n               * Encodes the input sequence of tokens using the BPE algorithm and returns the resulting subword tokens.\n               * @param {string[]} tokens The input sequence of tokens to encode.\n               * @returns {string[]} The resulting subword tokens after applying the BPE algorithm to the input sequence of tokens.\n               */\n              encode(tokens) {\n                const outputTokens = [];\n                for (const token of tokens) {\n                  if (this.ignore_merges && this.tokens_to_ids.has(token)) {\n                    outputTokens.push(token);\n                    continue;\n                  }\n                  const bpe_token_list = this.bpe(token);\n                  for (const t of bpe_token_list) {\n                    if (this.tokens_to_ids.has(t)) {\n                      outputTokens.push(t);\n                    } else if (this.byte_fallback) {\n                      const byteTokens = Array.from(this.text_encoder.encode(t)).map((x) => `<0x${x.toString(16).toUpperCase().padStart(2, \"0\")}>`);\n                      if (byteTokens.every((x) => this.tokens_to_ids.has(x))) {\n                        outputTokens.push(...byteTokens);\n                      } else {\n                        outputTokens.push(this.unk_token);\n                      }\n                    } else {\n                      outputTokens.push(this.unk_token);\n                    }\n                  }\n                }\n                return outputTokens;\n              }\n            }\n            class LegacyTokenizerModel extends TokenizerModel {\n              /**\n               * Create a LegacyTokenizerModel instance.\n               * @param {Object} config The configuration object for LegacyTokenizerModel.\n               * @param {Object} config.vocab A (possibly nested) mapping of tokens to ids.\n               * @param {Object} moreConfig Additional configuration object for the LegacyTokenizerModel model.\n               */\n              constructor(config, moreConfig) {\n                super(config);\n                this.tokens_to_ids = objectToMap(\n                  moreConfig.target_lang ? config.vocab[moreConfig.target_lang] : config.vocab\n                );\n                this.bos_token = moreConfig.bos_token;\n                this.bos_token_id = this.tokens_to_ids.get(this.bos_token);\n                this.eos_token = moreConfig.eos_token;\n                this.eos_token_id = this.tokens_to_ids.get(this.eos_token);\n                this.pad_token = moreConfig.pad_token;\n                this.pad_token_id = this.tokens_to_ids.get(this.pad_token);\n                this.unk_token = moreConfig.unk_token;\n                this.unk_token_id = this.tokens_to_ids.get(this.unk_token);\n                this.vocab = new Array(this.tokens_to_ids.size);\n                for (const [key, value] of this.tokens_to_ids) {\n                  this.vocab[value] = key;\n                }\n              }\n              encode(tokens) {\n                return tokens;\n              }\n            }\n            class Normalizer extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {\n              /**\n               * @param {Object} config The configuration object for the normalizer.\n               */\n              constructor(config) {\n                super();\n                this.config = config;\n              }\n              /**\n               * Factory method for creating normalizers from config objects.\n               * @static\n               * @param {Object} config The configuration object for the normalizer.\n               * @returns {Normalizer} A Normalizer object.\n               * @throws {Error} If an unknown Normalizer type is specified in the config.\n               */\n              static fromConfig(config) {\n                if (config === null) return null;\n                switch (config.type) {\n                  case \"BertNormalizer\":\n                    return new BertNormalizer(config);\n                  case \"Precompiled\":\n                    return new Precompiled(config);\n                  case \"Sequence\":\n                    return new NormalizerSequence(config);\n                  case \"Replace\":\n                    return new Replace(config);\n                  case \"NFC\":\n                    return new NFC(config);\n                  case \"NFD\":\n                    return new NFD(config);\n                  case \"NFKC\":\n                    return new NFKC(config);\n                  case \"NFKD\":\n                    return new NFKD(config);\n                  case \"Strip\":\n                    return new StripNormalizer(config);\n                  case \"StripAccents\":\n                    return new StripAccents(config);\n                  case \"Lowercase\":\n                    return new Lowercase(config);\n                  case \"Prepend\":\n                    return new Prepend(config);\n                  default:\n                    throw new Error(`Unknown Normalizer type: ${config.type}`);\n                }\n              }\n              /**\n               * Normalize the input text.\n               * @abstract\n               * @param {string} text The text to normalize.\n               * @returns {string} The normalized text.\n               * @throws {Error} If this method is not implemented in a subclass.\n               */\n              normalize(text) {\n                throw Error(\"normalize should be implemented in subclass.\");\n              }\n              /**\n               * Alias for {@link Normalizer#normalize}.\n               * @param {string} text The text to normalize.\n               * @returns {string} The normalized text.\n               */\n              _call(text) {\n                return this.normalize(text);\n              }\n            }\n            class Replace extends Normalizer {\n              /**\n               * Normalize the input text by replacing the pattern with the content.\n               * @param {string} text The input text to be normalized.\n               * @returns {string} The normalized text after replacing the pattern with the content.\n               */\n              normalize(text) {\n                const pattern = createPattern(this.config.pattern);\n                return pattern === null ? text : text.replaceAll(pattern, this.config.content);\n              }\n            }\n            class UnicodeNormalizer extends Normalizer {\n              constructor() {\n                super(...arguments);\n                /**\n                 * @type {string} The Unicode normalization form to apply.\n                 * Should be one of: 'NFC', 'NFD', 'NFKC', or 'NFKD'.\n                 */\n                __publicField(this, \"form\");\n              }\n              /**\n               * Normalize the input text by applying Unicode normalization.\n               * @param {string} text The input text to be normalized.\n               * @returns {string} The normalized text.\n               */\n              normalize(text) {\n                text = text.normalize(this.form);\n                return text;\n              }\n            }\n            class NFC extends UnicodeNormalizer {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"form\", \"NFC\");\n              }\n            }\n            class NFD extends UnicodeNormalizer {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"form\", \"NFD\");\n              }\n            }\n            class NFKC extends UnicodeNormalizer {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"form\", \"NFKC\");\n              }\n            }\n            class NFKD extends UnicodeNormalizer {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"form\", \"NFKD\");\n              }\n            }\n            class StripNormalizer extends Normalizer {\n              /**\n               * Strip leading and/or trailing whitespace from the input text.\n               * @param {string} text The input text.\n               * @returns {string} The normalized text.\n               */\n              normalize(text) {\n                if (this.config.strip_left && this.config.strip_right) {\n                  text = text.trim();\n                } else {\n                  if (this.config.strip_left) {\n                    text = text.trimStart();\n                  }\n                  if (this.config.strip_right) {\n                    text = text.trimEnd();\n                  }\n                }\n                return text;\n              }\n            }\n            class StripAccents extends Normalizer {\n              /**\n               * Remove all accents from the text.\n               * @param {string} text The input text.\n               * @returns {string} The normalized text without accents.\n               */\n              normalize(text) {\n                text = remove_accents(text);\n                return text;\n              }\n            }\n            class Lowercase extends Normalizer {\n              /**\n               * Lowercases the input string.\n               * @param {string} text The text to normalize.\n               * @returns {string} The normalized text.\n               */\n              normalize(text) {\n                text = text.toLowerCase();\n                return text;\n              }\n            }\n            class Prepend extends Normalizer {\n              /**\n               * Prepends the input string.\n               * @param {string} text The text to normalize.\n               * @returns {string} The normalized text.\n               */\n              normalize(text) {\n                text = this.config.prepend + text;\n                return text;\n              }\n            }\n            class NormalizerSequence extends Normalizer {\n              /**\n              * Create a new instance of NormalizerSequence.\n              * @param {Object} config The configuration object.\n              * @param {Object[]} config.normalizers An array of Normalizer configuration objects.\n              */\n              constructor(config) {\n                super(config);\n                this.normalizers = config.normalizers.map((x) => Normalizer.fromConfig(x));\n              }\n              /**\n              * Apply a sequence of Normalizers to the input text.\n              * @param {string} text The text to normalize.\n              * @returns {string} The normalized text.\n              */\n              normalize(text) {\n                return this.normalizers.reduce((t, normalizer) => {\n                  return normalizer.normalize(t);\n                }, text);\n              }\n            }\n            class BertNormalizer extends Normalizer {\n              /**\n               * Adds whitespace around any CJK (Chinese, Japanese, or Korean) character in the input text.\n               *\n               * @param {string} text The input text to tokenize.\n               * @returns {string} The tokenized text with whitespace added around CJK characters.\n               */\n              _tokenize_chinese_chars(text) {\n                const output = [];\n                for (let i = 0; i < text.length; ++i) {\n                  const char = text[i];\n                  const cp = char.charCodeAt(0);\n                  if (is_chinese_char(cp)) {\n                    output.push(\" \");\n                    output.push(char);\n                    output.push(\" \");\n                  } else {\n                    output.push(char);\n                  }\n                }\n                return output.join(\"\");\n              }\n              /**\n               * Strips accents from the given text.\n               * @param {string} text The text to strip accents from.\n               * @returns {string} The text with accents removed.\n               */\n              stripAccents(text) {\n                return text.normalize(\"NFD\").replace(/\\p{Mn}/gu, \"\");\n              }\n              /**\n               * Checks whether `char` is a control character.\n               * @param {string} char The character to check.\n               * @returns {boolean} Whether `char` is a control character.\n               * @private\n               */\n              _is_control(char) {\n                switch (char) {\n                  case \"\t\":\n                  case \"\\n\":\n                  case \"\\r\":\n                    return false;\n                  default:\n                    return /^\\p{Cc}|\\p{Cf}|\\p{Co}|\\p{Cs}$/u.test(char);\n                }\n              }\n              /**\n               * Performs invalid character removal and whitespace cleanup on text.\n               * @param {string} text The text to clean.\n               * @returns {string} The cleaned text.\n               * @private\n               */\n              _clean_text(text) {\n                const output = [];\n                for (const char of text) {\n                  const cp = char.charCodeAt(0);\n                  if (cp === 0 || cp === 65533 || this._is_control(char)) {\n                    continue;\n                  }\n                  if (/^\\s$/.test(char)) {\n                    output.push(\" \");\n                  } else {\n                    output.push(char);\n                  }\n                }\n                return output.join(\"\");\n              }\n              /**\n               * Normalizes the given text based on the configuration.\n               * @param {string} text The text to normalize.\n               * @returns {string} The normalized text.\n               */\n              normalize(text) {\n                if (this.config.clean_text) {\n                  text = this._clean_text(text);\n                }\n                if (this.config.handle_chinese_chars) {\n                  text = this._tokenize_chinese_chars(text);\n                }\n                if (this.config.lowercase) {\n                  text = text.toLowerCase();\n                  if (this.config.strip_accents !== false) {\n                    text = this.stripAccents(text);\n                  }\n                } else if (this.config.strip_accents) {\n                  text = this.stripAccents(text);\n                }\n                return text;\n              }\n            }\n            class PreTokenizer extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {\n              /**\n              * Factory method that returns an instance of a subclass of `PreTokenizer` based on the provided configuration.\n              *\n              * @static\n              * @param {Object} config A configuration object for the pre-tokenizer.\n              * @returns {PreTokenizer} An instance of a subclass of `PreTokenizer`.\n              * @throws {Error} If the provided configuration object does not correspond to any known pre-tokenizer.\n              */\n              static fromConfig(config) {\n                if (config === null) return null;\n                switch (config.type) {\n                  case \"BertPreTokenizer\":\n                    return new BertPreTokenizer(config);\n                  case \"Sequence\":\n                    return new PreTokenizerSequence(config);\n                  case \"Whitespace\":\n                    return new WhitespacePreTokenizer(config);\n                  case \"WhitespaceSplit\":\n                    return new WhitespaceSplit(config);\n                  case \"Metaspace\":\n                    return new MetaspacePreTokenizer(config);\n                  case \"ByteLevel\":\n                    return new ByteLevelPreTokenizer(config);\n                  case \"Split\":\n                    return new SplitPreTokenizer(config);\n                  case \"Punctuation\":\n                    return new PunctuationPreTokenizer(config);\n                  case \"Digits\":\n                    return new DigitsPreTokenizer(config);\n                  case \"Replace\":\n                    return new ReplacePreTokenizer(config);\n                  default:\n                    throw new Error(`Unknown PreTokenizer type: ${config.type}`);\n                }\n              }\n              /**\n               * Method that should be implemented by subclasses to define the specific pre-tokenization logic.\n               *\n               * @abstract\n               * @param {string} text The text to pre-tokenize.\n               * @param {Object} [options] Additional options for the pre-tokenization logic.\n               * @returns {string[]} The pre-tokenized text.\n               * @throws {Error} If the method is not implemented in the subclass.\n               */\n              pre_tokenize_text(text, options) {\n                throw Error(\"pre_tokenize_text should be implemented in subclass.\");\n              }\n              /**\n               * Tokenizes the given text into pre-tokens.\n               * @param {string|string[]} text The text or array of texts to pre-tokenize.\n               * @param {Object} [options] Additional options for the pre-tokenization logic.\n               * @returns {string[]} An array of pre-tokens.\n               */\n              pre_tokenize(text, options) {\n                return (Array.isArray(text) ? text.map((x) => this.pre_tokenize_text(x, options)) : this.pre_tokenize_text(text, options)).flat();\n              }\n              /**\n               * Alias for {@link PreTokenizer#pre_tokenize}.\n               * @param {string|string[]} text The text or array of texts to pre-tokenize.\n               * @param {Object} [options] Additional options for the pre-tokenization logic.\n               * @returns {string[]} An array of pre-tokens.\n               */\n              _call(text, options) {\n                return this.pre_tokenize(text, options);\n              }\n            }\n            class BertPreTokenizer extends PreTokenizer {\n              /**\n               * A PreTokenizer that splits text into wordpieces using a basic tokenization scheme\n               * similar to that used in the original implementation of BERT.\n               * \n               * @param {Object} config The configuration object.\n               */\n              constructor(config) {\n                super();\n                this.pattern = new RegExp(`[^\\\\s${PUNCTUATION_REGEX}]+|[${PUNCTUATION_REGEX}]`, \"gu\");\n              }\n              /**\n               * Tokenizes a single text using the BERT pre-tokenization scheme.\n               * \n               * @param {string} text The text to tokenize.\n               * @param {Object} [options] Additional options for the pre-tokenization logic.\n               * @returns {string[]} An array of tokens.\n               */\n              pre_tokenize_text(text, options) {\n                return text.trim().match(this.pattern) || [];\n              }\n            }\n            class ByteLevelPreTokenizer extends PreTokenizer {\n              /**\n               * Creates a new instance of the `ByteLevelPreTokenizer` class.\n               * @param {Object} config The configuration object.\n               */\n              constructor(config) {\n                super();\n                this.config = config;\n                this.add_prefix_space = this.config.add_prefix_space;\n                this.trim_offsets = this.config.trim_offsets;\n                this.use_regex = this.config.use_regex ?? true;\n                this.pattern = /'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+/gu;\n                this.byte_encoder = BYTES_TO_UNICODE;\n                this.text_encoder = new TextEncoder();\n              }\n              /**\n               * Tokenizes a single piece of text using byte-level tokenization.\n               * @param {string} text The text to tokenize.\n               * @param {Object} [options] Additional options for the pre-tokenization logic.\n               * @returns {string[]} An array of tokens.\n               */\n              pre_tokenize_text(text, options) {\n                if (this.add_prefix_space && !text.startsWith(\" \")) {\n                  text = \" \" + text;\n                }\n                const tokens = this.use_regex ? text.match(this.pattern) || [] : [text];\n                return tokens.map(\n                  (token) => Array.from(this.text_encoder.encode(token), (byte) => this.byte_encoder[byte]).join(\"\")\n                );\n              }\n            }\n            class SplitPreTokenizer extends PreTokenizer {\n              /**\n               * @param {Object} config The configuration options for the pre-tokenizer.\n               * @param {Object} config.pattern The pattern used to split the text. Can be a string or a regex object.\n               * @param {string|undefined} config.pattern.String The string to use for splitting. Only defined if the pattern is a string.\n               * @param {string|undefined} config.pattern.Regex The regex to use for splitting. Only defined if the pattern is a regex.\n               * @param {SplitDelimiterBehavior} config.behavior The behavior to use when splitting.\n               * @param {boolean} config.invert Whether to split (invert=false) or match (invert=true) the pattern.\n               */\n              constructor(config) {\n                super();\n                this.config = config;\n                this.pattern = createPattern(this.config.pattern, this.config.invert);\n              }\n              /**\n               * Tokenizes text by splitting it using the given pattern.\n               * @param {string} text The text to tokenize.\n               * @param {Object} [options] Additional options for the pre-tokenization logic.\n               * @returns {string[]} An array of tokens.\n               */\n              pre_tokenize_text(text, options) {\n                if (this.pattern === null) {\n                  return [];\n                }\n                if (this.config.invert) {\n                  return text.match(this.pattern) || [];\n                } else if (this.config.behavior?.toLowerCase() === \"removed\") {\n                  return text.split(this.pattern).filter((x) => x);\n                } else {\n                  return regexSplit(text, this.pattern);\n                }\n              }\n            }\n            class PunctuationPreTokenizer extends PreTokenizer {\n              /**\n               * @param {Object} config The configuration options for the pre-tokenizer.\n               * @param {SplitDelimiterBehavior} config.behavior The behavior to use when splitting.\n               */\n              constructor(config) {\n                super();\n                this.config = config;\n                this.pattern = new RegExp(`[^${PUNCTUATION_REGEX}]+|[${PUNCTUATION_REGEX}]+`, \"gu\");\n              }\n              /**\n               * Tokenizes text by splitting it using the given pattern.\n               * @param {string} text The text to tokenize.\n               * @param {Object} [options] Additional options for the pre-tokenization logic.\n               * @returns {string[]} An array of tokens.\n               */\n              pre_tokenize_text(text, options) {\n                return text.match(this.pattern) || [];\n              }\n            }\n            class DigitsPreTokenizer extends PreTokenizer {\n              /**\n               * @param {Object} config The configuration options for the pre-tokenizer.\n               * @param {boolean} config.individual_digits Whether to split on individual digits.\n               */\n              constructor(config) {\n                super();\n                this.config = config;\n                const digit_pattern = `[^\\\\d]+|\\\\d${this.config.individual_digits ? \"\" : \"+\"}`;\n                this.pattern = new RegExp(digit_pattern, \"gu\");\n              }\n              /**\n               * Tokenizes text by splitting it using the given pattern.\n               * @param {string} text The text to tokenize.\n               * @param {Object} [options] Additional options for the pre-tokenization logic.\n               * @returns {string[]} An array of tokens.\n               */\n              pre_tokenize_text(text, options) {\n                return text.match(this.pattern) || [];\n              }\n            }\n            class PostProcessor extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {\n              /**\n               * @param {Object} config The configuration for the post-processor.\n               */\n              constructor(config) {\n                super();\n                this.config = config;\n              }\n              /**\n               * Factory method to create a PostProcessor object from a configuration object.\n               *\n               * @param {Object} config Configuration object representing a PostProcessor.\n               * @returns {PostProcessor} A PostProcessor object created from the given configuration.\n               * @throws {Error} If an unknown PostProcessor type is encountered.\n               */\n              static fromConfig(config) {\n                if (config === null) return null;\n                switch (config.type) {\n                  case \"TemplateProcessing\":\n                    return new TemplateProcessing(config);\n                  case \"ByteLevel\":\n                    return new ByteLevelPostProcessor(config);\n                  case \"RobertaProcessing\":\n                    return new RobertaProcessing(config);\n                  case \"BertProcessing\":\n                    return new BertProcessing(config);\n                  case \"Sequence\":\n                    return new PostProcessorSequence(config);\n                  default:\n                    throw new Error(`Unknown PostProcessor type: ${config.type}`);\n                }\n              }\n              /**\n               * Method to be implemented in subclass to apply post-processing on the given tokens.\n               *\n               * @param {Array} tokens The input tokens to be post-processed.\n               * @param {...*} args Additional arguments required by the post-processing logic.\n               * @returns {PostProcessedOutput} The post-processed tokens.\n               * @throws {Error} If the method is not implemented in subclass.\n               */\n              post_process(tokens, ...args) {\n                throw Error(\"post_process should be implemented in subclass.\");\n              }\n              /**\n               * Alias for {@link PostProcessor#post_process}.\n               * @param {Array} tokens The text or array of texts to post-process.\n               * @param {...*} args Additional arguments required by the post-processing logic.\n               * @returns {PostProcessedOutput} The post-processed tokens.\n               */\n              _call(tokens, ...args) {\n                return this.post_process(tokens, ...args);\n              }\n            }\n            class BertProcessing extends PostProcessor {\n              /**\n               * @param {Object} config The configuration for the post-processor.\n               * @param {string[]} config.cls The special tokens to add to the beginning of the input.\n               * @param {string[]} config.sep The special tokens to add to the end of the input.\n               */\n              constructor(config) {\n                super(config);\n                this.cls = config.cls[0];\n                this.sep = config.sep[0];\n              }\n              /**\n               * Adds the special tokens to the beginning and end of the input.\n               * @param {string[]} tokens The input tokens.\n               * @param {string[]} [tokens_pair=null] An optional second set of input tokens.\n               * @returns {PostProcessedOutput} The post-processed tokens with the special tokens added to the beginning and end.\n               */\n              post_process(tokens, tokens_pair = null, {\n                add_special_tokens = true\n              } = {}) {\n                if (add_special_tokens) {\n                  tokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)([this.cls], tokens, [this.sep]);\n                }\n                let token_type_ids = new Array(tokens.length).fill(0);\n                if (tokens_pair !== null) {\n                  const middle = add_special_tokens && this instanceof RobertaProcessing ? [this.sep] : [];\n                  const after = add_special_tokens ? [this.sep] : [];\n                  tokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(tokens, middle, tokens_pair, after);\n                  token_type_ids = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(token_type_ids, new Array(tokens_pair.length + middle.length + after.length).fill(1));\n                }\n                return { tokens, token_type_ids };\n              }\n            }\n            class RobertaProcessing extends BertProcessing {\n            }\n            class TemplateProcessing extends PostProcessor {\n              /**\n               * Creates a new instance of `TemplateProcessing`.\n               * @param {Object} config The configuration options for the post processor.\n               * @param {Array} config.single The template for a single sequence of tokens.\n               * @param {Array} config.pair The template for a pair of sequences of tokens.\n               */\n              constructor(config) {\n                super(config);\n                this.single = config.single;\n                this.pair = config.pair;\n              }\n              /**\n               * Replaces special tokens in the template with actual tokens.\n               * @param {string[]} tokens The list of tokens for the first sequence.\n               * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).\n               * @returns {PostProcessedOutput} An object containing the list of tokens with the special tokens replaced with actual tokens.\n               */\n              post_process(tokens, tokens_pair = null, {\n                add_special_tokens = true\n              } = {}) {\n                const type = tokens_pair === null ? this.single : this.pair;\n                let processedTokens = [];\n                let types = [];\n                for (const item of type) {\n                  if (\"SpecialToken\" in item) {\n                    if (add_special_tokens) {\n                      processedTokens.push(item.SpecialToken.id);\n                      types.push(item.SpecialToken.type_id);\n                    }\n                  } else if (\"Sequence\" in item) {\n                    if (item.Sequence.id === \"A\") {\n                      processedTokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(processedTokens, tokens);\n                      types = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(types, new Array(tokens.length).fill(item.Sequence.type_id));\n                    } else if (item.Sequence.id === \"B\") {\n                      processedTokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(processedTokens, tokens_pair);\n                      types = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(types, new Array(tokens_pair.length).fill(item.Sequence.type_id));\n                    }\n                  }\n                }\n                return { tokens: processedTokens, token_type_ids: types };\n              }\n            }\n            class ByteLevelPostProcessor extends PostProcessor {\n              /**\n               * Post process the given tokens.\n               * @param {string[]} tokens The list of tokens for the first sequence.\n               * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).\n               * @returns {PostProcessedOutput} An object containing the post-processed tokens.\n               */\n              post_process(tokens, tokens_pair = null) {\n                if (tokens_pair) {\n                  tokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(tokens, tokens_pair);\n                }\n                return { tokens };\n              }\n            }\n            class PostProcessorSequence extends PostProcessor {\n              /**\n               * Creates a new instance of PostProcessorSequence.\n               * @param {Object} config The configuration object.\n               * @param {Object[]} config.processors The list of post-processors to apply.\n               */\n              constructor(config) {\n                super(config);\n                this.processors = config.processors.map((x) => PostProcessor.fromConfig(x));\n              }\n              /**\n               * Post process the given tokens.\n               * @param {string[]} tokens The list of tokens for the first sequence.\n               * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).\n               * @returns {PostProcessedOutput} An object containing the post-processed tokens.\n               */\n              post_process(tokens, tokens_pair = null, options = {}) {\n                let token_type_ids;\n                for (const processor of this.processors) {\n                  if (processor instanceof ByteLevelPostProcessor) {\n                    const output = processor.post_process(tokens);\n                    tokens = output.tokens;\n                    if (tokens_pair) {\n                      const pair_output = processor.post_process(tokens_pair);\n                      tokens_pair = pair_output.tokens;\n                    }\n                  } else {\n                    const output = processor.post_process(tokens, tokens_pair, options);\n                    tokens = output.tokens;\n                    token_type_ids = output.token_type_ids;\n                  }\n                }\n                return { tokens, token_type_ids };\n              }\n            }\n            class Decoder extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {\n              /**\n              * Creates an instance of `Decoder`.\n              *\n              * @param {Object} config The configuration object.\n              */\n              constructor(config) {\n                super();\n                this.config = config;\n                this.added_tokens = [];\n                this.end_of_word_suffix = null;\n                this.trim_offsets = config.trim_offsets;\n              }\n              /**\n              * Creates a decoder instance based on the provided configuration.\n              *\n              * @param {Object} config The configuration object.\n              * @returns {Decoder} A decoder instance.\n              * @throws {Error} If an unknown decoder type is provided.\n              */\n              static fromConfig(config) {\n                if (config === null) return null;\n                switch (config.type) {\n                  case \"WordPiece\":\n                    return new WordPieceDecoder(config);\n                  case \"Metaspace\":\n                    return new MetaspaceDecoder(config);\n                  case \"ByteLevel\":\n                    return new ByteLevelDecoder(config);\n                  case \"Replace\":\n                    return new ReplaceDecoder(config);\n                  case \"ByteFallback\":\n                    return new ByteFallback(config);\n                  case \"Fuse\":\n                    return new FuseDecoder(config);\n                  case \"Strip\":\n                    return new StripDecoder(config);\n                  case \"Sequence\":\n                    return new DecoderSequence(config);\n                  case \"CTC\":\n                    return new CTCDecoder(config);\n                  case \"BPEDecoder\":\n                    return new BPEDecoder(config);\n                  default:\n                    throw new Error(`Unknown Decoder type: ${config.type}`);\n                }\n              }\n              /**\n              * Calls the `decode` method.\n              *\n              * @param {string[]} tokens The list of tokens.\n              * @returns {string} The decoded string.\n              */\n              _call(tokens) {\n                return this.decode(tokens);\n              }\n              /**\n              * Decodes a list of tokens.\n              * @param {string[]} tokens The list of tokens.\n              * @returns {string} The decoded string.\n              */\n              decode(tokens) {\n                return this.decode_chain(tokens).join(\"\");\n              }\n              /**\n               * Apply the decoder to a list of tokens.\n               * \n               * @param {string[]} tokens The list of tokens.\n               * @returns {string[]} The decoded list of tokens.\n               * @throws {Error} If the `decode_chain` method is not implemented in the subclass.\n               */\n              decode_chain(tokens) {\n                throw Error(\"`decode_chain` should be implemented in subclass.\");\n              }\n            }\n            class ReplaceDecoder extends Decoder {\n              /** @type {Decoder['decode_chain']} */\n              decode_chain(tokens) {\n                const pattern = createPattern(this.config.pattern);\n                return pattern === null ? tokens : tokens.map((token) => token.replaceAll(pattern, this.config.content));\n              }\n            }\n            class ByteFallback extends Decoder {\n              constructor(config) {\n                super(config);\n                this.text_decoder = new TextDecoder();\n              }\n              /** @type {Decoder['decode_chain']} */\n              decode_chain(tokens) {\n                const new_tokens = [];\n                let previous_byte_tokens = [];\n                for (const token of tokens) {\n                  let bytes = null;\n                  if (token.length === 6 && token.startsWith(\"<0x\") && token.endsWith(\">\")) {\n                    const byte = parseInt(token.slice(3, 5), 16);\n                    if (!isNaN(byte)) {\n                      bytes = byte;\n                    }\n                  }\n                  if (bytes !== null) {\n                    previous_byte_tokens.push(bytes);\n                  } else {\n                    if (previous_byte_tokens.length > 0) {\n                      const string = this.text_decoder.decode(Uint8Array.from(previous_byte_tokens));\n                      new_tokens.push(string);\n                      previous_byte_tokens = [];\n                    }\n                    new_tokens.push(token);\n                  }\n                }\n                if (previous_byte_tokens.length > 0) {\n                  const string = this.text_decoder.decode(Uint8Array.from(previous_byte_tokens));\n                  new_tokens.push(string);\n                  previous_byte_tokens = [];\n                }\n                return new_tokens;\n              }\n            }\n            class FuseDecoder extends Decoder {\n              /** @type {Decoder['decode_chain']} */\n              decode_chain(tokens) {\n                return [tokens.join(\"\")];\n              }\n            }\n            class StripDecoder extends Decoder {\n              constructor(config) {\n                super(config);\n                this.content = this.config.content;\n                this.start = this.config.start;\n                this.stop = this.config.stop;\n              }\n              /** @type {Decoder['decode_chain']} */\n              decode_chain(tokens) {\n                return tokens.map((token) => {\n                  let start_cut = 0;\n                  for (let i = 0; i < this.start; ++i) {\n                    if (token[i] === this.content) {\n                      start_cut = i + 1;\n                      continue;\n                    } else {\n                      break;\n                    }\n                  }\n                  let stop_cut = token.length;\n                  for (let i = 0; i < this.stop; ++i) {\n                    const index = token.length - i - 1;\n                    if (token[index] === this.content) {\n                      stop_cut = index;\n                      continue;\n                    } else {\n                      break;\n                    }\n                  }\n                  return token.slice(start_cut, stop_cut);\n                });\n              }\n            }\n            class WordPieceDecoder extends Decoder {\n              /**\n               * Creates a new instance of WordPieceDecoder.\n               * @param {Object} config The configuration object.\n               * @param {string} config.prefix The prefix used for WordPiece encoding.\n               * @param {boolean} config.cleanup Whether to cleanup the decoded string.\n               */\n              constructor(config) {\n                super(config);\n                this.cleanup = config.cleanup;\n              }\n              /** @type {Decoder['decode_chain']} */\n              decode_chain(tokens) {\n                return tokens.map((token, i) => {\n                  if (i !== 0) {\n                    if (token.startsWith(this.config.prefix)) {\n                      token = token.replace(this.config.prefix, \"\");\n                    } else {\n                      token = \" \" + token;\n                    }\n                  }\n                  if (this.cleanup) {\n                    token = clean_up_tokenization(token);\n                  }\n                  return token;\n                });\n              }\n            }\n            class ByteLevelDecoder extends Decoder {\n              /**\n               * Create a `ByteLevelDecoder` object.\n               * @param {Object} config Configuration object.\n               */\n              constructor(config) {\n                super(config);\n                this.byte_decoder = UNICODE_TO_BYTES;\n                this.text_decoder = new TextDecoder(\"utf-8\", {\n                  fatal: false,\n                  ignoreBOM: true\n                });\n                this.end_of_word_suffix = null;\n              }\n              /**\n               * Convert an array of tokens to string by decoding each byte.\n               * @param {string[]} tokens Array of tokens to be decoded.\n               * @returns {string} The decoded string.\n               */\n              convert_tokens_to_string(tokens) {\n                const text = tokens.join(\"\");\n                const byteArray = new Uint8Array([...text].map((c) => this.byte_decoder[c]));\n                const decoded_text = this.text_decoder.decode(byteArray);\n                return decoded_text;\n              }\n              /** @type {Decoder['decode_chain']} */\n              decode_chain(tokens) {\n                const sub_texts = [];\n                let current_sub_text = [];\n                for (const token of tokens) {\n                  if (this.added_tokens.find((x) => x.content === token) !== void 0) {\n                    if (current_sub_text.length > 0) {\n                      sub_texts.push(this.convert_tokens_to_string(current_sub_text));\n                      current_sub_text = [];\n                    }\n                    sub_texts.push(token);\n                  } else {\n                    current_sub_text.push(token);\n                  }\n                }\n                if (current_sub_text.length > 0) {\n                  sub_texts.push(this.convert_tokens_to_string(current_sub_text));\n                }\n                return sub_texts;\n              }\n            }\n            class CTCDecoder extends Decoder {\n              constructor(config) {\n                super(config);\n                this.pad_token = this.config.pad_token;\n                this.word_delimiter_token = this.config.word_delimiter_token;\n                this.cleanup = this.config.cleanup;\n              }\n              /**\n               * Converts a connectionist-temporal-classification (CTC) output tokens into a single string.\n               * @param {string[]} tokens Array of tokens to be decoded.\n               * @returns {string} The decoded string.\n               */\n              convert_tokens_to_string(tokens) {\n                if (tokens.length === 0) return \"\";\n                const grouped_tokens = [tokens[0]];\n                for (let i = 1; i < tokens.length; ++i) {\n                  if (tokens[i] !== grouped_tokens.at(-1)) {\n                    grouped_tokens.push(tokens[i]);\n                  }\n                }\n                const filtered_tokens = grouped_tokens.filter((token) => token !== this.pad_token);\n                let text = filtered_tokens.join(\"\");\n                if (this.cleanup) {\n                  text = clean_up_tokenization(text).replaceAll(this.word_delimiter_token, \" \").trim();\n                }\n                return text;\n              }\n              /** @type {Decoder['decode_chain']} */\n              decode_chain(tokens) {\n                return [this.convert_tokens_to_string(tokens)];\n              }\n            }\n            class DecoderSequence extends Decoder {\n              /**\n               * Creates a new instance of DecoderSequence.\n               * @param {Object} config The configuration object.\n               * @param {Object[]} config.decoders The list of decoders to apply.\n               */\n              constructor(config) {\n                super(config);\n                this.decoders = config.decoders.map((x) => Decoder.fromConfig(x));\n              }\n              /** @type {Decoder['decode_chain']} */\n              decode_chain(tokens) {\n                return this.decoders.reduce((toks, decoder) => {\n                  return decoder.decode_chain(toks);\n                }, tokens);\n              }\n            }\n            class BPEDecoder extends Decoder {\n              constructor(config) {\n                super(config);\n                this.suffix = this.config.suffix;\n              }\n              /** @type {Decoder['decode_chain']} */\n              decode_chain(tokens) {\n                return tokens.map((token, i) => {\n                  return token.replaceAll(this.suffix, i === tokens.length - 1 ? \"\" : \" \");\n                });\n              }\n            }\n            class VitsDecoder extends Decoder {\n              /** @type {Decoder['decode_chain']} */\n              decode_chain(tokens) {\n                let decoded = \"\";\n                for (let i = 1; i < tokens.length; i += 2) {\n                  decoded += tokens[i];\n                }\n                return [decoded];\n              }\n            }\n            class MetaspacePreTokenizer extends PreTokenizer {\n              /**\n               * @param {Object} config The configuration object for the MetaspacePreTokenizer.\n               * @param {boolean} config.add_prefix_space Whether to add a prefix space to the first token.\n               * @param {string} config.replacement The character to replace spaces with.\n               * @param {string} [config.str_rep=config.replacement] An optional string representation of the replacement character.\n               * @param {'first'|'never'|'always'} [config.prepend_scheme='always'] The metaspace prepending scheme.\n               */\n              constructor(config) {\n                super();\n                this.addPrefixSpace = config.add_prefix_space;\n                this.replacement = config.replacement;\n                this.strRep = config.str_rep || this.replacement;\n                this.prepend_scheme = config.prepend_scheme ?? \"always\";\n              }\n              /**\n               * This method takes a string, replaces spaces with the replacement character,\n               * adds a prefix space if requested, and returns a new list of tokens.\n               * @param {string} text The text to pre-tokenize.\n               * @param {Object} [options] The options for the pre-tokenization.\n               * @param {number} [options.section_index] The index of the section to pre-tokenize.\n               * @returns {string[]} A new list of pre-tokenized tokens.\n               */\n              pre_tokenize_text(text, {\n                section_index = void 0\n              } = {}) {\n                let normalized = text.replaceAll(\" \", this.strRep);\n                if (\n                  // We add a prefix space if:\n                  //  (1) The addPrefixSpace option is enabled and the normalized\n                  //      token does not already start with the replacement character.\n                  this.addPrefixSpace && !normalized.startsWith(this.replacement) && (this.prepend_scheme === \"always\" || this.prepend_scheme === \"first\" && section_index === 0)\n                ) {\n                  normalized = this.strRep + normalized;\n                }\n                return [normalized];\n              }\n            }\n            class MetaspaceDecoder extends Decoder {\n              /**\n               * Constructs a new MetaspaceDecoder object.\n               * @param {Object} config The configuration object for the MetaspaceDecoder.\n               * @param {boolean} config.add_prefix_space Whether to add a prefix space to the decoded string.\n               * @param {string} config.replacement The string to replace spaces with.\n               */\n              constructor(config) {\n                super(config);\n                this.addPrefixSpace = config.add_prefix_space;\n                this.replacement = config.replacement;\n              }\n              /** @type {Decoder['decode_chain']} */\n              decode_chain(tokens) {\n                const result = [];\n                for (let i = 0; i < tokens.length; ++i) {\n                  let normalized = tokens[i].replaceAll(this.replacement, \" \");\n                  if (this.addPrefixSpace && i == 0 && normalized.startsWith(\" \")) {\n                    normalized = normalized.substring(1);\n                  }\n                  result.push(normalized);\n                }\n                return result;\n              }\n            }\n            class Precompiled extends Normalizer {\n              /**\n               * Create a new instance of Precompiled normalizer.\n               * @param {Object} config The configuration object.\n               * @param {any} config.precompiled_charsmap Precompiled chars mapping.\n               */\n              constructor(config) {\n                super(config);\n                this.charsmap = config.precompiled_charsmap;\n              }\n              /**\n               * Normalizes the given text by applying the precompiled charsmap.\n               * @param {string} text The text to normalize.\n               * @returns {string} The normalized text.\n               */\n              normalize(text) {\n                text = text.replace(/[\\u0001-\\u0008\\u000B\\u000E-\\u001F\\u007F\\u008F\\u009F]/gm, \"\");\n                text = text.replace(/[\\u0009\\u000A\\u000C\\u000D\\u00A0\\u1680\\u2000-\\u200F\\u2028\\u2029\\u202F\\u205F\\u2581\\u3000\\uFEFF\\uFFFD]/gm, \" \");\n                if (text.includes(\"\\uFF5E\")) {\n                  const parts = text.split(\"\\uFF5E\");\n                  text = parts.map((part) => part.normalize(\"NFKC\")).join(\"\\uFF5E\");\n                } else {\n                  text = text.normalize(\"NFKC\");\n                }\n                return text;\n              }\n            }\n            class PreTokenizerSequence extends PreTokenizer {\n              /**\n               * Creates an instance of PreTokenizerSequence.\n               * @param {Object} config The configuration object for the pre-tokenizer sequence.\n               * @param {Object[]} config.pretokenizers An array of pre-tokenizer configurations.\n               */\n              constructor(config) {\n                super();\n                this.tokenizers = config.pretokenizers.map((x) => PreTokenizer.fromConfig(x));\n              }\n              /**\n               * Applies each pre-tokenizer in the sequence to the input text in turn.\n               * @param {string} text The text to pre-tokenize.\n               * @param {Object} [options] Additional options for the pre-tokenization logic.\n               * @returns {string[]} The pre-tokenized text.\n               */\n              pre_tokenize_text(text, options) {\n                return this.tokenizers.reduce((preTokenizedText, tokenizer) => {\n                  return tokenizer.pre_tokenize(preTokenizedText, options);\n                }, [text]);\n              }\n            }\n            class WhitespacePreTokenizer extends PreTokenizer {\n              /**\n               * Creates an instance of WhitespacePreTokenizer.\n               * @param {Object} config The configuration object for the pre-tokenizer.\n               */\n              constructor(config) {\n                super();\n              }\n              /**\n               * Pre-tokenizes the input text by splitting it on word boundaries.\n               * @param {string} text The text to be pre-tokenized.\n               * @param {Object} [options] Additional options for the pre-tokenization logic.\n               * @returns {string[]} An array of tokens produced by splitting the input text on whitespace.\n               */\n              pre_tokenize_text(text, options) {\n                return text.match(/\\w+|[^\\w\\s]+/g) || [];\n              }\n            }\n            class WhitespaceSplit extends PreTokenizer {\n              /**\n               * Creates an instance of WhitespaceSplit.\n               * @param {Object} config The configuration object for the pre-tokenizer.\n               */\n              constructor(config) {\n                super();\n              }\n              /**\n               * Pre-tokenizes the input text by splitting it on whitespace characters.\n               * @param {string} text The text to be pre-tokenized.\n               * @param {Object} [options] Additional options for the pre-tokenization logic.\n               * @returns {string[]} An array of tokens produced by splitting the input text on whitespace.\n               */\n              pre_tokenize_text(text, options) {\n                return whitespace_split(text);\n              }\n            }\n            class ReplacePreTokenizer extends PreTokenizer {\n              /**\n               * @param {Object} config The configuration options for the pre-tokenizer.\n               * @param {Object} config.pattern The pattern used to split the text. Can be a string or a regex object.\n               * @param {string} config.content What to replace the pattern with.\n               */\n              constructor(config) {\n                super();\n                this.config = config;\n                this.pattern = createPattern(this.config.pattern);\n                this.content = this.config.content;\n              }\n              /**\n               * Pre-tokenizes the input text by replacing certain characters.\n               * @param {string} text The text to be pre-tokenized.\n               * @param {Object} [options] Additional options for the pre-tokenization logic.\n               * @returns {string[]} An array of tokens produced by replacing certain characters.\n               */\n              pre_tokenize_text(text, options) {\n                if (this.pattern === null) {\n                  return [text];\n                }\n                return [text.replaceAll(this.pattern, this.config.content)];\n              }\n            }\n            const SPECIAL_TOKEN_ATTRIBUTES = [\n              \"bos_token\",\n              \"eos_token\",\n              \"unk_token\",\n              \"sep_token\",\n              \"pad_token\",\n              \"cls_token\",\n              \"mask_token\"\n              // additional_special_tokens (TODO)\n            ];\n            function padHelper(item, length, value_fn, side) {\n              for (const key of Object.keys(item)) {\n                const diff = length - item[key].length;\n                const value = value_fn(key);\n                const padData = new Array(diff).fill(value);\n                item[key] = side === \"right\" ? (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(item[key], padData) : (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(padData, item[key]);\n              }\n            }\n            function truncateHelper(item, length) {\n              for (const key of Object.keys(item)) {\n                item[key].length = length;\n              }\n            }\n            class PreTrainedTokenizer extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {\n              /**\n               * Create a new PreTrainedTokenizer instance.\n               * @param {Object} tokenizerJSON The JSON of the tokenizer.\n               * @param {Object} tokenizerConfig The config of the tokenizer.\n               */\n              constructor(tokenizerJSON, tokenizerConfig) {\n                super();\n                __publicField(this, \"return_token_type_ids\", false);\n                __publicField(this, \"padding_side\", \"right\");\n                this._tokenizer_config = tokenizerConfig;\n                this.normalizer = Normalizer.fromConfig(tokenizerJSON.normalizer);\n                this.pre_tokenizer = PreTokenizer.fromConfig(tokenizerJSON.pre_tokenizer);\n                this.model = TokenizerModel.fromConfig(tokenizerJSON.model, tokenizerConfig);\n                this.post_processor = PostProcessor.fromConfig(tokenizerJSON.post_processor);\n                this.decoder = Decoder.fromConfig(tokenizerJSON.decoder);\n                this.special_tokens = [];\n                this.all_special_ids = [];\n                this.added_tokens = [];\n                for (const addedToken of tokenizerJSON.added_tokens) {\n                  const token = new AddedToken(addedToken);\n                  this.added_tokens.push(token);\n                  this.model.tokens_to_ids.set(token.content, token.id);\n                  this.model.vocab[token.id] = token.content;\n                  if (token.special) {\n                    this.special_tokens.push(token.content);\n                    this.all_special_ids.push(token.id);\n                  }\n                }\n                this.additional_special_tokens = tokenizerConfig.additional_special_tokens ?? [];\n                this.special_tokens.push(...this.additional_special_tokens);\n                this.special_tokens = [...new Set(this.special_tokens)];\n                if (this.decoder) {\n                  this.decoder.added_tokens = this.added_tokens;\n                  this.decoder.end_of_word_suffix = this.model.end_of_word_suffix;\n                }\n                this.added_tokens_splitter = new _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__.DictionarySplitter(\n                  this.added_tokens.map((x) => x.content)\n                );\n                this.added_tokens_map = new Map(this.added_tokens.map((x) => [x.content, x]));\n                this.mask_token = this.getToken(\"mask_token\");\n                this.mask_token_id = this.model.tokens_to_ids.get(this.mask_token);\n                this.pad_token = this.getToken(\"pad_token\", \"eos_token\");\n                this.pad_token_id = this.model.tokens_to_ids.get(this.pad_token);\n                this.sep_token = this.getToken(\"sep_token\");\n                this.sep_token_id = this.model.tokens_to_ids.get(this.sep_token);\n                this.unk_token = this.getToken(\"unk_token\");\n                this.unk_token_id = this.model.tokens_to_ids.get(this.unk_token);\n                this.bos_token = this.getToken(\"bos_token\");\n                this.bos_token_id = this.model.tokens_to_ids.get(this.bos_token);\n                this.eos_token = this.getToken(\"eos_token\");\n                this.eos_token_id = this.model.tokens_to_ids.get(this.eos_token);\n                this.model_max_length = tokenizerConfig.model_max_length;\n                this.remove_space = tokenizerConfig.remove_space;\n                this.clean_up_tokenization_spaces = tokenizerConfig.clean_up_tokenization_spaces ?? true;\n                this.do_lowercase_and_remove_accent = tokenizerConfig.do_lowercase_and_remove_accent ?? false;\n                if (tokenizerConfig.padding_side) {\n                  this.padding_side = tokenizerConfig.padding_side;\n                }\n                this.legacy = false;\n                this.chat_template = tokenizerConfig.chat_template ?? null;\n                if (Array.isArray(this.chat_template)) {\n                  const chat_template = /* @__PURE__ */ Object.create(null);\n                  for (const { name, template } of this.chat_template) {\n                    if (typeof name !== \"string\" || typeof template !== \"string\") {\n                      throw new Error('Chat template must be a list of objects with \"name\" and \"template\" properties');\n                    }\n                    chat_template[name] = template;\n                  }\n                  this.chat_template = chat_template;\n                }\n                this._compiled_template_cache = /* @__PURE__ */ new Map();\n              }\n              /**\n               * Returns the value of the first matching key in the tokenizer config object.\n               * @param {...string} keys One or more keys to search for in the tokenizer config object.\n               * @returns {string|null} The value associated with the first matching key, or null if no match is found.\n               * @throws {Error} If an object is found for a matching key and its __type property is not \"AddedToken\".\n               * @private\n               */\n              getToken(...keys) {\n                for (const key of keys) {\n                  const item = this._tokenizer_config[key];\n                  if (!item) continue;\n                  if (typeof item === \"object\") {\n                    if (item.__type === \"AddedToken\") {\n                      return item.content;\n                    } else {\n                      throw Error(`Unknown token: ${item}`);\n                    }\n                  } else {\n                    return item;\n                  }\n                }\n                return null;\n              }\n              /**\n               * Loads a pre-trained tokenizer from the given `pretrained_model_name_or_path`. \n               * \n               * @param {string} pretrained_model_name_or_path The path to the pre-trained tokenizer.\n               * @param {PretrainedTokenizerOptions} options Additional options for loading the tokenizer.\n               * \n               * @throws {Error} Throws an error if the tokenizer.json or tokenizer_config.json files are not found in the `pretrained_model_name_or_path`.\n               * @returns {Promise<PreTrainedTokenizer>} A new instance of the `PreTrainedTokenizer` class.\n               */\n              static async from_pretrained(pretrained_model_name_or_path, {\n                progress_callback = null,\n                config = null,\n                cache_dir = null,\n                local_files_only = false,\n                revision = \"main\",\n                legacy = null\n              } = {}) {\n                const info = await loadTokenizer(pretrained_model_name_or_path, {\n                  progress_callback,\n                  config,\n                  cache_dir,\n                  local_files_only,\n                  revision,\n                  legacy\n                });\n                return new this(...info);\n              }\n              /**\n               * @typedef {number[]|number[][]|Tensor} BatchEncodingItem\n               * \n               * @typedef {Object} BatchEncoding Holds the output of the tokenizer's call function.\n               * @property {BatchEncodingItem} input_ids List of token ids to be fed to a model.\n               * @property {BatchEncodingItem} attention_mask List of indices specifying which tokens should be attended to by the model.\n               * @property {BatchEncodingItem} [token_type_ids] List of token type ids to be fed to a model.\n               */\n              /**\n               * Encode/tokenize the given text(s).\n               * @param {string|string[]} text The text to tokenize.\n               * @param {Object} options An optional object containing the following properties:\n               * @param {string|string[]} [options.text_pair=null] Optional second sequence to be encoded. If set, must be the same type as text.\n               * @param {boolean|'max_length'} [options.padding=false] Whether to pad the input sequences.\n               * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.\n               * @param {boolean} [options.truncation=null] Whether to truncate the input sequences.\n               * @param {number} [options.max_length=null] Maximum length of the returned list and optionally padding length.\n               * @param {boolean} [options.return_tensor=true] Whether to return the results as Tensors or arrays.\n               * @param {boolean} [options.return_token_type_ids=null] Whether to return the token type ids.\n               * @returns {BatchEncoding} Object to be passed to the model.\n               */\n              _call(text, {\n                text_pair = null,\n                add_special_tokens = true,\n                padding = false,\n                truncation = null,\n                max_length = null,\n                return_tensor = true,\n                // Different to HF\n                return_token_type_ids = null\n              } = {}) {\n                const isBatched = Array.isArray(text);\n                let encodedTokens;\n                if (isBatched) {\n                  if (text.length === 0) {\n                    throw Error(\"text array must be non-empty\");\n                  }\n                  if (text_pair !== null) {\n                    if (!Array.isArray(text_pair)) {\n                      throw Error(\"text_pair must also be an array\");\n                    } else if (text.length !== text_pair.length) {\n                      throw Error(\"text and text_pair must have the same length\");\n                    }\n                    encodedTokens = text.map(\n                      (t, i) => this._encode_plus(t, { text_pair: text_pair[i], add_special_tokens, return_token_type_ids })\n                    );\n                  } else {\n                    encodedTokens = text.map((x) => this._encode_plus(x, { add_special_tokens, return_token_type_ids }));\n                  }\n                } else {\n                  if (text === null || text === void 0) {\n                    throw Error(\"text may not be null or undefined\");\n                  }\n                  if (Array.isArray(text_pair)) {\n                    throw Error(\"When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).\");\n                  }\n                  encodedTokens = [this._encode_plus(text, { text_pair, add_special_tokens, return_token_type_ids })];\n                }\n                if (max_length === null) {\n                  if (padding === \"max_length\") {\n                    max_length = this.model_max_length;\n                  } else {\n                    max_length = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.max)(encodedTokens.map((x) => x.input_ids.length))[0];\n                  }\n                } else {\n                  if (!truncation) {\n                    console.warn(`Truncation was not explicitly activated but \\`max_length\\` is provided a specific value, please use \\`truncation=true\\` to explicitly truncate examples to max length.`);\n                  }\n                }\n                max_length = Math.min(max_length, this.model_max_length ?? Infinity);\n                if (padding || truncation) {\n                  for (let i = 0; i < encodedTokens.length; ++i) {\n                    if (encodedTokens[i].input_ids.length === max_length) {\n                      continue;\n                    } else if (encodedTokens[i].input_ids.length > max_length) {\n                      if (truncation) {\n                        truncateHelper(encodedTokens[i], max_length);\n                      }\n                    } else {\n                      if (padding) {\n                        padHelper(\n                          encodedTokens[i],\n                          max_length,\n                          (key) => key === \"input_ids\" ? this.pad_token_id : 0,\n                          this.padding_side\n                        );\n                      }\n                    }\n                  }\n                }\n                const result = {};\n                if (return_tensor) {\n                  if (!(padding && truncation)) {\n                    if (encodedTokens.some((x) => {\n                      for (const key of Object.keys(x)) {\n                        if (x[key].length !== encodedTokens[0][key]?.length) {\n                          return true;\n                        }\n                      }\n                      return false;\n                    })) {\n                      throw Error(\n                        \"Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.\"\n                      );\n                    }\n                  }\n                  const dims = [encodedTokens.length, encodedTokens[0].input_ids.length];\n                  for (const key of Object.keys(encodedTokens[0])) {\n                    result[key] = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(\n                      \"int64\",\n                      BigInt64Array.from(encodedTokens.flatMap((x) => x[key]).map(BigInt)),\n                      dims\n                    );\n                  }\n                } else {\n                  for (const key of Object.keys(encodedTokens[0])) {\n                    result[key] = encodedTokens.map((x) => x[key]);\n                  }\n                  if (!isBatched) {\n                    for (const key of Object.keys(result)) {\n                      result[key] = result[key][0];\n                    }\n                  }\n                }\n                return (\n                  /** @type {BatchEncoding} */\n                  result\n                );\n              }\n              /**\n               * Encodes a single text using the preprocessor pipeline of the tokenizer.\n               *\n               * @param {string|null} text The text to encode.\n               * @returns {string[]|null} The encoded tokens.\n               */\n              _encode_text(text) {\n                if (text === null) return null;\n                const sections = this.added_tokens_splitter.split(text);\n                for (let i = 0; i < sections.length; ++i) {\n                  const addedToken = this.added_tokens_map.get(sections[i]);\n                  if (addedToken) {\n                    if (addedToken.lstrip && i > 0) {\n                      sections[i - 1] = sections[i - 1].trimEnd();\n                    }\n                    if (addedToken.rstrip && i < sections.length - 1) {\n                      sections[i + 1] = sections[i + 1].trimStart();\n                    }\n                  }\n                }\n                const tokens = sections.flatMap((x, section_index) => {\n                  if (x.length === 0) return [];\n                  if (this.added_tokens_map.has(x)) return [x];\n                  if (this.remove_space === true) {\n                    x = x.trim().split(/\\s+/).join(\" \");\n                  }\n                  if (this.do_lowercase_and_remove_accent) {\n                    x = lowercase_and_remove_accent(x);\n                  }\n                  if (this.normalizer !== null) {\n                    x = this.normalizer(x);\n                  }\n                  if (x.length === 0) {\n                    return [];\n                  }\n                  const sectionTokens = this.pre_tokenizer !== null ? this.pre_tokenizer(x, {\n                    section_index\n                  }) : [x];\n                  const tokens2 = this.model(sectionTokens);\n                  return tokens2;\n                });\n                return tokens;\n              }\n              /**\n               * Encodes a single text or a pair of texts using the model's tokenizer.\n               *\n               * @param {string} text The text to encode.\n               * @param {Object} options An optional object containing the following properties:\n               * @param {string} [options.text_pair=null] The optional second text to encode.\n               * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.\n               * @param {boolean} [options.return_token_type_ids=null] Whether to return token_type_ids.\n               * @returns {EncodingSingle} An object containing the encoded text.\n               * @private\n               */\n              _encode_plus(text, {\n                text_pair = null,\n                add_special_tokens = true,\n                return_token_type_ids = null\n              } = {}) {\n                const { tokens, token_type_ids } = this._tokenize_helper(text, { pair: text_pair, add_special_tokens });\n                const input_ids = this.model.convert_tokens_to_ids(tokens);\n                const result = {\n                  input_ids,\n                  attention_mask: new Array(input_ids.length).fill(1)\n                };\n                if ((return_token_type_ids ?? this.return_token_type_ids) && token_type_ids) {\n                  result.token_type_ids = token_type_ids;\n                }\n                return result;\n              }\n              /**\n               * Internal helper function to tokenize a text, and optionally a pair of texts.\n               * @param {string} text The text to tokenize.\n               * @param {Object} options An optional object containing the following properties:\n               * @param {string} [options.pair=null] The optional second text to tokenize.\n               * @param {boolean} [options.add_special_tokens=false] Whether or not to add the special tokens associated with the corresponding model.\n               * @returns {{tokens: string[], token_type_ids?: number[]}} An object containing the tokens and optionally the token type IDs.\n               */\n              _tokenize_helper(text, {\n                pair = null,\n                add_special_tokens = false\n              } = {}) {\n                const tokens = this._encode_text(text);\n                const tokens2 = this._encode_text(pair);\n                return this.post_processor ? this.post_processor(tokens, tokens2, { add_special_tokens }) : { tokens: (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(tokens ?? [], tokens2 ?? []) };\n              }\n              /**\n               * Converts a string into a sequence of tokens.\n               * @param {string} text The sequence to be encoded.\n               * @param {Object} options An optional object containing the following properties:\n               * @param {string} [options.pair] A second sequence to be encoded with the first.\n               * @param {boolean} [options.add_special_tokens=false] Whether or not to add the special tokens associated with the corresponding model.\n               * @returns {string[]} The list of tokens.\n               */\n              tokenize(text, {\n                pair = null,\n                add_special_tokens = false\n              } = {}) {\n                return this._tokenize_helper(text, { pair, add_special_tokens }).tokens;\n              }\n              /**\n               * Encodes a single text or a pair of texts using the model's tokenizer.\n               *\n               * @param {string} text The text to encode.\n               * @param {Object} options An optional object containing the following properties:\n               * @param {string} [options.text_pair=null] The optional second text to encode.\n               * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.\n               * @param {boolean} [options.return_token_type_ids=null] Whether to return token_type_ids.\n               * @returns {number[]} An array of token IDs representing the encoded text(s).\n               */\n              encode(text, {\n                text_pair = null,\n                add_special_tokens = true,\n                return_token_type_ids = null\n              } = {}) {\n                return this._encode_plus(text, {\n                  text_pair,\n                  add_special_tokens,\n                  return_token_type_ids\n                }).input_ids;\n              }\n              /**\n               * Decode a batch of tokenized sequences.\n               * @param {number[][]|Tensor} batch List/Tensor of tokenized input sequences.\n               * @param {Object} decode_args (Optional) Object with decoding arguments.\n               * @returns {string[]} List of decoded sequences.\n               */\n              batch_decode(batch, decode_args = {}) {\n                if (batch instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor) {\n                  batch = batch.tolist();\n                }\n                return batch.map((x) => this.decode(x, decode_args));\n              }\n              /**\n               * Decodes a sequence of token IDs back to a string.\n               *\n               * @param {number[]|bigint[]|Tensor} token_ids List/Tensor of token IDs to decode.\n               * @param {Object} [decode_args={}]\n               * @param {boolean} [decode_args.skip_special_tokens=false] If true, special tokens are removed from the output string.\n               * @param {boolean} [decode_args.clean_up_tokenization_spaces=true] If true, spaces before punctuations and abbreviated forms are removed.\n               *\n               * @returns {string} The decoded string.\n               * @throws {Error} If `token_ids` is not a non-empty array of integers.\n               */\n              decode(token_ids, decode_args = {}) {\n                if (token_ids instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor) {\n                  token_ids = prepareTensorForDecode(token_ids);\n                }\n                if (!Array.isArray(token_ids) || token_ids.length === 0 || !(0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.isIntegralNumber)(token_ids[0])) {\n                  throw Error(\"token_ids must be a non-empty array of integers.\");\n                }\n                return this.decode_single(token_ids, decode_args);\n              }\n              /**\n               * Decode a single list of token ids to a string.\n               * @param {number[]|bigint[]} token_ids List of token ids to decode\n               * @param {Object} decode_args Optional arguments for decoding\n               * @param {boolean} [decode_args.skip_special_tokens=false] Whether to skip special tokens during decoding\n               * @param {boolean} [decode_args.clean_up_tokenization_spaces=null] Whether to clean up tokenization spaces during decoding.\n               * If null, the value is set to `this.decoder.cleanup` if it exists, falling back to `this.clean_up_tokenization_spaces` if it exists, falling back to `true`.\n               * @returns {string} The decoded string\n               */\n              decode_single(token_ids, {\n                skip_special_tokens = false,\n                clean_up_tokenization_spaces = null\n              }) {\n                let tokens = this.model.convert_ids_to_tokens(token_ids);\n                if (skip_special_tokens) {\n                  tokens = tokens.filter((x) => !this.special_tokens.includes(x));\n                }\n                let decoded = this.decoder ? this.decoder(tokens) : tokens.join(\" \");\n                if (this.decoder && this.decoder.end_of_word_suffix) {\n                  decoded = decoded.replaceAll(this.decoder.end_of_word_suffix, \" \");\n                  if (skip_special_tokens) {\n                    decoded = decoded.trim();\n                  }\n                }\n                if (clean_up_tokenization_spaces ?? this.clean_up_tokenization_spaces) {\n                  decoded = clean_up_tokenization(decoded);\n                }\n                return decoded;\n              }\n              /**\n               * Retrieve the chat template string used for tokenizing chat messages. This template is used\n               * internally by the `apply_chat_template` method and can also be used externally to retrieve the model's chat\n               * template for better generation tracking.\n               * \n               * @param {Object} options An optional object containing the following properties:\n               * @param {string} [options.chat_template=null]\n               * A Jinja template or the name of a template to use for this conversion.\n               * It is usually not necessary to pass anything to this argument,\n               * as the model's template will be used by default.\n               * @param {Object[]} [options.tools=null]\n               * A list of tools (callable functions) that will be accessible to the model. If the template does not\n               * support function calling, this argument will have no effect. Each tool should be passed as a JSON Schema,\n               * giving the name, description and argument types for the tool. See our\n               * [chat templating guide](https://huggingface.co/docs/transformers/main/en/chat_templating#automated-function-conversion-for-tool-use)\n               * for more information.\n               * @returns {string} The chat template string.\n               */\n              get_chat_template({\n                chat_template = null,\n                tools = null\n              } = {}) {\n                if (this.chat_template && typeof this.chat_template === \"object\") {\n                  const template_dict = this.chat_template;\n                  if (chat_template !== null && Object.hasOwn(template_dict, chat_template)) {\n                    chat_template = template_dict[chat_template];\n                  } else if (chat_template === null) {\n                    if (tools !== null && \"tool_use\" in template_dict) {\n                      chat_template = template_dict[\"tool_use\"];\n                    } else if (\"default\" in template_dict) {\n                      chat_template = template_dict[\"default\"];\n                    } else {\n                      throw Error(\n                        `This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(template_dict).sort()}.`\n                      );\n                    }\n                  }\n                } else if (chat_template === null) {\n                  if (this.chat_template) {\n                    chat_template = this.chat_template;\n                  } else {\n                    throw Error(\n                      \"Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating\"\n                    );\n                  }\n                }\n                return chat_template;\n              }\n              /**\n               * Converts a list of message objects with `\"role\"` and `\"content\"` keys to a list of token\n               * ids. This method is intended for use with chat models, and will read the tokenizer's chat_template attribute to\n               * determine the format and control tokens to use when converting.\n               * \n               * See [here](https://huggingface.co/docs/transformers/chat_templating) for more information.\n               * \n               * **Example:** Applying a chat template to a conversation.\n               * \n               * ```javascript\n               * import { AutoTokenizer } from \"@huggingface/transformers\";\n               * \n               * const tokenizer = await AutoTokenizer.from_pretrained(\"Xenova/mistral-tokenizer-v1\");\n               * \n               * const chat = [\n               *   { \"role\": \"user\", \"content\": \"Hello, how are you?\" },\n               *   { \"role\": \"assistant\", \"content\": \"I'm doing great. How can I help you today?\" },\n               *   { \"role\": \"user\", \"content\": \"I'd like to show off how chat templating works!\" },\n               * ]\n               * \n               * const text = tokenizer.apply_chat_template(chat, { tokenize: false });\n               * // \"<s>[INST] Hello, how are you? [/INST]I'm doing great. How can I help you today?</s> [INST] I'd like to show off how chat templating works! [/INST]\"\n               * \n               * const input_ids = tokenizer.apply_chat_template(chat, { tokenize: true, return_tensor: false });\n               * // [1, 733, 16289, 28793, 22557, 28725, 910, 460, 368, 28804, 733, 28748, 16289, 28793, 28737, 28742, 28719, 2548, 1598, 28723, 1602, 541, 315, 1316, 368, 3154, 28804, 2, 28705, 733, 16289, 28793, 315, 28742, 28715, 737, 298, 1347, 805, 910, 10706, 5752, 1077, 3791, 28808, 733, 28748, 16289, 28793]\n               * ```\n               * \n               * @param {Message[]} conversation A list of message objects with `\"role\"` and `\"content\"` keys,\n               * representing the chat history so far.\n               * @param {Object} options An optional object containing the following properties:\n               * @param {string} [options.chat_template=null] A Jinja template to use for this conversion. If\n               * this is not passed, the model's chat template will be used instead.\n               * @param {Object[]} [options.tools=null]\n               * A list of tools (callable functions) that will be accessible to the model. If the template does not\n               * support function calling, this argument will have no effect. Each tool should be passed as a JSON Schema,\n               * giving the name, description and argument types for the tool. See our\n               * [chat templating guide](https://huggingface.co/docs/transformers/main/en/chat_templating#automated-function-conversion-for-tool-use)\n               * for more information.\n               * @param {Record<string, string>[]} [options.documents=null]\n               * A list of dicts representing documents that will be accessible to the model if it is performing RAG\n               * (retrieval-augmented generation). If the template does not support RAG, this argument will have no\n               * effect. We recommend that each document should be a dict containing \"title\" and \"text\" keys. Please\n               * see the RAG section of the [chat templating guide](https://huggingface.co/docs/transformers/main/en/chat_templating#arguments-for-RAG)\n               * for examples of passing documents with chat templates.\n               * @param {boolean} [options.add_generation_prompt=false] Whether to end the prompt with the token(s) that indicate\n               * the start of an assistant message. This is useful when you want to generate a response from the model.\n               * Note that this argument will be passed to the chat template, and so it must be supported in the\n               * template for this argument to have any effect.\n               * @param {boolean} [options.tokenize=true] Whether to tokenize the output. If false, the output will be a string.\n               * @param {boolean} [options.padding=false] Whether to pad sequences to the maximum length. Has no effect if tokenize is false.\n               * @param {boolean} [options.truncation=false] Whether to truncate sequences to the maximum length. Has no effect if tokenize is false.\n               * @param {number} [options.max_length=null] Maximum length (in tokens) to use for padding or truncation. Has no effect if tokenize is false.\n               * If not specified, the tokenizer's `max_length` attribute will be used as a default.\n               * @param {boolean} [options.return_tensor=true] Whether to return the output as a Tensor or an Array. Has no effect if tokenize is false.\n               * @param {boolean} [options.return_dict=true] Whether to return a dictionary with named outputs. Has no effect if tokenize is false.\n               * @param {Object} [options.tokenizer_kwargs={}] Additional options to pass to the tokenizer.\n               * @returns {string | Tensor | number[]| number[][]|BatchEncoding} The tokenized output.\n               */\n              apply_chat_template(conversation, {\n                tools = null,\n                documents = null,\n                chat_template = null,\n                add_generation_prompt = false,\n                tokenize = true,\n                padding = false,\n                truncation = false,\n                max_length = null,\n                return_tensor = true,\n                return_dict = false,\n                tokenizer_kwargs = {},\n                ...kwargs\n              } = {}) {\n                chat_template = this.get_chat_template({ chat_template, tools });\n                if (typeof chat_template !== \"string\") {\n                  throw Error(`chat_template must be a string, but got ${typeof chat_template}`);\n                }\n                let compiledTemplate = this._compiled_template_cache.get(chat_template);\n                if (compiledTemplate === void 0) {\n                  compiledTemplate = new _huggingface_jinja__WEBPACK_IMPORTED_MODULE_6__.Template(chat_template);\n                  this._compiled_template_cache.set(chat_template, compiledTemplate);\n                }\n                const special_tokens_map = /* @__PURE__ */ Object.create(null);\n                for (const key of SPECIAL_TOKEN_ATTRIBUTES) {\n                  const value = this.getToken(key);\n                  if (value) {\n                    special_tokens_map[key] = value;\n                  }\n                }\n                const rendered = compiledTemplate.render({\n                  messages: conversation,\n                  add_generation_prompt,\n                  tools,\n                  documents,\n                  ...special_tokens_map,\n                  ...kwargs\n                });\n                if (tokenize) {\n                  const out = this._call(rendered, {\n                    add_special_tokens: false,\n                    padding,\n                    truncation,\n                    max_length,\n                    return_tensor,\n                    ...tokenizer_kwargs\n                  });\n                  return return_dict ? out : out.input_ids;\n                }\n                return rendered;\n              }\n            }\n            class BertTokenizer extends PreTrainedTokenizer {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"return_token_type_ids\", true);\n              }\n            }\n            class AlbertTokenizer extends PreTrainedTokenizer {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"return_token_type_ids\", true);\n              }\n            }\n            class MobileBertTokenizer extends PreTrainedTokenizer {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"return_token_type_ids\", true);\n              }\n            }\n            class SqueezeBertTokenizer extends PreTrainedTokenizer {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"return_token_type_ids\", true);\n              }\n            }\n            class DebertaTokenizer extends PreTrainedTokenizer {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"return_token_type_ids\", true);\n              }\n            }\n            class DebertaV2Tokenizer extends PreTrainedTokenizer {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"return_token_type_ids\", true);\n              }\n            }\n            class HerbertTokenizer extends PreTrainedTokenizer {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"return_token_type_ids\", true);\n              }\n            }\n            class ConvBertTokenizer extends PreTrainedTokenizer {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"return_token_type_ids\", true);\n              }\n            }\n            class RoFormerTokenizer extends PreTrainedTokenizer {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"return_token_type_ids\", true);\n              }\n            }\n            class DistilBertTokenizer extends PreTrainedTokenizer {\n            }\n            class CamembertTokenizer extends PreTrainedTokenizer {\n            }\n            class XLMTokenizer extends PreTrainedTokenizer {\n              constructor(tokenizerJSON, tokenizerConfig) {\n                super(tokenizerJSON, tokenizerConfig);\n                __publicField(this, \"return_token_type_ids\", true);\n                console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\\'s \"fast\" tokenizers library. Therefore, you may experience slightly inaccurate results.');\n              }\n            }\n            class ElectraTokenizer extends PreTrainedTokenizer {\n              constructor() {\n                super(...arguments);\n                __publicField(this, \"return_token_type_ids\", true);\n              }\n            }\n            class T5Tokenizer extends PreTrainedTokenizer {\n            }\n            class GPT2Tokenizer extends PreTrainedTokenizer {\n            }\n            class BartTokenizer extends PreTrainedTokenizer {\n            }\n            class MBartTokenizer extends PreTrainedTokenizer {\n              constructor(tokenizerJSON, tokenizerConfig) {\n                super(tokenizerJSON, tokenizerConfig);\n                this.languageRegex = /^[a-z]{2}_[A-Z]{2}$/;\n                this.language_codes = this.special_tokens.filter((x) => this.languageRegex.test(x));\n                this.lang_to_token = (x) => x;\n              }\n              /**\n               * Helper function to build translation inputs for an `MBartTokenizer`.\n               * @param {string|string[]} raw_inputs The text to tokenize.\n               * @param {Object} tokenizer_options Options to be sent to the tokenizer\n               * @param {Object} generate_kwargs Generation options.\n               * @returns {Object} Object to be passed to the model.\n               */\n              _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {\n                return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);\n              }\n            }\n            class MBart50Tokenizer extends MBartTokenizer {\n            }\n            class RobertaTokenizer extends PreTrainedTokenizer {\n            }\n            class BloomTokenizer extends PreTrainedTokenizer {\n            }\n            const SPIECE_UNDERLINE = \"\\u2581\";\n            class LlamaTokenizer extends PreTrainedTokenizer {\n              constructor(tokenizerJSON, tokenizerConfig) {\n                super(tokenizerJSON, tokenizerConfig);\n                __publicField(this, \"padding_side\", \"left\");\n                this.legacy = tokenizerConfig.legacy ?? true;\n                if (!this.legacy) {\n                  this.normalizer = null;\n                  this.pre_tokenizer = new MetaspacePreTokenizer({\n                    replacement: SPIECE_UNDERLINE,\n                    add_prefix_space: true,\n                    prepend_scheme: \"first\"\n                  });\n                }\n              }\n              /**\n               * Helper function to handle legacy encoding of SPM tokenizers.\n               * Adapted from https://github.com/huggingface/transformers/blob/e6dcf8abd6f65bb4b6dfc1831b20d9ba49ce00e2/src/transformers/models/t5/tokenization_t5.py#L374-L387\n               * @param {string} text The text to encode.\n               * @returns {string[]} The encoded tokens.\n               */\n              _encode_text(text) {\n                if (text === null) return null;\n                if (this.legacy || text.length === 0) {\n                  return super._encode_text(text);\n                }\n                let tokens = super._encode_text(SPIECE_UNDERLINE + text.replaceAll(SPIECE_UNDERLINE, \" \"));\n                if (tokens.length > 1 && tokens[0] === SPIECE_UNDERLINE && this.special_tokens.includes(tokens[1])) {\n                  tokens = tokens.slice(1);\n                }\n                return tokens;\n              }\n            }\n            class CodeLlamaTokenizer extends PreTrainedTokenizer {\n            }\n            class XLMRobertaTokenizer extends PreTrainedTokenizer {\n            }\n            class MPNetTokenizer extends PreTrainedTokenizer {\n            }\n            class FalconTokenizer extends PreTrainedTokenizer {\n            }\n            class GPTNeoXTokenizer extends PreTrainedTokenizer {\n            }\n            class EsmTokenizer extends PreTrainedTokenizer {\n            }\n            class Qwen2Tokenizer extends PreTrainedTokenizer {\n            }\n            class GemmaTokenizer extends PreTrainedTokenizer {\n            }\n            class Grok1Tokenizer extends PreTrainedTokenizer {\n            }\n            function _build_translation_inputs(self2, raw_inputs, tokenizer_options, generate_kwargs) {\n              if (!(\"language_codes\" in self2) || !Array.isArray(self2.language_codes)) {\n                throw new Error(\"Tokenizer must have `language_codes` attribute set and it should be an array of language ids.\");\n              }\n              if (!(\"languageRegex\" in self2) || !(self2.languageRegex instanceof RegExp)) {\n                throw new Error(\"Tokenizer must have `languageRegex` attribute set and it should be a regular expression.\");\n              }\n              if (!(\"lang_to_token\" in self2) || typeof self2.lang_to_token !== \"function\") {\n                throw new Error(\"Tokenizer must have `lang_to_token` attribute set and it should be a function.\");\n              }\n              const src_lang_token = generate_kwargs.src_lang;\n              const tgt_lang_token = generate_kwargs.tgt_lang;\n              if (!self2.language_codes.includes(tgt_lang_token)) {\n                throw new Error(`Target language code \"${tgt_lang_token}\" is not valid. Must be one of: {${self2.language_codes.join(\", \")}}`);\n              }\n              if (src_lang_token !== void 0) {\n                if (!self2.language_codes.includes(src_lang_token)) {\n                  throw new Error(`Source language code \"${src_lang_token}\" is not valid. Must be one of: {${self2.language_codes.join(\", \")}}`);\n                }\n                for (const item of self2.post_processor.config.single) {\n                  if (\"SpecialToken\" in item && self2.languageRegex.test(item.SpecialToken.id)) {\n                    item.SpecialToken.id = self2.lang_to_token(src_lang_token);\n                    break;\n                  }\n                }\n              }\n              generate_kwargs.forced_bos_token_id = self2.model.convert_tokens_to_ids([self2.lang_to_token(tgt_lang_token)])[0];\n              return self2._call(raw_inputs, tokenizer_options);\n            }\n            class NllbTokenizer extends PreTrainedTokenizer {\n              constructor(tokenizerJSON, tokenizerConfig) {\n                super(tokenizerJSON, tokenizerConfig);\n                this.languageRegex = /^[a-z]{3}_[A-Z][a-z]{3}$/;\n                this.language_codes = this.special_tokens.filter((x) => this.languageRegex.test(x));\n                this.lang_to_token = (x) => x;\n              }\n              /**\n               * Helper function to build translation inputs for an `NllbTokenizer`.\n               * @param {string|string[]} raw_inputs The text to tokenize.\n               * @param {Object} tokenizer_options Options to be sent to the tokenizer\n               * @param {Object} generate_kwargs Generation options.\n               * @returns {Object} Object to be passed to the model.\n               */\n              _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {\n                return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);\n              }\n            }\n            class M2M100Tokenizer extends PreTrainedTokenizer {\n              constructor(tokenizerJSON, tokenizerConfig) {\n                super(tokenizerJSON, tokenizerConfig);\n                this.languageRegex = /^__[a-z]{2,3}__$/;\n                this.language_codes = this.special_tokens.filter((x) => this.languageRegex.test(x)).map((x) => x.slice(2, -2));\n                this.lang_to_token = (x) => `__${x}__`;\n              }\n              /**\n               * Helper function to build translation inputs for an `M2M100Tokenizer`.\n               * @param {string|string[]} raw_inputs The text to tokenize.\n               * @param {Object} tokenizer_options Options to be sent to the tokenizer\n               * @param {Object} generate_kwargs Generation options.\n               * @returns {Object} Object to be passed to the model.\n               */\n              _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {\n                return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);\n              }\n            }\n            class WhisperTokenizer extends PreTrainedTokenizer {\n              get timestamp_begin() {\n                return this.model.convert_tokens_to_ids([\"<|notimestamps|>\"])[0] + 1;\n              }\n              /**\n               * Decodes automatic speech recognition (ASR) sequences.\n               * @param {Array<{tokens: bigint[], token_timestamps?: number[], stride: number[]}>} sequences The sequences to decode.\n               * @param {Object} options The options to use for decoding.\n               * @returns {Array<string|{chunks?: undefined|Array<{language: string|null, timestamp: Array<number|null>, text: string}>}>} The decoded sequences.\n               */\n              _decode_asr(sequences, {\n                return_timestamps = false,\n                return_language = false,\n                time_precision = null,\n                force_full_sequences = true\n              } = {}) {\n                if (time_precision === null) {\n                  throw Error(\"Must specify time_precision\");\n                }\n                let last_language = null;\n                const returnWordTimestamps = return_timestamps === \"word\";\n                function new_chunk() {\n                  return { \"language\": last_language, \"timestamp\": [null, null], \"text\": \"\" };\n                }\n                const chunks = [];\n                let chunk = new_chunk();\n                let time_offset = 0;\n                const timestamp_begin = this.timestamp_begin;\n                const total_timestamp_tokens = 1500;\n                const timestamp_end = timestamp_begin + total_timestamp_tokens;\n                let previous_tokens = [];\n                let previous_token_timestamps = [];\n                let skip = false;\n                let right_stride_start = null;\n                const all_special_ids = new Set(this.all_special_ids);\n                for (const output of sequences) {\n                  const token_ids = output.tokens;\n                  const token_timestamps = returnWordTimestamps ? output.token_timestamps : null;\n                  let last_timestamp = null;\n                  let first_timestamp = timestamp_begin;\n                  if (\"stride\" in output) {\n                    const [chunk_len, stride_left, stride_right] = output.stride;\n                    time_offset -= stride_left;\n                    right_stride_start = chunk_len - stride_right;\n                    if (stride_left) {\n                      first_timestamp = stride_left / time_precision + timestamp_begin;\n                    }\n                    if (stride_right) {\n                      for (let i = token_ids.length - 1; i >= 0; --i) {\n                        const token = Number(token_ids[i]);\n                        if (token >= timestamp_begin) {\n                          if (last_timestamp !== null && (token - timestamp_begin) * time_precision < right_stride_start) {\n                            break;\n                          }\n                          last_timestamp = token;\n                        }\n                      }\n                    }\n                  }\n                  let current_tokens = [];\n                  let current_token_timestamps = [];\n                  for (let i = 0; i < token_ids.length; ++i) {\n                    const token = Number(token_ids[i]);\n                    if (all_special_ids.has(token)) {\n                      const text = this.decode([token]);\n                      const language = _models_whisper_common_whisper_js__WEBPACK_IMPORTED_MODULE_7__.WHISPER_LANGUAGE_MAPPING.get(text.slice(2, -2));\n                      if (language !== void 0) {\n                        if (last_language !== null && language !== last_language && !return_timestamps) {\n                          previous_tokens.push(current_tokens);\n                          const resolved_tokens = this.findLongestCommonSequence(previous_tokens)[0];\n                          const resolved_text = this.decode(resolved_tokens);\n                          chunk.text = resolved_text;\n                          chunks.push(chunk);\n                          previous_tokens = [];\n                          current_tokens = [];\n                          chunk = new_chunk();\n                        }\n                        last_language = chunk.language = language;\n                      } else {\n                      }\n                    } else if (token >= timestamp_begin && token <= timestamp_end) {\n                      const time = (token - timestamp_begin) * time_precision + time_offset;\n                      const rounded_time = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.round)(time, 2);\n                      if (last_timestamp !== null && token >= last_timestamp) {\n                        skip = true;\n                      } else if (skip || previous_tokens.length > 0 && token < first_timestamp) {\n                        skip = false;\n                      } else if (chunk.timestamp[0] === null) {\n                        chunk.timestamp[0] = rounded_time;\n                      } else {\n                        if (rounded_time === chunk.timestamp[0]) {\n                        } else {\n                          chunk.timestamp[1] = rounded_time;\n                          previous_tokens.push(current_tokens);\n                          if (returnWordTimestamps) {\n                            previous_token_timestamps.push(current_token_timestamps);\n                          }\n                          const [resolved_tokens, resolved_token_timestamps] = this.findLongestCommonSequence(\n                            previous_tokens,\n                            previous_token_timestamps\n                          );\n                          const resolved_text = this.decode(resolved_tokens);\n                          chunk.text = resolved_text;\n                          if (returnWordTimestamps) {\n                            chunk.words = this.collateWordTimestamps(\n                              resolved_tokens,\n                              resolved_token_timestamps,\n                              last_language\n                            );\n                          }\n                          chunks.push(chunk);\n                          previous_tokens = [];\n                          current_tokens = [];\n                          previous_token_timestamps = [];\n                          current_token_timestamps = [];\n                          chunk = new_chunk();\n                        }\n                      }\n                    } else {\n                      current_tokens.push(token);\n                      if (returnWordTimestamps) {\n                        let start_time = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.round)(token_timestamps[i] + time_offset, 2);\n                        let end_time;\n                        if (i + 1 < token_timestamps.length) {\n                          end_time = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.round)(token_timestamps[i + 1] + time_offset, 2);\n                          const decoded_text = this.decode([token]);\n                          if (PUNCTUATION_ONLY_REGEX.test(decoded_text)) {\n                            end_time = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.round)(Math.min(start_time + time_precision, end_time), 2);\n                          }\n                        } else {\n                          end_time = null;\n                        }\n                        current_token_timestamps.push([start_time, end_time]);\n                      }\n                    }\n                  }\n                  if (\"stride\" in output) {\n                    const [chunk_len, stride_left, stride_right] = output.stride;\n                    time_offset += chunk_len - stride_right;\n                  }\n                  if (current_tokens.length > 0) {\n                    previous_tokens.push(current_tokens);\n                    if (returnWordTimestamps) {\n                      previous_token_timestamps.push(current_token_timestamps);\n                    }\n                  } else if (previous_tokens.every((p) => p.length === 0)) {\n                    chunk = new_chunk();\n                    previous_tokens = [];\n                    current_tokens = [];\n                    previous_token_timestamps = [];\n                    current_token_timestamps = [];\n                  }\n                }\n                if (previous_tokens.length > 0) {\n                  if (force_full_sequences && return_timestamps) {\n                    throw new Error(\n                      \"Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.\"\n                    );\n                  }\n                  const [resolved_tokens, resolved_token_timestamps] = this.findLongestCommonSequence(previous_tokens, previous_token_timestamps);\n                  const resolved_text = this.decode(resolved_tokens);\n                  chunk.text = resolved_text;\n                  if (returnWordTimestamps) {\n                    chunk.words = this.collateWordTimestamps(\n                      resolved_tokens,\n                      resolved_token_timestamps,\n                      last_language\n                    );\n                  }\n                  chunks.push(chunk);\n                }\n                let optional = /* @__PURE__ */ Object.create(null);\n                const full_text = chunks.map((chunk2) => chunk2.text).join(\"\");\n                if (return_timestamps || return_language) {\n                  for (let i = 0; i < chunks.length; ++i) {\n                    const chunk2 = chunks[i];\n                    if (!return_timestamps) {\n                      delete chunk2[\"timestamp\"];\n                    }\n                    if (!return_language) {\n                      delete chunk2[\"language\"];\n                    }\n                  }\n                  if (returnWordTimestamps) {\n                    const new_chunks = [];\n                    for (const chunk2 of chunks) {\n                      for (const word of chunk2.words) {\n                        new_chunks.push(word);\n                      }\n                    }\n                    optional = { \"chunks\": new_chunks };\n                  } else {\n                    optional = { \"chunks\": chunks };\n                  }\n                }\n                return [full_text, optional];\n              }\n              /**\n               * Finds the longest common sequence among the provided sequences.\n               * @param {number[][]} sequences An array of sequences of token ids to compare.\n               * @returns {number[][]} The longest common sequence found.\n               * @throws {Error} If there is a bug within the function.\n               * @private\n               */\n              findLongestCommonSequence(sequences, token_timestamp_sequences = null) {\n                let leftSequence = sequences[0];\n                let leftLength = leftSequence.length;\n                let totalSequence = [];\n                const use_token_timestamp_sequences = Array.isArray(token_timestamp_sequences) && token_timestamp_sequences.length > 0;\n                let total_token_timestamp_sequence = use_token_timestamp_sequences ? [] : null;\n                let left_token_timestamp_sequence = use_token_timestamp_sequences ? token_timestamp_sequences[0] : null;\n                for (let i = 1; i < sequences.length; ++i) {\n                  const rightSequence = sequences[i];\n                  let max = 0;\n                  let maxIndices = [leftLength, leftLength, 0, 0];\n                  const rightLength = rightSequence.length;\n                  for (let j = 1; j < leftLength + rightLength; ++j) {\n                    const leftStart2 = Math.max(0, leftLength - j);\n                    const leftStop2 = Math.min(leftLength, leftLength + rightLength - j);\n                    const left = leftSequence.slice(leftStart2, leftStop2);\n                    const rightStart2 = Math.max(0, j - leftLength);\n                    const rightStop2 = Math.min(rightLength, j);\n                    const right = rightSequence.slice(rightStart2, rightStop2);\n                    if (left.length !== right.length) {\n                      throw new Error(\"There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.\");\n                    }\n                    let matches;\n                    if (use_token_timestamp_sequences) {\n                      matches = left.filter((elem, idx) => elem === right[idx] && left_token_timestamp_sequence[leftStart2 + idx] <= token_timestamp_sequences[i][rightStart2 + idx]).length;\n                    } else {\n                      matches = left.filter((elem, idx) => elem === right[idx]).length;\n                    }\n                    const eps = j / 1e4;\n                    const matching = matches / j + eps;\n                    if (matches > 1 && matching > max) {\n                      max = matching;\n                      maxIndices = [leftStart2, leftStop2, rightStart2, rightStop2];\n                    }\n                  }\n                  const [leftStart, leftStop, rightStart, rightStop] = maxIndices;\n                  const leftMid = Math.floor((leftStop + leftStart) / 2);\n                  const rightMid = Math.floor((rightStop + rightStart) / 2);\n                  totalSequence.push(...leftSequence.slice(0, leftMid));\n                  leftSequence = rightSequence.slice(rightMid);\n                  leftLength = leftSequence.length;\n                  if (use_token_timestamp_sequences) {\n                    total_token_timestamp_sequence.push(...left_token_timestamp_sequence.slice(0, leftMid));\n                    left_token_timestamp_sequence = token_timestamp_sequences[i].slice(rightMid);\n                  }\n                }\n                totalSequence.push(...leftSequence);\n                if (use_token_timestamp_sequences) {\n                  total_token_timestamp_sequence.push(...left_token_timestamp_sequence);\n                  return [totalSequence, total_token_timestamp_sequence];\n                } else {\n                  return [totalSequence, []];\n                }\n              }\n              /** @private */\n              collateWordTimestamps(tokens, token_timestamps, language) {\n                const [words, _, token_indices] = this.combineTokensIntoWords(tokens, language);\n                const timings = [];\n                for (let i = 0; i < words.length; ++i) {\n                  const indices = token_indices[i];\n                  timings.push({\n                    text: words[i],\n                    timestamp: [\n                      token_timestamps[indices.at(0)][0],\n                      token_timestamps[indices.at(-1)][1]\n                    ]\n                  });\n                }\n                return timings;\n              }\n              /**\n               * Groups tokens by word. Returns a tuple containing a list of strings with the words,\n               * and a list of `token_id` sequences with the tokens making up each word.\n               * @param {number[]} tokens \n               * @param {string} [language] \n               * @param {string} prepend_punctionations \n               * @param {string} append_punctuations \n               * \n               * @private\n               */\n              combineTokensIntoWords(tokens, language, prepend_punctionations = `\"'\\u201C\\xA1\\xBF([{-`, append_punctuations = `\"'.\\u3002,\\uFF0C!\\uFF01?\\uFF1F:\\uFF1A\\u201D)]}\\u3001`) {\n                language = language ?? \"english\";\n                let words, word_tokens, token_indices;\n                if ([\"chinese\", \"japanese\", \"thai\", \"lao\", \"myanmar\"].includes(language)) {\n                  [words, word_tokens, token_indices] = this.splitTokensOnUnicode(tokens);\n                } else {\n                  [words, word_tokens, token_indices] = this.splitTokensOnSpaces(tokens);\n                }\n                return this.mergePunctuations(words, word_tokens, token_indices, prepend_punctionations, append_punctuations);\n              }\n              /** @type {PreTrainedTokenizer['decode']} */\n              decode(token_ids, decode_args) {\n                let text;\n                if (decode_args?.decode_with_timestamps) {\n                  if (token_ids instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor) {\n                    token_ids = prepareTensorForDecode(token_ids);\n                  }\n                  text = this.decodeWithTimestamps(token_ids, decode_args);\n                } else {\n                  text = super.decode(token_ids, decode_args);\n                }\n                return text;\n              }\n              /**\n               * @param {number[]|bigint[]} token_ids List of token IDs to decode.\n               * @param {Object} decode_args Optional arguments for decoding\n               * @private\n               */\n              decodeWithTimestamps(token_ids, decode_args) {\n                const time_precision = decode_args?.time_precision ?? 0.02;\n                const timestamp_begin = Array.from(this.all_special_ids).at(-1) + 1;\n                let outputs = [[]];\n                for (let token of token_ids) {\n                  token = Number(token);\n                  if (token >= timestamp_begin) {\n                    const timestamp = ((token - timestamp_begin) * time_precision).toFixed(2);\n                    outputs.push(`<|${timestamp}|>`);\n                    outputs.push([]);\n                  } else {\n                    outputs[outputs.length - 1].push(token);\n                  }\n                }\n                outputs = outputs.map(\n                  (s) => typeof s === \"string\" ? s : super.decode(s, decode_args)\n                );\n                return outputs.join(\"\");\n              }\n              /**\n               * Combine tokens into words by splitting at any position where the tokens are decoded as valid unicode points.\n               * @param {number[]} tokens \n               * @returns {*}\n               * @private\n               */\n              splitTokensOnUnicode(tokens) {\n                const decoded_full = this.decode(tokens, {\n                  // @ts-ignore\n                  decode_with_timestamps: true\n                });\n                const replacement_char = \"\\uFFFD\";\n                const words = [];\n                const word_tokens = [];\n                const token_indices = [];\n                let current_tokens = [];\n                let current_indices = [];\n                let unicode_offset = 0;\n                for (let token_idx = 0; token_idx < tokens.length; ++token_idx) {\n                  const token = tokens[token_idx];\n                  current_tokens.push(token);\n                  current_indices.push(token_idx);\n                  const decoded = this.decode(current_tokens, {\n                    // @ts-ignore\n                    decode_with_timestamps: true\n                  });\n                  if (!decoded.includes(replacement_char) || decoded_full[unicode_offset + decoded.indexOf(replacement_char)] === replacement_char) {\n                    words.push(decoded);\n                    word_tokens.push(current_tokens);\n                    token_indices.push(current_indices);\n                    current_tokens = [];\n                    current_indices = [];\n                    unicode_offset += decoded.length;\n                  }\n                }\n                return [words, word_tokens, token_indices];\n              }\n              /**\n               * Combine tokens into words by splitting at whitespace and punctuation tokens.\n               * @param {number[]} tokens \n               * @private\n               */\n              splitTokensOnSpaces(tokens) {\n                const [subwords, subword_tokens_list, subword_indices_list] = this.splitTokensOnUnicode(tokens);\n                const words = [];\n                const word_tokens = [];\n                const token_indices = [];\n                const punctuationRegex = new RegExp(`^[${PUNCTUATION_REGEX}]$`, \"gu\");\n                for (let i = 0; i < subwords.length; ++i) {\n                  const subword = subwords[i];\n                  const subword_tokens = subword_tokens_list[i];\n                  const subword_indices = subword_indices_list[i];\n                  const special = subword_tokens[0] >= this.model.tokens_to_ids.get(\"<|endoftext|>\");\n                  const with_space = subword.startsWith(\" \");\n                  const trimmed = subword.trim();\n                  const punctuation = punctuationRegex.test(trimmed);\n                  if (special || with_space || punctuation || words.length === 0) {\n                    words.push(subword);\n                    word_tokens.push(subword_tokens);\n                    token_indices.push(subword_indices);\n                  } else {\n                    const ix = words.length - 1;\n                    words[ix] += subword;\n                    word_tokens[ix].push(...subword_tokens);\n                    token_indices[ix].push(...subword_indices);\n                  }\n                }\n                return [words, word_tokens, token_indices];\n              }\n              /**\n               * Merges punctuation tokens with neighboring words.\n               * @param {string[]} words \n               * @param {number[][]} tokens \n               * @param {number[][]} indices \n               * @param {string} prepended \n               * @param {string} appended \n               * @private\n               */\n              mergePunctuations(words, tokens, indices, prepended, appended) {\n                const newWords = structuredClone(words);\n                const newTokens = structuredClone(tokens);\n                const newIndices = structuredClone(indices);\n                let i = newWords.length - 2;\n                let j = newWords.length - 1;\n                while (i >= 0) {\n                  if (newWords[i].startsWith(\" \") && prepended.includes(newWords[i].trim())) {\n                    newWords[j] = newWords[i] + newWords[j];\n                    newTokens[j] = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(newTokens[i], newTokens[j]);\n                    newIndices[j] = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(newIndices[i], newIndices[j]);\n                    newWords[i] = \"\";\n                    newTokens[i] = [];\n                    newIndices[i] = [];\n                  } else {\n                    j = i;\n                  }\n                  --i;\n                }\n                i = 0;\n                j = 1;\n                while (j < newWords.length) {\n                  if (!newWords[i].endsWith(\" \") && appended.includes(newWords[j])) {\n                    newWords[i] += newWords[j];\n                    newTokens[i] = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(newTokens[i], newTokens[j]);\n                    newIndices[i] = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(newIndices[i], newIndices[j]);\n                    newWords[j] = \"\";\n                    newTokens[j] = [];\n                    newIndices[j] = [];\n                  } else {\n                    i = j;\n                  }\n                  ++j;\n                }\n                return [\n                  newWords.filter((x) => x),\n                  newTokens.filter((x) => x.length > 0),\n                  newIndices.filter((x) => x.length > 0)\n                ];\n              }\n            }\n            class CodeGenTokenizer extends PreTrainedTokenizer {\n            }\n            class CLIPTokenizer extends PreTrainedTokenizer {\n            }\n            class SiglipTokenizer extends PreTrainedTokenizer {\n            }\n            class MarianTokenizer extends PreTrainedTokenizer {\n              /**\n               * Create a new MarianTokenizer instance.\n               * @param {Object} tokenizerJSON The JSON of the tokenizer.\n               * @param {Object} tokenizerConfig The config of the tokenizer.\n               */\n              constructor(tokenizerJSON, tokenizerConfig) {\n                super(tokenizerJSON, tokenizerConfig);\n                this.languageRegex = /^(>>\\w+<<)\\s*/g;\n                this.supported_language_codes = this.model.vocab.filter(\n                  (x) => this.languageRegex.test(x)\n                );\n                console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\\'s \"fast\" tokenizers library. Therefore, you may experience slightly inaccurate results.');\n              }\n              /**\n               * Encodes a single text. Overriding this method is necessary since the language codes\n               * must be removed before encoding with sentencepiece model.\n               * @see https://github.com/huggingface/transformers/blob/12d51db243a00726a548a43cc333390ebae731e3/src/transformers/models/marian/tokenization_marian.py#L204-L213\n               *\n               * @param {string|null} text The text to encode.\n               * @returns {Array} The encoded tokens.\n               */\n              _encode_text(text) {\n                if (text === null) return null;\n                const [matchInfo, ...remainder] = text.trim().split(this.languageRegex);\n                if (remainder.length === 0) {\n                  return super._encode_text(matchInfo);\n                } else if (remainder.length === 2) {\n                  const [language, text2] = remainder;\n                  if (!this.supported_language_codes.includes(language)) {\n                    console.warn(`Unsupported language code \"${language}\" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`);\n                  }\n                  return (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)([language], super._encode_text(text2));\n                }\n              }\n            }\n            class Wav2Vec2CTCTokenizer extends PreTrainedTokenizer {\n            }\n            class BlenderbotTokenizer extends PreTrainedTokenizer {\n            }\n            class BlenderbotSmallTokenizer extends PreTrainedTokenizer {\n            }\n            class SpeechT5Tokenizer extends PreTrainedTokenizer {\n            }\n            class NougatTokenizer extends PreTrainedTokenizer {\n            }\n            class VitsTokenizer extends PreTrainedTokenizer {\n              constructor(tokenizerJSON, tokenizerConfig) {\n                super(tokenizerJSON, tokenizerConfig);\n                this.decoder = new VitsDecoder({});\n              }\n            }\n            class CohereTokenizer extends PreTrainedTokenizer {\n            }\n            class MgpstrTokenizer extends PreTrainedTokenizer {\n            }\n            class AutoTokenizer {\n              /**\n               * Instantiate one of the tokenizer classes of the library from a pretrained model.\n               * \n               * The tokenizer class to instantiate is selected based on the `tokenizer_class` property of the config object\n               * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)\n               * \n               * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:\n               * - A string, the *model id* of a pretrained tokenizer hosted inside a model repo on huggingface.co.\n               *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a\n               *   user or organization name, like `dbmdz/bert-base-german-cased`.\n               * - A path to a *directory* containing tokenizer files, e.g., `./my_model_directory/`.\n               * @param {PretrainedTokenizerOptions} options Additional options for loading the tokenizer.\n               * \n               * @returns {Promise<PreTrainedTokenizer>} A new instance of the PreTrainedTokenizer class.\n               */\n              static async from_pretrained(pretrained_model_name_or_path, {\n                progress_callback = null,\n                config = null,\n                cache_dir = null,\n                local_files_only = false,\n                revision = \"main\",\n                legacy = null\n              } = {}) {\n                const [tokenizerJSON, tokenizerConfig] = await loadTokenizer(pretrained_model_name_or_path, {\n                  progress_callback,\n                  config,\n                  cache_dir,\n                  local_files_only,\n                  revision,\n                  legacy\n                });\n                const tokenizerName = tokenizerConfig.tokenizer_class?.replace(/Fast$/, \"\") ?? \"PreTrainedTokenizer\";\n                let cls = this.TOKENIZER_CLASS_MAPPING[tokenizerName];\n                if (!cls) {\n                  console.warn(`Unknown tokenizer class \"${tokenizerName}\", attempting to construct from base class.`);\n                  cls = PreTrainedTokenizer;\n                }\n                return new cls(tokenizerJSON, tokenizerConfig);\n              }\n            }\n            __publicField(AutoTokenizer, \"TOKENIZER_CLASS_MAPPING\", {\n              T5Tokenizer,\n              DistilBertTokenizer,\n              CamembertTokenizer,\n              DebertaTokenizer,\n              DebertaV2Tokenizer,\n              BertTokenizer,\n              HerbertTokenizer,\n              ConvBertTokenizer,\n              RoFormerTokenizer,\n              XLMTokenizer,\n              ElectraTokenizer,\n              MobileBertTokenizer,\n              SqueezeBertTokenizer,\n              AlbertTokenizer,\n              GPT2Tokenizer,\n              BartTokenizer,\n              MBartTokenizer,\n              MBart50Tokenizer,\n              RobertaTokenizer,\n              WhisperTokenizer,\n              CodeGenTokenizer,\n              CLIPTokenizer,\n              SiglipTokenizer,\n              MarianTokenizer,\n              BloomTokenizer,\n              NllbTokenizer,\n              M2M100Tokenizer,\n              LlamaTokenizer,\n              CodeLlamaTokenizer,\n              XLMRobertaTokenizer,\n              MPNetTokenizer,\n              FalconTokenizer,\n              GPTNeoXTokenizer,\n              EsmTokenizer,\n              Wav2Vec2CTCTokenizer,\n              BlenderbotTokenizer,\n              BlenderbotSmallTokenizer,\n              SpeechT5Tokenizer,\n              NougatTokenizer,\n              VitsTokenizer,\n              Qwen2Tokenizer,\n              GemmaTokenizer,\n              Grok1Tokenizer,\n              CohereTokenizer,\n              MgpstrTokenizer,\n              // Base case:\n              PreTrainedTokenizer\n            });\n          }\n        ),\n        /***/\n        \"./src/utils/audio.js\": (\n          /*!****************************!*\\\n            !*** ./src/utils/audio.js ***!\n            \\****************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              RawAudio: () => (\n                /* binding */\n                RawAudio\n              ),\n              /* harmony export */\n              hamming: () => (\n                /* binding */\n                hamming\n              ),\n              /* harmony export */\n              hanning: () => (\n                /* binding */\n                hanning\n              ),\n              /* harmony export */\n              mel_filter_bank: () => (\n                /* binding */\n                mel_filter_bank\n              ),\n              /* harmony export */\n              read_audio: () => (\n                /* binding */\n                read_audio\n              ),\n              /* harmony export */\n              spectrogram: () => (\n                /* binding */\n                spectrogram\n              ),\n              /* harmony export */\n              window_function: () => (\n                /* binding */\n                window_function\n              )\n              /* harmony export */\n            });\n            var _hub_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ./hub.js */\n              \"./src/utils/hub.js\"\n            );\n            var _maths_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ./maths.js */\n              \"./src/utils/maths.js\"\n            );\n            var _core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ./core.js */\n              \"./src/utils/core.js\"\n            );\n            var _env_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ../env.js */\n              \"./src/env.js\"\n            );\n            var fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(\n              /*! fs */\n              \"?7a2c\"\n            );\n            var _tensor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(\n              /*! ./tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            async function read_audio(url, sampling_rate) {\n              if (typeof AudioContext === \"undefined\") {\n                throw Error(\n                  \"Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.\"\n                );\n              }\n              const response = await (await (0, _hub_js__WEBPACK_IMPORTED_MODULE_0__.getFile)(url)).arrayBuffer();\n              const audioCTX = new AudioContext({ sampleRate: sampling_rate });\n              if (typeof sampling_rate === \"undefined\") {\n                console.warn(`No sampling rate provided, using default of ${audioCTX.sampleRate}Hz.`);\n              }\n              const decoded = await audioCTX.decodeAudioData(response);\n              let audio;\n              if (decoded.numberOfChannels === 2) {\n                const SCALING_FACTOR = Math.sqrt(2);\n                const left = decoded.getChannelData(0);\n                const right = decoded.getChannelData(1);\n                audio = new Float32Array(left.length);\n                for (let i = 0; i < decoded.length; ++i) {\n                  audio[i] = SCALING_FACTOR * (left[i] + right[i]) / 2;\n                }\n              } else {\n                audio = decoded.getChannelData(0);\n              }\n              return audio;\n            }\n            function generalized_cosine_window(M2, a_0) {\n              if (M2 < 1) {\n                return new Float64Array();\n              }\n              if (M2 === 1) {\n                return new Float64Array([1]);\n              }\n              const a_1 = 1 - a_0;\n              const factor = 2 * Math.PI / (M2 - 1);\n              const cos_vals = new Float64Array(M2);\n              for (let i = 0; i < M2; ++i) {\n                cos_vals[i] = a_0 - a_1 * Math.cos(i * factor);\n              }\n              return cos_vals;\n            }\n            function hanning(M2) {\n              return generalized_cosine_window(M2, 0.5);\n            }\n            function hamming(M2) {\n              return generalized_cosine_window(M2, 0.54);\n            }\n            const HERTZ_TO_MEL_MAPPING = {\n              \"htk\": (freq) => 2595 * Math.log10(1 + freq / 700),\n              \"kaldi\": (freq) => 1127 * Math.log(1 + freq / 700),\n              \"slaney\": (freq, min_log_hertz = 1e3, min_log_mel = 15, logstep = 27 / Math.log(6.4)) => freq >= min_log_hertz ? min_log_mel + Math.log(freq / min_log_hertz) * logstep : 3 * freq / 200\n            };\n            function hertz_to_mel(freq, mel_scale = \"htk\") {\n              const fn = HERTZ_TO_MEL_MAPPING[mel_scale];\n              if (!fn) {\n                throw new Error('mel_scale should be one of \"htk\", \"slaney\" or \"kaldi\".');\n              }\n              return typeof freq === \"number\" ? fn(freq) : freq.map((x) => fn(x));\n            }\n            const MEL_TO_HERTZ_MAPPING = {\n              \"htk\": (mels) => 700 * (10 ** (mels / 2595) - 1),\n              \"kaldi\": (mels) => 700 * (Math.exp(mels / 1127) - 1),\n              \"slaney\": (mels, min_log_hertz = 1e3, min_log_mel = 15, logstep = Math.log(6.4) / 27) => mels >= min_log_mel ? min_log_hertz * Math.exp(logstep * (mels - min_log_mel)) : 200 * mels / 3\n            };\n            function mel_to_hertz(mels, mel_scale = \"htk\") {\n              const fn = MEL_TO_HERTZ_MAPPING[mel_scale];\n              if (!fn) {\n                throw new Error('mel_scale should be one of \"htk\", \"slaney\" or \"kaldi\".');\n              }\n              return typeof mels === \"number\" ? fn(mels) : mels.map((x) => fn(x));\n            }\n            function _create_triangular_filter_bank(fft_freqs, filter_freqs) {\n              const filter_diff = Float64Array.from(\n                { length: filter_freqs.length - 1 },\n                (_, i) => filter_freqs[i + 1] - filter_freqs[i]\n              );\n              const slopes = Array.from({\n                length: fft_freqs.length\n              }, () => new Array(filter_freqs.length));\n              for (let j = 0; j < fft_freqs.length; ++j) {\n                const slope = slopes[j];\n                for (let i = 0; i < filter_freqs.length; ++i) {\n                  slope[i] = filter_freqs[i] - fft_freqs[j];\n                }\n              }\n              const numFreqs = filter_freqs.length - 2;\n              const ret = Array.from({ length: numFreqs }, () => new Array(fft_freqs.length));\n              for (let j = 0; j < fft_freqs.length; ++j) {\n                const slope = slopes[j];\n                for (let i = 0; i < numFreqs; ++i) {\n                  const down = -slope[i] / filter_diff[i];\n                  const up = slope[i + 2] / filter_diff[i + 1];\n                  ret[i][j] = Math.max(0, Math.min(down, up));\n                }\n              }\n              return ret;\n            }\n            function linspace(start, end, num) {\n              const step = (end - start) / (num - 1);\n              return Float64Array.from({ length: num }, (_, i) => start + step * i);\n            }\n            function mel_filter_bank(num_frequency_bins, num_mel_filters, min_frequency, max_frequency, sampling_rate, norm = null, mel_scale = \"htk\", triangularize_in_mel_space = false) {\n              if (norm !== null && norm !== \"slaney\") {\n                throw new Error('norm must be one of null or \"slaney\"');\n              }\n              if (num_frequency_bins < 2) {\n                throw new Error(`Require num_frequency_bins: ${num_frequency_bins} >= 2`);\n              }\n              if (min_frequency > max_frequency) {\n                throw new Error(`Require min_frequency: ${min_frequency} <= max_frequency: ${max_frequency}`);\n              }\n              const mel_min = hertz_to_mel(min_frequency, mel_scale);\n              const mel_max = hertz_to_mel(max_frequency, mel_scale);\n              const mel_freqs = linspace(mel_min, mel_max, num_mel_filters + 2);\n              let filter_freqs = mel_to_hertz(mel_freqs, mel_scale);\n              let fft_freqs;\n              if (triangularize_in_mel_space) {\n                const fft_bin_width = sampling_rate / ((num_frequency_bins - 1) * 2);\n                fft_freqs = hertz_to_mel(Float64Array.from({ length: num_frequency_bins }, (_, i) => i * fft_bin_width), mel_scale);\n                filter_freqs = mel_freqs;\n              } else {\n                fft_freqs = linspace(0, Math.floor(sampling_rate / 2), num_frequency_bins);\n              }\n              const mel_filters = _create_triangular_filter_bank(fft_freqs, filter_freqs);\n              if (norm !== null && norm === \"slaney\") {\n                for (let i = 0; i < num_mel_filters; ++i) {\n                  const filter = mel_filters[i];\n                  const enorm = 2 / (filter_freqs[i + 2] - filter_freqs[i]);\n                  for (let j = 0; j < num_frequency_bins; ++j) {\n                    filter[j] *= enorm;\n                  }\n                }\n              }\n              return mel_filters;\n            }\n            function padReflect(array, left, right) {\n              const padded = new array.constructor(array.length + left + right);\n              const w = array.length - 1;\n              for (let i = 0; i < array.length; ++i) {\n                padded[left + i] = array[i];\n              }\n              for (let i = 1; i <= left; ++i) {\n                padded[left - i] = array[(0, _core_js__WEBPACK_IMPORTED_MODULE_2__.calculateReflectOffset)(i, w)];\n              }\n              for (let i = 1; i <= right; ++i) {\n                padded[w + left + i] = array[(0, _core_js__WEBPACK_IMPORTED_MODULE_2__.calculateReflectOffset)(w - i, w)];\n              }\n              return padded;\n            }\n            function _db_conversion_helper(spectrogram2, factor, reference, min_value, db_range) {\n              if (reference <= 0) {\n                throw new Error(\"reference must be greater than zero\");\n              }\n              if (min_value <= 0) {\n                throw new Error(\"min_value must be greater than zero\");\n              }\n              reference = Math.max(min_value, reference);\n              const logReference = Math.log10(reference);\n              for (let i = 0; i < spectrogram2.length; ++i) {\n                spectrogram2[i] = factor * Math.log10(Math.max(min_value, spectrogram2[i]) - logReference);\n              }\n              if (db_range !== null) {\n                if (db_range <= 0) {\n                  throw new Error(\"db_range must be greater than zero\");\n                }\n                const maxValue = (0, _maths_js__WEBPACK_IMPORTED_MODULE_1__.max)(spectrogram2)[0] - db_range;\n                for (let i = 0; i < spectrogram2.length; ++i) {\n                  spectrogram2[i] = Math.max(spectrogram2[i], maxValue);\n                }\n              }\n              return spectrogram2;\n            }\n            function amplitude_to_db(spectrogram2, reference = 1, min_value = 1e-5, db_range = null) {\n              return _db_conversion_helper(spectrogram2, 20, reference, min_value, db_range);\n            }\n            function power_to_db(spectrogram2, reference = 1, min_value = 1e-10, db_range = null) {\n              return _db_conversion_helper(spectrogram2, 10, reference, min_value, db_range);\n            }\n            async function spectrogram(waveform, window2, frame_length, hop_length, {\n              fft_length = null,\n              power = 1,\n              center = true,\n              pad_mode = \"reflect\",\n              onesided = true,\n              preemphasis = null,\n              mel_filters = null,\n              mel_floor = 1e-10,\n              log_mel = null,\n              reference = 1,\n              min_value = 1e-10,\n              db_range = null,\n              remove_dc_offset = null,\n              // Custom parameters for efficiency reasons\n              min_num_frames = null,\n              max_num_frames = null,\n              do_pad = true,\n              transpose = false\n            } = {}) {\n              const window_length = window2.length;\n              if (fft_length === null) {\n                fft_length = frame_length;\n              }\n              if (frame_length > fft_length) {\n                throw Error(`frame_length (${frame_length}) may not be larger than fft_length (${fft_length})`);\n              }\n              if (window_length !== frame_length) {\n                throw new Error(`Length of the window (${window_length}) must equal frame_length (${frame_length})`);\n              }\n              if (hop_length <= 0) {\n                throw new Error(\"hop_length must be greater than zero\");\n              }\n              if (power === null && mel_filters !== null) {\n                throw new Error(\n                  \"You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.\"\n                );\n              }\n              if (center) {\n                if (pad_mode !== \"reflect\") {\n                  throw new Error(`pad_mode=\"${pad_mode}\" not implemented yet.`);\n                }\n                const half_window = Math.floor((fft_length - 1) / 2) + 1;\n                waveform = padReflect(waveform, half_window, half_window);\n              }\n              let num_frames = Math.floor(1 + Math.floor((waveform.length - frame_length) / hop_length));\n              if (min_num_frames !== null && num_frames < min_num_frames) {\n                num_frames = min_num_frames;\n              }\n              const num_frequency_bins = onesided ? Math.floor(fft_length / 2) + 1 : fft_length;\n              let d1 = num_frames;\n              let d1Max = num_frames;\n              if (max_num_frames !== null) {\n                if (max_num_frames > num_frames) {\n                  if (do_pad) {\n                    d1Max = max_num_frames;\n                  }\n                } else {\n                  d1Max = d1 = max_num_frames;\n                }\n              }\n              const fft = new _maths_js__WEBPACK_IMPORTED_MODULE_1__.FFT(fft_length);\n              const inputBuffer = new Float64Array(fft_length);\n              const outputBuffer = new Float64Array(fft.outputBufferSize);\n              const transposedMagnitudeData = new Float32Array(num_frequency_bins * d1Max);\n              for (let i = 0; i < d1; ++i) {\n                const offset = i * hop_length;\n                const buffer_size = Math.min(waveform.length - offset, frame_length);\n                if (buffer_size !== frame_length) {\n                  inputBuffer.fill(0, 0, frame_length);\n                }\n                for (let j = 0; j < buffer_size; ++j) {\n                  inputBuffer[j] = waveform[offset + j];\n                }\n                if (remove_dc_offset) {\n                  let sum = 0;\n                  for (let j = 0; j < buffer_size; ++j) {\n                    sum += inputBuffer[j];\n                  }\n                  const mean = sum / buffer_size;\n                  for (let j = 0; j < buffer_size; ++j) {\n                    inputBuffer[j] -= mean;\n                  }\n                }\n                if (preemphasis !== null) {\n                  for (let j = buffer_size - 1; j >= 1; --j) {\n                    inputBuffer[j] -= preemphasis * inputBuffer[j - 1];\n                  }\n                  inputBuffer[0] *= 1 - preemphasis;\n                }\n                for (let j = 0; j < window2.length; ++j) {\n                  inputBuffer[j] *= window2[j];\n                }\n                fft.realTransform(outputBuffer, inputBuffer);\n                for (let j = 0; j < num_frequency_bins; ++j) {\n                  const j2 = j << 1;\n                  transposedMagnitudeData[j * d1Max + i] = outputBuffer[j2] ** 2 + outputBuffer[j2 + 1] ** 2;\n                }\n              }\n              if (power !== null && power !== 2) {\n                const pow = 2 / power;\n                for (let i = 0; i < transposedMagnitudeData.length; ++i) {\n                  transposedMagnitudeData[i] **= pow;\n                }\n              }\n              const num_mel_filters = mel_filters.length;\n              let mel_spec = await (0, _tensor_js__WEBPACK_IMPORTED_MODULE_5__.matmul)(\n                // TODO: Make `mel_filters` a Tensor during initialization\n                new _tensor_js__WEBPACK_IMPORTED_MODULE_5__.Tensor(\"float32\", mel_filters.flat(), [num_mel_filters, num_frequency_bins]),\n                new _tensor_js__WEBPACK_IMPORTED_MODULE_5__.Tensor(\"float32\", transposedMagnitudeData, [num_frequency_bins, d1Max])\n              );\n              if (transpose) {\n                mel_spec = mel_spec.transpose(1, 0);\n              }\n              const mel_spec_data = (\n                /** @type {Float32Array} */\n                mel_spec.data\n              );\n              for (let i = 0; i < mel_spec_data.length; ++i) {\n                mel_spec_data[i] = Math.max(mel_floor, mel_spec_data[i]);\n              }\n              if (power !== null && log_mel !== null) {\n                const o = Math.min(mel_spec_data.length, d1 * num_mel_filters);\n                switch (log_mel) {\n                  case \"log\":\n                    for (let i = 0; i < o; ++i) {\n                      mel_spec_data[i] = Math.log(mel_spec_data[i]);\n                    }\n                    break;\n                  case \"log10\":\n                    for (let i = 0; i < o; ++i) {\n                      mel_spec_data[i] = Math.log10(mel_spec_data[i]);\n                    }\n                    break;\n                  case \"dB\":\n                    if (power === 1) {\n                      amplitude_to_db(mel_spec_data, reference, min_value, db_range);\n                    } else if (power === 2) {\n                      power_to_db(mel_spec_data, reference, min_value, db_range);\n                    } else {\n                      throw new Error(`Cannot use log_mel option '${log_mel}' with power ${power}`);\n                    }\n                    break;\n                  default:\n                    throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${log_mel}'`);\n                }\n              }\n              return mel_spec;\n            }\n            function window_function(window_length, name, {\n              periodic = true,\n              frame_length = null,\n              center = true\n            } = {}) {\n              const length = periodic ? window_length + 1 : window_length;\n              let window2;\n              switch (name) {\n                case \"boxcar\":\n                  window2 = new Float64Array(length).fill(1);\n                  break;\n                case \"hann\":\n                case \"hann_window\":\n                  window2 = hanning(length);\n                  break;\n                case \"hamming\":\n                  window2 = hamming(length);\n                  break;\n                case \"povey\":\n                  window2 = hanning(length).map((x) => Math.pow(x, 0.85));\n                  break;\n                default:\n                  throw new Error(`Unknown window type ${name}.`);\n              }\n              if (periodic) {\n                window2 = window2.subarray(0, window_length);\n              }\n              if (frame_length === null) {\n                return window2;\n              }\n              if (window_length > frame_length) {\n                throw new Error(`Length of the window (${window_length}) may not be larger than frame_length (${frame_length})`);\n              }\n              return window2;\n            }\n            function encodeWAV(samples, rate) {\n              let offset = 44;\n              const buffer = new ArrayBuffer(offset + samples.length * 4);\n              const view = new DataView(buffer);\n              writeString2(view, 0, \"RIFF\");\n              view.setUint32(4, 36 + samples.length * 4, true);\n              writeString2(view, 8, \"WAVE\");\n              writeString2(view, 12, \"fmt \");\n              view.setUint32(16, 16, true);\n              view.setUint16(20, 3, true);\n              view.setUint16(22, 1, true);\n              view.setUint32(24, rate, true);\n              view.setUint32(28, rate * 4, true);\n              view.setUint16(32, 4, true);\n              view.setUint16(34, 32, true);\n              writeString2(view, 36, \"data\");\n              view.setUint32(40, samples.length * 4, true);\n              for (let i = 0; i < samples.length; ++i, offset += 4) {\n                view.setFloat32(offset, samples[i], true);\n              }\n              return buffer;\n            }\n            function writeString2(view, offset, string) {\n              for (let i = 0; i < string.length; ++i) {\n                view.setUint8(offset + i, string.charCodeAt(i));\n              }\n            }\n            class RawAudio {\n              /**\n               * Create a new `RawAudio` object.\n               * @param {Float32Array} audio Audio data\n               * @param {number} sampling_rate Sampling rate of the audio data\n               */\n              constructor(audio, sampling_rate) {\n                this.audio = audio;\n                this.sampling_rate = sampling_rate;\n              }\n              /**\n               * Convert the audio to a wav file buffer.\n               * @returns {ArrayBuffer} The WAV file.\n               */\n              toWav() {\n                return encodeWAV(this.audio, this.sampling_rate);\n              }\n              /**\n               * Convert the audio to a blob.\n               * @returns {Blob}\n               */\n              toBlob() {\n                const wav = this.toWav();\n                const blob = new Blob([wav], { type: \"audio/wav\" });\n                return blob;\n              }\n              /**\n               * Save the audio to a wav file.\n               * @param {string} path\n               */\n              async save(path) {\n                let fn;\n                if (_env_js__WEBPACK_IMPORTED_MODULE_3__.apis.IS_BROWSER_ENV) {\n                  if (_env_js__WEBPACK_IMPORTED_MODULE_3__.apis.IS_WEBWORKER_ENV) {\n                    throw new Error(\"Unable to save a file from a Web Worker.\");\n                  }\n                  fn = _core_js__WEBPACK_IMPORTED_MODULE_2__.saveBlob;\n                } else if (_env_js__WEBPACK_IMPORTED_MODULE_3__.apis.IS_FS_AVAILABLE) {\n                  fn = async (path2, blob) => {\n                    let buffer = await blob.arrayBuffer();\n                    fs__WEBPACK_IMPORTED_MODULE_4__.writeFileSync(path2, Buffer.from(buffer));\n                  };\n                } else {\n                  throw new Error(\"Unable to save because filesystem is disabled in this environment.\");\n                }\n                await fn(path, this.toBlob());\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/utils/constants.js\": (\n          /*!********************************!*\\\n            !*** ./src/utils/constants.js ***!\n            \\********************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              CHAT_TEMPLATE_NAME: () => (\n                /* binding */\n                CHAT_TEMPLATE_NAME\n              ),\n              /* harmony export */\n              CONFIG_NAME: () => (\n                /* binding */\n                CONFIG_NAME\n              ),\n              /* harmony export */\n              FEATURE_EXTRACTOR_NAME: () => (\n                /* binding */\n                FEATURE_EXTRACTOR_NAME\n              ),\n              /* harmony export */\n              GENERATION_CONFIG_NAME: () => (\n                /* binding */\n                GENERATION_CONFIG_NAME\n              ),\n              /* harmony export */\n              GITHUB_ISSUE_URL: () => (\n                /* binding */\n                GITHUB_ISSUE_URL\n              ),\n              /* harmony export */\n              IMAGE_PROCESSOR_NAME: () => (\n                /* binding */\n                IMAGE_PROCESSOR_NAME\n              ),\n              /* harmony export */\n              PROCESSOR_NAME: () => (\n                /* binding */\n                PROCESSOR_NAME\n              )\n              /* harmony export */\n            });\n            const GITHUB_ISSUE_URL = \"https://github.com/huggingface/transformers.js/issues/new/choose\";\n            const CONFIG_NAME = \"config.json\";\n            const FEATURE_EXTRACTOR_NAME = \"preprocessor_config.json\";\n            const IMAGE_PROCESSOR_NAME = FEATURE_EXTRACTOR_NAME;\n            const PROCESSOR_NAME = \"processor_config.json\";\n            const CHAT_TEMPLATE_NAME = \"chat_template.json\";\n            const GENERATION_CONFIG_NAME = \"generation_config.json\";\n          }\n        ),\n        /***/\n        \"./src/utils/core.js\": (\n          /*!***************************!*\\\n            !*** ./src/utils/core.js ***!\n            \\***************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              calculateDimensions: () => (\n                /* binding */\n                calculateDimensions\n              ),\n              /* harmony export */\n              calculateReflectOffset: () => (\n                /* binding */\n                calculateReflectOffset\n              ),\n              /* harmony export */\n              count: () => (\n                /* binding */\n                count\n              ),\n              /* harmony export */\n              dispatchCallback: () => (\n                /* binding */\n                dispatchCallback\n              ),\n              /* harmony export */\n              escapeRegExp: () => (\n                /* binding */\n                escapeRegExp\n              ),\n              /* harmony export */\n              isIntegralNumber: () => (\n                /* binding */\n                isIntegralNumber\n              ),\n              /* harmony export */\n              isNullishDimension: () => (\n                /* binding */\n                isNullishDimension\n              ),\n              /* harmony export */\n              isTypedArray: () => (\n                /* binding */\n                isTypedArray\n              ),\n              /* harmony export */\n              len: () => (\n                /* binding */\n                len\n              ),\n              /* harmony export */\n              mergeArrays: () => (\n                /* binding */\n                mergeArrays\n              ),\n              /* harmony export */\n              pick: () => (\n                /* binding */\n                pick\n              ),\n              /* harmony export */\n              pop: () => (\n                /* binding */\n                pop\n              ),\n              /* harmony export */\n              product: () => (\n                /* binding */\n                product\n              ),\n              /* harmony export */\n              reverseDictionary: () => (\n                /* binding */\n                reverseDictionary\n              ),\n              /* harmony export */\n              saveBlob: () => (\n                /* binding */\n                saveBlob\n              )\n              /* harmony export */\n            });\n            function dispatchCallback(progress_callback, data) {\n              if (progress_callback) progress_callback(data);\n            }\n            function reverseDictionary(data) {\n              return Object.fromEntries(Object.entries(data).map(([key, value]) => [value, key]));\n            }\n            function escapeRegExp(string) {\n              return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n            }\n            function isTypedArray(val) {\n              return val?.prototype?.__proto__?.constructor?.name === \"TypedArray\";\n            }\n            function isIntegralNumber(x) {\n              return Number.isInteger(x) || typeof x === \"bigint\";\n            }\n            function isNullishDimension(x) {\n              return x === null || x === void 0 || x === -1;\n            }\n            function calculateDimensions(arr) {\n              const dimensions = [];\n              let current = arr;\n              while (Array.isArray(current)) {\n                dimensions.push(current.length);\n                current = current[0];\n              }\n              return dimensions;\n            }\n            function pop(obj, key, defaultValue = void 0) {\n              const value = obj[key];\n              if (value !== void 0) {\n                delete obj[key];\n                return value;\n              }\n              if (defaultValue === void 0) {\n                throw Error(`Key ${key} does not exist in object.`);\n              }\n              return defaultValue;\n            }\n            function mergeArrays(...arrs) {\n              return Array.prototype.concat.apply([], arrs);\n            }\n            function product(...a) {\n              return a.reduce((a2, b) => a2.flatMap((d) => b.map((e) => [d, e])));\n            }\n            function calculateReflectOffset(i, w) {\n              return Math.abs((i + w) % (2 * w) - w);\n            }\n            function saveBlob(path, blob) {\n              const dataURL = URL.createObjectURL(blob);\n              const downloadLink = document.createElement(\"a\");\n              downloadLink.href = dataURL;\n              downloadLink.download = path;\n              downloadLink.click();\n              downloadLink.remove();\n              URL.revokeObjectURL(dataURL);\n            }\n            function pick(o, props) {\n              return Object.assign(\n                {},\n                ...props.map((prop) => {\n                  if (o[prop] !== void 0) {\n                    return { [prop]: o[prop] };\n                  }\n                })\n              );\n            }\n            function len(s) {\n              let length = 0;\n              for (const c of s) ++length;\n              return length;\n            }\n            function count(arr, value) {\n              let count2 = 0;\n              for (const v of arr) {\n                if (v === value) ++count2;\n              }\n              return count2;\n            }\n          }\n        ),\n        /***/\n        \"./src/utils/data-structures.js\": (\n          /*!**************************************!*\\\n            !*** ./src/utils/data-structures.js ***!\n            \\**************************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              CharTrie: () => (\n                /* binding */\n                CharTrie\n              ),\n              /* harmony export */\n              DictionarySplitter: () => (\n                /* binding */\n                DictionarySplitter\n              ),\n              /* harmony export */\n              LRUCache: () => (\n                /* binding */\n                LRUCache\n              ),\n              /* harmony export */\n              PriorityQueue: () => (\n                /* binding */\n                PriorityQueue\n              ),\n              /* harmony export */\n              TokenLattice: () => (\n                /* binding */\n                TokenLattice\n              )\n              /* harmony export */\n            });\n            class PriorityQueue {\n              /**\n               * Create a new PriorityQueue.\n               * @param {function(any, any): boolean} comparator Comparator function to determine priority. Defaults to a MaxHeap.\n               */\n              constructor(comparator = (a, b) => a > b, maxSize = Infinity) {\n                this._heap = [];\n                this._comparator = comparator;\n                this._maxSize = maxSize;\n              }\n              /**\n               * The size of the queue\n               */\n              get size() {\n                return this._heap.length;\n              }\n              /**\n               * Check if the queue is empty.\n               * @returns {boolean} `true` if the queue is empty, `false` otherwise.\n               */\n              isEmpty() {\n                return this.size === 0;\n              }\n              /**\n               * Return the element with the highest priority in the queue.\n               * @returns {any} The highest priority element in the queue.\n               */\n              peek() {\n                return this._heap[0];\n              }\n              /**\n               * Add one or more elements to the queue.\n               * @param  {...any} values The values to push into the queue.\n               * @returns {number} The new size of the queue.\n               */\n              push(...values) {\n                return this.extend(values);\n              }\n              /**\n               * Add multiple elements to the queue.\n               * @param {any[]} values The values to push into the queue.\n               * @returns {number} The new size of the queue.\n               */\n              extend(values) {\n                for (const value of values) {\n                  if (this.size < this._maxSize) {\n                    this._heap.push(value);\n                    this._siftUp();\n                  } else {\n                    const smallest = this._smallest();\n                    if (this._comparator(value, this._heap[smallest])) {\n                      this._heap[smallest] = value;\n                      this._siftUpFrom(smallest);\n                    }\n                  }\n                }\n                return this.size;\n              }\n              /**\n               * Remove and return the element with the highest priority in the queue.\n               * @returns {any} The element with the highest priority in the queue.\n               */\n              pop() {\n                const poppedValue = this.peek();\n                const bottom = this.size - 1;\n                if (bottom > 0) {\n                  this._swap(0, bottom);\n                }\n                this._heap.pop();\n                this._siftDown();\n                return poppedValue;\n              }\n              /**\n               * Replace the element with the highest priority in the queue with a new value.\n               * @param {*} value The new value.\n               * @returns {*} The replaced value.\n               */\n              replace(value) {\n                const replacedValue = this.peek();\n                this._heap[0] = value;\n                this._siftDown();\n                return replacedValue;\n              }\n              /**\n               * Compute the index for the parent of the node at index `i`.\n               * @param {number} i The index of the node to get the parent of.\n               * @returns {number} The index of the parent node.\n               * @private\n               */\n              _parent(i) {\n                return (i + 1 >>> 1) - 1;\n              }\n              /**\n               * Compute the index for the left child of the node at index `i`.\n               * @param {number} i The index of the node to get the left child of.\n               * @returns {number} The index of the left child.\n               * @private\n               */\n              _left(i) {\n                return (i << 1) + 1;\n              }\n              /**\n               * Compute the index for the right child of the node at index `i`.\n               * @param {number} i The index of the node to get the right child of.\n               * @returns {number} The index of the right child.\n               * @private\n               */\n              _right(i) {\n                return i + 1 << 1;\n              }\n              /**\n               * Check if the element at index `i` is greater than the element at index `j`.\n               * @param {number} i The index of the first element to compare.\n               * @param {number} j The index of the second element to compare.\n               * @returns {boolean} `true` if the element at index `i` is greater than the element at index `j`, `false` otherwise.\n               * @private\n               */\n              _greater(i, j) {\n                return this._comparator(this._heap[i], this._heap[j]);\n              }\n              /**\n               * Swap the elements at indices `i` and `j`.\n               * @param {number} i The index of the first element to swap.\n               * @param {number} j The index of the second element to swap.\n               * @private\n               */\n              _swap(i, j) {\n                const temp = this._heap[i];\n                this._heap[i] = this._heap[j];\n                this._heap[j] = temp;\n              }\n              /**\n               * Maintain the heap property by updating positions in the heap,\n               * starting at the last element and moving up the heap.\n               * @private\n               */\n              _siftUp() {\n                this._siftUpFrom(this.size - 1);\n              }\n              /**\n               * Helper function to sift up from a given node.\n               * @param {number} node The index of the node to start sifting up from.\n               */\n              _siftUpFrom(node) {\n                while (node > 0 && this._greater(node, this._parent(node))) {\n                  this._swap(node, this._parent(node));\n                  node = this._parent(node);\n                }\n              }\n              /**\n               * Maintain the heap property by updating positions in the heap,\n               * starting at the first element and moving down the heap.\n               * @private\n               */\n              _siftDown() {\n                let node = 0;\n                while (this._left(node) < this.size && this._greater(this._left(node), node) || this._right(node) < this.size && this._greater(this._right(node), node)) {\n                  const maxChild = this._right(node) < this.size && this._greater(this._right(node), this._left(node)) ? this._right(node) : this._left(node);\n                  this._swap(node, maxChild);\n                  node = maxChild;\n                }\n              }\n              /**\n               * Get the index of the smallest element in the heap. Since we use an array-based heap,\n               * the index can be computed without needing to traverse the heap.\n               * @private\n               */\n              _smallest() {\n                return 2 ** Math.floor(Math.log2(this.size)) - 1;\n              }\n            }\n            class CharTrie {\n              constructor() {\n                this.root = CharTrieNode.default();\n              }\n              /**\n               * Adds one or more `texts` to the trie.\n               * @param {string[]} texts The strings to add to the trie.\n               */\n              extend(texts) {\n                for (const text of texts) {\n                  this.push(text);\n                }\n              }\n              /**\n               * Adds text to the trie.\n               * @param {string} text The string to add to the trie.\n               */\n              push(text) {\n                let node = this.root;\n                for (const ch2 of text) {\n                  let child = node.children.get(ch2);\n                  if (child === void 0) {\n                    child = CharTrieNode.default();\n                    node.children.set(ch2, child);\n                  }\n                  node = child;\n                }\n                node.isLeaf = true;\n              }\n              /**\n               * Searches the trie for all strings with a common prefix of `text`.\n               * @param {string} text The common prefix to search for.\n               * @yields {string} Each string in the trie that has `text` as a prefix.\n               */\n              *commonPrefixSearch(text) {\n                let node = this.root;\n                if (node === void 0) return;\n                let prefix = \"\";\n                for (const ch2 of text) {\n                  prefix += ch2;\n                  node = node.children.get(ch2);\n                  if (node === void 0) return;\n                  if (node.isLeaf) {\n                    yield prefix;\n                  }\n                }\n              }\n            }\n            class CharTrieNode {\n              /**\n               * Create a new CharTrieNode.\n               * @param {boolean} isLeaf Whether the node is a leaf node or not.\n               * @param {Map<string, CharTrieNode>} children A map containing the node's children, where the key is a character and the value is a `CharTrieNode`.\n               */\n              constructor(isLeaf, children) {\n                this.isLeaf = isLeaf;\n                this.children = children;\n              }\n              /**\n               * Returns a new `CharTrieNode` instance with default values.\n               * @returns {CharTrieNode} A new `CharTrieNode` instance with `isLeaf` set to `false` and an empty `children` map.\n               */\n              static default() {\n                return new CharTrieNode(false, /* @__PURE__ */ new Map());\n              }\n            }\n            class TokenLattice {\n              /**\n               * Creates a new TokenLattice instance.\n               *\n               * @param {string} sentence The input sentence to be tokenized.\n               * @param {number} bosTokenId The beginning-of-sequence token ID.\n               * @param {number} eosTokenId The end-of-sequence token ID.\n               */\n              constructor(sentence, bosTokenId, eosTokenId) {\n                this.chars = Array.from(sentence);\n                this.len = this.chars.length;\n                this.bosTokenId = bosTokenId;\n                this.eosTokenId = eosTokenId;\n                this.nodes = [];\n                this.beginNodes = Array.from({ length: this.len + 1 }, () => []);\n                this.endNodes = Array.from({ length: this.len + 1 }, () => []);\n                const bos = new TokenLatticeNode(this.bosTokenId, 0, 0, 0, 0);\n                const eos = new TokenLatticeNode(this.eosTokenId, 1, this.len, 0, 0);\n                this.nodes.push(bos.clone());\n                this.nodes.push(eos.clone());\n                this.beginNodes[this.len].push(eos);\n                this.endNodes[0].push(bos);\n              }\n              /**\n               * Inserts a new token node into the token lattice.\n               *\n               * @param {number} pos The starting position of the token.\n               * @param {number} length The length of the token.\n               * @param {number} score The score of the token.\n               * @param {number} tokenId The token ID of the token.\n               */\n              insert(pos, length, score, tokenId) {\n                const nodeId = this.nodes.length;\n                const node = new TokenLatticeNode(tokenId, nodeId, pos, length, score);\n                this.beginNodes[pos].push(node);\n                this.endNodes[pos + length].push(node);\n                this.nodes.push(node);\n              }\n              /**\n               * Implements the Viterbi algorithm to compute the most likely sequence of tokens.\n               *\n               * @returns {TokenLatticeNode[]} The most likely sequence of tokens.\n               */\n              viterbi() {\n                const len = this.len;\n                let pos = 0;\n                while (pos <= len) {\n                  if (this.beginNodes[pos].length == 0) {\n                    return [];\n                  }\n                  for (let rnode of this.beginNodes[pos]) {\n                    rnode.prev = null;\n                    let bestScore = 0;\n                    let bestNode = null;\n                    for (let lnode of this.endNodes[pos]) {\n                      const score = lnode.backtraceScore + rnode.score;\n                      if (bestNode === null || score > bestScore) {\n                        bestNode = lnode.clone();\n                        bestScore = score;\n                      }\n                    }\n                    if (bestNode !== null) {\n                      rnode.prev = bestNode;\n                      rnode.backtraceScore = bestScore;\n                    } else {\n                      return [];\n                    }\n                  }\n                  ++pos;\n                }\n                const results = [];\n                const root = this.beginNodes[len][0];\n                const prev = root.prev;\n                if (prev === null) {\n                  return [];\n                }\n                let node = prev.clone();\n                while (node.prev !== null) {\n                  results.push(node.clone());\n                  const n = node.clone();\n                  node = n.prev.clone();\n                }\n                results.reverse();\n                return results;\n              }\n              /**\n               * @param {TokenLatticeNode} node\n               * @returns {string} The array of nodes representing the most likely sequence of tokens.\n               */\n              piece(node) {\n                return this.chars.slice(node.pos, node.pos + node.length).join(\"\");\n              }\n              /**\n               * @returns {string[]} The most likely sequence of tokens.\n               */\n              tokens() {\n                const nodes = this.viterbi();\n                return nodes.map((x) => this.piece(x));\n              }\n              /**\n               * @returns {number[]} The most likely sequence of token ids.\n               */\n              tokenIds() {\n                const nodes = this.viterbi();\n                return nodes.map((x) => x.tokenId);\n              }\n            }\n            class TokenLatticeNode {\n              /**\n               * Represents a node in a token lattice for a given sentence.\n               * @param {number} tokenId The ID of the token associated with this node.\n               * @param {number} nodeId The ID of this node.\n               * @param {number} pos The starting position of the token in the sentence.\n               * @param {number} length The length of the token.\n               * @param {number} score The score associated with the token.\n               */\n              constructor(tokenId, nodeId, pos, length, score) {\n                this.tokenId = tokenId;\n                this.nodeId = nodeId;\n                this.pos = pos;\n                this.length = length;\n                this.score = score;\n                this.prev = null;\n                this.backtraceScore = 0;\n              }\n              /**\n               * Returns a clone of this node.\n               * @returns {TokenLatticeNode} A clone of this node.\n               */\n              clone() {\n                const n = new TokenLatticeNode(this.tokenId, this.nodeId, this.pos, this.length, this.score);\n                n.prev = this.prev;\n                n.backtraceScore = this.backtraceScore;\n                return n;\n              }\n            }\n            class DictionarySplitter {\n              /**\n               * @param {string[]} dictionary The dictionary of words to use for splitting.\n               */\n              constructor(dictionary) {\n                this.trie = this._buildTrie(dictionary);\n              }\n              /**\n               * Builds a trie from the given dictionary.\n               * @param {string[]} dictionary The dictionary of words to build the trie from.\n               * @returns {Object} The root node of the trie.\n               * @private\n               */\n              _buildTrie(dictionary) {\n                var _a2;\n                const trie = /* @__PURE__ */ Object.create(null);\n                for (const word of dictionary) {\n                  let node = trie;\n                  for (let i = 0; i < word.length; ++i) {\n                    node = node[_a2 = word[i]] ?? (node[_a2] = /* @__PURE__ */ Object.create(null));\n                  }\n                  node.end = word;\n                }\n                return trie;\n              }\n              /**\n               * Splits the input text into tokens based on the dictionary.\n               * @param {string} text The input text to split.\n               * @returns {string[]} An array of tokens.\n               */\n              split(text) {\n                const result = [];\n                const n = text.length;\n                let start = 0;\n                let i = 0;\n                while (i < n) {\n                  let node = this.trie;\n                  let match = null;\n                  let j = i;\n                  while (j < n && (node = node[text[j]])) {\n                    if (node.end) {\n                      match = node.end;\n                    }\n                    ++j;\n                  }\n                  if (match) {\n                    if (i > start) {\n                      result.push(text.slice(start, i));\n                    }\n                    result.push(match);\n                    i += match.length;\n                    start = i;\n                  } else {\n                    ++i;\n                  }\n                }\n                if (start < n) {\n                  result.push(text.slice(start));\n                }\n                return result;\n              }\n            }\n            class LRUCache {\n              /**\n               * Creates an LRUCache instance.\n               * @param {number} capacity The maximum number of items the cache can hold.\n               */\n              constructor(capacity) {\n                this.capacity = capacity;\n                this.cache = /* @__PURE__ */ new Map();\n              }\n              /**\n               * Retrieves the value associated with the given key and marks the key as recently used.\n               * @param {any} key The key to retrieve.\n               * @returns {any} The value associated with the key, or undefined if the key does not exist.\n               */\n              get(key) {\n                if (!this.cache.has(key)) return void 0;\n                const value = this.cache.get(key);\n                this.cache.delete(key);\n                this.cache.set(key, value);\n                return value;\n              }\n              /**\n               * Inserts or updates the key-value pair in the cache.\n               * If the key already exists, it is updated and marked as recently used.\n               * If the cache exceeds its capacity, the least recently used item is evicted.\n               * @param {any} key The key to add or update.\n               * @param {any} value The value to associate with the key.\n               */\n              put(key, value) {\n                if (this.cache.has(key)) {\n                  this.cache.delete(key);\n                }\n                this.cache.set(key, value);\n                if (this.cache.size > this.capacity) {\n                  this.cache.delete(this.cache.keys().next().value);\n                }\n              }\n              /**\n               * Clears the cache.\n               */\n              clear() {\n                this.cache.clear();\n              }\n            }\n          }\n        ),\n        /***/\n        \"./src/utils/devices.js\": (\n          /*!******************************!*\\\n            !*** ./src/utils/devices.js ***!\n            \\******************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              DEVICE_TYPES: () => (\n                /* binding */\n                DEVICE_TYPES\n              )\n              /* harmony export */\n            });\n            const DEVICE_TYPES = Object.freeze({\n              auto: \"auto\",\n              // Auto-detect based on device and environment\n              gpu: \"gpu\",\n              // Auto-detect GPU\n              cpu: \"cpu\",\n              // CPU\n              wasm: \"wasm\",\n              // WebAssembly\n              webgpu: \"webgpu\",\n              // WebGPU\n              cuda: \"cuda\",\n              // CUDA\n              dml: \"dml\",\n              // DirectML\n              webnn: \"webnn\",\n              // WebNN (default)\n              \"webnn-npu\": \"webnn-npu\",\n              // WebNN NPU\n              \"webnn-gpu\": \"webnn-gpu\",\n              // WebNN GPU\n              \"webnn-cpu\": \"webnn-cpu\"\n              // WebNN CPU\n            });\n          }\n        ),\n        /***/\n        \"./src/utils/dtypes.js\": (\n          /*!*****************************!*\\\n            !*** ./src/utils/dtypes.js ***!\n            \\*****************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              DATA_TYPES: () => (\n                /* binding */\n                DATA_TYPES\n              ),\n              /* harmony export */\n              DEFAULT_DEVICE_DTYPE_MAPPING: () => (\n                /* binding */\n                DEFAULT_DEVICE_DTYPE_MAPPING\n              ),\n              /* harmony export */\n              DEFAULT_DTYPE_SUFFIX_MAPPING: () => (\n                /* binding */\n                DEFAULT_DTYPE_SUFFIX_MAPPING\n              ),\n              /* harmony export */\n              isWebGpuFp16Supported: () => (\n                /* binding */\n                isWebGpuFp16Supported\n              )\n              /* harmony export */\n            });\n            var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ../env.js */\n              \"./src/env.js\"\n            );\n            var _devices_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ./devices.js */\n              \"./src/utils/devices.js\"\n            );\n            const isWebGpuFp16Supported = /* @__PURE__ */ function() {\n              let cachedResult;\n              return async function() {\n                if (cachedResult === void 0) {\n                  if (!_env_js__WEBPACK_IMPORTED_MODULE_0__.apis.IS_WEBGPU_AVAILABLE) {\n                    cachedResult = false;\n                  } else {\n                    try {\n                      const adapter = await navigator.gpu.requestAdapter();\n                      cachedResult = adapter.features.has(\"shader-f16\");\n                    } catch (e) {\n                      cachedResult = false;\n                    }\n                  }\n                }\n                return cachedResult;\n              };\n            }();\n            const DATA_TYPES = Object.freeze({\n              auto: \"auto\",\n              // Auto-detect based on environment\n              fp32: \"fp32\",\n              fp16: \"fp16\",\n              q8: \"q8\",\n              int8: \"int8\",\n              uint8: \"uint8\",\n              q4: \"q4\",\n              bnb4: \"bnb4\",\n              q4f16: \"q4f16\"\n              // fp16 model with int4 block weight quantization\n            });\n            const DEFAULT_DEVICE_DTYPE_MAPPING = Object.freeze({\n              // NOTE: If not specified, will default to fp32\n              [_devices_js__WEBPACK_IMPORTED_MODULE_1__.DEVICE_TYPES.wasm]: DATA_TYPES.q8\n            });\n            const DEFAULT_DTYPE_SUFFIX_MAPPING = Object.freeze({\n              [DATA_TYPES.fp32]: \"\",\n              [DATA_TYPES.fp16]: \"_fp16\",\n              [DATA_TYPES.int8]: \"_int8\",\n              [DATA_TYPES.uint8]: \"_uint8\",\n              [DATA_TYPES.q8]: \"_quantized\",\n              [DATA_TYPES.q4]: \"_q4\",\n              [DATA_TYPES.q4f16]: \"_q4f16\",\n              [DATA_TYPES.bnb4]: \"_bnb4\"\n            });\n          }\n        ),\n        /***/\n        \"./src/utils/generic.js\": (\n          /*!******************************!*\\\n            !*** ./src/utils/generic.js ***!\n            \\******************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              Callable: () => (\n                /* binding */\n                Callable\n              )\n              /* harmony export */\n            });\n            const Callable = (\n              /** @type {any} */\n              class {\n                /**\n                * Creates a new instance of the Callable class.\n                */\n                constructor() {\n                  let closure = function(...args) {\n                    return closure._call(...args);\n                  };\n                  return Object.setPrototypeOf(closure, new.target.prototype);\n                }\n                /**\n                 * This method should be implemented in subclasses to provide the\n                 * functionality of the callable object.\n                 *\n                 * @param {any[]} args\n                 * @throws {Error} If the subclass does not implement the `_call` method.\n                 */\n                _call(...args) {\n                  throw Error(\"Must implement _call method in subclass\");\n                }\n              }\n            );\n          }\n        ),\n        /***/\n        \"./src/utils/hub.js\": (\n          /*!**************************!*\\\n            !*** ./src/utils/hub.js ***!\n            \\**************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              MAX_EXTERNAL_DATA_CHUNKS: () => (\n                /* binding */\n                MAX_EXTERNAL_DATA_CHUNKS\n              ),\n              /* harmony export */\n              getFile: () => (\n                /* binding */\n                getFile\n              ),\n              /* harmony export */\n              getModelFile: () => (\n                /* binding */\n                getModelFile\n              ),\n              /* harmony export */\n              getModelJSON: () => (\n                /* binding */\n                getModelJSON\n              )\n              /* harmony export */\n            });\n            var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! fs */\n              \"?7a2c\"\n            );\n            var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! path */\n              \"?a42a\"\n            );\n            var _env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../env.js */\n              \"./src/env.js\"\n            );\n            var _core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ./core.js */\n              \"./src/utils/core.js\"\n            );\n            const MAX_EXTERNAL_DATA_CHUNKS = 100;\n            const CONTENT_TYPE_MAP = {\n              \"txt\": \"text/plain\",\n              \"html\": \"text/html\",\n              \"css\": \"text/css\",\n              \"js\": \"text/javascript\",\n              \"json\": \"application/json\",\n              \"png\": \"image/png\",\n              \"jpg\": \"image/jpeg\",\n              \"jpeg\": \"image/jpeg\",\n              \"gif\": \"image/gif\"\n            };\n            class FileResponse {\n              /**\n               * Creates a new `FileResponse` object.\n               * @param {string} filePath\n               */\n              constructor(filePath) {\n                this.filePath = filePath;\n                this.headers = new Headers();\n                this.exists = fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(filePath);\n                if (this.exists) {\n                  this.status = 200;\n                  this.statusText = \"OK\";\n                  let stats = fs__WEBPACK_IMPORTED_MODULE_0__.statSync(filePath);\n                  this.headers.set(\"content-length\", stats.size.toString());\n                  this.updateContentType();\n                  const stream = fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream(filePath);\n                  this.body = new ReadableStream({\n                    start(controller) {\n                      stream.on(\"data\", (chunk) => controller.enqueue(chunk));\n                      stream.on(\"end\", () => controller.close());\n                      stream.on(\"error\", (err) => controller.error(err));\n                    },\n                    cancel() {\n                      stream.destroy();\n                    }\n                  });\n                } else {\n                  this.status = 404;\n                  this.statusText = \"Not Found\";\n                  this.body = null;\n                }\n              }\n              /**\n               * Updates the 'content-type' header property of the response based on the extension of\n               * the file specified by the filePath property of the current object.\n               * @returns {void}\n               */\n              updateContentType() {\n                const extension = this.filePath.toString().split(\".\").pop().toLowerCase();\n                this.headers.set(\"content-type\", CONTENT_TYPE_MAP[extension] ?? \"application/octet-stream\");\n              }\n              /**\n               * Clone the current FileResponse object.\n               * @returns {FileResponse} A new FileResponse object with the same properties as the current object.\n               */\n              clone() {\n                let response = new FileResponse(this.filePath);\n                response.exists = this.exists;\n                response.status = this.status;\n                response.statusText = this.statusText;\n                response.headers = new Headers(this.headers);\n                return response;\n              }\n              /**\n               * Reads the contents of the file specified by the filePath property and returns a Promise that\n               * resolves with an ArrayBuffer containing the file's contents.\n               * @returns {Promise<ArrayBuffer>} A Promise that resolves with an ArrayBuffer containing the file's contents.\n               * @throws {Error} If the file cannot be read.\n               */\n              async arrayBuffer() {\n                const data = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(this.filePath);\n                return (\n                  /** @type {ArrayBuffer} */\n                  data.buffer\n                );\n              }\n              /**\n               * Reads the contents of the file specified by the filePath property and returns a Promise that\n               * resolves with a Blob containing the file's contents.\n               * @returns {Promise<Blob>} A Promise that resolves with a Blob containing the file's contents.\n               * @throws {Error} If the file cannot be read.\n               */\n              async blob() {\n                const data = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(this.filePath);\n                return new Blob([data], { type: this.headers.get(\"content-type\") });\n              }\n              /**\n               * Reads the contents of the file specified by the filePath property and returns a Promise that\n               * resolves with a string containing the file's contents.\n               * @returns {Promise<string>} A Promise that resolves with a string containing the file's contents.\n               * @throws {Error} If the file cannot be read.\n               */\n              async text() {\n                const data = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(this.filePath, \"utf8\");\n                return data;\n              }\n              /**\n               * Reads the contents of the file specified by the filePath property and returns a Promise that\n               * resolves with a parsed JavaScript object containing the file's contents.\n               * \n               * @returns {Promise<Object>} A Promise that resolves with a parsed JavaScript object containing the file's contents.\n               * @throws {Error} If the file cannot be read.\n               */\n              async json() {\n                return JSON.parse(await this.text());\n              }\n            }\n            function isValidUrl(string, protocols = null, validHosts = null) {\n              let url;\n              try {\n                url = new URL(string);\n              } catch (_) {\n                return false;\n              }\n              if (protocols && !protocols.includes(url.protocol)) {\n                return false;\n              }\n              if (validHosts && !validHosts.includes(url.hostname)) {\n                return false;\n              }\n              return true;\n            }\n            const REPO_ID_REGEX = /^(\\b[\\w\\-.]+\\b\\/)?\\b[\\w\\-.]{1,96}\\b$/;\n            function isValidHfModelId(string) {\n              if (!REPO_ID_REGEX.test(string)) return false;\n              if (string.includes(\"..\") || string.includes(\"--\")) return false;\n              if (string.endsWith(\".git\") || string.endsWith(\".ipynb\")) return false;\n              return true;\n            }\n            async function getFile(urlOrPath) {\n              if (_env_js__WEBPACK_IMPORTED_MODULE_2__.env.useFS && !isValidUrl(urlOrPath, [\"http:\", \"https:\", \"blob:\"])) {\n                return new FileResponse(urlOrPath.toString());\n              } else if (typeof process !== \"undefined\" && process?.release?.name === \"node\") {\n                const IS_CI = !!process.env?.TESTING_REMOTELY;\n                const version2 = _env_js__WEBPACK_IMPORTED_MODULE_2__.env.version;\n                const headers = new Headers();\n                headers.set(\"User-Agent\", `transformers.js/${version2}; is_ci/${IS_CI};`);\n                const isHFURL = isValidUrl(urlOrPath, [\"http:\", \"https:\"], [\"huggingface.co\", \"hf.co\"]);\n                if (isHFURL) {\n                  const token = process.env?.HF_TOKEN ?? process.env?.HF_ACCESS_TOKEN;\n                  if (token) {\n                    headers.set(\"Authorization\", `Bearer ${token}`);\n                  }\n                }\n                return fetch(urlOrPath, { headers });\n              } else {\n                return fetch(urlOrPath);\n              }\n            }\n            const ERROR_MAPPING = {\n              // 4xx errors (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses)\n              400: \"Bad request error occurred while trying to load file\",\n              401: \"Unauthorized access to file\",\n              403: \"Forbidden access to file\",\n              404: \"Could not locate file\",\n              408: \"Request timeout error occurred while trying to load file\",\n              // 5xx errors (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#server_error_responses)\n              500: \"Internal server error error occurred while trying to load file\",\n              502: \"Bad gateway error occurred while trying to load file\",\n              503: \"Service unavailable error occurred while trying to load file\",\n              504: \"Gateway timeout error occurred while trying to load file\"\n            };\n            function handleError(status, remoteURL, fatal) {\n              if (!fatal) {\n                return null;\n              }\n              const message = ERROR_MAPPING[status] ?? `Error (${status}) occurred while trying to load file`;\n              throw Error(`${message}: \"${remoteURL}\".`);\n            }\n            class FileCache {\n              /**\n               * Instantiate a `FileCache` object.\n               * @param {string} path \n               */\n              constructor(path) {\n                this.path = path;\n              }\n              /**\n               * Checks whether the given request is in the cache.\n               * @param {string} request \n               * @returns {Promise<FileResponse | undefined>}\n               */\n              async match(request) {\n                let filePath = path__WEBPACK_IMPORTED_MODULE_1__.join(this.path, request);\n                let file = new FileResponse(filePath);\n                if (file.exists) {\n                  return file;\n                } else {\n                  return void 0;\n                }\n              }\n              /**\n               * Adds the given response to the cache.\n               * @param {string} request \n               * @param {Response} response \n               * @param {(data: {progress: number, loaded: number, total: number}) => void} [progress_callback] Optional.\n               * The function to call with progress updates\n               * @returns {Promise<void>}\n               */\n              async put(request, response, progress_callback = void 0) {\n                let filePath = path__WEBPACK_IMPORTED_MODULE_1__.join(this.path, request);\n                try {\n                  const contentLength = response.headers.get(\"Content-Length\");\n                  const total = parseInt(contentLength ?? \"0\");\n                  let loaded = 0;\n                  await fs__WEBPACK_IMPORTED_MODULE_0__.promises.mkdir(path__WEBPACK_IMPORTED_MODULE_1__.dirname(filePath), { recursive: true });\n                  const fileStream = fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream(filePath);\n                  const reader = response.body.getReader();\n                  while (true) {\n                    const { done, value } = await reader.read();\n                    if (done) {\n                      break;\n                    }\n                    await new Promise((resolve, reject) => {\n                      fileStream.write(value, (err) => {\n                        if (err) {\n                          reject(err);\n                          return;\n                        }\n                        resolve();\n                      });\n                    });\n                    loaded += value.length;\n                    const progress = total ? loaded / total * 100 : 0;\n                    progress_callback?.({ progress, loaded, total });\n                  }\n                  fileStream.close();\n                } catch (error) {\n                  try {\n                    await fs__WEBPACK_IMPORTED_MODULE_0__.promises.unlink(filePath);\n                  } catch {\n                  }\n                  throw error;\n                }\n              }\n              // TODO add the rest?\n              // addAll(requests: RequestInfo[]): Promise<void>;\n              // delete(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<boolean>;\n              // keys(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Request>>;\n              // match(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<Response | undefined>;\n              // matchAll(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Response>>;\n            }\n            async function tryCache(cache, ...names) {\n              for (let name of names) {\n                try {\n                  let result = await cache.match(name);\n                  if (result) return result;\n                } catch (e) {\n                  continue;\n                }\n              }\n              return void 0;\n            }\n            async function getModelFile(path_or_repo_id, filename, fatal = true, options = {}, return_path = false) {\n              if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowLocalModels) {\n                if (options.local_files_only) {\n                  throw Error(\"Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).\");\n                } else if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowRemoteModels) {\n                  throw Error(\"Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.\");\n                }\n              }\n              (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options.progress_callback, {\n                status: \"initiate\",\n                name: path_or_repo_id,\n                file: filename\n              });\n              let cache;\n              if (!cache && _env_js__WEBPACK_IMPORTED_MODULE_2__.env.useCustomCache) {\n                if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.customCache) {\n                  throw Error(\"`env.useCustomCache=true`, but `env.customCache` is not defined.\");\n                }\n                if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.customCache.match || !_env_js__WEBPACK_IMPORTED_MODULE_2__.env.customCache.put) {\n                  throw new Error(\n                    \"`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache\"\n                  );\n                }\n                cache = _env_js__WEBPACK_IMPORTED_MODULE_2__.env.customCache;\n              }\n              if (!cache && _env_js__WEBPACK_IMPORTED_MODULE_2__.env.useBrowserCache) {\n                if (typeof caches === \"undefined\") {\n                  throw Error(\"Browser cache is not available in this environment.\");\n                }\n                try {\n                  cache = await caches.open(\"transformers-cache\");\n                } catch (e) {\n                  console.warn(\"An error occurred while opening the browser cache:\", e);\n                }\n              }\n              if (!cache && _env_js__WEBPACK_IMPORTED_MODULE_2__.env.useFSCache) {\n                if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_FS_AVAILABLE) {\n                  throw Error(\"File System Cache is not available in this environment.\");\n                }\n                cache = new FileCache(options.cache_dir ?? _env_js__WEBPACK_IMPORTED_MODULE_2__.env.cacheDir);\n              }\n              const revision = options.revision ?? \"main\";\n              const requestURL = pathJoin(path_or_repo_id, filename);\n              const validModelId = isValidHfModelId(path_or_repo_id);\n              const localPath = validModelId ? pathJoin(_env_js__WEBPACK_IMPORTED_MODULE_2__.env.localModelPath, requestURL) : requestURL;\n              const remoteURL = pathJoin(\n                _env_js__WEBPACK_IMPORTED_MODULE_2__.env.remoteHost,\n                _env_js__WEBPACK_IMPORTED_MODULE_2__.env.remotePathTemplate.replaceAll(\"{model}\", path_or_repo_id).replaceAll(\"{revision}\", encodeURIComponent(revision)),\n                filename\n              );\n              let cacheKey;\n              const proposedCacheKey = cache instanceof FileCache ? revision === \"main\" ? requestURL : pathJoin(path_or_repo_id, revision, filename) : remoteURL;\n              let toCacheResponse = false;\n              let response;\n              if (cache) {\n                response = await tryCache(cache, localPath, proposedCacheKey);\n              }\n              const cacheHit = response !== void 0;\n              if (response === void 0) {\n                if (_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowLocalModels) {\n                  const isURL = isValidUrl(requestURL, [\"http:\", \"https:\"]);\n                  if (!isURL) {\n                    try {\n                      response = await getFile(localPath);\n                      cacheKey = localPath;\n                    } catch (e) {\n                      console.warn(`Unable to load from local path \"${localPath}\": \"${e}\"`);\n                    }\n                  } else if (options.local_files_only) {\n                    throw new Error(`\\`local_files_only=true\\`, but attempted to load a remote file from: ${requestURL}.`);\n                  } else if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowRemoteModels) {\n                    throw new Error(`\\`env.allowRemoteModels=false\\`, but attempted to load a remote file from: ${requestURL}.`);\n                  }\n                }\n                if (response === void 0 || response.status === 404) {\n                  if (options.local_files_only || !_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowRemoteModels) {\n                    if (fatal) {\n                      throw Error(`\\`local_files_only=true\\` or \\`env.allowRemoteModels=false\\` and file was not found locally at \"${localPath}\".`);\n                    } else {\n                      return null;\n                    }\n                  }\n                  if (!validModelId) {\n                    throw Error(`Local file missing at \"${localPath}\" and download aborted due to invalid model ID \"${path_or_repo_id}\".`);\n                  }\n                  response = await getFile(remoteURL);\n                  if (response.status !== 200) {\n                    return handleError(response.status, remoteURL, fatal);\n                  }\n                  cacheKey = proposedCacheKey;\n                }\n                toCacheResponse = cache && typeof Response !== \"undefined\" && response instanceof Response && response.status === 200;\n              }\n              (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options.progress_callback, {\n                status: \"download\",\n                name: path_or_repo_id,\n                file: filename\n              });\n              let result;\n              if (!(_env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_NODE_ENV && return_path)) {\n                let buffer;\n                if (!options.progress_callback) {\n                  buffer = new Uint8Array(await response.arrayBuffer());\n                } else if (cacheHit && typeof navigator !== \"undefined\" && /firefox/i.test(navigator.userAgent)) {\n                  buffer = new Uint8Array(await response.arrayBuffer());\n                  (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options.progress_callback, {\n                    status: \"progress\",\n                    name: path_or_repo_id,\n                    file: filename,\n                    progress: 100,\n                    loaded: buffer.length,\n                    total: buffer.length\n                  });\n                } else {\n                  buffer = await readResponse(response, (data) => {\n                    (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options.progress_callback, {\n                      status: \"progress\",\n                      name: path_or_repo_id,\n                      file: filename,\n                      ...data\n                    });\n                  });\n                }\n                result = buffer;\n              }\n              if (\n                // Only cache web responses\n                // i.e., do not cache FileResponses (prevents duplication)\n                toCacheResponse && cacheKey && // Check again whether request is in cache. If not, we add the response to the cache\n                await cache.match(cacheKey) === void 0\n              ) {\n                if (!result) {\n                  await cache.put(\n                    cacheKey,\n                    /** @type {Response} */\n                    response,\n                    options.progress_callback\n                  );\n                } else {\n                  await cache.put(cacheKey, new Response(result, {\n                    headers: response.headers\n                  })).catch((err) => {\n                    console.warn(`Unable to add response to browser cache: ${err}.`);\n                  });\n                }\n              }\n              (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options.progress_callback, {\n                status: \"done\",\n                name: path_or_repo_id,\n                file: filename\n              });\n              if (result) {\n                if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_NODE_ENV && return_path) {\n                  throw new Error(\"Cannot return path in a browser environment.\");\n                }\n                return result;\n              }\n              if (response instanceof FileResponse) {\n                return response.filePath;\n              }\n              const cachedResponse = await cache?.match(cacheKey);\n              if (cachedResponse instanceof FileResponse) {\n                return cachedResponse.filePath;\n              } else if (cachedResponse instanceof Response) {\n                return new Uint8Array(await cachedResponse.arrayBuffer());\n              } else if (typeof cachedResponse === \"string\") {\n                return cachedResponse;\n              }\n              throw new Error(\"Unable to get model file path or buffer.\");\n            }\n            async function getModelJSON(modelPath, fileName, fatal = true, options = {}) {\n              const buffer = await getModelFile(modelPath, fileName, fatal, options, false);\n              if (buffer === null) {\n                return {};\n              }\n              const decoder = new TextDecoder(\"utf-8\");\n              const jsonData = decoder.decode(\n                /** @type {Uint8Array} */\n                buffer\n              );\n              return JSON.parse(jsonData);\n            }\n            async function readResponse(response, progress_callback) {\n              const contentLength = response.headers.get(\"Content-Length\");\n              if (contentLength === null) {\n                console.warn(\"Unable to determine content-length from response headers. Will expand buffer when needed.\");\n              }\n              let total = parseInt(contentLength ?? \"0\");\n              let buffer = new Uint8Array(total);\n              let loaded = 0;\n              const reader = response.body.getReader();\n              async function read() {\n                const { done, value } = await reader.read();\n                if (done) return;\n                const newLoaded = loaded + value.length;\n                if (newLoaded > total) {\n                  total = newLoaded;\n                  const newBuffer = new Uint8Array(total);\n                  newBuffer.set(buffer);\n                  buffer = newBuffer;\n                }\n                buffer.set(value, loaded);\n                loaded = newLoaded;\n                const progress = loaded / total * 100;\n                progress_callback({ progress, loaded, total });\n                return read();\n              }\n              await read();\n              return buffer;\n            }\n            function pathJoin(...parts) {\n              parts = parts.map((part, index) => {\n                if (index) {\n                  part = part.replace(new RegExp(\"^/\"), \"\");\n                }\n                if (index !== parts.length - 1) {\n                  part = part.replace(new RegExp(\"/$\"), \"\");\n                }\n                return part;\n              });\n              return parts.join(\"/\");\n            }\n          }\n        ),\n        /***/\n        \"./src/utils/image.js\": (\n          /*!****************************!*\\\n            !*** ./src/utils/image.js ***!\n            \\****************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              RawImage: () => (\n                /* binding */\n                RawImage\n              ),\n              /* harmony export */\n              load_image: () => (\n                /* binding */\n                load_image\n              )\n              /* harmony export */\n            });\n            var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ./core.js */\n              \"./src/utils/core.js\"\n            );\n            var _hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ./hub.js */\n              \"./src/utils/hub.js\"\n            );\n            var _env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../env.js */\n              \"./src/env.js\"\n            );\n            var _tensor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(\n              /*! ./tensor.js */\n              \"./src/utils/tensor.js\"\n            );\n            var sharp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(\n              /*! sharp */\n              \"?2b25\"\n            );\n            let createCanvasFunction;\n            let ImageDataClass;\n            let loadImageFunction;\n            const IS_BROWSER_OR_WEBWORKER = _env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_BROWSER_ENV || _env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_WEBWORKER_ENV;\n            if (IS_BROWSER_OR_WEBWORKER) {\n              createCanvasFunction = (width, height) => {\n                if (!self.OffscreenCanvas) {\n                  throw new Error(\"OffscreenCanvas not supported by this browser.\");\n                }\n                return new self.OffscreenCanvas(width, height);\n              };\n              loadImageFunction = self.createImageBitmap;\n              ImageDataClass = self.ImageData;\n            } else if (sharp__WEBPACK_IMPORTED_MODULE_4__) {\n              loadImageFunction = async (img) => {\n                const metadata = await img.metadata();\n                const rawChannels = metadata.channels;\n                const { data, info } = await img.rotate().raw().toBuffer({ resolveWithObject: true });\n                const newImage = new RawImage(new Uint8ClampedArray(data), info.width, info.height, info.channels);\n                if (rawChannels !== void 0 && rawChannels !== info.channels) {\n                  newImage.convert(rawChannels);\n                }\n                return newImage;\n              };\n            } else {\n              throw new Error(\"Unable to load image processing library.\");\n            }\n            const RESAMPLING_MAPPING = {\n              0: \"nearest\",\n              1: \"lanczos\",\n              2: \"bilinear\",\n              3: \"bicubic\",\n              4: \"box\",\n              5: \"hamming\"\n            };\n            const CONTENT_TYPE_MAP = /* @__PURE__ */ new Map([\n              [\"png\", \"image/png\"],\n              [\"jpg\", \"image/jpeg\"],\n              [\"jpeg\", \"image/jpeg\"],\n              [\"gif\", \"image/gif\"]\n            ]);\n            class RawImage {\n              /**\n               * Create a new `RawImage` object.\n               * @param {Uint8ClampedArray|Uint8Array} data The pixel data.\n               * @param {number} width The width of the image.\n               * @param {number} height The height of the image.\n               * @param {1|2|3|4} channels The number of channels.\n               */\n              constructor(data, width, height, channels) {\n                this.data = data;\n                this.width = width;\n                this.height = height;\n                this.channels = channels;\n              }\n              /**\n               * Returns the size of the image (width, height).\n               * @returns {[number, number]} The size of the image (width, height).\n               */\n              get size() {\n                return [this.width, this.height];\n              }\n              /**\n               * Helper method for reading an image from a variety of input types.\n               * @param {RawImage|string|URL|Blob|HTMLCanvasElement|OffscreenCanvas} input\n               * @returns The image object.\n               *\n               * **Example:** Read image from a URL.\n               * ```javascript\n               * let image = await RawImage.read('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/football-match.jpg');\n               * // RawImage {\n               * //   \"data\": Uint8ClampedArray [ 25, 25, 25, 19, 19, 19, ... ],\n               * //   \"width\": 800,\n               * //   \"height\": 533,\n               * //   \"channels\": 3\n               * // }\n               * ```\n               */\n              static async read(input) {\n                if (input instanceof RawImage) {\n                  return input;\n                } else if (typeof input === \"string\" || input instanceof URL) {\n                  return await this.fromURL(input);\n                } else if (input instanceof Blob) {\n                  return await this.fromBlob(input);\n                } else if (typeof HTMLCanvasElement !== \"undefined\" && input instanceof HTMLCanvasElement || typeof OffscreenCanvas !== \"undefined\" && input instanceof OffscreenCanvas) {\n                  return this.fromCanvas(input);\n                } else {\n                  throw new Error(`Unsupported input type: ${typeof input}`);\n                }\n              }\n              /**\n               * Read an image from a canvas.\n               * @param {HTMLCanvasElement|OffscreenCanvas} canvas The canvas to read the image from.\n               * @returns {RawImage} The image object.\n               */\n              static fromCanvas(canvas) {\n                if (!IS_BROWSER_OR_WEBWORKER) {\n                  throw new Error(\"fromCanvas() is only supported in browser environments.\");\n                }\n                const ctx = canvas.getContext(\"2d\");\n                const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n                return new RawImage(data, canvas.width, canvas.height, 4);\n              }\n              /**\n               * Read an image from a URL or file path.\n               * @param {string|URL} url The URL or file path to read the image from.\n               * @returns {Promise<RawImage>} The image object.\n               */\n              static async fromURL(url) {\n                const response = await (0, _hub_js__WEBPACK_IMPORTED_MODULE_1__.getFile)(url);\n                if (response.status !== 200) {\n                  throw new Error(`Unable to read image from \"${url}\" (${response.status} ${response.statusText})`);\n                }\n                const blob = await response.blob();\n                return this.fromBlob(blob);\n              }\n              /**\n               * Helper method to create a new Image from a blob.\n               * @param {Blob} blob The blob to read the image from.\n               * @returns {Promise<RawImage>} The image object.\n               */\n              static async fromBlob(blob) {\n                if (IS_BROWSER_OR_WEBWORKER) {\n                  const img = await loadImageFunction(blob);\n                  const ctx = createCanvasFunction(img.width, img.height).getContext(\"2d\");\n                  ctx.drawImage(img, 0, 0);\n                  return new this(ctx.getImageData(0, 0, img.width, img.height).data, img.width, img.height, 4);\n                } else {\n                  const img = sharp__WEBPACK_IMPORTED_MODULE_4__(await blob.arrayBuffer());\n                  return await loadImageFunction(img);\n                }\n              }\n              /**\n               * Helper method to create a new Image from a tensor\n               * @param {Tensor} tensor\n               */\n              static fromTensor(tensor, channel_format = \"CHW\") {\n                if (tensor.dims.length !== 3) {\n                  throw new Error(`Tensor should have 3 dimensions, but has ${tensor.dims.length} dimensions.`);\n                }\n                if (channel_format === \"CHW\") {\n                  tensor = tensor.transpose(1, 2, 0);\n                } else if (channel_format === \"HWC\") {\n                } else {\n                  throw new Error(`Unsupported channel format: ${channel_format}`);\n                }\n                if (!(tensor.data instanceof Uint8ClampedArray || tensor.data instanceof Uint8Array)) {\n                  throw new Error(`Unsupported tensor type: ${tensor.type}`);\n                }\n                switch (tensor.dims[2]) {\n                  case 1:\n                  case 2:\n                  case 3:\n                  case 4:\n                    return new RawImage(tensor.data, tensor.dims[1], tensor.dims[0], tensor.dims[2]);\n                  default:\n                    throw new Error(`Unsupported number of channels: ${tensor.dims[2]}`);\n                }\n              }\n              /**\n               * Convert the image to grayscale format.\n               * @returns {RawImage} `this` to support chaining.\n               */\n              grayscale() {\n                if (this.channels === 1) {\n                  return this;\n                }\n                const newData = new Uint8ClampedArray(this.width * this.height * 1);\n                switch (this.channels) {\n                  case 3:\n                  // rgb to grayscale\n                  case 4:\n                    for (let i = 0, offset = 0; i < this.data.length; i += this.channels) {\n                      const red = this.data[i];\n                      const green = this.data[i + 1];\n                      const blue = this.data[i + 2];\n                      newData[offset++] = Math.round(0.2989 * red + 0.587 * green + 0.114 * blue);\n                    }\n                    break;\n                  default:\n                    throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);\n                }\n                return this._update(newData, this.width, this.height, 1);\n              }\n              /**\n               * Convert the image to RGB format.\n               * @returns {RawImage} `this` to support chaining.\n               */\n              rgb() {\n                if (this.channels === 3) {\n                  return this;\n                }\n                const newData = new Uint8ClampedArray(this.width * this.height * 3);\n                switch (this.channels) {\n                  case 1:\n                    for (let i = 0, offset = 0; i < this.data.length; ++i) {\n                      newData[offset++] = this.data[i];\n                      newData[offset++] = this.data[i];\n                      newData[offset++] = this.data[i];\n                    }\n                    break;\n                  case 4:\n                    for (let i = 0, offset = 0; i < this.data.length; i += 4) {\n                      newData[offset++] = this.data[i];\n                      newData[offset++] = this.data[i + 1];\n                      newData[offset++] = this.data[i + 2];\n                    }\n                    break;\n                  default:\n                    throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);\n                }\n                return this._update(newData, this.width, this.height, 3);\n              }\n              /**\n               * Convert the image to RGBA format.\n               * @returns {RawImage} `this` to support chaining.\n               */\n              rgba() {\n                if (this.channels === 4) {\n                  return this;\n                }\n                const newData = new Uint8ClampedArray(this.width * this.height * 4);\n                switch (this.channels) {\n                  case 1:\n                    for (let i = 0, offset = 0; i < this.data.length; ++i) {\n                      newData[offset++] = this.data[i];\n                      newData[offset++] = this.data[i];\n                      newData[offset++] = this.data[i];\n                      newData[offset++] = 255;\n                    }\n                    break;\n                  case 3:\n                    for (let i = 0, offset = 0; i < this.data.length; i += 3) {\n                      newData[offset++] = this.data[i];\n                      newData[offset++] = this.data[i + 1];\n                      newData[offset++] = this.data[i + 2];\n                      newData[offset++] = 255;\n                    }\n                    break;\n                  default:\n                    throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);\n                }\n                return this._update(newData, this.width, this.height, 4);\n              }\n              /**\n               * Apply an alpha mask to the image. Operates in place.\n               * @param {RawImage} mask The mask to apply. It should have a single channel.\n               * @returns {RawImage} The masked image.\n               * @throws {Error} If the mask is not the same size as the image.\n               * @throws {Error} If the image does not have 4 channels.\n               * @throws {Error} If the mask is not a single channel.\n               */\n              putAlpha(mask) {\n                if (mask.width !== this.width || mask.height !== this.height) {\n                  throw new Error(`Expected mask size to be ${this.width}x${this.height}, but got ${mask.width}x${mask.height}`);\n                }\n                if (mask.channels !== 1) {\n                  throw new Error(`Expected mask to have 1 channel, but got ${mask.channels}`);\n                }\n                const this_data = this.data;\n                const mask_data = mask.data;\n                const num_pixels = this.width * this.height;\n                if (this.channels === 3) {\n                  const newData = new Uint8ClampedArray(num_pixels * 4);\n                  for (let i = 0, in_offset = 0, out_offset = 0; i < num_pixels; ++i) {\n                    newData[out_offset++] = this_data[in_offset++];\n                    newData[out_offset++] = this_data[in_offset++];\n                    newData[out_offset++] = this_data[in_offset++];\n                    newData[out_offset++] = mask_data[i];\n                  }\n                  return this._update(newData, this.width, this.height, 4);\n                } else if (this.channels === 4) {\n                  for (let i = 0; i < num_pixels; ++i) {\n                    this_data[4 * i + 3] = mask_data[i];\n                  }\n                  return this;\n                }\n                throw new Error(`Expected image to have 3 or 4 channels, but got ${this.channels}`);\n              }\n              /**\n               * Resize the image to the given dimensions. This method uses the canvas API to perform the resizing.\n               * @param {number} width The width of the new image. `null` or `-1` will preserve the aspect ratio.\n               * @param {number} height The height of the new image. `null` or `-1` will preserve the aspect ratio.\n               * @param {Object} options Additional options for resizing.\n               * @param {0|1|2|3|4|5|string} [options.resample] The resampling method to use.\n               * @returns {Promise<RawImage>} `this` to support chaining.\n               */\n              async resize(width, height, {\n                resample: resample2 = 2\n              } = {}) {\n                if (this.width === width && this.height === height) {\n                  return this;\n                }\n                let resampleMethod = RESAMPLING_MAPPING[resample2] ?? resample2;\n                const nullish_width = (0, _core_js__WEBPACK_IMPORTED_MODULE_0__.isNullishDimension)(width);\n                const nullish_height = (0, _core_js__WEBPACK_IMPORTED_MODULE_0__.isNullishDimension)(height);\n                if (nullish_width && nullish_height) {\n                  return this;\n                } else if (nullish_width) {\n                  width = height / this.height * this.width;\n                } else if (nullish_height) {\n                  height = width / this.width * this.height;\n                }\n                if (IS_BROWSER_OR_WEBWORKER) {\n                  const numChannels = this.channels;\n                  const canvas = this.toCanvas();\n                  const ctx = createCanvasFunction(width, height).getContext(\"2d\");\n                  ctx.drawImage(canvas, 0, 0, width, height);\n                  const resizedImage = new RawImage(ctx.getImageData(0, 0, width, height).data, width, height, 4);\n                  return resizedImage.convert(numChannels);\n                } else {\n                  let img = this.toSharp();\n                  switch (resampleMethod) {\n                    case \"box\":\n                    case \"hamming\":\n                      if (resampleMethod === \"box\" || resampleMethod === \"hamming\") {\n                        console.warn(`Resampling method ${resampleMethod} is not yet supported. Using bilinear instead.`);\n                        resampleMethod = \"bilinear\";\n                      }\n                    case \"nearest\":\n                    case \"bilinear\":\n                    case \"bicubic\":\n                      img = img.affine([width / this.width, 0, 0, height / this.height], {\n                        interpolator: resampleMethod\n                      });\n                      break;\n                    case \"lanczos\":\n                      img = img.resize({\n                        width,\n                        height,\n                        fit: \"fill\",\n                        kernel: \"lanczos3\"\n                        // PIL Lanczos uses a kernel size of 3\n                      });\n                      break;\n                    default:\n                      throw new Error(`Resampling method ${resampleMethod} is not supported.`);\n                  }\n                  return await loadImageFunction(img);\n                }\n              }\n              async pad([left, right, top, bottom]) {\n                left = Math.max(left, 0);\n                right = Math.max(right, 0);\n                top = Math.max(top, 0);\n                bottom = Math.max(bottom, 0);\n                if (left === 0 && right === 0 && top === 0 && bottom === 0) {\n                  return this;\n                }\n                if (IS_BROWSER_OR_WEBWORKER) {\n                  const numChannels = this.channels;\n                  const canvas = this.toCanvas();\n                  const newWidth = this.width + left + right;\n                  const newHeight = this.height + top + bottom;\n                  const ctx = createCanvasFunction(newWidth, newHeight).getContext(\"2d\");\n                  ctx.drawImage(\n                    canvas,\n                    0,\n                    0,\n                    this.width,\n                    this.height,\n                    left,\n                    top,\n                    this.width,\n                    this.height\n                  );\n                  const paddedImage = new RawImage(\n                    ctx.getImageData(0, 0, newWidth, newHeight).data,\n                    newWidth,\n                    newHeight,\n                    4\n                  );\n                  return paddedImage.convert(numChannels);\n                } else {\n                  const img = this.toSharp().extend({ left, right, top, bottom });\n                  return await loadImageFunction(img);\n                }\n              }\n              async crop([x_min, y_min, x_max, y_max]) {\n                x_min = Math.max(x_min, 0);\n                y_min = Math.max(y_min, 0);\n                x_max = Math.min(x_max, this.width - 1);\n                y_max = Math.min(y_max, this.height - 1);\n                if (x_min === 0 && y_min === 0 && x_max === this.width - 1 && y_max === this.height - 1) {\n                  return this;\n                }\n                const crop_width = x_max - x_min + 1;\n                const crop_height = y_max - y_min + 1;\n                if (IS_BROWSER_OR_WEBWORKER) {\n                  const numChannels = this.channels;\n                  const canvas = this.toCanvas();\n                  const ctx = createCanvasFunction(crop_width, crop_height).getContext(\"2d\");\n                  ctx.drawImage(\n                    canvas,\n                    x_min,\n                    y_min,\n                    crop_width,\n                    crop_height,\n                    0,\n                    0,\n                    crop_width,\n                    crop_height\n                  );\n                  const resizedImage = new RawImage(ctx.getImageData(0, 0, crop_width, crop_height).data, crop_width, crop_height, 4);\n                  return resizedImage.convert(numChannels);\n                } else {\n                  const img = this.toSharp().extract({\n                    left: x_min,\n                    top: y_min,\n                    width: crop_width,\n                    height: crop_height\n                  });\n                  return await loadImageFunction(img);\n                }\n              }\n              async center_crop(crop_width, crop_height) {\n                if (this.width === crop_width && this.height === crop_height) {\n                  return this;\n                }\n                const width_offset = (this.width - crop_width) / 2;\n                const height_offset = (this.height - crop_height) / 2;\n                if (IS_BROWSER_OR_WEBWORKER) {\n                  const numChannels = this.channels;\n                  const canvas = this.toCanvas();\n                  const ctx = createCanvasFunction(crop_width, crop_height).getContext(\"2d\");\n                  let sourceX = 0;\n                  let sourceY = 0;\n                  let destX = 0;\n                  let destY = 0;\n                  if (width_offset >= 0) {\n                    sourceX = width_offset;\n                  } else {\n                    destX = -width_offset;\n                  }\n                  if (height_offset >= 0) {\n                    sourceY = height_offset;\n                  } else {\n                    destY = -height_offset;\n                  }\n                  ctx.drawImage(\n                    canvas,\n                    sourceX,\n                    sourceY,\n                    crop_width,\n                    crop_height,\n                    destX,\n                    destY,\n                    crop_width,\n                    crop_height\n                  );\n                  const resizedImage = new RawImage(ctx.getImageData(0, 0, crop_width, crop_height).data, crop_width, crop_height, 4);\n                  return resizedImage.convert(numChannels);\n                } else {\n                  let img = this.toSharp();\n                  if (width_offset >= 0 && height_offset >= 0) {\n                    img = img.extract({\n                      left: Math.floor(width_offset),\n                      top: Math.floor(height_offset),\n                      width: crop_width,\n                      height: crop_height\n                    });\n                  } else if (width_offset <= 0 && height_offset <= 0) {\n                    const top = Math.floor(-height_offset);\n                    const left = Math.floor(-width_offset);\n                    img = img.extend({\n                      top,\n                      left,\n                      // Ensures the resulting image has the desired dimensions\n                      right: crop_width - this.width - left,\n                      bottom: crop_height - this.height - top\n                    });\n                  } else {\n                    let y_padding = [0, 0];\n                    let y_extract = 0;\n                    if (height_offset < 0) {\n                      y_padding[0] = Math.floor(-height_offset);\n                      y_padding[1] = crop_height - this.height - y_padding[0];\n                    } else {\n                      y_extract = Math.floor(height_offset);\n                    }\n                    let x_padding = [0, 0];\n                    let x_extract = 0;\n                    if (width_offset < 0) {\n                      x_padding[0] = Math.floor(-width_offset);\n                      x_padding[1] = crop_width - this.width - x_padding[0];\n                    } else {\n                      x_extract = Math.floor(width_offset);\n                    }\n                    img = img.extend({\n                      top: y_padding[0],\n                      bottom: y_padding[1],\n                      left: x_padding[0],\n                      right: x_padding[1]\n                    }).extract({\n                      left: x_extract,\n                      top: y_extract,\n                      width: crop_width,\n                      height: crop_height\n                    });\n                  }\n                  return await loadImageFunction(img);\n                }\n              }\n              async toBlob(type = \"image/png\", quality = 1) {\n                if (!IS_BROWSER_OR_WEBWORKER) {\n                  throw new Error(\"toBlob() is only supported in browser environments.\");\n                }\n                const canvas = this.toCanvas();\n                return await canvas.convertToBlob({ type, quality });\n              }\n              toTensor(channel_format = \"CHW\") {\n                let tensor = new _tensor_js__WEBPACK_IMPORTED_MODULE_3__.Tensor(\n                  \"uint8\",\n                  new Uint8Array(this.data),\n                  [this.height, this.width, this.channels]\n                );\n                if (channel_format === \"HWC\") {\n                } else if (channel_format === \"CHW\") {\n                  tensor = tensor.permute(2, 0, 1);\n                } else {\n                  throw new Error(`Unsupported channel format: ${channel_format}`);\n                }\n                return tensor;\n              }\n              toCanvas() {\n                if (!IS_BROWSER_OR_WEBWORKER) {\n                  throw new Error(\"toCanvas() is only supported in browser environments.\");\n                }\n                const cloned = this.clone().rgba();\n                const clonedCanvas = createCanvasFunction(cloned.width, cloned.height);\n                const data = new ImageDataClass(cloned.data, cloned.width, cloned.height);\n                clonedCanvas.getContext(\"2d\").putImageData(data, 0, 0);\n                return clonedCanvas;\n              }\n              /**\n               * Split this image into individual bands. This method returns an array of individual image bands from an image.\n               * For example, splitting an \"RGB\" image creates three new images each containing a copy of one of the original bands (red, green, blue).\n               * \n               * Inspired by PIL's `Image.split()` [function](https://pillow.readthedocs.io/en/latest/reference/Image.html#PIL.Image.Image.split).\n               * @returns {RawImage[]} An array containing bands.\n               */\n              split() {\n                const { data, width, height, channels } = this;\n                const data_type = (\n                  /** @type {any} */\n                  data.constructor\n                );\n                const per_channel_length = data.length / channels;\n                const split_data = Array.from(\n                  { length: channels },\n                  () => new data_type(per_channel_length)\n                );\n                for (let i = 0; i < per_channel_length; ++i) {\n                  const data_offset = channels * i;\n                  for (let j = 0; j < channels; ++j) {\n                    split_data[j][i] = data[data_offset + j];\n                  }\n                }\n                return split_data.map((data2) => new RawImage(data2, width, height, 1));\n              }\n              /**\n               * Helper method to update the image data.\n               * @param {Uint8ClampedArray} data The new image data.\n               * @param {number} width The new width of the image.\n               * @param {number} height The new height of the image.\n               * @param {1|2|3|4|null} [channels] The new number of channels of the image.\n               * @private\n               */\n              _update(data, width, height, channels = null) {\n                this.data = data;\n                this.width = width;\n                this.height = height;\n                if (channels !== null) {\n                  this.channels = channels;\n                }\n                return this;\n              }\n              /**\n               * Clone the image\n               * @returns {RawImage} The cloned image\n               */\n              clone() {\n                return new RawImage(this.data.slice(), this.width, this.height, this.channels);\n              }\n              /**\n               * Helper method for converting image to have a certain number of channels\n               * @param {number} numChannels The number of channels. Must be 1, 3, or 4.\n               * @returns {RawImage} `this` to support chaining.\n               */\n              convert(numChannels) {\n                if (this.channels === numChannels) return this;\n                switch (numChannels) {\n                  case 1:\n                    this.grayscale();\n                    break;\n                  case 3:\n                    this.rgb();\n                    break;\n                  case 4:\n                    this.rgba();\n                    break;\n                  default:\n                    throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);\n                }\n                return this;\n              }\n              /**\n               * Save the image to the given path.\n               * @param {string} path The path to save the image to.\n               */\n              async save(path) {\n                if (IS_BROWSER_OR_WEBWORKER) {\n                  if (_env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_WEBWORKER_ENV) {\n                    throw new Error(\"Unable to save an image from a Web Worker.\");\n                  }\n                  const extension = path.split(\".\").pop().toLowerCase();\n                  const mime = CONTENT_TYPE_MAP.get(extension) ?? \"image/png\";\n                  const blob = await this.toBlob(mime);\n                  (0, _core_js__WEBPACK_IMPORTED_MODULE_0__.saveBlob)(path, blob);\n                } else if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_FS_AVAILABLE) {\n                  throw new Error(\"Unable to save the image because filesystem is disabled in this environment.\");\n                } else {\n                  const img = this.toSharp();\n                  return await img.toFile(path);\n                }\n              }\n              toSharp() {\n                if (IS_BROWSER_OR_WEBWORKER) {\n                  throw new Error(\"toSharp() is only supported in server-side environments.\");\n                }\n                return sharp__WEBPACK_IMPORTED_MODULE_4__(this.data, {\n                  raw: {\n                    width: this.width,\n                    height: this.height,\n                    channels: this.channels\n                  }\n                });\n              }\n            }\n            const load_image = RawImage.read.bind(RawImage);\n          }\n        ),\n        /***/\n        \"./src/utils/maths.js\": (\n          /*!****************************!*\\\n            !*** ./src/utils/maths.js ***!\n            \\****************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              FFT: () => (\n                /* binding */\n                FFT\n              ),\n              /* harmony export */\n              bankers_round: () => (\n                /* binding */\n                bankers_round\n              ),\n              /* harmony export */\n              cos_sim: () => (\n                /* binding */\n                cos_sim\n              ),\n              /* harmony export */\n              dot: () => (\n                /* binding */\n                dot\n              ),\n              /* harmony export */\n              dynamic_time_warping: () => (\n                /* binding */\n                dynamic_time_warping\n              ),\n              /* harmony export */\n              interpolate_data: () => (\n                /* binding */\n                interpolate_data\n              ),\n              /* harmony export */\n              log_softmax: () => (\n                /* binding */\n                log_softmax\n              ),\n              /* harmony export */\n              magnitude: () => (\n                /* binding */\n                magnitude\n              ),\n              /* harmony export */\n              max: () => (\n                /* binding */\n                max\n              ),\n              /* harmony export */\n              medianFilter: () => (\n                /* binding */\n                medianFilter\n              ),\n              /* harmony export */\n              min: () => (\n                /* binding */\n                min\n              ),\n              /* harmony export */\n              permute_data: () => (\n                /* binding */\n                permute_data\n              ),\n              /* harmony export */\n              round: () => (\n                /* binding */\n                round\n              ),\n              /* harmony export */\n              softmax: () => (\n                /* binding */\n                softmax\n              )\n              /* harmony export */\n            });\n            function interpolate_data(input, [in_channels, in_height, in_width], [out_height, out_width], mode = \"bilinear\", align_corners = false) {\n              const x_scale = out_width / in_width;\n              const y_scale = out_height / in_height;\n              const out_img = new input.constructor(out_height * out_width * in_channels);\n              const inStride = in_height * in_width;\n              const outStride = out_height * out_width;\n              for (let i = 0; i < out_height; ++i) {\n                for (let j = 0; j < out_width; ++j) {\n                  const outOffset = i * out_width + j;\n                  const x = (j + 0.5) / x_scale - 0.5;\n                  const y = (i + 0.5) / y_scale - 0.5;\n                  let x1 = Math.floor(x);\n                  let y1 = Math.floor(y);\n                  const x2 = Math.min(x1 + 1, in_width - 1);\n                  const y2 = Math.min(y1 + 1, in_height - 1);\n                  x1 = Math.max(x1, 0);\n                  y1 = Math.max(y1, 0);\n                  const s = x - x1;\n                  const t = y - y1;\n                  const w1 = (1 - s) * (1 - t);\n                  const w2 = s * (1 - t);\n                  const w3 = (1 - s) * t;\n                  const w4 = s * t;\n                  const yStride = y1 * in_width;\n                  const xStride = y2 * in_width;\n                  const idx1 = yStride + x1;\n                  const idx2 = yStride + x2;\n                  const idx3 = xStride + x1;\n                  const idx4 = xStride + x2;\n                  for (let k2 = 0; k2 < in_channels; ++k2) {\n                    const cOffset = k2 * inStride;\n                    out_img[k2 * outStride + outOffset] = w1 * input[cOffset + idx1] + w2 * input[cOffset + idx2] + w3 * input[cOffset + idx3] + w4 * input[cOffset + idx4];\n                  }\n                }\n              }\n              return out_img;\n            }\n            function permute_data(array, dims, axes) {\n              const shape = new Array(axes.length);\n              const stride = new Array(axes.length);\n              for (let i = axes.length - 1, s = 1; i >= 0; --i) {\n                stride[i] = s;\n                shape[i] = dims[axes[i]];\n                s *= shape[i];\n              }\n              const invStride = axes.map((_, i) => stride[axes.indexOf(i)]);\n              const permutedData = new array.constructor(array.length);\n              for (let i = 0; i < array.length; ++i) {\n                let newIndex = 0;\n                for (let j = dims.length - 1, k2 = i; j >= 0; --j) {\n                  newIndex += k2 % dims[j] * invStride[j];\n                  k2 = Math.floor(k2 / dims[j]);\n                }\n                permutedData[newIndex] = array[i];\n              }\n              return [permutedData, shape];\n            }\n            function softmax(arr) {\n              const maxVal = max(arr)[0];\n              const exps = arr.map((x) => Math.exp(x - maxVal));\n              const sumExps = exps.reduce((acc, val) => acc + val, 0);\n              const softmaxArr = exps.map((x) => x / sumExps);\n              return (\n                /** @type {T} */\n                softmaxArr\n              );\n            }\n            function log_softmax(arr) {\n              const maxVal = max(arr)[0];\n              let sumExps = 0;\n              for (let i = 0; i < arr.length; ++i) {\n                sumExps += Math.exp(arr[i] - maxVal);\n              }\n              const logSum = Math.log(sumExps);\n              const logSoftmaxArr = arr.map((x) => x - maxVal - logSum);\n              return (\n                /** @type {T} */\n                logSoftmaxArr\n              );\n            }\n            function dot(arr1, arr2) {\n              let result = 0;\n              for (let i = 0; i < arr1.length; ++i) {\n                result += arr1[i] * arr2[i];\n              }\n              return result;\n            }\n            function cos_sim(arr1, arr2) {\n              const dotProduct = dot(arr1, arr2);\n              const magnitudeA = magnitude(arr1);\n              const magnitudeB = magnitude(arr2);\n              const cosineSimilarity = dotProduct / (magnitudeA * magnitudeB);\n              return cosineSimilarity;\n            }\n            function magnitude(arr) {\n              return Math.sqrt(arr.reduce((acc, val) => acc + val * val, 0));\n            }\n            function min(arr) {\n              if (arr.length === 0) throw Error(\"Array must not be empty\");\n              let min2 = arr[0];\n              let indexOfMin = 0;\n              for (let i = 1; i < arr.length; ++i) {\n                if (arr[i] < min2) {\n                  min2 = arr[i];\n                  indexOfMin = i;\n                }\n              }\n              return (\n                /** @type {T extends bigint[]|BigTypedArray ? [bigint, number] : [number, number]} */\n                [min2, indexOfMin]\n              );\n            }\n            function max(arr) {\n              if (arr.length === 0) throw Error(\"Array must not be empty\");\n              let max2 = arr[0];\n              let indexOfMax = 0;\n              for (let i = 1; i < arr.length; ++i) {\n                if (arr[i] > max2) {\n                  max2 = arr[i];\n                  indexOfMax = i;\n                }\n              }\n              return (\n                /** @type {T extends bigint[]|BigTypedArray ? [bigint, number] : [number, number]} */\n                [max2, indexOfMax]\n              );\n            }\n            function isPowerOfTwo(number) {\n              return number > 0 && (number & number - 1) === 0;\n            }\n            class P2FFT {\n              /**\n               * @param {number} size The size of the input array. Must be a power of two larger than 1.\n               * @throws {Error} FFT size must be a power of two larger than 1.\n               */\n              constructor(size) {\n                this.size = size | 0;\n                if (this.size <= 1 || !isPowerOfTwo(this.size))\n                  throw new Error(\"FFT size must be a power of two larger than 1\");\n                this._csize = size << 1;\n                this.table = new Float64Array(this.size * 2);\n                for (let i = 0; i < this.table.length; i += 2) {\n                  const angle = Math.PI * i / this.size;\n                  this.table[i] = Math.cos(angle);\n                  this.table[i + 1] = -Math.sin(angle);\n                }\n                let power = 0;\n                for (let t = 1; this.size > t; t <<= 1)\n                  ++power;\n                this._width = power % 2 === 0 ? power - 1 : power;\n                this._bitrev = new Int32Array(1 << this._width);\n                for (let j = 0; j < this._bitrev.length; ++j) {\n                  this._bitrev[j] = 0;\n                  for (let shift = 0; shift < this._width; shift += 2) {\n                    const revShift = this._width - shift - 2;\n                    this._bitrev[j] |= (j >>> shift & 3) << revShift;\n                  }\n                }\n              }\n              /**\n               * Create a complex number array with size `2 * size`\n               *\n               * @returns {Float64Array} A complex number array with size `2 * size`\n               */\n              createComplexArray() {\n                return new Float64Array(this._csize);\n              }\n              /**\n               * Converts a complex number representation stored in a Float64Array to an array of real numbers.\n               * \n               * @param {Float64Array} complex The complex number representation to be converted.\n               * @param {number[]} [storage] An optional array to store the result in.\n               * @returns {number[]} An array of real numbers representing the input complex number representation.\n               */\n              fromComplexArray(complex, storage) {\n                const res = storage || new Array(complex.length >>> 1);\n                for (let i = 0; i < complex.length; i += 2)\n                  res[i >>> 1] = complex[i];\n                return res;\n              }\n              /**\n               * Convert a real-valued input array to a complex-valued output array.\n               * @param {Float64Array} input The real-valued input array.\n               * @param {Float64Array} [storage] Optional buffer to store the output array.\n               * @returns {Float64Array} The complex-valued output array.\n               */\n              toComplexArray(input, storage) {\n                const res = storage || this.createComplexArray();\n                for (let i = 0; i < res.length; i += 2) {\n                  res[i] = input[i >>> 1];\n                  res[i + 1] = 0;\n                }\n                return res;\n              }\n              /**\n               * Performs a Fast Fourier Transform (FFT) on the given input data and stores the result in the output buffer.\n               * \n               * @param {Float64Array} out The output buffer to store the result.\n               * @param {Float64Array} data The input data to transform.\n               * \n               * @throws {Error} Input and output buffers must be different.\n               * \n               * @returns {void}\n               */\n              transform(out, data) {\n                if (out === data)\n                  throw new Error(\"Input and output buffers must be different\");\n                this._transform4(\n                  out,\n                  data,\n                  1\n                  /* DONE */\n                );\n              }\n              /**\n               * Performs a real-valued forward FFT on the given input buffer and stores the result in the given output buffer.\n               * The input buffer must contain real values only, while the output buffer will contain complex values. The input and\n               * output buffers must be different.\n               *\n               * @param {Float64Array} out The output buffer.\n               * @param {Float64Array} data The input buffer containing real values.\n               *\n               * @throws {Error} If the input and output buffers are the same.\n               */\n              realTransform(out, data) {\n                if (out === data)\n                  throw new Error(\"Input and output buffers must be different\");\n                this._realTransform4(\n                  out,\n                  data,\n                  1\n                  /* DONE */\n                );\n              }\n              /**\n               * Performs an inverse FFT transformation on the given `data` array, and stores the result in `out`.\n               * The `out` array must be a different buffer than the `data` array. The `out` array will contain the\n               * result of the transformation. The `data` array will not be modified.\n               * \n               * @param {Float64Array} out The output buffer for the transformed data.\n               * @param {Float64Array} data The input data to transform.\n               * @throws {Error} If `out` and `data` refer to the same buffer.\n               * @returns {void}\n               */\n              inverseTransform(out, data) {\n                if (out === data)\n                  throw new Error(\"Input and output buffers must be different\");\n                this._transform4(\n                  out,\n                  data,\n                  -1\n                  /* DONE */\n                );\n                for (let i = 0; i < out.length; ++i)\n                  out[i] /= this.size;\n              }\n              /**\n               * Performs a radix-4 implementation of a discrete Fourier transform on a given set of data.\n               *\n               * @param {Float64Array} out The output buffer for the transformed data.\n               * @param {Float64Array} data The input buffer of data to be transformed.\n               * @param {number} inv A scaling factor to apply to the transform.\n               * @returns {void}\n               */\n              _transform4(out, data, inv) {\n                const size = this._csize;\n                const width = this._width;\n                let step = 1 << width;\n                let len = size / step << 1;\n                let outOff;\n                let t;\n                const bitrev = this._bitrev;\n                if (len === 4) {\n                  for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {\n                    const off = bitrev[t];\n                    this._singleTransform2(data, out, outOff, off, step);\n                  }\n                } else {\n                  for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {\n                    const off = bitrev[t];\n                    this._singleTransform4(data, out, outOff, off, step, inv);\n                  }\n                }\n                const table = this.table;\n                for (step >>= 2; step >= 2; step >>= 2) {\n                  len = size / step << 1;\n                  const quarterLen = len >>> 2;\n                  for (outOff = 0; outOff < size; outOff += len) {\n                    const limit = outOff + quarterLen - 1;\n                    for (let i = outOff, k2 = 0; i < limit; i += 2, k2 += step) {\n                      const A = i;\n                      const B = A + quarterLen;\n                      const C = B + quarterLen;\n                      const D = C + quarterLen;\n                      const Ar2 = out[A];\n                      const Ai = out[A + 1];\n                      const Br2 = out[B];\n                      const Bi = out[B + 1];\n                      const Cr2 = out[C];\n                      const Ci = out[C + 1];\n                      const Dr2 = out[D];\n                      const Di = out[D + 1];\n                      const tableBr = table[k2];\n                      const tableBi = inv * table[k2 + 1];\n                      const MBr = Br2 * tableBr - Bi * tableBi;\n                      const MBi = Br2 * tableBi + Bi * tableBr;\n                      const tableCr = table[2 * k2];\n                      const tableCi = inv * table[2 * k2 + 1];\n                      const MCr = Cr2 * tableCr - Ci * tableCi;\n                      const MCi = Cr2 * tableCi + Ci * tableCr;\n                      const tableDr = table[3 * k2];\n                      const tableDi = inv * table[3 * k2 + 1];\n                      const MDr = Dr2 * tableDr - Di * tableDi;\n                      const MDi = Dr2 * tableDi + Di * tableDr;\n                      const T0r = Ar2 + MCr;\n                      const T0i = Ai + MCi;\n                      const T1r = Ar2 - MCr;\n                      const T1i = Ai - MCi;\n                      const T2r = MBr + MDr;\n                      const T2i = MBi + MDi;\n                      const T3r = inv * (MBr - MDr);\n                      const T3i = inv * (MBi - MDi);\n                      out[A] = T0r + T2r;\n                      out[A + 1] = T0i + T2i;\n                      out[B] = T1r + T3i;\n                      out[B + 1] = T1i - T3r;\n                      out[C] = T0r - T2r;\n                      out[C + 1] = T0i - T2i;\n                      out[D] = T1r - T3i;\n                      out[D + 1] = T1i + T3r;\n                    }\n                  }\n                }\n              }\n              /**\n               * Performs a radix-2 implementation of a discrete Fourier transform on a given set of data.\n               *\n               * @param {Float64Array} data The input buffer of data to be transformed.\n               * @param {Float64Array} out The output buffer for the transformed data.\n               * @param {number} outOff The offset at which to write the output data.\n               * @param {number} off The offset at which to begin reading the input data.\n               * @param {number} step The step size for indexing the input data.\n               * @returns {void}\n               */\n              _singleTransform2(data, out, outOff, off, step) {\n                const evenR = data[off];\n                const evenI = data[off + 1];\n                const oddR = data[off + step];\n                const oddI = data[off + step + 1];\n                out[outOff] = evenR + oddR;\n                out[outOff + 1] = evenI + oddI;\n                out[outOff + 2] = evenR - oddR;\n                out[outOff + 3] = evenI - oddI;\n              }\n              /**\n               * Performs radix-4 transformation on input data of length 8\n               *\n               * @param {Float64Array} data Input data array of length 8\n               * @param {Float64Array} out Output data array of length 8\n               * @param {number} outOff Index of output array to start writing from\n               * @param {number} off Index of input array to start reading from\n               * @param {number} step Step size between elements in input array\n               * @param {number} inv Scaling factor for inverse transform\n               * \n               * @returns {void}\n               */\n              _singleTransform4(data, out, outOff, off, step, inv) {\n                const step2 = step * 2;\n                const step3 = step * 3;\n                const Ar2 = data[off];\n                const Ai = data[off + 1];\n                const Br2 = data[off + step];\n                const Bi = data[off + step + 1];\n                const Cr2 = data[off + step2];\n                const Ci = data[off + step2 + 1];\n                const Dr2 = data[off + step3];\n                const Di = data[off + step3 + 1];\n                const T0r = Ar2 + Cr2;\n                const T0i = Ai + Ci;\n                const T1r = Ar2 - Cr2;\n                const T1i = Ai - Ci;\n                const T2r = Br2 + Dr2;\n                const T2i = Bi + Di;\n                const T3r = inv * (Br2 - Dr2);\n                const T3i = inv * (Bi - Di);\n                out[outOff] = T0r + T2r;\n                out[outOff + 1] = T0i + T2i;\n                out[outOff + 2] = T1r + T3i;\n                out[outOff + 3] = T1i - T3r;\n                out[outOff + 4] = T0r - T2r;\n                out[outOff + 5] = T0i - T2i;\n                out[outOff + 6] = T1r - T3i;\n                out[outOff + 7] = T1i + T3r;\n              }\n              /**\n               * Real input radix-4 implementation\n               * @param {Float64Array} out Output array for the transformed data\n               * @param {Float64Array} data Input array of real data to be transformed\n               * @param {number} inv The scale factor used to normalize the inverse transform\n               */\n              _realTransform4(out, data, inv) {\n                const size = this._csize;\n                const width = this._width;\n                let step = 1 << width;\n                let len = size / step << 1;\n                let outOff;\n                let t;\n                const bitrev = this._bitrev;\n                if (len === 4) {\n                  for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {\n                    const off = bitrev[t];\n                    this._singleRealTransform2(data, out, outOff, off >>> 1, step >>> 1);\n                  }\n                } else {\n                  for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {\n                    const off = bitrev[t];\n                    this._singleRealTransform4(data, out, outOff, off >>> 1, step >>> 1, inv);\n                  }\n                }\n                const table = this.table;\n                for (step >>= 2; step >= 2; step >>= 2) {\n                  len = size / step << 1;\n                  const halfLen = len >>> 1;\n                  const quarterLen = halfLen >>> 1;\n                  const hquarterLen = quarterLen >>> 1;\n                  for (outOff = 0; outOff < size; outOff += len) {\n                    for (let i = 0, k2 = 0; i <= hquarterLen; i += 2, k2 += step) {\n                      const A = outOff + i;\n                      const B = A + quarterLen;\n                      const C = B + quarterLen;\n                      const D = C + quarterLen;\n                      const Ar2 = out[A];\n                      const Ai = out[A + 1];\n                      const Br2 = out[B];\n                      const Bi = out[B + 1];\n                      const Cr2 = out[C];\n                      const Ci = out[C + 1];\n                      const Dr2 = out[D];\n                      const Di = out[D + 1];\n                      const MAr = Ar2;\n                      const MAi = Ai;\n                      const tableBr = table[k2];\n                      const tableBi = inv * table[k2 + 1];\n                      const MBr = Br2 * tableBr - Bi * tableBi;\n                      const MBi = Br2 * tableBi + Bi * tableBr;\n                      const tableCr = table[2 * k2];\n                      const tableCi = inv * table[2 * k2 + 1];\n                      const MCr = Cr2 * tableCr - Ci * tableCi;\n                      const MCi = Cr2 * tableCi + Ci * tableCr;\n                      const tableDr = table[3 * k2];\n                      const tableDi = inv * table[3 * k2 + 1];\n                      const MDr = Dr2 * tableDr - Di * tableDi;\n                      const MDi = Dr2 * tableDi + Di * tableDr;\n                      const T0r = MAr + MCr;\n                      const T0i = MAi + MCi;\n                      const T1r = MAr - MCr;\n                      const T1i = MAi - MCi;\n                      const T2r = MBr + MDr;\n                      const T2i = MBi + MDi;\n                      const T3r = inv * (MBr - MDr);\n                      const T3i = inv * (MBi - MDi);\n                      out[A] = T0r + T2r;\n                      out[A + 1] = T0i + T2i;\n                      out[B] = T1r + T3i;\n                      out[B + 1] = T1i - T3r;\n                      if (i === 0) {\n                        out[C] = T0r - T2r;\n                        out[C + 1] = T0i - T2i;\n                        continue;\n                      }\n                      if (i === hquarterLen)\n                        continue;\n                      const SA = outOff + quarterLen - i;\n                      const SB = outOff + halfLen - i;\n                      out[SA] = T1r - inv * T3i;\n                      out[SA + 1] = -T1i - inv * T3r;\n                      out[SB] = T0r - inv * T2r;\n                      out[SB + 1] = -T0i + inv * T2i;\n                    }\n                  }\n                }\n                const half = size >>> 1;\n                for (let i = 2; i < half; i += 2) {\n                  out[size - i] = out[i];\n                  out[size - i + 1] = -out[i + 1];\n                }\n              }\n              /**\n               * Performs a single real input radix-2 transformation on the provided data\n               * \n               * @param {Float64Array} data The input data array\n               * @param {Float64Array} out The output data array\n               * @param {number} outOff The output offset\n               * @param {number} off The input offset\n               * @param {number} step The step\n               * \n               * @returns {void}\n               */\n              _singleRealTransform2(data, out, outOff, off, step) {\n                const evenR = data[off];\n                const oddR = data[off + step];\n                out[outOff] = evenR + oddR;\n                out[outOff + 1] = 0;\n                out[outOff + 2] = evenR - oddR;\n                out[outOff + 3] = 0;\n              }\n              /**\n               * Computes a single real-valued transform using radix-4 algorithm.\n               * This method is only called for len=8.\n               *\n               * @param {Float64Array} data The input data array.\n               * @param {Float64Array} out The output data array.\n               * @param {number} outOff The offset into the output array.\n               * @param {number} off The offset into the input array.\n               * @param {number} step The step size for the input array.\n               * @param {number} inv The value of inverse.\n               */\n              _singleRealTransform4(data, out, outOff, off, step, inv) {\n                const step2 = step * 2;\n                const step3 = step * 3;\n                const Ar2 = data[off];\n                const Br2 = data[off + step];\n                const Cr2 = data[off + step2];\n                const Dr2 = data[off + step3];\n                const T0r = Ar2 + Cr2;\n                const T1r = Ar2 - Cr2;\n                const T2r = Br2 + Dr2;\n                const T3r = inv * (Br2 - Dr2);\n                out[outOff] = T0r + T2r;\n                out[outOff + 1] = 0;\n                out[outOff + 2] = T1r;\n                out[outOff + 3] = -T3r;\n                out[outOff + 4] = T0r - T2r;\n                out[outOff + 5] = 0;\n                out[outOff + 6] = T1r;\n                out[outOff + 7] = T3r;\n              }\n            }\n            class NP2FFT {\n              /**\n               * Constructs a new NP2FFT object.\n               * @param {number} fft_length The length of the FFT\n               */\n              constructor(fft_length) {\n                const a = 2 * (fft_length - 1);\n                const b = 2 * (2 * fft_length - 1);\n                const nextP2 = 2 ** Math.ceil(Math.log2(b));\n                this.bufferSize = nextP2;\n                this._a = a;\n                const chirp = new Float64Array(b);\n                const ichirp = new Float64Array(nextP2);\n                this._chirpBuffer = new Float64Array(nextP2);\n                this._buffer1 = new Float64Array(nextP2);\n                this._buffer2 = new Float64Array(nextP2);\n                this._outBuffer1 = new Float64Array(nextP2);\n                this._outBuffer2 = new Float64Array(nextP2);\n                const theta = -2 * Math.PI / fft_length;\n                const baseR = Math.cos(theta);\n                const baseI = Math.sin(theta);\n                for (let i = 0; i < b >> 1; ++i) {\n                  const e = (i + 1 - fft_length) ** 2 / 2;\n                  const result_mod = Math.sqrt(baseR ** 2 + baseI ** 2) ** e;\n                  const result_arg = e * Math.atan2(baseI, baseR);\n                  const i2 = 2 * i;\n                  chirp[i2] = result_mod * Math.cos(result_arg);\n                  chirp[i2 + 1] = result_mod * Math.sin(result_arg);\n                  ichirp[i2] = chirp[i2];\n                  ichirp[i2 + 1] = -chirp[i2 + 1];\n                }\n                this._slicedChirpBuffer = chirp.subarray(a, b);\n                this._f = new P2FFT(nextP2 >> 1);\n                this._f.transform(this._chirpBuffer, ichirp);\n              }\n              _transform(output, input, real) {\n                const ib1 = this._buffer1;\n                const ib2 = this._buffer2;\n                const ob2 = this._outBuffer1;\n                const ob3 = this._outBuffer2;\n                const cb = this._chirpBuffer;\n                const sb = this._slicedChirpBuffer;\n                const a = this._a;\n                if (real) {\n                  for (let j = 0; j < sb.length; j += 2) {\n                    const j2 = j + 1;\n                    const j3 = j >> 1;\n                    const a_real = input[j3];\n                    ib1[j] = a_real * sb[j];\n                    ib1[j2] = a_real * sb[j2];\n                  }\n                } else {\n                  for (let j = 0; j < sb.length; j += 2) {\n                    const j2 = j + 1;\n                    ib1[j] = input[j] * sb[j] - input[j2] * sb[j2];\n                    ib1[j2] = input[j] * sb[j2] + input[j2] * sb[j];\n                  }\n                }\n                this._f.transform(ob2, ib1);\n                for (let j = 0; j < cb.length; j += 2) {\n                  const j2 = j + 1;\n                  ib2[j] = ob2[j] * cb[j] - ob2[j2] * cb[j2];\n                  ib2[j2] = ob2[j] * cb[j2] + ob2[j2] * cb[j];\n                }\n                this._f.inverseTransform(ob3, ib2);\n                for (let j = 0; j < ob3.length; j += 2) {\n                  const a_real = ob3[j + a];\n                  const a_imag = ob3[j + a + 1];\n                  const b_real = sb[j];\n                  const b_imag = sb[j + 1];\n                  output[j] = a_real * b_real - a_imag * b_imag;\n                  output[j + 1] = a_real * b_imag + a_imag * b_real;\n                }\n              }\n              transform(output, input) {\n                this._transform(output, input, false);\n              }\n              realTransform(output, input) {\n                this._transform(output, input, true);\n              }\n            }\n            class FFT {\n              constructor(fft_length) {\n                this.fft_length = fft_length;\n                this.isPowerOfTwo = isPowerOfTwo(fft_length);\n                if (this.isPowerOfTwo) {\n                  this.fft = new P2FFT(fft_length);\n                  this.outputBufferSize = 2 * fft_length;\n                } else {\n                  this.fft = new NP2FFT(fft_length);\n                  this.outputBufferSize = this.fft.bufferSize;\n                }\n              }\n              realTransform(out, input) {\n                this.fft.realTransform(out, input);\n              }\n              transform(out, input) {\n                this.fft.transform(out, input);\n              }\n            }\n            function medianFilter(data, windowSize) {\n              if (windowSize % 2 === 0 || windowSize <= 0) {\n                throw new Error(\"Window size must be a positive odd number\");\n              }\n              const outputArray = new data.constructor(data.length);\n              const buffer = new data.constructor(windowSize);\n              const halfWindowSize = Math.floor(windowSize / 2);\n              for (let i = 0; i < data.length; ++i) {\n                let valuesIndex = 0;\n                for (let j = -halfWindowSize; j <= halfWindowSize; ++j) {\n                  let index = i + j;\n                  if (index < 0) {\n                    index = Math.abs(index);\n                  } else if (index >= data.length) {\n                    index = 2 * (data.length - 1) - index;\n                  }\n                  buffer[valuesIndex++] = data[index];\n                }\n                buffer.sort();\n                outputArray[i] = buffer[halfWindowSize];\n              }\n              return outputArray;\n            }\n            function round(num, decimals) {\n              const pow = Math.pow(10, decimals);\n              return Math.round(num * pow) / pow;\n            }\n            function bankers_round(x) {\n              const r = Math.round(x);\n              const br2 = Math.abs(x) % 1 === 0.5 ? r % 2 === 0 ? r : r - 1 : r;\n              return br2;\n            }\n            function dynamic_time_warping(matrix) {\n              const output_length = matrix.length;\n              const input_length = matrix[0].length;\n              const outputShape = [output_length + 1, input_length + 1];\n              const cost = Array.from(\n                { length: outputShape[0] },\n                () => Array(outputShape[1]).fill(Infinity)\n              );\n              cost[0][0] = 0;\n              const trace = Array.from(\n                { length: outputShape[0] },\n                () => Array(outputShape[1]).fill(-1)\n              );\n              for (let j2 = 1; j2 < outputShape[1]; ++j2) {\n                for (let i2 = 1; i2 < outputShape[0]; ++i2) {\n                  const c0 = cost[i2 - 1][j2 - 1];\n                  const c1 = cost[i2 - 1][j2];\n                  const c2 = cost[i2][j2 - 1];\n                  let c, t;\n                  if (c0 < c1 && c0 < c2) {\n                    c = c0;\n                    t = 0;\n                  } else if (c1 < c0 && c1 < c2) {\n                    c = c1;\n                    t = 1;\n                  } else {\n                    c = c2;\n                    t = 2;\n                  }\n                  cost[i2][j2] = matrix[i2 - 1][j2 - 1] + c;\n                  trace[i2][j2] = t;\n                }\n              }\n              for (let i2 = 0; i2 < outputShape[1]; ++i2) {\n                trace[0][i2] = 2;\n              }\n              for (let i2 = 0; i2 < outputShape[0]; ++i2) {\n                trace[i2][0] = 1;\n              }\n              let i = output_length;\n              let j = input_length;\n              let text_indices = [];\n              let time_indices = [];\n              while (i > 0 || j > 0) {\n                text_indices.push(i - 1);\n                time_indices.push(j - 1);\n                switch (trace[i][j]) {\n                  case 0:\n                    --i;\n                    --j;\n                    break;\n                  case 1:\n                    --i;\n                    break;\n                  case 2:\n                    --j;\n                    break;\n                  default:\n                    throw new Error(\n                      `Internal error in dynamic time warping. Unexpected trace[${i}, ${j}]. Please file a bug report.`\n                    );\n                }\n              }\n              text_indices.reverse();\n              time_indices.reverse();\n              return [text_indices, time_indices];\n            }\n          }\n        ),\n        /***/\n        \"./src/utils/tensor.js\": (\n          /*!*****************************!*\\\n            !*** ./src/utils/tensor.js ***!\n            \\*****************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              DataTypeMap: () => (\n                /* binding */\n                DataTypeMap\n              ),\n              /* harmony export */\n              Tensor: () => (\n                /* binding */\n                Tensor3\n              ),\n              /* harmony export */\n              cat: () => (\n                /* binding */\n                cat\n              ),\n              /* harmony export */\n              full: () => (\n                /* binding */\n                full\n              ),\n              /* harmony export */\n              full_like: () => (\n                /* binding */\n                full_like\n              ),\n              /* harmony export */\n              interpolate: () => (\n                /* binding */\n                interpolate\n              ),\n              /* harmony export */\n              interpolate_4d: () => (\n                /* binding */\n                interpolate_4d\n              ),\n              /* harmony export */\n              layer_norm: () => (\n                /* binding */\n                layer_norm\n              ),\n              /* harmony export */\n              matmul: () => (\n                /* binding */\n                matmul\n              ),\n              /* harmony export */\n              mean: () => (\n                /* binding */\n                mean\n              ),\n              /* harmony export */\n              mean_pooling: () => (\n                /* binding */\n                mean_pooling\n              ),\n              /* harmony export */\n              ones: () => (\n                /* binding */\n                ones\n              ),\n              /* harmony export */\n              ones_like: () => (\n                /* binding */\n                ones_like\n              ),\n              /* harmony export */\n              permute: () => (\n                /* binding */\n                permute\n              ),\n              /* harmony export */\n              quantize_embeddings: () => (\n                /* binding */\n                quantize_embeddings\n              ),\n              /* harmony export */\n              rand: () => (\n                /* binding */\n                rand\n              ),\n              /* harmony export */\n              rfft: () => (\n                /* binding */\n                rfft\n              ),\n              /* harmony export */\n              slice: () => (\n                /* binding */\n                slice\n              ),\n              /* harmony export */\n              stack: () => (\n                /* binding */\n                stack\n              ),\n              /* harmony export */\n              std_mean: () => (\n                /* binding */\n                std_mean\n              ),\n              /* harmony export */\n              topk: () => (\n                /* binding */\n                topk\n              ),\n              /* harmony export */\n              zeros: () => (\n                /* binding */\n                zeros\n              ),\n              /* harmony export */\n              zeros_like: () => (\n                /* binding */\n                zeros_like\n              )\n              /* harmony export */\n            });\n            var _maths_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ./maths.js */\n              \"./src/utils/maths.js\"\n            );\n            var _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../backends/onnx.js */\n              \"./src/backends/onnx.js\"\n            );\n            var _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(\n              /*! ../ops/registry.js */\n              \"./src/ops/registry.js\"\n            );\n            const DataTypeMap = Object.freeze({\n              float32: Float32Array,\n              // @ts-ignore ts(2552) Limited availability of Float16Array across browsers:\n              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array\n              float16: typeof Float16Array !== \"undefined\" ? Float16Array : Uint16Array,\n              float64: Float64Array,\n              string: Array,\n              // string[]\n              int8: Int8Array,\n              uint8: Uint8Array,\n              int16: Int16Array,\n              uint16: Uint16Array,\n              int32: Int32Array,\n              uint32: Uint32Array,\n              int64: BigInt64Array,\n              uint64: BigUint64Array,\n              bool: Uint8Array,\n              uint4: Uint8Array,\n              int4: Int8Array\n            });\n            class Tensor3 {\n              /**\n               * Create a new Tensor or copy an existing Tensor.\n               * @param {[DataType, DataArray, number[]]|[ONNXTensor]} args\n               */\n              constructor(...args) {\n                __publicField(this, \"ort_tensor\");\n                if ((0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.isONNXTensor)(args[0])) {\n                  this.ort_tensor = /** @type {ONNXTensor} */\n                  args[0];\n                } else {\n                  this.ort_tensor = new _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(\n                    /** @type {DataType} */\n                    args[0],\n                    // @ts-expect-error ts(2769) Type 'number' is not assignable to type 'bigint'.\n                    /** @type {Exclude<import('./maths.js').AnyTypedArray, Uint8ClampedArray>} */\n                    args[1],\n                    args[2]\n                  );\n                }\n                return new Proxy(this, {\n                  get: (obj, key) => {\n                    if (typeof key === \"string\") {\n                      let index = Number(key);\n                      if (Number.isInteger(index)) {\n                        return obj._getitem(index);\n                      }\n                    }\n                    return obj[key];\n                  },\n                  set: (obj, key, value) => {\n                    return obj[key] = value;\n                  }\n                });\n              }\n              /** @type {number[]} Dimensions of the tensor. */\n              get dims() {\n                return this.ort_tensor.dims;\n              }\n              set dims(value) {\n                this.ort_tensor.dims = value;\n              }\n              /** @type {DataType} Type of the tensor. */\n              get type() {\n                return this.ort_tensor.type;\n              }\n              /** @type {DataArray} The data stored in the tensor. */\n              get data() {\n                return this.ort_tensor.data;\n              }\n              /** @type {number} The number of elements in the tensor. */\n              get size() {\n                return this.ort_tensor.size;\n              }\n              /** @type {string} The location of the tensor data. */\n              get location() {\n                return this.ort_tensor.location;\n              }\n              dispose() {\n                this.ort_tensor.dispose();\n              }\n              /**\n               * Returns an iterator object for iterating over the tensor data in row-major order.\n               * If the tensor has more than one dimension, the iterator will yield subarrays.\n               * @returns {Iterator} An iterator object for iterating over the tensor data in row-major order.\n               */\n              *[Symbol.iterator]() {\n                const [iterLength, ...iterDims] = this.dims;\n                if (iterDims.length > 0) {\n                  const iterSize = iterDims.reduce((a, b) => a * b);\n                  for (let i = 0; i < iterLength; ++i) {\n                    yield this._subarray(i, iterSize, iterDims);\n                  }\n                } else {\n                  yield* this.data;\n                }\n              }\n              /**\n               * Index into a Tensor object.\n               * @param {number} index The index to access.\n               * @returns {Tensor} The data at the specified index.\n               */\n              _getitem(index) {\n                const [iterLength, ...iterDims] = this.dims;\n                index = safeIndex(index, iterLength);\n                if (iterDims.length > 0) {\n                  const iterSize = iterDims.reduce((a, b) => a * b);\n                  return this._subarray(index, iterSize, iterDims);\n                } else {\n                  return new Tensor3(this.type, [this.data[index]], iterDims);\n                }\n              }\n              /**\n               * @param {number|bigint} item The item to search for in the tensor\n               * @returns {number} The index of the first occurrence of item in the tensor data.\n               */\n              indexOf(item) {\n                const this_data = this.data;\n                for (let index = 0; index < this_data.length; ++index) {\n                  if (this_data[index] == item) {\n                    return index;\n                  }\n                }\n                return -1;\n              }\n              /**\n               * @param {number} index\n               * @param {number} iterSize\n               * @param {any} iterDims\n               * @returns {Tensor}\n               */\n              _subarray(index, iterSize, iterDims) {\n                const o1 = index * iterSize;\n                const o2 = (index + 1) * iterSize;\n                const data = \"subarray\" in this.data ? this.data.subarray(o1, o2) : this.data.slice(o1, o2);\n                return new Tensor3(this.type, data, iterDims);\n              }\n              /**\n               * Returns the value of this tensor as a standard JavaScript Number. This only works\n               * for tensors with one element. For other cases, see `Tensor.tolist()`.\n               * @returns {number|bigint} The value of this tensor as a standard JavaScript Number.\n               * @throws {Error} If the tensor has more than one element.\n               */\n              item() {\n                const this_data = this.data;\n                if (this_data.length !== 1) {\n                  throw new Error(`a Tensor with ${this_data.length} elements cannot be converted to Scalar`);\n                }\n                return this_data[0];\n              }\n              /**\n               * Convert tensor data to a n-dimensional JS list\n               * @returns {Array}\n               */\n              tolist() {\n                return reshape(this.data, this.dims);\n              }\n              /**\n               * Return a new Tensor with the sigmoid function applied to each element.\n               * @returns {Tensor} The tensor with the sigmoid function applied.\n               */\n              sigmoid() {\n                return this.clone().sigmoid_();\n              }\n              /**\n               * Applies the sigmoid function to the tensor in place.\n               * @returns {Tensor} Returns `this`.\n               */\n              sigmoid_() {\n                const this_data = this.data;\n                for (let i = 0; i < this_data.length; ++i) {\n                  this_data[i] = 1 / (1 + Math.exp(-this_data[i]));\n                }\n                return this;\n              }\n              /**\n               * Return a new Tensor with a callback function applied to each element.\n               * @param {Function} callback - The function to apply to each element. It should take three arguments:\n               *                              the current element, its index, and the tensor's data array.\n               * @returns {Tensor} A new Tensor with the callback function applied to each element.\n               */\n              map(callback) {\n                return this.clone().map_(callback);\n              }\n              /**\n               * Apply a callback function to each element of the tensor in place.\n               * @param {Function} callback - The function to apply to each element. It should take three arguments:\n               *                              the current element, its index, and the tensor's data array.\n               * @returns {Tensor} Returns `this`.\n               */\n              map_(callback) {\n                const this_data = this.data;\n                for (let i = 0; i < this_data.length; ++i) {\n                  this_data[i] = callback(this_data[i], i, this_data);\n                }\n                return this;\n              }\n              /**\n               * Return a new Tensor with every element multiplied by a constant.\n               * @param {number} val The value to multiply by.\n               * @returns {Tensor} The new tensor.\n               */\n              mul(val) {\n                return this.clone().mul_(val);\n              }\n              /**\n               * Multiply the tensor by a constant in place.\n               * @param {number} val The value to multiply by.\n               * @returns {Tensor} Returns `this`.\n               */\n              mul_(val) {\n                const this_data = this.data;\n                for (let i = 0; i < this_data.length; ++i) {\n                  this_data[i] *= val;\n                }\n                return this;\n              }\n              /**\n               * Return a new Tensor with every element divided by a constant.\n               * @param {number} val The value to divide by.\n               * @returns {Tensor} The new tensor.\n               */\n              div(val) {\n                return this.clone().div_(val);\n              }\n              /**\n               * Divide the tensor by a constant in place.\n               * @param {number} val The value to divide by.\n               * @returns {Tensor} Returns `this`.\n               */\n              div_(val) {\n                const this_data = this.data;\n                for (let i = 0; i < this_data.length; ++i) {\n                  this_data[i] /= val;\n                }\n                return this;\n              }\n              /**\n               * Return a new Tensor with every element added by a constant.\n               * @param {number} val The value to add by.\n               * @returns {Tensor} The new tensor.\n               */\n              add(val) {\n                return this.clone().add_(val);\n              }\n              /**\n               * Add the tensor by a constant in place.\n               * @param {number} val The value to add by.\n               * @returns {Tensor} Returns `this`.\n               */\n              add_(val) {\n                const this_data = this.data;\n                for (let i = 0; i < this_data.length; ++i) {\n                  this_data[i] += val;\n                }\n                return this;\n              }\n              /**\n               * Return a new Tensor with every element subtracted by a constant.\n               * @param {number} val The value to subtract by.\n               * @returns {Tensor} The new tensor.\n               */\n              sub(val) {\n                return this.clone().sub_(val);\n              }\n              /**\n               * Subtract the tensor by a constant in place.\n               * @param {number} val The value to subtract by.\n               * @returns {Tensor} Returns `this`.\n               */\n              sub_(val) {\n                const this_data = this.data;\n                for (let i = 0; i < this_data.length; ++i) {\n                  this_data[i] -= val;\n                }\n                return this;\n              }\n              /**\n               * Creates a deep copy of the current Tensor.\n               * @returns {Tensor} A new Tensor with the same type, data, and dimensions as the original.\n               */\n              clone() {\n                return new Tensor3(this.type, this.data.slice(), this.dims.slice());\n              }\n              /**\n               * Performs a slice operation on the Tensor along specified dimensions.\n               *\n               * Consider a Tensor that has a dimension of [4, 7]:\n               * ```\n               * [ 1,  2,  3,  4,  5,  6,  7]\n               * [ 8,  9, 10, 11, 12, 13, 14]\n               * [15, 16, 17, 18, 19, 20, 21]\n               * [22, 23, 24, 25, 26, 27, 28]\n               * ```\n               * We can slice against the two dims of row and column, for instance in this\n               * case we can start at the second element, and return to the second last,\n               * like this:\n               * ```\n               * tensor.slice([1, -1], [1, -1]);\n               * ```\n               * which would return:\n               * ```\n               * [  9, 10, 11, 12, 13 ]\n               * [ 16, 17, 18, 19, 20 ]\n               * ```\n               *\n               * @param {...(number|number[]|null)} slices The slice specifications for each dimension.\n               * - If a number is given, then a single element is selected.\n               * - If an array of two numbers is given, then a range of elements [start, end (exclusive)] is selected.\n               * - If null is given, then the entire dimension is selected.\n               * @returns {Tensor} A new Tensor containing the selected elements.\n               * @throws {Error} If the slice input is invalid.\n               */\n              slice(...slices) {\n                const newTensorDims = [];\n                const newOffsets = [];\n                for (let sliceIndex = 0; sliceIndex < this.dims.length; ++sliceIndex) {\n                  let slice2 = slices[sliceIndex];\n                  if (slice2 === null || slice2 === void 0) {\n                    newOffsets.push([0, this.dims[sliceIndex]]);\n                    newTensorDims.push(this.dims[sliceIndex]);\n                  } else if (typeof slice2 === \"number\") {\n                    slice2 = safeIndex(slice2, this.dims[sliceIndex], sliceIndex);\n                    newOffsets.push([slice2, slice2 + 1]);\n                  } else if (Array.isArray(slice2) && slice2.length === 2) {\n                    let [start, end] = slice2;\n                    start = start === null ? 0 : safeIndex(start, this.dims[sliceIndex], sliceIndex, false);\n                    end = end === null ? this.dims[sliceIndex] : safeIndex(end, this.dims[sliceIndex], sliceIndex, false);\n                    if (start > end) {\n                      throw new Error(`Invalid slice: ${slice2}`);\n                    }\n                    const offsets = [\n                      Math.max(start, 0),\n                      Math.min(end, this.dims[sliceIndex])\n                    ];\n                    newOffsets.push(offsets);\n                    newTensorDims.push(offsets[1] - offsets[0]);\n                  } else {\n                    throw new Error(`Invalid slice: ${slice2}`);\n                  }\n                }\n                const newDims = newOffsets.map(([start, end]) => end - start);\n                const newBufferSize = newDims.reduce((a, b) => a * b);\n                const this_data = this.data;\n                const data = new this_data.constructor(newBufferSize);\n                const stride = this.stride();\n                for (let i = 0; i < newBufferSize; ++i) {\n                  let originalIndex = 0;\n                  for (let j = newDims.length - 1, num = i; j >= 0; --j) {\n                    const size = newDims[j];\n                    originalIndex += (num % size + newOffsets[j][0]) * stride[j];\n                    num = Math.floor(num / size);\n                  }\n                  data[i] = this_data[originalIndex];\n                }\n                return new Tensor3(this.type, data, newTensorDims);\n              }\n              /**\n               * Return a permuted version of this Tensor, according to the provided dimensions.\n               * @param  {...number} dims Dimensions to permute.\n               * @returns {Tensor} The permuted tensor.\n               */\n              permute(...dims) {\n                return permute(this, dims);\n              }\n              // TODO: implement transpose. For now (backwards compatibility), it's just an alias for permute()\n              transpose(...dims) {\n                return this.permute(...dims);\n              }\n              /**\n               * Returns the sum of each row of the input tensor in the given dimension dim.\n               *\n               * @param {number} [dim=null] The dimension or dimensions to reduce. If `null`, all dimensions are reduced.\n               * @param {boolean} keepdim Whether the output tensor has `dim` retained or not.\n               * @returns The summed tensor\n               */\n              sum(dim = null, keepdim = false) {\n                return this.norm(1, dim, keepdim);\n              }\n              /**\n               * Returns the matrix norm or vector norm of a given tensor.\n               * @param {number|string} [p='fro'] The order of norm\n               * @param {number} [dim=null] Specifies which dimension of the tensor to calculate the norm across.\n               * If dim is None, the norm will be calculated across all dimensions of input.\n               * @param {boolean} [keepdim=false] Whether the output tensors have dim retained or not.\n               * @returns {Tensor} The norm of the tensor.\n               */\n              norm(p = \"fro\", dim = null, keepdim = false) {\n                if (p === \"fro\") {\n                  p = 2;\n                } else if (typeof p === \"string\") {\n                  throw Error(`Unsupported norm: ${p}`);\n                }\n                const this_data = this.data;\n                const fn = (a, b) => a + b ** p;\n                if (dim === null) {\n                  const val = this_data.reduce(fn, 0) ** (1 / p);\n                  return new Tensor3(this.type, [val], []);\n                }\n                const [type, result, resultDims] = reduce_helper(fn, this, dim, keepdim);\n                if (p !== 1) {\n                  for (let i = 0; i < result.length; ++i) {\n                    result[i] = result[i] ** (1 / p);\n                  }\n                }\n                return new Tensor3(type, result, resultDims);\n              }\n              /**\n               * Performs `L_p` normalization of inputs over specified dimension. Operates in place.\n               * @param {number} [p=2] The exponent value in the norm formulation\n               * @param {number} [dim=1] The dimension to reduce\n               * @returns {Tensor} `this` for operation chaining.\n               */\n              normalize_(p = 2, dim = 1) {\n                dim = safeIndex(dim, this.dims.length);\n                const norm = this.norm(p, dim, true);\n                const this_data = this.data;\n                const norm_data = norm.data;\n                for (let i = 0; i < this_data.length; ++i) {\n                  let resultIndex = 0;\n                  for (let j = this.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {\n                    const size = this.dims[j];\n                    if (j !== dim) {\n                      const index = num % size;\n                      resultIndex += index * resultMultiplier;\n                      resultMultiplier *= this.dims[j];\n                    }\n                    num = Math.floor(num / size);\n                  }\n                  this_data[i] /= norm_data[resultIndex];\n                }\n                return this;\n              }\n              /**\n               * Performs `L_p` normalization of inputs over specified dimension.\n               * @param {number} [p=2] The exponent value in the norm formulation\n               * @param {number} [dim=1] The dimension to reduce\n               * @returns {Tensor} The normalized tensor.\n               */\n              normalize(p = 2, dim = 1) {\n                return this.clone().normalize_(p, dim);\n              }\n              /**\n               * Compute and return the stride of this tensor.\n               * Stride is the jump necessary to go from one element to the next one in the specified dimension dim.\n               * @returns {number[]} The stride of this tensor.\n               */\n              stride() {\n                return dimsToStride(this.dims);\n              }\n              /**\n               * Returns a tensor with all specified dimensions of input of size 1 removed.\n               *\n               * NOTE: The returned tensor shares the storage with the input tensor, so changing the contents of one will change the contents of the other.\n               * If you would like a copy, use `tensor.clone()` before squeezing.\n               *\n               * @param {number|number[]} [dim=null] If given, the input will be squeezed only in the specified dimensions.\n               * @returns {Tensor} The squeezed tensor\n               */\n              squeeze(dim = null) {\n                return new Tensor3(\n                  this.type,\n                  this.data,\n                  calc_squeeze_dims(this.dims, dim)\n                );\n              }\n              /**\n               * In-place version of @see {@link Tensor.squeeze}\n               */\n              squeeze_(dim = null) {\n                this.dims = calc_squeeze_dims(this.dims, dim);\n                return this;\n              }\n              /**\n               * Returns a new tensor with a dimension of size one inserted at the specified position.\n               *\n               * NOTE: The returned tensor shares the same underlying data with this tensor.\n               *\n               * @param {number} dim The index at which to insert the singleton dimension\n               * @returns {Tensor} The unsqueezed tensor\n               */\n              unsqueeze(dim = null) {\n                return new Tensor3(\n                  this.type,\n                  this.data,\n                  calc_unsqueeze_dims(this.dims, dim)\n                );\n              }\n              /**\n               * In-place version of @see {@link Tensor.unsqueeze}\n               */\n              unsqueeze_(dim = null) {\n                this.dims = calc_unsqueeze_dims(this.dims, dim);\n                return this;\n              }\n              /**\n               * In-place version of @see {@link Tensor.flatten}\n               */\n              flatten_(start_dim = 0, end_dim = -1) {\n                end_dim = (end_dim + this.dims.length) % this.dims.length;\n                let dimsToKeepBefore = this.dims.slice(0, start_dim);\n                let dimsToFlatten = this.dims.slice(start_dim, end_dim + 1);\n                let dimsToKeepAfter = this.dims.slice(end_dim + 1);\n                this.dims = [...dimsToKeepBefore, dimsToFlatten.reduce((a, b) => a * b, 1), ...dimsToKeepAfter];\n                return this;\n              }\n              /**\n               * Flattens input by reshaping it into a one-dimensional tensor.\n               * If `start_dim` or `end_dim` are passed, only dimensions starting with `start_dim`\n               * and ending with `end_dim` are flattened. The order of elements in input is unchanged.\n               * @param {number} start_dim the first dim to flatten\n               * @param {number} end_dim the last dim to flatten\n               * @returns {Tensor} The flattened tensor.\n               */\n              flatten(start_dim = 0, end_dim = -1) {\n                return this.clone().flatten_(start_dim, end_dim);\n              }\n              /**\n               * Returns a new tensor with the same data as the `self` tensor but of a different `shape`.\n               * @param  {...number} dims the desired size\n               * @returns {Tensor} The tensor with the same data but different shape\n               */\n              view(...dims) {\n                let inferredIndex = -1;\n                for (let i = 0; i < dims.length; ++i) {\n                  if (dims[i] === -1) {\n                    if (inferredIndex !== -1) {\n                      throw new Error(\"Only one dimension can be inferred\");\n                    }\n                    inferredIndex = i;\n                  }\n                }\n                const this_data = this.data;\n                if (inferredIndex !== -1) {\n                  const productOther = dims.reduce((product, curr, index) => {\n                    return index !== inferredIndex ? product * curr : product;\n                  }, 1);\n                  dims[inferredIndex] = this_data.length / productOther;\n                }\n                return new Tensor3(this.type, this_data, dims);\n              }\n              neg_() {\n                const this_data = this.data;\n                for (let i = 0; i < this_data.length; ++i) {\n                  this_data[i] = -this_data[i];\n                }\n                return this;\n              }\n              neg() {\n                return this.clone().neg_();\n              }\n              /**\n               * Computes input > val element-wise.\n               * @param {number} val The value to compare with.\n               * @returns {Tensor} A boolean tensor that is `true` where input is greater than other and `false` elsewhere.\n               */\n              gt(val) {\n                const mask = new Uint8Array(this.data.length);\n                const this_data = this.data;\n                for (let i = 0; i < this_data.length; ++i) {\n                  mask[i] = this_data[i] > val ? 1 : 0;\n                }\n                return new Tensor3(\"bool\", mask, this.dims);\n              }\n              /**\n               * Computes input < val element-wise.\n               * @param {number} val The value to compare with.\n               * @returns {Tensor} A boolean tensor that is `true` where input is less than other and `false` elsewhere.\n               */\n              lt(val) {\n                const mask = new Uint8Array(this.data.length);\n                const this_data = this.data;\n                for (let i = 0; i < this_data.length; ++i) {\n                  mask[i] = this_data[i] < val ? 1 : 0;\n                }\n                return new Tensor3(\"bool\", mask, this.dims);\n              }\n              /**\n               * In-place version of @see {@link Tensor.clamp}\n               */\n              clamp_(min, max) {\n                const this_data = this.data;\n                for (let i = 0; i < this_data.length; ++i) {\n                  this_data[i] = Math.min(Math.max(this_data[i], min), max);\n                }\n                return this;\n              }\n              /**\n               * Clamps all elements in input into the range [ min, max ]\n               * @param {number} min lower-bound of the range to be clamped to\n               * @param {number} max upper-bound of the range to be clamped to\n               * @returns {Tensor} the output tensor.\n               */\n              clamp(min, max) {\n                return this.clone().clamp_(min, max);\n              }\n              /**\n               * In-place version of @see {@link Tensor.round}\n               */\n              round_() {\n                const this_data = this.data;\n                for (let i = 0; i < this_data.length; ++i) {\n                  this_data[i] = Math.round(this_data[i]);\n                }\n                return this;\n              }\n              /**\n               * Rounds elements of input to the nearest integer.\n               * @returns {Tensor} the output tensor.\n               */\n              round() {\n                return this.clone().round_();\n              }\n              mean(dim = null, keepdim = false) {\n                return mean(this, dim, keepdim);\n              }\n              min(dim = null, keepdim = false) {\n                if (dim === null) {\n                  const val = (0, _maths_js__WEBPACK_IMPORTED_MODULE_0__.min)(this.data)[0];\n                  return new Tensor3(this.type, [val], [\n                    /* scalar */\n                  ]);\n                }\n                const [type, result, resultDims] = reduce_helper((a, b) => Math.min(a, b), this, dim, keepdim, Infinity);\n                return new Tensor3(type, result, resultDims);\n              }\n              max(dim = null, keepdim = false) {\n                if (dim === null) {\n                  const val = (0, _maths_js__WEBPACK_IMPORTED_MODULE_0__.max)(this.data)[0];\n                  return new Tensor3(this.type, [val], [\n                    /* scalar */\n                  ]);\n                }\n                const [type, result, resultDims] = reduce_helper((a, b) => Math.max(a, b), this, dim, keepdim, -Infinity);\n                return new Tensor3(type, result, resultDims);\n              }\n              argmin(dim = null, keepdim = false) {\n                if (dim !== null) {\n                  throw new Error(\"`dim !== null` not yet implemented.\");\n                }\n                const index = (0, _maths_js__WEBPACK_IMPORTED_MODULE_0__.min)(this.data)[1];\n                return new Tensor3(\"int64\", [BigInt(index)], []);\n              }\n              argmax(dim = null, keepdim = false) {\n                if (dim !== null) {\n                  throw new Error(\"`dim !== null` not yet implemented.\");\n                }\n                const index = (0, _maths_js__WEBPACK_IMPORTED_MODULE_0__.max)(this.data)[1];\n                return new Tensor3(\"int64\", [BigInt(index)], []);\n              }\n              /**\n               * Performs Tensor dtype conversion.\n               * @param {DataType} type The desired data type.\n               * @returns {Tensor} The converted tensor.\n               */\n              to(type) {\n                if (this.type === type) return this;\n                if (!DataTypeMap.hasOwnProperty(type)) {\n                  throw new Error(`Unsupported type: ${type}`);\n                }\n                let map_fn;\n                const is_source_bigint = [\"int64\", \"uint64\"].includes(this.type);\n                const is_dest_bigint = [\"int64\", \"uint64\"].includes(type);\n                if (is_source_bigint && !is_dest_bigint) {\n                  map_fn = Number;\n                } else if (!is_source_bigint && is_dest_bigint) {\n                  map_fn = BigInt;\n                }\n                return new Tensor3(type, DataTypeMap[type].from(this.data, map_fn), this.dims);\n              }\n            }\n            function reshape(data, dimensions) {\n              const totalElements = data.length;\n              const dimensionSize = dimensions.reduce((a, b) => a * b);\n              if (totalElements !== dimensionSize) {\n                throw Error(`cannot reshape array of size ${totalElements} into shape (${dimensions})`);\n              }\n              let reshapedArray = data;\n              for (let i = dimensions.length - 1; i >= 0; i--) {\n                reshapedArray = reshapedArray.reduce((acc, val) => {\n                  let lastArray = acc[acc.length - 1];\n                  if (lastArray.length < dimensions[i]) {\n                    lastArray.push(val);\n                  } else {\n                    acc.push([val]);\n                  }\n                  return acc;\n                }, [[]]);\n              }\n              return reshapedArray[0];\n            }\n            function permute(tensor, axes) {\n              const [permutedData, shape] = (0, _maths_js__WEBPACK_IMPORTED_MODULE_0__.permute_data)(tensor.data, tensor.dims, axes);\n              return new Tensor3(tensor.type, permutedData, shape);\n            }\n            function interpolate(input, [out_height, out_width], mode = \"bilinear\", align_corners = false) {\n              const in_channels = input.dims.at(-3) ?? 1;\n              const in_height = input.dims.at(-2);\n              const in_width = input.dims.at(-1);\n              let output = (0, _maths_js__WEBPACK_IMPORTED_MODULE_0__.interpolate_data)(\n                /** @type {import('./maths.js').TypedArray}*/\n                input.data,\n                [in_channels, in_height, in_width],\n                [out_height, out_width],\n                mode,\n                align_corners\n              );\n              return new Tensor3(input.type, output, [in_channels, out_height, out_width]);\n            }\n            async function interpolate_4d(input, {\n              size = null,\n              mode = \"bilinear\"\n            } = {}) {\n              if (input.dims.length !== 4) {\n                throw new Error(\"`interpolate_4d` currently only supports 4D input.\");\n              }\n              if (!size) {\n                throw new Error(\"`interpolate_4d` requires a `size` argument.\");\n              }\n              let targetDims;\n              if (size.length === 2) {\n                targetDims = [...input.dims.slice(0, 2), ...size];\n              } else if (size.length === 3) {\n                targetDims = [input.dims[0], ...size];\n              } else if (size.length === 4) {\n                targetDims = size;\n              } else {\n                throw new Error(\"`size` must be of length 2, 3, or 4.\");\n              }\n              let op;\n              if (mode === \"nearest\") {\n                op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.nearest_interpolate_4d;\n              } else if (mode === \"bilinear\") {\n                op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.bilinear_interpolate_4d;\n              } else if (mode === \"bicubic\") {\n                op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.bicubic_interpolate_4d;\n              } else {\n                throw new Error(`Unsupported mode: ${mode}`);\n              }\n              const sizeTensor = new Tensor3(\"int64\", new BigInt64Array(targetDims.map(BigInt)), [targetDims.length]);\n              return await op({ x: input, s: sizeTensor });\n            }\n            async function matmul(a, b) {\n              const op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.matmul;\n              return await op({ a, b });\n            }\n            async function rfft(x, a) {\n              const op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.rfft;\n              return await op({ x, a });\n            }\n            async function topk(x, k2) {\n              const op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.top_k;\n              if (k2 == null) {\n                k2 = x.dims.at(-1);\n              } else {\n                k2 = Math.min(k2, x.dims.at(-1));\n              }\n              return await op({\n                x,\n                k: new Tensor3(\n                  \"int64\",\n                  [BigInt(k2)],\n                  [1]\n                )\n              });\n            }\n            const arrayToIndexTensor = (array) => new Tensor3(\"int64\", array, [array.length]);\n            async function slice(data, starts, ends, axes, steps) {\n              const op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.slice;\n              return await op({\n                x: data,\n                s: arrayToIndexTensor(starts),\n                e: arrayToIndexTensor(ends),\n                a: arrayToIndexTensor(axes),\n                t: arrayToIndexTensor(steps ?? new Array(axes.length).fill(1))\n              });\n            }\n            function mean_pooling(last_hidden_state, attention_mask) {\n              const lastHiddenStateData = last_hidden_state.data;\n              const attentionMaskData = attention_mask.data;\n              const shape = [last_hidden_state.dims[0], last_hidden_state.dims[2]];\n              const returnedData = new lastHiddenStateData.constructor(shape[0] * shape[1]);\n              const [batchSize, seqLength, embedDim] = last_hidden_state.dims;\n              let outIndex = 0;\n              for (let i = 0; i < batchSize; ++i) {\n                const offset = i * embedDim * seqLength;\n                for (let k2 = 0; k2 < embedDim; ++k2) {\n                  let sum = 0;\n                  let count = 0;\n                  const attnMaskOffset = i * seqLength;\n                  const offset2 = offset + k2;\n                  for (let j = 0; j < seqLength; ++j) {\n                    const attn = Number(attentionMaskData[attnMaskOffset + j]);\n                    count += attn;\n                    sum += lastHiddenStateData[offset2 + j * embedDim] * attn;\n                  }\n                  const avg = sum / count;\n                  returnedData[outIndex++] = avg;\n                }\n              }\n              return new Tensor3(\n                last_hidden_state.type,\n                returnedData,\n                shape\n              );\n            }\n            function layer_norm(input, normalized_shape, {\n              eps = 1e-5\n            } = {}) {\n              if (input.dims.length !== 2) {\n                throw new Error(\"`layer_norm` currently only supports 2D input.\");\n              }\n              const [batchSize, featureDim] = input.dims;\n              if (normalized_shape.length !== 1 && normalized_shape[0] !== featureDim) {\n                throw new Error(\"`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.\");\n              }\n              const [std, mean2] = std_mean(input, 1, 0, true);\n              const stdData = (\n                /** @type {Float32Array} */\n                std.data\n              );\n              const meanData = (\n                /** @type {Float32Array} */\n                mean2.data\n              );\n              const inputData = (\n                /** @type {Float32Array} */\n                input.data\n              );\n              const returnedData = new inputData.constructor(inputData.length);\n              for (let i = 0; i < batchSize; ++i) {\n                const offset = i * featureDim;\n                for (let j = 0; j < featureDim; ++j) {\n                  const offset2 = offset + j;\n                  returnedData[offset2] = (inputData[offset2] - meanData[i]) / (stdData[i] + eps);\n                }\n              }\n              return new Tensor3(input.type, returnedData, input.dims);\n            }\n            function calc_squeeze_dims(dims, dim) {\n              dims = dims.slice();\n              if (dim === null) {\n                dims = dims.filter((d) => d !== 1);\n              } else if (typeof dim === \"number\") {\n                if (dims[dim] === 1) {\n                  dims.splice(dim, 1);\n                }\n              } else if (Array.isArray(dim)) {\n                dims = dims.filter((x, i) => {\n                  return x !== 1 || !dim.includes(i);\n                });\n              }\n              return dims;\n            }\n            function calc_unsqueeze_dims(dims, dim) {\n              dim = safeIndex(dim, dims.length + 1);\n              dims = dims.slice();\n              dims.splice(dim, 0, 1);\n              return dims;\n            }\n            function safeIndex(index, size, dimension = null, boundsCheck = true) {\n              if (index < -size || index >= size) {\n                if (boundsCheck) {\n                  throw new Error(`IndexError: index ${index} is out of bounds for dimension${dimension === null ? \"\" : \" \" + dimension} with size ${size}`);\n                } else {\n                  return index < -size ? 0 : size;\n                }\n              }\n              if (index < 0) {\n                index = (index % size + size) % size;\n              }\n              return index;\n            }\n            function cat(tensors, dim = 0) {\n              dim = safeIndex(dim, tensors[0].dims.length);\n              const resultDims = tensors[0].dims.slice();\n              resultDims[dim] = tensors.reduce((a, b) => a + b.dims[dim], 0);\n              const resultSize = resultDims.reduce((a, b) => a * b, 1);\n              const result = new tensors[0].data.constructor(resultSize);\n              const resultType = tensors[0].type;\n              if (dim === 0) {\n                let offset = 0;\n                for (const tensor of tensors) {\n                  const tensorData = tensor.data;\n                  result.set(tensorData, offset);\n                  offset += tensorData.length;\n                }\n              } else {\n                let currentDim = 0;\n                for (let t = 0; t < tensors.length; ++t) {\n                  const { data, dims } = tensors[t];\n                  for (let i = 0; i < data.length; ++i) {\n                    let resultIndex = 0;\n                    for (let j = dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {\n                      const size = dims[j];\n                      let index = num % size;\n                      if (j === dim) {\n                        index += currentDim;\n                      }\n                      resultIndex += index * resultMultiplier;\n                      resultMultiplier *= resultDims[j];\n                      num = Math.floor(num / size);\n                    }\n                    result[resultIndex] = data[i];\n                  }\n                  currentDim += dims[dim];\n                }\n              }\n              return new Tensor3(resultType, result, resultDims);\n            }\n            function stack(tensors, dim = 0) {\n              return cat(tensors.map((t) => t.unsqueeze(dim)), dim);\n            }\n            function reduce_helper(callbackfn, input, dim = null, keepdim = false, initialValue = null) {\n              const inputData = input.data;\n              const inputDims = input.dims;\n              dim = safeIndex(dim, inputDims.length);\n              const resultDims = inputDims.slice();\n              resultDims[dim] = 1;\n              const result = new inputData.constructor(inputData.length / inputDims[dim]);\n              if (initialValue !== null) {\n                result.fill(initialValue);\n              }\n              for (let i = 0; i < inputData.length; ++i) {\n                let resultIndex = 0;\n                for (let j = inputDims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {\n                  const size = inputDims[j];\n                  if (j !== dim) {\n                    const index = num % size;\n                    resultIndex += index * resultMultiplier;\n                    resultMultiplier *= resultDims[j];\n                  }\n                  num = Math.floor(num / size);\n                }\n                result[resultIndex] = callbackfn(result[resultIndex], inputData[i], i, resultIndex);\n              }\n              if (!keepdim) resultDims.splice(dim, 1);\n              return [input.type, result, resultDims];\n            }\n            function std_mean(input, dim = null, correction = 1, keepdim = false) {\n              const inputData = (\n                /** @type {Float32Array} */\n                input.data\n              );\n              const inputDims = input.dims;\n              if (dim === null) {\n                const sum = inputData.reduce((a, b) => a + b, 0);\n                const mean2 = sum / inputData.length;\n                const std = Math.sqrt(inputData.reduce((a, b) => a + (b - mean2) ** 2, 0) / (inputData.length - correction));\n                const meanTensor2 = new Tensor3(input.type, [mean2], [\n                  /* scalar */\n                ]);\n                const stdTensor2 = new Tensor3(input.type, [std], [\n                  /* scalar */\n                ]);\n                return [stdTensor2, meanTensor2];\n              }\n              dim = safeIndex(dim, inputDims.length);\n              const meanTensor = mean(input, dim, keepdim);\n              const meanTensorData = meanTensor.data;\n              const [type, result, resultDims] = reduce_helper((a, b, i, j) => a + (b - meanTensorData[j]) ** 2, input, dim, keepdim);\n              for (let i = 0; i < result.length; ++i) {\n                result[i] = Math.sqrt(result[i] / (inputDims[dim] - correction));\n              }\n              const stdTensor = new Tensor3(type, result, resultDims);\n              return [stdTensor, meanTensor];\n            }\n            function mean(input, dim = null, keepdim = false) {\n              const inputDims = input.dims;\n              const inputData = (\n                /** @type {Float32Array} */\n                input.data\n              );\n              if (dim === null) {\n                const val = inputData.reduce((a, b) => a + b, 0);\n                return new Tensor3(input.type, [val / inputData.length], [\n                  /* scalar */\n                ]);\n              }\n              dim = safeIndex(dim, inputDims.length);\n              const [type, result, resultDims] = reduce_helper((a, b) => a + b, input, dim, keepdim);\n              if (inputDims[dim] !== 1) {\n                for (let i = 0; i < result.length; ++i) {\n                  result[i] /= inputDims[dim];\n                }\n              }\n              return new Tensor3(type, result, resultDims);\n            }\n            function dimsToStride(dims) {\n              const stride = new Array(dims.length);\n              for (let i = dims.length - 1, s2 = 1; i >= 0; --i) {\n                stride[i] = s2;\n                s2 *= dims[i];\n              }\n              return stride;\n            }\n            function fullHelper(size, fill_value, dtype, cls) {\n              const numElements = size.reduce((a, b) => a * b, 1);\n              return new Tensor3(\n                dtype,\n                new cls(numElements).fill(fill_value),\n                size\n              );\n            }\n            function full(size, fill_value) {\n              let dtype;\n              let typedArrayCls;\n              if (typeof fill_value === \"number\") {\n                dtype = \"float32\";\n                typedArrayCls = Float32Array;\n              } else if (typeof fill_value === \"bigint\") {\n                dtype = \"int64\";\n                typedArrayCls = BigInt64Array;\n              } else if (typeof fill_value === \"boolean\") {\n                dtype = \"bool\";\n                typedArrayCls = Uint8Array;\n              } else {\n                throw new Error(`Unsupported data type: ${typeof fill_value}`);\n              }\n              return fullHelper(size, fill_value, dtype, typedArrayCls);\n            }\n            function full_like(tensor, fill_value) {\n              return full(tensor.dims, fill_value);\n            }\n            function ones(size) {\n              return fullHelper(size, 1n, \"int64\", BigInt64Array);\n            }\n            function ones_like(tensor) {\n              return ones(tensor.dims);\n            }\n            function zeros(size) {\n              return fullHelper(size, 0n, \"int64\", BigInt64Array);\n            }\n            function zeros_like(tensor) {\n              return zeros(tensor.dims);\n            }\n            function rand(size) {\n              const length = size.reduce((a, b) => a * b, 1);\n              return new Tensor3(\n                \"float32\",\n                Float32Array.from({ length }, () => Math.random()),\n                size\n              );\n            }\n            function quantize_embeddings(tensor, precision) {\n              if (tensor.dims.length !== 2) {\n                throw new Error(\"The tensor must have 2 dimensions\");\n              }\n              if (tensor.dims.at(-1) % 8 !== 0) {\n                throw new Error(\"The last dimension of the tensor must be a multiple of 8\");\n              }\n              if (![\"binary\", \"ubinary\"].includes(precision)) {\n                throw new Error(\"The precision must be either 'binary' or 'ubinary'\");\n              }\n              const signed = precision === \"binary\";\n              const dtype = signed ? \"int8\" : \"uint8\";\n              const cls = signed ? Int8Array : Uint8Array;\n              const inputData = tensor.data;\n              const outputData = new cls(inputData.length / 8);\n              for (let i = 0; i < inputData.length; ++i) {\n                const bit = inputData[i] > 0 ? 1 : 0;\n                const arrayIndex = Math.floor(i / 8);\n                const bitPosition = i % 8;\n                outputData[arrayIndex] |= bit << 7 - bitPosition;\n                if (signed && bitPosition === 0) {\n                  outputData[arrayIndex] -= 128;\n                }\n              }\n              ;\n              return new Tensor3(dtype, outputData, [tensor.dims[0], tensor.dims[1] / 8]);\n            }\n          }\n        ),\n        /***/\n        \"./src/utils/video.js\": (\n          /*!****************************!*\\\n            !*** ./src/utils/video.js ***!\n            \\****************************/\n          /***/\n          (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {\n            __webpack_require__2.r(__webpack_exports__2);\n            __webpack_require__2.d(__webpack_exports__2, {\n              /* harmony export */\n              RawVideo: () => (\n                /* binding */\n                RawVideo\n              ),\n              /* harmony export */\n              RawVideoFrame: () => (\n                /* binding */\n                RawVideoFrame\n              ),\n              /* harmony export */\n              load_video: () => (\n                /* binding */\n                load_video\n              )\n              /* harmony export */\n            });\n            var _image_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(\n              /*! ./image.js */\n              \"./src/utils/image.js\"\n            );\n            var _env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(\n              /*! ../env.js */\n              \"./src/env.js\"\n            );\n            class RawVideoFrame {\n              /**\n               * @param {RawImage} image\n               * @param {number} timestamp\n               */\n              constructor(image, timestamp) {\n                this.image = image;\n                this.timestamp = timestamp;\n              }\n            }\n            class RawVideo {\n              /**\n               * @param {RawVideoFrame[]|RawImage[]} frames\n               * @param {number} duration\n               */\n              constructor(frames, duration) {\n                if (frames.length > 0 && frames[0] instanceof _image_js__WEBPACK_IMPORTED_MODULE_0__.RawImage) {\n                  frames = frames.map((image, i) => new RawVideoFrame(image, (i + 1) / (frames.length + 1) * duration));\n                }\n                this.frames = /** @type {RawVideoFrame[]} */\n                frames;\n                this.duration = duration;\n              }\n              get width() {\n                return this.frames[0].image.width;\n              }\n              get height() {\n                return this.frames[0].image.height;\n              }\n              get fps() {\n                return this.frames.length / this.duration;\n              }\n            }\n            async function load_video(src, { num_frames = null, fps = null } = {}) {\n              if (!_env_js__WEBPACK_IMPORTED_MODULE_1__.apis.IS_BROWSER_ENV) {\n                throw new Error(\"`load_video` is currently only supported in browser environments.\");\n              }\n              if (num_frames == null && fps == null) {\n                throw new Error(\"Either num_frames or fps must be provided.\");\n              }\n              const frames = [];\n              const video = document.createElement(\"video\");\n              video.crossOrigin = \"anonymous\";\n              video.muted = true;\n              if (typeof src === \"string\") {\n                video.src = src;\n              } else if (src instanceof Blob) {\n                video.src = URL.createObjectURL(src);\n              } else if (src instanceof HTMLVideoElement) {\n                video.src = src.src;\n              } else {\n                throw new Error(\"Invalid URL or video element provided.\");\n              }\n              await new Promise((resolve) => video.onloadedmetadata = resolve);\n              if (video.seekable.start(0) === video.seekable.end(0)) {\n                const response = await fetch(video.src);\n                const blob = await response.blob();\n                video.src = URL.createObjectURL(blob);\n                await new Promise((resolve) => video.onloadedmetadata = resolve);\n              }\n              const duration = video.duration;\n              let count, step;\n              if (num_frames != null) {\n                count = num_frames;\n                step = num_frames === 1 ? 0 : duration / (num_frames - 1);\n              } else {\n                step = 1 / fps;\n                count = Math.floor(duration / step);\n              }\n              let sampleTimes = [];\n              for (let i = 0; i < count; ++i) {\n                sampleTimes.push(num_frames === 1 ? duration / 2 : i * step);\n              }\n              const canvas = document.createElement(\"canvas\");\n              canvas.width = video.videoWidth;\n              canvas.height = video.videoHeight;\n              const ctx = canvas.getContext(\"2d\", { willReadFrequently: true });\n              for (const t of sampleTimes) {\n                video.currentTime = t;\n                await new Promise((resolve) => {\n                  video.onseeked = resolve;\n                });\n                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n                const frameData = new _image_js__WEBPACK_IMPORTED_MODULE_0__.RawImage(imageData.data, canvas.width, canvas.height, 4);\n                const frame = new RawVideoFrame(frameData, t);\n                frames.push(frame);\n              }\n              video.remove();\n              return new RawVideo(frames, duration);\n            }\n          }\n        )\n        /******/\n      };\n      __webpack_module_cache__ = {};\n      (() => {\n        var getProto = Object.getPrototypeOf ? (obj) => Object.getPrototypeOf(obj) : (obj) => obj.__proto__;\n        var leafPrototypes;\n        __webpack_require__.t = function(value, mode) {\n          if (mode & 1) value = this(value);\n          if (mode & 8) return value;\n          if (typeof value === \"object\" && value) {\n            if (mode & 4 && value.__esModule) return value;\n            if (mode & 16 && typeof value.then === \"function\") return value;\n          }\n          var ns2 = /* @__PURE__ */ Object.create(null);\n          __webpack_require__.r(ns2);\n          var def = {};\n          leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n          for (var current = mode & 2 && value; typeof current == \"object\" && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n            Object.getOwnPropertyNames(current).forEach((key) => def[key] = () => value[key]);\n          }\n          def[\"default\"] = () => value;\n          __webpack_require__.d(ns2, def);\n          return ns2;\n        };\n      })();\n      (() => {\n        __webpack_require__.d = (exports, definition) => {\n          for (var key in definition) {\n            if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n              Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n            }\n          }\n        };\n      })();\n      (() => {\n        __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n      })();\n      (() => {\n        __webpack_require__.r = (exports) => {\n          if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n            Object.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\n          }\n          Object.defineProperty(exports, \"__esModule\", { value: true });\n        };\n      })();\n      __webpack_exports__ = {};\n      (() => {\n        __webpack_require__.r(__webpack_exports__);\n        __webpack_require__.d(__webpack_exports__, {\n          /* harmony export */\n          ASTFeatureExtractor: () => (\n            /* reexport safe */\n            _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.ASTFeatureExtractor\n          ),\n          /* harmony export */\n          ASTForAudioClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ASTForAudioClassification\n          ),\n          /* harmony export */\n          ASTModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ASTModel\n          ),\n          /* harmony export */\n          ASTPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ASTPreTrainedModel\n          ),\n          /* harmony export */\n          AlbertForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertForMaskedLM\n          ),\n          /* harmony export */\n          AlbertForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertForQuestionAnswering\n          ),\n          /* harmony export */\n          AlbertForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertForSequenceClassification\n          ),\n          /* harmony export */\n          AlbertModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertModel\n          ),\n          /* harmony export */\n          AlbertPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertPreTrainedModel\n          ),\n          /* harmony export */\n          AlbertTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.AlbertTokenizer\n          ),\n          /* harmony export */\n          AudioClassificationPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.AudioClassificationPipeline\n          ),\n          /* harmony export */\n          AutoConfig: () => (\n            /* reexport safe */\n            _configs_js__WEBPACK_IMPORTED_MODULE_4__.AutoConfig\n          ),\n          /* harmony export */\n          AutoFeatureExtractor: () => (\n            /* reexport safe */\n            _models_auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_12__.AutoFeatureExtractor\n          ),\n          /* harmony export */\n          AutoImageProcessor: () => (\n            /* reexport safe */\n            _models_auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_15__.AutoImageProcessor\n          ),\n          /* harmony export */\n          AutoModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModel\n          ),\n          /* harmony export */\n          AutoModelForAudioClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForAudioClassification\n          ),\n          /* harmony export */\n          AutoModelForAudioFrameClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForAudioFrameClassification\n          ),\n          /* harmony export */\n          AutoModelForAudioTextToText: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForAudioTextToText\n          ),\n          /* harmony export */\n          AutoModelForCTC: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForCTC\n          ),\n          /* harmony export */\n          AutoModelForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForCausalLM\n          ),\n          /* harmony export */\n          AutoModelForDepthEstimation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForDepthEstimation\n          ),\n          /* harmony export */\n          AutoModelForDocumentQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForDocumentQuestionAnswering\n          ),\n          /* harmony export */\n          AutoModelForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageClassification\n          ),\n          /* harmony export */\n          AutoModelForImageFeatureExtraction: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageFeatureExtraction\n          ),\n          /* harmony export */\n          AutoModelForImageMatting: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageMatting\n          ),\n          /* harmony export */\n          AutoModelForImageSegmentation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageSegmentation\n          ),\n          /* harmony export */\n          AutoModelForImageTextToText: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageTextToText\n          ),\n          /* harmony export */\n          AutoModelForImageToImage: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageToImage\n          ),\n          /* harmony export */\n          AutoModelForMaskGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForMaskGeneration\n          ),\n          /* harmony export */\n          AutoModelForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForMaskedLM\n          ),\n          /* harmony export */\n          AutoModelForNormalEstimation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForNormalEstimation\n          ),\n          /* harmony export */\n          AutoModelForObjectDetection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForObjectDetection\n          ),\n          /* harmony export */\n          AutoModelForPoseEstimation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForPoseEstimation\n          ),\n          /* harmony export */\n          AutoModelForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForQuestionAnswering\n          ),\n          /* harmony export */\n          AutoModelForSemanticSegmentation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForSemanticSegmentation\n          ),\n          /* harmony export */\n          AutoModelForSeq2SeqLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForSeq2SeqLM\n          ),\n          /* harmony export */\n          AutoModelForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForSequenceClassification\n          ),\n          /* harmony export */\n          AutoModelForSpeechSeq2Seq: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForSpeechSeq2Seq\n          ),\n          /* harmony export */\n          AutoModelForTextToSpectrogram: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForTextToSpectrogram\n          ),\n          /* harmony export */\n          AutoModelForTextToWaveform: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForTextToWaveform\n          ),\n          /* harmony export */\n          AutoModelForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForTokenClassification\n          ),\n          /* harmony export */\n          AutoModelForUniversalSegmentation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForUniversalSegmentation\n          ),\n          /* harmony export */\n          AutoModelForVision2Seq: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForVision2Seq\n          ),\n          /* harmony export */\n          AutoModelForXVector: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForXVector\n          ),\n          /* harmony export */\n          AutoModelForZeroShotObjectDetection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForZeroShotObjectDetection\n          ),\n          /* harmony export */\n          AutoProcessor: () => (\n            /* reexport safe */\n            _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_18__.AutoProcessor\n          ),\n          /* harmony export */\n          AutoTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.AutoTokenizer\n          ),\n          /* harmony export */\n          AutomaticSpeechRecognitionPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.AutomaticSpeechRecognitionPipeline\n          ),\n          /* harmony export */\n          BackgroundRemovalPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.BackgroundRemovalPipeline\n          ),\n          /* harmony export */\n          BartForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BartForConditionalGeneration\n          ),\n          /* harmony export */\n          BartForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BartForSequenceClassification\n          ),\n          /* harmony export */\n          BartModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BartModel\n          ),\n          /* harmony export */\n          BartPretrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BartPretrainedModel\n          ),\n          /* harmony export */\n          BartTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BartTokenizer\n          ),\n          /* harmony export */\n          BaseModelOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BaseModelOutput\n          ),\n          /* harmony export */\n          BaseStreamer: () => (\n            /* reexport safe */\n            _generation_streamers_js__WEBPACK_IMPORTED_MODULE_19__.BaseStreamer\n          ),\n          /* harmony export */\n          BeitFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.BeitFeatureExtractor\n          ),\n          /* harmony export */\n          BeitForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BeitForImageClassification\n          ),\n          /* harmony export */\n          BeitModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BeitModel\n          ),\n          /* harmony export */\n          BeitPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BeitPreTrainedModel\n          ),\n          /* harmony export */\n          BertForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BertForMaskedLM\n          ),\n          /* harmony export */\n          BertForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BertForQuestionAnswering\n          ),\n          /* harmony export */\n          BertForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BertForSequenceClassification\n          ),\n          /* harmony export */\n          BertForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BertForTokenClassification\n          ),\n          /* harmony export */\n          BertModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BertModel\n          ),\n          /* harmony export */\n          BertPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BertPreTrainedModel\n          ),\n          /* harmony export */\n          BertTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BertTokenizer\n          ),\n          /* harmony export */\n          BitImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.BitImageProcessor\n          ),\n          /* harmony export */\n          BlenderbotForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotForConditionalGeneration\n          ),\n          /* harmony export */\n          BlenderbotModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotModel\n          ),\n          /* harmony export */\n          BlenderbotPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotPreTrainedModel\n          ),\n          /* harmony export */\n          BlenderbotSmallForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotSmallForConditionalGeneration\n          ),\n          /* harmony export */\n          BlenderbotSmallModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotSmallModel\n          ),\n          /* harmony export */\n          BlenderbotSmallPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotSmallPreTrainedModel\n          ),\n          /* harmony export */\n          BlenderbotSmallTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BlenderbotSmallTokenizer\n          ),\n          /* harmony export */\n          BlenderbotTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BlenderbotTokenizer\n          ),\n          /* harmony export */\n          BloomForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BloomForCausalLM\n          ),\n          /* harmony export */\n          BloomModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BloomModel\n          ),\n          /* harmony export */\n          BloomPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.BloomPreTrainedModel\n          ),\n          /* harmony export */\n          BloomTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BloomTokenizer\n          ),\n          /* harmony export */\n          CLIPFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.CLIPFeatureExtractor\n          ),\n          /* harmony export */\n          CLIPImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.CLIPImageProcessor\n          ),\n          /* harmony export */\n          CLIPModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPModel\n          ),\n          /* harmony export */\n          CLIPPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPPreTrainedModel\n          ),\n          /* harmony export */\n          CLIPSegForImageSegmentation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPSegForImageSegmentation\n          ),\n          /* harmony export */\n          CLIPSegModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPSegModel\n          ),\n          /* harmony export */\n          CLIPSegPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPSegPreTrainedModel\n          ),\n          /* harmony export */\n          CLIPTextModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPTextModel\n          ),\n          /* harmony export */\n          CLIPTextModelWithProjection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPTextModelWithProjection\n          ),\n          /* harmony export */\n          CLIPTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CLIPTokenizer\n          ),\n          /* harmony export */\n          CLIPVisionModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPVisionModel\n          ),\n          /* harmony export */\n          CLIPVisionModelWithProjection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPVisionModelWithProjection\n          ),\n          /* harmony export */\n          CamembertForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertForMaskedLM\n          ),\n          /* harmony export */\n          CamembertForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertForQuestionAnswering\n          ),\n          /* harmony export */\n          CamembertForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertForSequenceClassification\n          ),\n          /* harmony export */\n          CamembertForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertForTokenClassification\n          ),\n          /* harmony export */\n          CamembertModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertModel\n          ),\n          /* harmony export */\n          CamembertPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertPreTrainedModel\n          ),\n          /* harmony export */\n          CamembertTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CamembertTokenizer\n          ),\n          /* harmony export */\n          CausalLMOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CausalLMOutput\n          ),\n          /* harmony export */\n          CausalLMOutputWithPast: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CausalLMOutputWithPast\n          ),\n          /* harmony export */\n          ChineseCLIPFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.ChineseCLIPFeatureExtractor\n          ),\n          /* harmony export */\n          ChineseCLIPModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ChineseCLIPModel\n          ),\n          /* harmony export */\n          ChineseCLIPPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ChineseCLIPPreTrainedModel\n          ),\n          /* harmony export */\n          ClapAudioModelWithProjection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ClapAudioModelWithProjection\n          ),\n          /* harmony export */\n          ClapFeatureExtractor: () => (\n            /* reexport safe */\n            _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.ClapFeatureExtractor\n          ),\n          /* harmony export */\n          ClapModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ClapModel\n          ),\n          /* harmony export */\n          ClapPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ClapPreTrainedModel\n          ),\n          /* harmony export */\n          ClapTextModelWithProjection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ClapTextModelWithProjection\n          ),\n          /* harmony export */\n          ClassifierFreeGuidanceLogitsProcessor: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.ClassifierFreeGuidanceLogitsProcessor\n          ),\n          /* harmony export */\n          CodeGenForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CodeGenForCausalLM\n          ),\n          /* harmony export */\n          CodeGenModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CodeGenModel\n          ),\n          /* harmony export */\n          CodeGenPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CodeGenPreTrainedModel\n          ),\n          /* harmony export */\n          CodeGenTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CodeGenTokenizer\n          ),\n          /* harmony export */\n          CodeLlamaTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CodeLlamaTokenizer\n          ),\n          /* harmony export */\n          CohereForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CohereForCausalLM\n          ),\n          /* harmony export */\n          CohereModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CohereModel\n          ),\n          /* harmony export */\n          CoherePreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.CoherePreTrainedModel\n          ),\n          /* harmony export */\n          CohereTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CohereTokenizer\n          ),\n          /* harmony export */\n          ConvBertForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertForMaskedLM\n          ),\n          /* harmony export */\n          ConvBertForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertForQuestionAnswering\n          ),\n          /* harmony export */\n          ConvBertForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertForSequenceClassification\n          ),\n          /* harmony export */\n          ConvBertForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertForTokenClassification\n          ),\n          /* harmony export */\n          ConvBertModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertModel\n          ),\n          /* harmony export */\n          ConvBertPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertPreTrainedModel\n          ),\n          /* harmony export */\n          ConvBertTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.ConvBertTokenizer\n          ),\n          /* harmony export */\n          ConvNextFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.ConvNextFeatureExtractor\n          ),\n          /* harmony export */\n          ConvNextForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextForImageClassification\n          ),\n          /* harmony export */\n          ConvNextImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.ConvNextImageProcessor\n          ),\n          /* harmony export */\n          ConvNextModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextModel\n          ),\n          /* harmony export */\n          ConvNextPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextPreTrainedModel\n          ),\n          /* harmony export */\n          ConvNextV2ForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextV2ForImageClassification\n          ),\n          /* harmony export */\n          ConvNextV2Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextV2Model\n          ),\n          /* harmony export */\n          ConvNextV2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextV2PreTrainedModel\n          ),\n          /* harmony export */\n          DPTFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DPTFeatureExtractor\n          ),\n          /* harmony export */\n          DPTForDepthEstimation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DPTForDepthEstimation\n          ),\n          /* harmony export */\n          DPTImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DPTImageProcessor\n          ),\n          /* harmony export */\n          DPTModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DPTModel\n          ),\n          /* harmony export */\n          DPTPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DPTPreTrainedModel\n          ),\n          /* harmony export */\n          DacDecoderModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DacDecoderModel\n          ),\n          /* harmony export */\n          DacDecoderOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DacDecoderOutput\n          ),\n          /* harmony export */\n          DacEncoderModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DacEncoderModel\n          ),\n          /* harmony export */\n          DacEncoderOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DacEncoderOutput\n          ),\n          /* harmony export */\n          DacFeatureExtractor: () => (\n            /* reexport safe */\n            _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.DacFeatureExtractor\n          ),\n          /* harmony export */\n          DacModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DacModel\n          ),\n          /* harmony export */\n          DacPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DacPreTrainedModel\n          ),\n          /* harmony export */\n          DataTypeMap: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.DataTypeMap\n          ),\n          /* harmony export */\n          DebertaForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaForMaskedLM\n          ),\n          /* harmony export */\n          DebertaForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaForQuestionAnswering\n          ),\n          /* harmony export */\n          DebertaForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaForSequenceClassification\n          ),\n          /* harmony export */\n          DebertaForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaForTokenClassification\n          ),\n          /* harmony export */\n          DebertaModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaModel\n          ),\n          /* harmony export */\n          DebertaPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaPreTrainedModel\n          ),\n          /* harmony export */\n          DebertaTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.DebertaTokenizer\n          ),\n          /* harmony export */\n          DebertaV2ForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2ForMaskedLM\n          ),\n          /* harmony export */\n          DebertaV2ForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2ForQuestionAnswering\n          ),\n          /* harmony export */\n          DebertaV2ForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2ForSequenceClassification\n          ),\n          /* harmony export */\n          DebertaV2ForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2ForTokenClassification\n          ),\n          /* harmony export */\n          DebertaV2Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2Model\n          ),\n          /* harmony export */\n          DebertaV2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2PreTrainedModel\n          ),\n          /* harmony export */\n          DebertaV2Tokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.DebertaV2Tokenizer\n          ),\n          /* harmony export */\n          DecisionTransformerModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DecisionTransformerModel\n          ),\n          /* harmony export */\n          DecisionTransformerPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DecisionTransformerPreTrainedModel\n          ),\n          /* harmony export */\n          DeiTFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DeiTFeatureExtractor\n          ),\n          /* harmony export */\n          DeiTForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DeiTForImageClassification\n          ),\n          /* harmony export */\n          DeiTImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DeiTImageProcessor\n          ),\n          /* harmony export */\n          DeiTModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DeiTModel\n          ),\n          /* harmony export */\n          DeiTPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DeiTPreTrainedModel\n          ),\n          /* harmony export */\n          DepthAnythingForDepthEstimation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DepthAnythingForDepthEstimation\n          ),\n          /* harmony export */\n          DepthAnythingPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DepthAnythingPreTrainedModel\n          ),\n          /* harmony export */\n          DepthEstimationPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.DepthEstimationPipeline\n          ),\n          /* harmony export */\n          DepthProForDepthEstimation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DepthProForDepthEstimation\n          ),\n          /* harmony export */\n          DepthProPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DepthProPreTrainedModel\n          ),\n          /* harmony export */\n          DetrFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DetrFeatureExtractor\n          ),\n          /* harmony export */\n          DetrForObjectDetection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrForObjectDetection\n          ),\n          /* harmony export */\n          DetrForSegmentation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrForSegmentation\n          ),\n          /* harmony export */\n          DetrImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DetrImageProcessor\n          ),\n          /* harmony export */\n          DetrModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrModel\n          ),\n          /* harmony export */\n          DetrObjectDetectionOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrObjectDetectionOutput\n          ),\n          /* harmony export */\n          DetrPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrPreTrainedModel\n          ),\n          /* harmony export */\n          DetrSegmentationOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrSegmentationOutput\n          ),\n          /* harmony export */\n          Dinov2ForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2ForImageClassification\n          ),\n          /* harmony export */\n          Dinov2Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2Model\n          ),\n          /* harmony export */\n          Dinov2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2PreTrainedModel\n          ),\n          /* harmony export */\n          Dinov2WithRegistersForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2WithRegistersForImageClassification\n          ),\n          /* harmony export */\n          Dinov2WithRegistersModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2WithRegistersModel\n          ),\n          /* harmony export */\n          Dinov2WithRegistersPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2WithRegistersPreTrainedModel\n          ),\n          /* harmony export */\n          DistilBertForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertForMaskedLM\n          ),\n          /* harmony export */\n          DistilBertForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertForQuestionAnswering\n          ),\n          /* harmony export */\n          DistilBertForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertForSequenceClassification\n          ),\n          /* harmony export */\n          DistilBertForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertForTokenClassification\n          ),\n          /* harmony export */\n          DistilBertModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertModel\n          ),\n          /* harmony export */\n          DistilBertPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertPreTrainedModel\n          ),\n          /* harmony export */\n          DistilBertTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.DistilBertTokenizer\n          ),\n          /* harmony export */\n          DocumentQuestionAnsweringPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.DocumentQuestionAnsweringPipeline\n          ),\n          /* harmony export */\n          DonutFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DonutFeatureExtractor\n          ),\n          /* harmony export */\n          DonutImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DonutImageProcessor\n          ),\n          /* harmony export */\n          DonutSwinModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DonutSwinModel\n          ),\n          /* harmony export */\n          DonutSwinPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.DonutSwinPreTrainedModel\n          ),\n          /* harmony export */\n          EfficientNetForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.EfficientNetForImageClassification\n          ),\n          /* harmony export */\n          EfficientNetImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.EfficientNetImageProcessor\n          ),\n          /* harmony export */\n          EfficientNetModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.EfficientNetModel\n          ),\n          /* harmony export */\n          EfficientNetPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.EfficientNetPreTrainedModel\n          ),\n          /* harmony export */\n          ElectraForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraForMaskedLM\n          ),\n          /* harmony export */\n          ElectraForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraForQuestionAnswering\n          ),\n          /* harmony export */\n          ElectraForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraForSequenceClassification\n          ),\n          /* harmony export */\n          ElectraForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraForTokenClassification\n          ),\n          /* harmony export */\n          ElectraModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraModel\n          ),\n          /* harmony export */\n          ElectraPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraPreTrainedModel\n          ),\n          /* harmony export */\n          ElectraTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.ElectraTokenizer\n          ),\n          /* harmony export */\n          EncodecFeatureExtractor: () => (\n            /* reexport safe */\n            _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.EncodecFeatureExtractor\n          ),\n          /* harmony export */\n          EosTokenCriteria: () => (\n            /* reexport safe */\n            _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_20__.EosTokenCriteria\n          ),\n          /* harmony export */\n          EsmForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmForMaskedLM\n          ),\n          /* harmony export */\n          EsmForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmForSequenceClassification\n          ),\n          /* harmony export */\n          EsmForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmForTokenClassification\n          ),\n          /* harmony export */\n          EsmModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmModel\n          ),\n          /* harmony export */\n          EsmPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmPreTrainedModel\n          ),\n          /* harmony export */\n          EsmTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.EsmTokenizer\n          ),\n          /* harmony export */\n          ExaoneForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ExaoneForCausalLM\n          ),\n          /* harmony export */\n          ExaoneModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ExaoneModel\n          ),\n          /* harmony export */\n          ExaonePreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ExaonePreTrainedModel\n          ),\n          /* harmony export */\n          FFT: () => (\n            /* reexport safe */\n            _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.FFT\n          ),\n          /* harmony export */\n          FalconForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.FalconForCausalLM\n          ),\n          /* harmony export */\n          FalconModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.FalconModel\n          ),\n          /* harmony export */\n          FalconPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.FalconPreTrainedModel\n          ),\n          /* harmony export */\n          FalconTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.FalconTokenizer\n          ),\n          /* harmony export */\n          FastViTForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.FastViTForImageClassification\n          ),\n          /* harmony export */\n          FastViTModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.FastViTModel\n          ),\n          /* harmony export */\n          FastViTPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.FastViTPreTrainedModel\n          ),\n          /* harmony export */\n          FeatureExtractionPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.FeatureExtractionPipeline\n          ),\n          /* harmony export */\n          FeatureExtractor: () => (\n            /* reexport safe */\n            _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_10__.FeatureExtractor\n          ),\n          /* harmony export */\n          FillMaskPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.FillMaskPipeline\n          ),\n          /* harmony export */\n          Florence2ForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Florence2ForConditionalGeneration\n          ),\n          /* harmony export */\n          Florence2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Florence2PreTrainedModel\n          ),\n          /* harmony export */\n          Florence2Processor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.Florence2Processor\n          ),\n          /* harmony export */\n          ForcedBOSTokenLogitsProcessor: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.ForcedBOSTokenLogitsProcessor\n          ),\n          /* harmony export */\n          ForcedEOSTokenLogitsProcessor: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.ForcedEOSTokenLogitsProcessor\n          ),\n          /* harmony export */\n          GLPNFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.GLPNFeatureExtractor\n          ),\n          /* harmony export */\n          GLPNForDepthEstimation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GLPNForDepthEstimation\n          ),\n          /* harmony export */\n          GLPNModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GLPNModel\n          ),\n          /* harmony export */\n          GLPNPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GLPNPreTrainedModel\n          ),\n          /* harmony export */\n          GPT2LMHeadModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPT2LMHeadModel\n          ),\n          /* harmony export */\n          GPT2Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPT2Model\n          ),\n          /* harmony export */\n          GPT2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPT2PreTrainedModel\n          ),\n          /* harmony export */\n          GPT2Tokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.GPT2Tokenizer\n          ),\n          /* harmony export */\n          GPTBigCodeForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTBigCodeForCausalLM\n          ),\n          /* harmony export */\n          GPTBigCodeModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTBigCodeModel\n          ),\n          /* harmony export */\n          GPTBigCodePreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTBigCodePreTrainedModel\n          ),\n          /* harmony export */\n          GPTJForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTJForCausalLM\n          ),\n          /* harmony export */\n          GPTJModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTJModel\n          ),\n          /* harmony export */\n          GPTJPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTJPreTrainedModel\n          ),\n          /* harmony export */\n          GPTNeoForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoForCausalLM\n          ),\n          /* harmony export */\n          GPTNeoModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoModel\n          ),\n          /* harmony export */\n          GPTNeoPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoPreTrainedModel\n          ),\n          /* harmony export */\n          GPTNeoXForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoXForCausalLM\n          ),\n          /* harmony export */\n          GPTNeoXModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoXModel\n          ),\n          /* harmony export */\n          GPTNeoXPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoXPreTrainedModel\n          ),\n          /* harmony export */\n          GPTNeoXTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.GPTNeoXTokenizer\n          ),\n          /* harmony export */\n          Gemma2ForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma2ForCausalLM\n          ),\n          /* harmony export */\n          Gemma2Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma2Model\n          ),\n          /* harmony export */\n          Gemma2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma2PreTrainedModel\n          ),\n          /* harmony export */\n          Gemma3ForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma3ForCausalLM\n          ),\n          /* harmony export */\n          Gemma3Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma3Model\n          ),\n          /* harmony export */\n          Gemma3PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma3PreTrainedModel\n          ),\n          /* harmony export */\n          GemmaForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GemmaForCausalLM\n          ),\n          /* harmony export */\n          GemmaModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GemmaModel\n          ),\n          /* harmony export */\n          GemmaPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GemmaPreTrainedModel\n          ),\n          /* harmony export */\n          GemmaTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.GemmaTokenizer\n          ),\n          /* harmony export */\n          GlmForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GlmForCausalLM\n          ),\n          /* harmony export */\n          GlmModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GlmModel\n          ),\n          /* harmony export */\n          GlmPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GlmPreTrainedModel\n          ),\n          /* harmony export */\n          GraniteForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GraniteForCausalLM\n          ),\n          /* harmony export */\n          GraniteModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GraniteModel\n          ),\n          /* harmony export */\n          GranitePreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GranitePreTrainedModel\n          ),\n          /* harmony export */\n          Grok1Tokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.Grok1Tokenizer\n          ),\n          /* harmony export */\n          GroundingDinoForObjectDetection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GroundingDinoForObjectDetection\n          ),\n          /* harmony export */\n          GroundingDinoImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.GroundingDinoImageProcessor\n          ),\n          /* harmony export */\n          GroundingDinoPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GroundingDinoPreTrainedModel\n          ),\n          /* harmony export */\n          GroundingDinoProcessor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.GroundingDinoProcessor\n          ),\n          /* harmony export */\n          GroupViTModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GroupViTModel\n          ),\n          /* harmony export */\n          GroupViTPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.GroupViTPreTrainedModel\n          ),\n          /* harmony export */\n          HeliumForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.HeliumForCausalLM\n          ),\n          /* harmony export */\n          HeliumModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.HeliumModel\n          ),\n          /* harmony export */\n          HeliumPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.HeliumPreTrainedModel\n          ),\n          /* harmony export */\n          HerbertTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.HerbertTokenizer\n          ),\n          /* harmony export */\n          HieraForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.HieraForImageClassification\n          ),\n          /* harmony export */\n          HieraModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.HieraModel\n          ),\n          /* harmony export */\n          HieraPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.HieraPreTrainedModel\n          ),\n          /* harmony export */\n          HubertForCTC: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.HubertForCTC\n          ),\n          /* harmony export */\n          HubertForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.HubertForSequenceClassification\n          ),\n          /* harmony export */\n          HubertModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.HubertModel\n          ),\n          /* harmony export */\n          HubertPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.HubertPreTrainedModel\n          ),\n          /* harmony export */\n          IJepaForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.IJepaForImageClassification\n          ),\n          /* harmony export */\n          IJepaModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.IJepaModel\n          ),\n          /* harmony export */\n          IJepaPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.IJepaPreTrainedModel\n          ),\n          /* harmony export */\n          Idefics3ForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Idefics3ForConditionalGeneration\n          ),\n          /* harmony export */\n          Idefics3ImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.Idefics3ImageProcessor\n          ),\n          /* harmony export */\n          Idefics3PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Idefics3PreTrainedModel\n          ),\n          /* harmony export */\n          Idefics3Processor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.Idefics3Processor\n          ),\n          /* harmony export */\n          ImageClassificationPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageClassificationPipeline\n          ),\n          /* harmony export */\n          ImageFeatureExtractionPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageFeatureExtractionPipeline\n          ),\n          /* harmony export */\n          ImageFeatureExtractor: () => (\n            /* reexport safe */\n            _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.ImageFeatureExtractor\n          ),\n          /* harmony export */\n          ImageMattingOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ImageMattingOutput\n          ),\n          /* harmony export */\n          ImageProcessor: () => (\n            /* reexport safe */\n            _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_13__.ImageProcessor\n          ),\n          /* harmony export */\n          ImageSegmentationPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageSegmentationPipeline\n          ),\n          /* harmony export */\n          ImageToImagePipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageToImagePipeline\n          ),\n          /* harmony export */\n          ImageToTextPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageToTextPipeline\n          ),\n          /* harmony export */\n          InterruptableStoppingCriteria: () => (\n            /* reexport safe */\n            _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_20__.InterruptableStoppingCriteria\n          ),\n          /* harmony export */\n          JAISLMHeadModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.JAISLMHeadModel\n          ),\n          /* harmony export */\n          JAISModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.JAISModel\n          ),\n          /* harmony export */\n          JAISPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.JAISPreTrainedModel\n          ),\n          /* harmony export */\n          JinaCLIPImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.JinaCLIPImageProcessor\n          ),\n          /* harmony export */\n          JinaCLIPModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.JinaCLIPModel\n          ),\n          /* harmony export */\n          JinaCLIPPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.JinaCLIPPreTrainedModel\n          ),\n          /* harmony export */\n          JinaCLIPProcessor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.JinaCLIPProcessor\n          ),\n          /* harmony export */\n          JinaCLIPTextModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.JinaCLIPTextModel\n          ),\n          /* harmony export */\n          JinaCLIPVisionModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.JinaCLIPVisionModel\n          ),\n          /* harmony export */\n          LiteWhisperForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.LiteWhisperForConditionalGeneration\n          ),\n          /* harmony export */\n          LlamaForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.LlamaForCausalLM\n          ),\n          /* harmony export */\n          LlamaModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.LlamaModel\n          ),\n          /* harmony export */\n          LlamaPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.LlamaPreTrainedModel\n          ),\n          /* harmony export */\n          LlamaTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.LlamaTokenizer\n          ),\n          /* harmony export */\n          LlavaForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.LlavaForConditionalGeneration\n          ),\n          /* harmony export */\n          LlavaOnevisionForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.LlavaOnevisionForConditionalGeneration\n          ),\n          /* harmony export */\n          LlavaOnevisionImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.LlavaOnevisionImageProcessor\n          ),\n          /* harmony export */\n          LlavaPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.LlavaPreTrainedModel\n          ),\n          /* harmony export */\n          LogitsProcessor: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.LogitsProcessor\n          ),\n          /* harmony export */\n          LogitsProcessorList: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.LogitsProcessorList\n          ),\n          /* harmony export */\n          LogitsWarper: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.LogitsWarper\n          ),\n          /* harmony export */\n          LongT5ForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.LongT5ForConditionalGeneration\n          ),\n          /* harmony export */\n          LongT5Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.LongT5Model\n          ),\n          /* harmony export */\n          LongT5PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.LongT5PreTrainedModel\n          ),\n          /* harmony export */\n          M2M100ForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.M2M100ForConditionalGeneration\n          ),\n          /* harmony export */\n          M2M100Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.M2M100Model\n          ),\n          /* harmony export */\n          M2M100PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.M2M100PreTrainedModel\n          ),\n          /* harmony export */\n          M2M100Tokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.M2M100Tokenizer\n          ),\n          /* harmony export */\n          MBart50Tokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MBart50Tokenizer\n          ),\n          /* harmony export */\n          MBartForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartForCausalLM\n          ),\n          /* harmony export */\n          MBartForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartForConditionalGeneration\n          ),\n          /* harmony export */\n          MBartForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartForSequenceClassification\n          ),\n          /* harmony export */\n          MBartModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartModel\n          ),\n          /* harmony export */\n          MBartPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartPreTrainedModel\n          ),\n          /* harmony export */\n          MBartTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MBartTokenizer\n          ),\n          /* harmony export */\n          MPNetForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetForMaskedLM\n          ),\n          /* harmony export */\n          MPNetForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetForQuestionAnswering\n          ),\n          /* harmony export */\n          MPNetForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetForSequenceClassification\n          ),\n          /* harmony export */\n          MPNetForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetForTokenClassification\n          ),\n          /* harmony export */\n          MPNetModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetModel\n          ),\n          /* harmony export */\n          MPNetPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetPreTrainedModel\n          ),\n          /* harmony export */\n          MPNetTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MPNetTokenizer\n          ),\n          /* harmony export */\n          MT5ForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MT5ForConditionalGeneration\n          ),\n          /* harmony export */\n          MT5Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MT5Model\n          ),\n          /* harmony export */\n          MT5PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MT5PreTrainedModel\n          ),\n          /* harmony export */\n          MarianMTModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MarianMTModel\n          ),\n          /* harmony export */\n          MarianModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MarianModel\n          ),\n          /* harmony export */\n          MarianPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MarianPreTrainedModel\n          ),\n          /* harmony export */\n          MarianTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MarianTokenizer\n          ),\n          /* harmony export */\n          Mask2FormerImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.Mask2FormerImageProcessor\n          ),\n          /* harmony export */\n          MaskFormerFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MaskFormerFeatureExtractor\n          ),\n          /* harmony export */\n          MaskFormerForInstanceSegmentation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MaskFormerForInstanceSegmentation\n          ),\n          /* harmony export */\n          MaskFormerImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MaskFormerImageProcessor\n          ),\n          /* harmony export */\n          MaskFormerModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MaskFormerModel\n          ),\n          /* harmony export */\n          MaskFormerPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MaskFormerPreTrainedModel\n          ),\n          /* harmony export */\n          MaskedLMOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MaskedLMOutput\n          ),\n          /* harmony export */\n          MaxLengthCriteria: () => (\n            /* reexport safe */\n            _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_20__.MaxLengthCriteria\n          ),\n          /* harmony export */\n          Metric3DForDepthEstimation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Metric3DForDepthEstimation\n          ),\n          /* harmony export */\n          Metric3DPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Metric3DPreTrainedModel\n          ),\n          /* harmony export */\n          Metric3Dv2ForDepthEstimation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Metric3Dv2ForDepthEstimation\n          ),\n          /* harmony export */\n          Metric3Dv2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Metric3Dv2PreTrainedModel\n          ),\n          /* harmony export */\n          MgpstrForSceneTextRecognition: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MgpstrForSceneTextRecognition\n          ),\n          /* harmony export */\n          MgpstrModelOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MgpstrModelOutput\n          ),\n          /* harmony export */\n          MgpstrPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MgpstrPreTrainedModel\n          ),\n          /* harmony export */\n          MgpstrProcessor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.MgpstrProcessor\n          ),\n          /* harmony export */\n          MgpstrTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MgpstrTokenizer\n          ),\n          /* harmony export */\n          MimiDecoderModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MimiDecoderModel\n          ),\n          /* harmony export */\n          MimiDecoderOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MimiDecoderOutput\n          ),\n          /* harmony export */\n          MimiEncoderModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MimiEncoderModel\n          ),\n          /* harmony export */\n          MimiEncoderOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MimiEncoderOutput\n          ),\n          /* harmony export */\n          MimiModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MimiModel\n          ),\n          /* harmony export */\n          MimiPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MimiPreTrainedModel\n          ),\n          /* harmony export */\n          MinLengthLogitsProcessor: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.MinLengthLogitsProcessor\n          ),\n          /* harmony export */\n          MinNewTokensLengthLogitsProcessor: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.MinNewTokensLengthLogitsProcessor\n          ),\n          /* harmony export */\n          MistralForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MistralForCausalLM\n          ),\n          /* harmony export */\n          MistralModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MistralModel\n          ),\n          /* harmony export */\n          MistralPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MistralPreTrainedModel\n          ),\n          /* harmony export */\n          MobileBertForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertForMaskedLM\n          ),\n          /* harmony export */\n          MobileBertForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertForQuestionAnswering\n          ),\n          /* harmony export */\n          MobileBertForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertForSequenceClassification\n          ),\n          /* harmony export */\n          MobileBertModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertModel\n          ),\n          /* harmony export */\n          MobileBertPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertPreTrainedModel\n          ),\n          /* harmony export */\n          MobileBertTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MobileBertTokenizer\n          ),\n          /* harmony export */\n          MobileLLMForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileLLMForCausalLM\n          ),\n          /* harmony export */\n          MobileLLMModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileLLMModel\n          ),\n          /* harmony export */\n          MobileLLMPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileLLMPreTrainedModel\n          ),\n          /* harmony export */\n          MobileNetV1FeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV1FeatureExtractor\n          ),\n          /* harmony export */\n          MobileNetV1ForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV1ForImageClassification\n          ),\n          /* harmony export */\n          MobileNetV1ForSemanticSegmentation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV1ForSemanticSegmentation\n          ),\n          /* harmony export */\n          MobileNetV1ImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV1ImageProcessor\n          ),\n          /* harmony export */\n          MobileNetV1Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV1Model\n          ),\n          /* harmony export */\n          MobileNetV1PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV1PreTrainedModel\n          ),\n          /* harmony export */\n          MobileNetV2FeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV2FeatureExtractor\n          ),\n          /* harmony export */\n          MobileNetV2ForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV2ForImageClassification\n          ),\n          /* harmony export */\n          MobileNetV2ForSemanticSegmentation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV2ForSemanticSegmentation\n          ),\n          /* harmony export */\n          MobileNetV2ImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV2ImageProcessor\n          ),\n          /* harmony export */\n          MobileNetV2Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV2Model\n          ),\n          /* harmony export */\n          MobileNetV2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV2PreTrainedModel\n          ),\n          /* harmony export */\n          MobileNetV3FeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV3FeatureExtractor\n          ),\n          /* harmony export */\n          MobileNetV3ForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV3ForImageClassification\n          ),\n          /* harmony export */\n          MobileNetV3ForSemanticSegmentation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV3ForSemanticSegmentation\n          ),\n          /* harmony export */\n          MobileNetV3ImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV3ImageProcessor\n          ),\n          /* harmony export */\n          MobileNetV3Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV3Model\n          ),\n          /* harmony export */\n          MobileNetV3PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV3PreTrainedModel\n          ),\n          /* harmony export */\n          MobileNetV4FeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV4FeatureExtractor\n          ),\n          /* harmony export */\n          MobileNetV4ForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV4ForImageClassification\n          ),\n          /* harmony export */\n          MobileNetV4ForSemanticSegmentation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV4ForSemanticSegmentation\n          ),\n          /* harmony export */\n          MobileNetV4ImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV4ImageProcessor\n          ),\n          /* harmony export */\n          MobileNetV4Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV4Model\n          ),\n          /* harmony export */\n          MobileNetV4PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV4PreTrainedModel\n          ),\n          /* harmony export */\n          MobileViTFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileViTFeatureExtractor\n          ),\n          /* harmony export */\n          MobileViTForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTForImageClassification\n          ),\n          /* harmony export */\n          MobileViTImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileViTImageProcessor\n          ),\n          /* harmony export */\n          MobileViTModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTModel\n          ),\n          /* harmony export */\n          MobileViTPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTPreTrainedModel\n          ),\n          /* harmony export */\n          MobileViTV2ForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTV2ForImageClassification\n          ),\n          /* harmony export */\n          MobileViTV2Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTV2Model\n          ),\n          /* harmony export */\n          MobileViTV2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTV2PreTrainedModel\n          ),\n          /* harmony export */\n          ModelOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ModelOutput\n          ),\n          /* harmony export */\n          ModernBertForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ModernBertForMaskedLM\n          ),\n          /* harmony export */\n          ModernBertForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ModernBertForSequenceClassification\n          ),\n          /* harmony export */\n          ModernBertForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ModernBertForTokenClassification\n          ),\n          /* harmony export */\n          ModernBertModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ModernBertModel\n          ),\n          /* harmony export */\n          ModernBertPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ModernBertPreTrainedModel\n          ),\n          /* harmony export */\n          Moondream1ForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Moondream1ForConditionalGeneration\n          ),\n          /* harmony export */\n          MoonshineFeatureExtractor: () => (\n            /* reexport safe */\n            _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.MoonshineFeatureExtractor\n          ),\n          /* harmony export */\n          MoonshineForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MoonshineForConditionalGeneration\n          ),\n          /* harmony export */\n          MoonshineModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MoonshineModel\n          ),\n          /* harmony export */\n          MoonshinePreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MoonshinePreTrainedModel\n          ),\n          /* harmony export */\n          MoonshineProcessor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.MoonshineProcessor\n          ),\n          /* harmony export */\n          MptForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MptForCausalLM\n          ),\n          /* harmony export */\n          MptModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MptModel\n          ),\n          /* harmony export */\n          MptPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MptPreTrainedModel\n          ),\n          /* harmony export */\n          MultiModalityCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MultiModalityCausalLM\n          ),\n          /* harmony export */\n          MultiModalityPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MultiModalityPreTrainedModel\n          ),\n          /* harmony export */\n          MusicgenForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MusicgenForCausalLM\n          ),\n          /* harmony export */\n          MusicgenForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MusicgenForConditionalGeneration\n          ),\n          /* harmony export */\n          MusicgenModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MusicgenModel\n          ),\n          /* harmony export */\n          MusicgenPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.MusicgenPreTrainedModel\n          ),\n          /* harmony export */\n          NllbTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.NllbTokenizer\n          ),\n          /* harmony export */\n          NoBadWordsLogitsProcessor: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.NoBadWordsLogitsProcessor\n          ),\n          /* harmony export */\n          NoRepeatNGramLogitsProcessor: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.NoRepeatNGramLogitsProcessor\n          ),\n          /* harmony export */\n          NomicBertModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.NomicBertModel\n          ),\n          /* harmony export */\n          NomicBertPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.NomicBertPreTrainedModel\n          ),\n          /* harmony export */\n          NougatImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.NougatImageProcessor\n          ),\n          /* harmony export */\n          NougatTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.NougatTokenizer\n          ),\n          /* harmony export */\n          OPTForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.OPTForCausalLM\n          ),\n          /* harmony export */\n          OPTModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.OPTModel\n          ),\n          /* harmony export */\n          OPTPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.OPTPreTrainedModel\n          ),\n          /* harmony export */\n          ObjectDetectionPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ObjectDetectionPipeline\n          ),\n          /* harmony export */\n          Olmo2ForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Olmo2ForCausalLM\n          ),\n          /* harmony export */\n          Olmo2Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Olmo2Model\n          ),\n          /* harmony export */\n          Olmo2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Olmo2PreTrainedModel\n          ),\n          /* harmony export */\n          OlmoForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.OlmoForCausalLM\n          ),\n          /* harmony export */\n          OlmoModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.OlmoModel\n          ),\n          /* harmony export */\n          OlmoPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.OlmoPreTrainedModel\n          ),\n          /* harmony export */\n          OpenELMForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.OpenELMForCausalLM\n          ),\n          /* harmony export */\n          OpenELMModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.OpenELMModel\n          ),\n          /* harmony export */\n          OpenELMPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.OpenELMPreTrainedModel\n          ),\n          /* harmony export */\n          OwlViTFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.OwlViTFeatureExtractor\n          ),\n          /* harmony export */\n          OwlViTForObjectDetection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.OwlViTForObjectDetection\n          ),\n          /* harmony export */\n          OwlViTImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.OwlViTImageProcessor\n          ),\n          /* harmony export */\n          OwlViTModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.OwlViTModel\n          ),\n          /* harmony export */\n          OwlViTPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.OwlViTPreTrainedModel\n          ),\n          /* harmony export */\n          OwlViTProcessor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.OwlViTProcessor\n          ),\n          /* harmony export */\n          Owlv2ForObjectDetection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Owlv2ForObjectDetection\n          ),\n          /* harmony export */\n          Owlv2ImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.Owlv2ImageProcessor\n          ),\n          /* harmony export */\n          Owlv2Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Owlv2Model\n          ),\n          /* harmony export */\n          Owlv2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Owlv2PreTrainedModel\n          ),\n          /* harmony export */\n          PaliGemmaForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PaliGemmaForConditionalGeneration\n          ),\n          /* harmony export */\n          PaliGemmaPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PaliGemmaPreTrainedModel\n          ),\n          /* harmony export */\n          PaliGemmaProcessor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.PaliGemmaProcessor\n          ),\n          /* harmony export */\n          PatchTSMixerForPrediction: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PatchTSMixerForPrediction\n          ),\n          /* harmony export */\n          PatchTSMixerModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PatchTSMixerModel\n          ),\n          /* harmony export */\n          PatchTSMixerPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PatchTSMixerPreTrainedModel\n          ),\n          /* harmony export */\n          PatchTSTForPrediction: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PatchTSTForPrediction\n          ),\n          /* harmony export */\n          PatchTSTModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PatchTSTModel\n          ),\n          /* harmony export */\n          PatchTSTPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PatchTSTPreTrainedModel\n          ),\n          /* harmony export */\n          Phi3ForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Phi3ForCausalLM\n          ),\n          /* harmony export */\n          Phi3Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Phi3Model\n          ),\n          /* harmony export */\n          Phi3PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Phi3PreTrainedModel\n          ),\n          /* harmony export */\n          Phi3VForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Phi3VForCausalLM\n          ),\n          /* harmony export */\n          Phi3VImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.Phi3VImageProcessor\n          ),\n          /* harmony export */\n          Phi3VPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Phi3VPreTrainedModel\n          ),\n          /* harmony export */\n          Phi3VProcessor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.Phi3VProcessor\n          ),\n          /* harmony export */\n          PhiForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PhiForCausalLM\n          ),\n          /* harmony export */\n          PhiModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PhiModel\n          ),\n          /* harmony export */\n          PhiPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PhiPreTrainedModel\n          ),\n          /* harmony export */\n          Pipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.Pipeline\n          ),\n          /* harmony export */\n          PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PreTrainedModel\n          ),\n          /* harmony export */\n          PreTrainedTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.PreTrainedTokenizer\n          ),\n          /* harmony export */\n          PretrainedConfig: () => (\n            /* reexport safe */\n            _configs_js__WEBPACK_IMPORTED_MODULE_4__.PretrainedConfig\n          ),\n          /* harmony export */\n          PretrainedMixin: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PretrainedMixin\n          ),\n          /* harmony export */\n          Processor: () => (\n            /* reexport safe */\n            _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_16__.Processor\n          ),\n          /* harmony export */\n          PvtForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PvtForImageClassification\n          ),\n          /* harmony export */\n          PvtImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.PvtImageProcessor\n          ),\n          /* harmony export */\n          PvtModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PvtModel\n          ),\n          /* harmony export */\n          PvtPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PvtPreTrainedModel\n          ),\n          /* harmony export */\n          PyAnnoteFeatureExtractor: () => (\n            /* reexport safe */\n            _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.PyAnnoteFeatureExtractor\n          ),\n          /* harmony export */\n          PyAnnoteForAudioFrameClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PyAnnoteForAudioFrameClassification\n          ),\n          /* harmony export */\n          PyAnnoteModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PyAnnoteModel\n          ),\n          /* harmony export */\n          PyAnnotePreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.PyAnnotePreTrainedModel\n          ),\n          /* harmony export */\n          PyAnnoteProcessor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.PyAnnoteProcessor\n          ),\n          /* harmony export */\n          QuestionAnsweringModelOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.QuestionAnsweringModelOutput\n          ),\n          /* harmony export */\n          QuestionAnsweringPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.QuestionAnsweringPipeline\n          ),\n          /* harmony export */\n          Qwen2ForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen2ForCausalLM\n          ),\n          /* harmony export */\n          Qwen2Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen2Model\n          ),\n          /* harmony export */\n          Qwen2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen2PreTrainedModel\n          ),\n          /* harmony export */\n          Qwen2Tokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.Qwen2Tokenizer\n          ),\n          /* harmony export */\n          Qwen2VLForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen2VLForConditionalGeneration\n          ),\n          /* harmony export */\n          Qwen2VLImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.Qwen2VLImageProcessor\n          ),\n          /* harmony export */\n          Qwen2VLPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen2VLPreTrainedModel\n          ),\n          /* harmony export */\n          Qwen2VLProcessor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.Qwen2VLProcessor\n          ),\n          /* harmony export */\n          RFDetrForObjectDetection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RFDetrForObjectDetection\n          ),\n          /* harmony export */\n          RFDetrModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RFDetrModel\n          ),\n          /* harmony export */\n          RFDetrObjectDetectionOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RFDetrObjectDetectionOutput\n          ),\n          /* harmony export */\n          RFDetrPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RFDetrPreTrainedModel\n          ),\n          /* harmony export */\n          RTDetrForObjectDetection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrForObjectDetection\n          ),\n          /* harmony export */\n          RTDetrImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.RTDetrImageProcessor\n          ),\n          /* harmony export */\n          RTDetrModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrModel\n          ),\n          /* harmony export */\n          RTDetrObjectDetectionOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrObjectDetectionOutput\n          ),\n          /* harmony export */\n          RTDetrPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrPreTrainedModel\n          ),\n          /* harmony export */\n          RTDetrV2ForObjectDetection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrV2ForObjectDetection\n          ),\n          /* harmony export */\n          RTDetrV2Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrV2Model\n          ),\n          /* harmony export */\n          RTDetrV2ObjectDetectionOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrV2ObjectDetectionOutput\n          ),\n          /* harmony export */\n          RTDetrV2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrV2PreTrainedModel\n          ),\n          /* harmony export */\n          RawAudio: () => (\n            /* reexport safe */\n            _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__.RawAudio\n          ),\n          /* harmony export */\n          RawImage: () => (\n            /* reexport safe */\n            _utils_image_js__WEBPACK_IMPORTED_MODULE_6__.RawImage\n          ),\n          /* harmony export */\n          RawVideo: () => (\n            /* reexport safe */\n            _utils_video_js__WEBPACK_IMPORTED_MODULE_7__.RawVideo\n          ),\n          /* harmony export */\n          RawVideoFrame: () => (\n            /* reexport safe */\n            _utils_video_js__WEBPACK_IMPORTED_MODULE_7__.RawVideoFrame\n          ),\n          /* harmony export */\n          RepetitionPenaltyLogitsProcessor: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.RepetitionPenaltyLogitsProcessor\n          ),\n          /* harmony export */\n          ResNetForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ResNetForImageClassification\n          ),\n          /* harmony export */\n          ResNetModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ResNetModel\n          ),\n          /* harmony export */\n          ResNetPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ResNetPreTrainedModel\n          ),\n          /* harmony export */\n          RoFormerForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerForMaskedLM\n          ),\n          /* harmony export */\n          RoFormerForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerForQuestionAnswering\n          ),\n          /* harmony export */\n          RoFormerForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerForSequenceClassification\n          ),\n          /* harmony export */\n          RoFormerForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerForTokenClassification\n          ),\n          /* harmony export */\n          RoFormerModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerModel\n          ),\n          /* harmony export */\n          RoFormerPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerPreTrainedModel\n          ),\n          /* harmony export */\n          RoFormerTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.RoFormerTokenizer\n          ),\n          /* harmony export */\n          RobertaForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaForMaskedLM\n          ),\n          /* harmony export */\n          RobertaForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaForQuestionAnswering\n          ),\n          /* harmony export */\n          RobertaForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaForSequenceClassification\n          ),\n          /* harmony export */\n          RobertaForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaForTokenClassification\n          ),\n          /* harmony export */\n          RobertaModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaModel\n          ),\n          /* harmony export */\n          RobertaPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaPreTrainedModel\n          ),\n          /* harmony export */\n          RobertaTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.RobertaTokenizer\n          ),\n          /* harmony export */\n          SamImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.SamImageProcessor\n          ),\n          /* harmony export */\n          SamImageSegmentationOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SamImageSegmentationOutput\n          ),\n          /* harmony export */\n          SamModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SamModel\n          ),\n          /* harmony export */\n          SamPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SamPreTrainedModel\n          ),\n          /* harmony export */\n          SamProcessor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.SamProcessor\n          ),\n          /* harmony export */\n          SapiensForDepthEstimation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SapiensForDepthEstimation\n          ),\n          /* harmony export */\n          SapiensForNormalEstimation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SapiensForNormalEstimation\n          ),\n          /* harmony export */\n          SapiensForSemanticSegmentation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SapiensForSemanticSegmentation\n          ),\n          /* harmony export */\n          SapiensPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SapiensPreTrainedModel\n          ),\n          /* harmony export */\n          SeamlessM4TFeatureExtractor: () => (\n            /* reexport safe */\n            _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.SeamlessM4TFeatureExtractor\n          ),\n          /* harmony export */\n          SegformerFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.SegformerFeatureExtractor\n          ),\n          /* harmony export */\n          SegformerForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SegformerForImageClassification\n          ),\n          /* harmony export */\n          SegformerForSemanticSegmentation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SegformerForSemanticSegmentation\n          ),\n          /* harmony export */\n          SegformerImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.SegformerImageProcessor\n          ),\n          /* harmony export */\n          SegformerModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SegformerModel\n          ),\n          /* harmony export */\n          SegformerPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SegformerPreTrainedModel\n          ),\n          /* harmony export */\n          Seq2SeqLMOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Seq2SeqLMOutput\n          ),\n          /* harmony export */\n          SequenceClassifierOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SequenceClassifierOutput\n          ),\n          /* harmony export */\n          SiglipImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.SiglipImageProcessor\n          ),\n          /* harmony export */\n          SiglipModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SiglipModel\n          ),\n          /* harmony export */\n          SiglipPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SiglipPreTrainedModel\n          ),\n          /* harmony export */\n          SiglipTextModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SiglipTextModel\n          ),\n          /* harmony export */\n          SiglipTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.SiglipTokenizer\n          ),\n          /* harmony export */\n          SiglipVisionModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SiglipVisionModel\n          ),\n          /* harmony export */\n          SmolVLMForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SmolVLMForConditionalGeneration\n          ),\n          /* harmony export */\n          SmolVLMImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.SmolVLMImageProcessor\n          ),\n          /* harmony export */\n          SmolVLMProcessor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.SmolVLMProcessor\n          ),\n          /* harmony export */\n          SnacDecoderModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SnacDecoderModel\n          ),\n          /* harmony export */\n          SnacEncoderModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SnacEncoderModel\n          ),\n          /* harmony export */\n          SnacFeatureExtractor: () => (\n            /* reexport safe */\n            _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.SnacFeatureExtractor\n          ),\n          /* harmony export */\n          SnacModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SnacModel\n          ),\n          /* harmony export */\n          SnacPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SnacPreTrainedModel\n          ),\n          /* harmony export */\n          SpeechT5FeatureExtractor: () => (\n            /* reexport safe */\n            _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.SpeechT5FeatureExtractor\n          ),\n          /* harmony export */\n          SpeechT5ForSpeechToText: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5ForSpeechToText\n          ),\n          /* harmony export */\n          SpeechT5ForTextToSpeech: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5ForTextToSpeech\n          ),\n          /* harmony export */\n          SpeechT5HifiGan: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5HifiGan\n          ),\n          /* harmony export */\n          SpeechT5Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5Model\n          ),\n          /* harmony export */\n          SpeechT5PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5PreTrainedModel\n          ),\n          /* harmony export */\n          SpeechT5Processor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.SpeechT5Processor\n          ),\n          /* harmony export */\n          SpeechT5Tokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.SpeechT5Tokenizer\n          ),\n          /* harmony export */\n          SqueezeBertForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertForMaskedLM\n          ),\n          /* harmony export */\n          SqueezeBertForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertForQuestionAnswering\n          ),\n          /* harmony export */\n          SqueezeBertForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertForSequenceClassification\n          ),\n          /* harmony export */\n          SqueezeBertModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertModel\n          ),\n          /* harmony export */\n          SqueezeBertPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertPreTrainedModel\n          ),\n          /* harmony export */\n          SqueezeBertTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.SqueezeBertTokenizer\n          ),\n          /* harmony export */\n          StableLmForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.StableLmForCausalLM\n          ),\n          /* harmony export */\n          StableLmModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.StableLmModel\n          ),\n          /* harmony export */\n          StableLmPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.StableLmPreTrainedModel\n          ),\n          /* harmony export */\n          Starcoder2ForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Starcoder2ForCausalLM\n          ),\n          /* harmony export */\n          Starcoder2Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Starcoder2Model\n          ),\n          /* harmony export */\n          Starcoder2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Starcoder2PreTrainedModel\n          ),\n          /* harmony export */\n          StoppingCriteria: () => (\n            /* reexport safe */\n            _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_20__.StoppingCriteria\n          ),\n          /* harmony export */\n          StoppingCriteriaList: () => (\n            /* reexport safe */\n            _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_20__.StoppingCriteriaList\n          ),\n          /* harmony export */\n          StyleTextToSpeech2Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.StyleTextToSpeech2Model\n          ),\n          /* harmony export */\n          StyleTextToSpeech2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.StyleTextToSpeech2PreTrainedModel\n          ),\n          /* harmony export */\n          SummarizationPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.SummarizationPipeline\n          ),\n          /* harmony export */\n          SuppressTokensAtBeginLogitsProcessor: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.SuppressTokensAtBeginLogitsProcessor\n          ),\n          /* harmony export */\n          Swin2SRForImageSuperResolution: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Swin2SRForImageSuperResolution\n          ),\n          /* harmony export */\n          Swin2SRImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.Swin2SRImageProcessor\n          ),\n          /* harmony export */\n          Swin2SRModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Swin2SRModel\n          ),\n          /* harmony export */\n          Swin2SRPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Swin2SRPreTrainedModel\n          ),\n          /* harmony export */\n          SwinForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SwinForImageClassification\n          ),\n          /* harmony export */\n          SwinForSemanticSegmentation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SwinForSemanticSegmentation\n          ),\n          /* harmony export */\n          SwinModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SwinModel\n          ),\n          /* harmony export */\n          SwinPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.SwinPreTrainedModel\n          ),\n          /* harmony export */\n          T5ForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.T5ForConditionalGeneration\n          ),\n          /* harmony export */\n          T5Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.T5Model\n          ),\n          /* harmony export */\n          T5PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.T5PreTrainedModel\n          ),\n          /* harmony export */\n          T5Tokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.T5Tokenizer\n          ),\n          /* harmony export */\n          TableTransformerForObjectDetection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.TableTransformerForObjectDetection\n          ),\n          /* harmony export */\n          TableTransformerModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.TableTransformerModel\n          ),\n          /* harmony export */\n          TableTransformerObjectDetectionOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.TableTransformerObjectDetectionOutput\n          ),\n          /* harmony export */\n          TableTransformerPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.TableTransformerPreTrainedModel\n          ),\n          /* harmony export */\n          TemperatureLogitsWarper: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.TemperatureLogitsWarper\n          ),\n          /* harmony export */\n          Tensor: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor\n          ),\n          /* harmony export */\n          Text2TextGenerationPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.Text2TextGenerationPipeline\n          ),\n          /* harmony export */\n          TextClassificationPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TextClassificationPipeline\n          ),\n          /* harmony export */\n          TextGenerationPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TextGenerationPipeline\n          ),\n          /* harmony export */\n          TextStreamer: () => (\n            /* reexport safe */\n            _generation_streamers_js__WEBPACK_IMPORTED_MODULE_19__.TextStreamer\n          ),\n          /* harmony export */\n          TextToAudioPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TextToAudioPipeline\n          ),\n          /* harmony export */\n          TokenClassificationPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TokenClassificationPipeline\n          ),\n          /* harmony export */\n          TokenClassifierOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.TokenClassifierOutput\n          ),\n          /* harmony export */\n          TokenizerModel: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.TokenizerModel\n          ),\n          /* harmony export */\n          TopKLogitsWarper: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.TopKLogitsWarper\n          ),\n          /* harmony export */\n          TopPLogitsWarper: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.TopPLogitsWarper\n          ),\n          /* harmony export */\n          TrOCRForCausalLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.TrOCRForCausalLM\n          ),\n          /* harmony export */\n          TrOCRPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.TrOCRPreTrainedModel\n          ),\n          /* harmony export */\n          TranslationPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TranslationPipeline\n          ),\n          /* harmony export */\n          UltravoxModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.UltravoxModel\n          ),\n          /* harmony export */\n          UltravoxPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.UltravoxPreTrainedModel\n          ),\n          /* harmony export */\n          UltravoxProcessor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.UltravoxProcessor\n          ),\n          /* harmony export */\n          UniSpeechForCTC: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechForCTC\n          ),\n          /* harmony export */\n          UniSpeechForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechForSequenceClassification\n          ),\n          /* harmony export */\n          UniSpeechModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechModel\n          ),\n          /* harmony export */\n          UniSpeechPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechPreTrainedModel\n          ),\n          /* harmony export */\n          UniSpeechSatForAudioFrameClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatForAudioFrameClassification\n          ),\n          /* harmony export */\n          UniSpeechSatForCTC: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatForCTC\n          ),\n          /* harmony export */\n          UniSpeechSatForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatForSequenceClassification\n          ),\n          /* harmony export */\n          UniSpeechSatModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatModel\n          ),\n          /* harmony export */\n          UniSpeechSatPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatPreTrainedModel\n          ),\n          /* harmony export */\n          VLChatProcessor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.VLChatProcessor\n          ),\n          /* harmony export */\n          VLMImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.VLMImageProcessor\n          ),\n          /* harmony export */\n          ViTFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.ViTFeatureExtractor\n          ),\n          /* harmony export */\n          ViTForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTForImageClassification\n          ),\n          /* harmony export */\n          ViTImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.ViTImageProcessor\n          ),\n          /* harmony export */\n          ViTMAEModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMAEModel\n          ),\n          /* harmony export */\n          ViTMAEPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMAEPreTrainedModel\n          ),\n          /* harmony export */\n          ViTMSNForImageClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMSNForImageClassification\n          ),\n          /* harmony export */\n          ViTMSNModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMSNModel\n          ),\n          /* harmony export */\n          ViTMSNPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMSNPreTrainedModel\n          ),\n          /* harmony export */\n          ViTModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTModel\n          ),\n          /* harmony export */\n          ViTPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTPreTrainedModel\n          ),\n          /* harmony export */\n          VisionEncoderDecoderModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.VisionEncoderDecoderModel\n          ),\n          /* harmony export */\n          VitMatteForImageMatting: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.VitMatteForImageMatting\n          ),\n          /* harmony export */\n          VitMatteImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.VitMatteImageProcessor\n          ),\n          /* harmony export */\n          VitMattePreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.VitMattePreTrainedModel\n          ),\n          /* harmony export */\n          VitPoseForPoseEstimation: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.VitPoseForPoseEstimation\n          ),\n          /* harmony export */\n          VitPoseImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.VitPoseImageProcessor\n          ),\n          /* harmony export */\n          VitPosePreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.VitPosePreTrainedModel\n          ),\n          /* harmony export */\n          VitsModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.VitsModel\n          ),\n          /* harmony export */\n          VitsModelOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.VitsModelOutput\n          ),\n          /* harmony export */\n          VitsPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.VitsPreTrainedModel\n          ),\n          /* harmony export */\n          VitsTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.VitsTokenizer\n          ),\n          /* harmony export */\n          Wav2Vec2BertForCTC: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2BertForCTC\n          ),\n          /* harmony export */\n          Wav2Vec2BertForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2BertForSequenceClassification\n          ),\n          /* harmony export */\n          Wav2Vec2BertModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2BertModel\n          ),\n          /* harmony export */\n          Wav2Vec2BertPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2BertPreTrainedModel\n          ),\n          /* harmony export */\n          Wav2Vec2CTCTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.Wav2Vec2CTCTokenizer\n          ),\n          /* harmony export */\n          Wav2Vec2FeatureExtractor: () => (\n            /* reexport safe */\n            _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.Wav2Vec2FeatureExtractor\n          ),\n          /* harmony export */\n          Wav2Vec2ForAudioFrameClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2ForAudioFrameClassification\n          ),\n          /* harmony export */\n          Wav2Vec2ForCTC: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2ForCTC\n          ),\n          /* harmony export */\n          Wav2Vec2ForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2ForSequenceClassification\n          ),\n          /* harmony export */\n          Wav2Vec2Model: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2Model\n          ),\n          /* harmony export */\n          Wav2Vec2PreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2PreTrainedModel\n          ),\n          /* harmony export */\n          Wav2Vec2Processor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.Wav2Vec2Processor\n          ),\n          /* harmony export */\n          Wav2Vec2ProcessorWithLM: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.Wav2Vec2ProcessorWithLM\n          ),\n          /* harmony export */\n          WavLMForAudioFrameClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMForAudioFrameClassification\n          ),\n          /* harmony export */\n          WavLMForCTC: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMForCTC\n          ),\n          /* harmony export */\n          WavLMForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMForSequenceClassification\n          ),\n          /* harmony export */\n          WavLMForXVector: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMForXVector\n          ),\n          /* harmony export */\n          WavLMModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMModel\n          ),\n          /* harmony export */\n          WavLMPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMPreTrainedModel\n          ),\n          /* harmony export */\n          WeSpeakerFeatureExtractor: () => (\n            /* reexport safe */\n            _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.WeSpeakerFeatureExtractor\n          ),\n          /* harmony export */\n          WeSpeakerResNetModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.WeSpeakerResNetModel\n          ),\n          /* harmony export */\n          WeSpeakerResNetPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.WeSpeakerResNetPreTrainedModel\n          ),\n          /* harmony export */\n          WhisperFeatureExtractor: () => (\n            /* reexport safe */\n            _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.WhisperFeatureExtractor\n          ),\n          /* harmony export */\n          WhisperForConditionalGeneration: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.WhisperForConditionalGeneration\n          ),\n          /* harmony export */\n          WhisperModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.WhisperModel\n          ),\n          /* harmony export */\n          WhisperPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.WhisperPreTrainedModel\n          ),\n          /* harmony export */\n          WhisperProcessor: () => (\n            /* reexport safe */\n            _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.WhisperProcessor\n          ),\n          /* harmony export */\n          WhisperTextStreamer: () => (\n            /* reexport safe */\n            _generation_streamers_js__WEBPACK_IMPORTED_MODULE_19__.WhisperTextStreamer\n          ),\n          /* harmony export */\n          WhisperTimeStampLogitsProcessor: () => (\n            /* reexport safe */\n            _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.WhisperTimeStampLogitsProcessor\n          ),\n          /* harmony export */\n          WhisperTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.WhisperTokenizer\n          ),\n          /* harmony export */\n          XLMForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMForQuestionAnswering\n          ),\n          /* harmony export */\n          XLMForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMForSequenceClassification\n          ),\n          /* harmony export */\n          XLMForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMForTokenClassification\n          ),\n          /* harmony export */\n          XLMModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMModel\n          ),\n          /* harmony export */\n          XLMPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMPreTrainedModel\n          ),\n          /* harmony export */\n          XLMRobertaForMaskedLM: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaForMaskedLM\n          ),\n          /* harmony export */\n          XLMRobertaForQuestionAnswering: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaForQuestionAnswering\n          ),\n          /* harmony export */\n          XLMRobertaForSequenceClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaForSequenceClassification\n          ),\n          /* harmony export */\n          XLMRobertaForTokenClassification: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaForTokenClassification\n          ),\n          /* harmony export */\n          XLMRobertaModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaModel\n          ),\n          /* harmony export */\n          XLMRobertaPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaPreTrainedModel\n          ),\n          /* harmony export */\n          XLMRobertaTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.XLMRobertaTokenizer\n          ),\n          /* harmony export */\n          XLMTokenizer: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.XLMTokenizer\n          ),\n          /* harmony export */\n          XLMWithLMHeadModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMWithLMHeadModel\n          ),\n          /* harmony export */\n          XVectorOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.XVectorOutput\n          ),\n          /* harmony export */\n          YolosFeatureExtractor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.YolosFeatureExtractor\n          ),\n          /* harmony export */\n          YolosForObjectDetection: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.YolosForObjectDetection\n          ),\n          /* harmony export */\n          YolosImageProcessor: () => (\n            /* reexport safe */\n            _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.YolosImageProcessor\n          ),\n          /* harmony export */\n          YolosModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.YolosModel\n          ),\n          /* harmony export */\n          YolosObjectDetectionOutput: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.YolosObjectDetectionOutput\n          ),\n          /* harmony export */\n          YolosPreTrainedModel: () => (\n            /* reexport safe */\n            _models_js__WEBPACK_IMPORTED_MODULE_2__.YolosPreTrainedModel\n          ),\n          /* harmony export */\n          ZeroShotAudioClassificationPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ZeroShotAudioClassificationPipeline\n          ),\n          /* harmony export */\n          ZeroShotClassificationPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ZeroShotClassificationPipeline\n          ),\n          /* harmony export */\n          ZeroShotImageClassificationPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ZeroShotImageClassificationPipeline\n          ),\n          /* harmony export */\n          ZeroShotObjectDetectionPipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ZeroShotObjectDetectionPipeline\n          ),\n          /* harmony export */\n          bankers_round: () => (\n            /* reexport safe */\n            _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.bankers_round\n          ),\n          /* harmony export */\n          cat: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.cat\n          ),\n          /* harmony export */\n          cos_sim: () => (\n            /* reexport safe */\n            _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.cos_sim\n          ),\n          /* harmony export */\n          dot: () => (\n            /* reexport safe */\n            _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.dot\n          ),\n          /* harmony export */\n          dynamic_time_warping: () => (\n            /* reexport safe */\n            _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.dynamic_time_warping\n          ),\n          /* harmony export */\n          env: () => (\n            /* reexport safe */\n            _env_js__WEBPACK_IMPORTED_MODULE_0__.env\n          ),\n          /* harmony export */\n          full: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.full\n          ),\n          /* harmony export */\n          full_like: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.full_like\n          ),\n          /* harmony export */\n          getKeyValueShapes: () => (\n            /* reexport safe */\n            _configs_js__WEBPACK_IMPORTED_MODULE_4__.getKeyValueShapes\n          ),\n          /* harmony export */\n          hamming: () => (\n            /* reexport safe */\n            _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__.hamming\n          ),\n          /* harmony export */\n          hanning: () => (\n            /* reexport safe */\n            _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__.hanning\n          ),\n          /* harmony export */\n          interpolate: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.interpolate\n          ),\n          /* harmony export */\n          interpolate_4d: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.interpolate_4d\n          ),\n          /* harmony export */\n          interpolate_data: () => (\n            /* reexport safe */\n            _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.interpolate_data\n          ),\n          /* harmony export */\n          is_chinese_char: () => (\n            /* reexport safe */\n            _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.is_chinese_char\n          ),\n          /* harmony export */\n          layer_norm: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.layer_norm\n          ),\n          /* harmony export */\n          load_image: () => (\n            /* reexport safe */\n            _utils_image_js__WEBPACK_IMPORTED_MODULE_6__.load_image\n          ),\n          /* harmony export */\n          load_video: () => (\n            /* reexport safe */\n            _utils_video_js__WEBPACK_IMPORTED_MODULE_7__.load_video\n          ),\n          /* harmony export */\n          log_softmax: () => (\n            /* reexport safe */\n            _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.log_softmax\n          ),\n          /* harmony export */\n          magnitude: () => (\n            /* reexport safe */\n            _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.magnitude\n          ),\n          /* harmony export */\n          matmul: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.matmul\n          ),\n          /* harmony export */\n          max: () => (\n            /* reexport safe */\n            _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.max\n          ),\n          /* harmony export */\n          mean: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.mean\n          ),\n          /* harmony export */\n          mean_pooling: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.mean_pooling\n          ),\n          /* harmony export */\n          medianFilter: () => (\n            /* reexport safe */\n            _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.medianFilter\n          ),\n          /* harmony export */\n          mel_filter_bank: () => (\n            /* reexport safe */\n            _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__.mel_filter_bank\n          ),\n          /* harmony export */\n          min: () => (\n            /* reexport safe */\n            _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.min\n          ),\n          /* harmony export */\n          ones: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.ones\n          ),\n          /* harmony export */\n          ones_like: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.ones_like\n          ),\n          /* harmony export */\n          permute: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.permute\n          ),\n          /* harmony export */\n          permute_data: () => (\n            /* reexport safe */\n            _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.permute_data\n          ),\n          /* harmony export */\n          pipeline: () => (\n            /* reexport safe */\n            _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.pipeline\n          ),\n          /* harmony export */\n          quantize_embeddings: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.quantize_embeddings\n          ),\n          /* harmony export */\n          rand: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.rand\n          ),\n          /* harmony export */\n          read_audio: () => (\n            /* reexport safe */\n            _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__.read_audio\n          ),\n          /* harmony export */\n          rfft: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.rfft\n          ),\n          /* harmony export */\n          round: () => (\n            /* reexport safe */\n            _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.round\n          ),\n          /* harmony export */\n          slice: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.slice\n          ),\n          /* harmony export */\n          softmax: () => (\n            /* reexport safe */\n            _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.softmax\n          ),\n          /* harmony export */\n          spectrogram: () => (\n            /* reexport safe */\n            _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__.spectrogram\n          ),\n          /* harmony export */\n          stack: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.stack\n          ),\n          /* harmony export */\n          std_mean: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.std_mean\n          ),\n          /* harmony export */\n          topk: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.topk\n          ),\n          /* harmony export */\n          window_function: () => (\n            /* reexport safe */\n            _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__.window_function\n          ),\n          /* harmony export */\n          zeros: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.zeros\n          ),\n          /* harmony export */\n          zeros_like: () => (\n            /* reexport safe */\n            _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.zeros_like\n          )\n          /* harmony export */\n        });\n        var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\n          /*! ./env.js */\n          \"./src/env.js\"\n        );\n        var _pipelines_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\n          /*! ./pipelines.js */\n          \"./src/pipelines.js\"\n        );\n        var _models_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\n          /*! ./models.js */\n          \"./src/models.js\"\n        );\n        var _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\n          /*! ./tokenizers.js */\n          \"./src/tokenizers.js\"\n        );\n        var _configs_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\n          /*! ./configs.js */\n          \"./src/configs.js\"\n        );\n        var _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\n          /*! ./utils/audio.js */\n          \"./src/utils/audio.js\"\n        );\n        var _utils_image_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(\n          /*! ./utils/image.js */\n          \"./src/utils/image.js\"\n        );\n        var _utils_video_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(\n          /*! ./utils/video.js */\n          \"./src/utils/video.js\"\n        );\n        var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(\n          /*! ./utils/tensor.js */\n          \"./src/utils/tensor.js\"\n        );\n        var _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(\n          /*! ./utils/maths.js */\n          \"./src/utils/maths.js\"\n        );\n        var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(\n          /*! ./base/feature_extraction_utils.js */\n          \"./src/base/feature_extraction_utils.js\"\n        );\n        var _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(\n          /*! ./models/feature_extractors.js */\n          \"./src/models/feature_extractors.js\"\n        );\n        var _models_auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(\n          /*! ./models/auto/feature_extraction_auto.js */\n          \"./src/models/auto/feature_extraction_auto.js\"\n        );\n        var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(\n          /*! ./base/image_processors_utils.js */\n          \"./src/base/image_processors_utils.js\"\n        );\n        var _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(\n          /*! ./models/image_processors.js */\n          \"./src/models/image_processors.js\"\n        );\n        var _models_auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(\n          /*! ./models/auto/image_processing_auto.js */\n          \"./src/models/auto/image_processing_auto.js\"\n        );\n        var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(\n          /*! ./base/processing_utils.js */\n          \"./src/base/processing_utils.js\"\n        );\n        var _models_processors_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(\n          /*! ./models/processors.js */\n          \"./src/models/processors.js\"\n        );\n        var _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(\n          /*! ./models/auto/processing_auto.js */\n          \"./src/models/auto/processing_auto.js\"\n        );\n        var _generation_streamers_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(\n          /*! ./generation/streamers.js */\n          \"./src/generation/streamers.js\"\n        );\n        var _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(\n          /*! ./generation/stopping_criteria.js */\n          \"./src/generation/stopping_criteria.js\"\n        );\n        var _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(\n          /*! ./generation/logits_process.js */\n          \"./src/generation/logits_process.js\"\n        );\n      })();\n      __webpack_exports__ASTFeatureExtractor = __webpack_exports__.ASTFeatureExtractor;\n      __webpack_exports__ASTForAudioClassification = __webpack_exports__.ASTForAudioClassification;\n      __webpack_exports__ASTModel = __webpack_exports__.ASTModel;\n      __webpack_exports__ASTPreTrainedModel = __webpack_exports__.ASTPreTrainedModel;\n      __webpack_exports__AlbertForMaskedLM = __webpack_exports__.AlbertForMaskedLM;\n      __webpack_exports__AlbertForQuestionAnswering = __webpack_exports__.AlbertForQuestionAnswering;\n      __webpack_exports__AlbertForSequenceClassification = __webpack_exports__.AlbertForSequenceClassification;\n      __webpack_exports__AlbertModel = __webpack_exports__.AlbertModel;\n      __webpack_exports__AlbertPreTrainedModel = __webpack_exports__.AlbertPreTrainedModel;\n      __webpack_exports__AlbertTokenizer = __webpack_exports__.AlbertTokenizer;\n      __webpack_exports__AudioClassificationPipeline = __webpack_exports__.AudioClassificationPipeline;\n      __webpack_exports__AutoConfig = __webpack_exports__.AutoConfig;\n      __webpack_exports__AutoFeatureExtractor = __webpack_exports__.AutoFeatureExtractor;\n      __webpack_exports__AutoImageProcessor = __webpack_exports__.AutoImageProcessor;\n      __webpack_exports__AutoModel = __webpack_exports__.AutoModel;\n      __webpack_exports__AutoModelForAudioClassification = __webpack_exports__.AutoModelForAudioClassification;\n      __webpack_exports__AutoModelForAudioFrameClassification = __webpack_exports__.AutoModelForAudioFrameClassification;\n      __webpack_exports__AutoModelForAudioTextToText = __webpack_exports__.AutoModelForAudioTextToText;\n      __webpack_exports__AutoModelForCTC = __webpack_exports__.AutoModelForCTC;\n      __webpack_exports__AutoModelForCausalLM = __webpack_exports__.AutoModelForCausalLM;\n      __webpack_exports__AutoModelForDepthEstimation = __webpack_exports__.AutoModelForDepthEstimation;\n      __webpack_exports__AutoModelForDocumentQuestionAnswering = __webpack_exports__.AutoModelForDocumentQuestionAnswering;\n      __webpack_exports__AutoModelForImageClassification = __webpack_exports__.AutoModelForImageClassification;\n      __webpack_exports__AutoModelForImageFeatureExtraction = __webpack_exports__.AutoModelForImageFeatureExtraction;\n      __webpack_exports__AutoModelForImageMatting = __webpack_exports__.AutoModelForImageMatting;\n      __webpack_exports__AutoModelForImageSegmentation = __webpack_exports__.AutoModelForImageSegmentation;\n      __webpack_exports__AutoModelForImageTextToText = __webpack_exports__.AutoModelForImageTextToText;\n      __webpack_exports__AutoModelForImageToImage = __webpack_exports__.AutoModelForImageToImage;\n      __webpack_exports__AutoModelForMaskGeneration = __webpack_exports__.AutoModelForMaskGeneration;\n      __webpack_exports__AutoModelForMaskedLM = __webpack_exports__.AutoModelForMaskedLM;\n      __webpack_exports__AutoModelForNormalEstimation = __webpack_exports__.AutoModelForNormalEstimation;\n      __webpack_exports__AutoModelForObjectDetection = __webpack_exports__.AutoModelForObjectDetection;\n      __webpack_exports__AutoModelForPoseEstimation = __webpack_exports__.AutoModelForPoseEstimation;\n      __webpack_exports__AutoModelForQuestionAnswering = __webpack_exports__.AutoModelForQuestionAnswering;\n      __webpack_exports__AutoModelForSemanticSegmentation = __webpack_exports__.AutoModelForSemanticSegmentation;\n      __webpack_exports__AutoModelForSeq2SeqLM = __webpack_exports__.AutoModelForSeq2SeqLM;\n      __webpack_exports__AutoModelForSequenceClassification = __webpack_exports__.AutoModelForSequenceClassification;\n      __webpack_exports__AutoModelForSpeechSeq2Seq = __webpack_exports__.AutoModelForSpeechSeq2Seq;\n      __webpack_exports__AutoModelForTextToSpectrogram = __webpack_exports__.AutoModelForTextToSpectrogram;\n      __webpack_exports__AutoModelForTextToWaveform = __webpack_exports__.AutoModelForTextToWaveform;\n      __webpack_exports__AutoModelForTokenClassification = __webpack_exports__.AutoModelForTokenClassification;\n      __webpack_exports__AutoModelForUniversalSegmentation = __webpack_exports__.AutoModelForUniversalSegmentation;\n      __webpack_exports__AutoModelForVision2Seq = __webpack_exports__.AutoModelForVision2Seq;\n      __webpack_exports__AutoModelForXVector = __webpack_exports__.AutoModelForXVector;\n      __webpack_exports__AutoModelForZeroShotObjectDetection = __webpack_exports__.AutoModelForZeroShotObjectDetection;\n      __webpack_exports__AutoProcessor = __webpack_exports__.AutoProcessor;\n      __webpack_exports__AutoTokenizer = __webpack_exports__.AutoTokenizer;\n      __webpack_exports__AutomaticSpeechRecognitionPipeline = __webpack_exports__.AutomaticSpeechRecognitionPipeline;\n      __webpack_exports__BackgroundRemovalPipeline = __webpack_exports__.BackgroundRemovalPipeline;\n      __webpack_exports__BartForConditionalGeneration = __webpack_exports__.BartForConditionalGeneration;\n      __webpack_exports__BartForSequenceClassification = __webpack_exports__.BartForSequenceClassification;\n      __webpack_exports__BartModel = __webpack_exports__.BartModel;\n      __webpack_exports__BartPretrainedModel = __webpack_exports__.BartPretrainedModel;\n      __webpack_exports__BartTokenizer = __webpack_exports__.BartTokenizer;\n      __webpack_exports__BaseModelOutput = __webpack_exports__.BaseModelOutput;\n      __webpack_exports__BaseStreamer = __webpack_exports__.BaseStreamer;\n      __webpack_exports__BeitFeatureExtractor = __webpack_exports__.BeitFeatureExtractor;\n      __webpack_exports__BeitForImageClassification = __webpack_exports__.BeitForImageClassification;\n      __webpack_exports__BeitModel = __webpack_exports__.BeitModel;\n      __webpack_exports__BeitPreTrainedModel = __webpack_exports__.BeitPreTrainedModel;\n      __webpack_exports__BertForMaskedLM = __webpack_exports__.BertForMaskedLM;\n      __webpack_exports__BertForQuestionAnswering = __webpack_exports__.BertForQuestionAnswering;\n      __webpack_exports__BertForSequenceClassification = __webpack_exports__.BertForSequenceClassification;\n      __webpack_exports__BertForTokenClassification = __webpack_exports__.BertForTokenClassification;\n      __webpack_exports__BertModel = __webpack_exports__.BertModel;\n      __webpack_exports__BertPreTrainedModel = __webpack_exports__.BertPreTrainedModel;\n      __webpack_exports__BertTokenizer = __webpack_exports__.BertTokenizer;\n      __webpack_exports__BitImageProcessor = __webpack_exports__.BitImageProcessor;\n      __webpack_exports__BlenderbotForConditionalGeneration = __webpack_exports__.BlenderbotForConditionalGeneration;\n      __webpack_exports__BlenderbotModel = __webpack_exports__.BlenderbotModel;\n      __webpack_exports__BlenderbotPreTrainedModel = __webpack_exports__.BlenderbotPreTrainedModel;\n      __webpack_exports__BlenderbotSmallForConditionalGeneration = __webpack_exports__.BlenderbotSmallForConditionalGeneration;\n      __webpack_exports__BlenderbotSmallModel = __webpack_exports__.BlenderbotSmallModel;\n      __webpack_exports__BlenderbotSmallPreTrainedModel = __webpack_exports__.BlenderbotSmallPreTrainedModel;\n      __webpack_exports__BlenderbotSmallTokenizer = __webpack_exports__.BlenderbotSmallTokenizer;\n      __webpack_exports__BlenderbotTokenizer = __webpack_exports__.BlenderbotTokenizer;\n      __webpack_exports__BloomForCausalLM = __webpack_exports__.BloomForCausalLM;\n      __webpack_exports__BloomModel = __webpack_exports__.BloomModel;\n      __webpack_exports__BloomPreTrainedModel = __webpack_exports__.BloomPreTrainedModel;\n      __webpack_exports__BloomTokenizer = __webpack_exports__.BloomTokenizer;\n      __webpack_exports__CLIPFeatureExtractor = __webpack_exports__.CLIPFeatureExtractor;\n      __webpack_exports__CLIPImageProcessor = __webpack_exports__.CLIPImageProcessor;\n      __webpack_exports__CLIPModel = __webpack_exports__.CLIPModel;\n      __webpack_exports__CLIPPreTrainedModel = __webpack_exports__.CLIPPreTrainedModel;\n      __webpack_exports__CLIPSegForImageSegmentation = __webpack_exports__.CLIPSegForImageSegmentation;\n      __webpack_exports__CLIPSegModel = __webpack_exports__.CLIPSegModel;\n      __webpack_exports__CLIPSegPreTrainedModel = __webpack_exports__.CLIPSegPreTrainedModel;\n      __webpack_exports__CLIPTextModel = __webpack_exports__.CLIPTextModel;\n      __webpack_exports__CLIPTextModelWithProjection = __webpack_exports__.CLIPTextModelWithProjection;\n      __webpack_exports__CLIPTokenizer = __webpack_exports__.CLIPTokenizer;\n      __webpack_exports__CLIPVisionModel = __webpack_exports__.CLIPVisionModel;\n      __webpack_exports__CLIPVisionModelWithProjection = __webpack_exports__.CLIPVisionModelWithProjection;\n      __webpack_exports__CamembertForMaskedLM = __webpack_exports__.CamembertForMaskedLM;\n      __webpack_exports__CamembertForQuestionAnswering = __webpack_exports__.CamembertForQuestionAnswering;\n      __webpack_exports__CamembertForSequenceClassification = __webpack_exports__.CamembertForSequenceClassification;\n      __webpack_exports__CamembertForTokenClassification = __webpack_exports__.CamembertForTokenClassification;\n      __webpack_exports__CamembertModel = __webpack_exports__.CamembertModel;\n      __webpack_exports__CamembertPreTrainedModel = __webpack_exports__.CamembertPreTrainedModel;\n      __webpack_exports__CamembertTokenizer = __webpack_exports__.CamembertTokenizer;\n      __webpack_exports__CausalLMOutput = __webpack_exports__.CausalLMOutput;\n      __webpack_exports__CausalLMOutputWithPast = __webpack_exports__.CausalLMOutputWithPast;\n      __webpack_exports__ChineseCLIPFeatureExtractor = __webpack_exports__.ChineseCLIPFeatureExtractor;\n      __webpack_exports__ChineseCLIPModel = __webpack_exports__.ChineseCLIPModel;\n      __webpack_exports__ChineseCLIPPreTrainedModel = __webpack_exports__.ChineseCLIPPreTrainedModel;\n      __webpack_exports__ClapAudioModelWithProjection = __webpack_exports__.ClapAudioModelWithProjection;\n      __webpack_exports__ClapFeatureExtractor = __webpack_exports__.ClapFeatureExtractor;\n      __webpack_exports__ClapModel = __webpack_exports__.ClapModel;\n      __webpack_exports__ClapPreTrainedModel = __webpack_exports__.ClapPreTrainedModel;\n      __webpack_exports__ClapTextModelWithProjection = __webpack_exports__.ClapTextModelWithProjection;\n      __webpack_exports__ClassifierFreeGuidanceLogitsProcessor = __webpack_exports__.ClassifierFreeGuidanceLogitsProcessor;\n      __webpack_exports__CodeGenForCausalLM = __webpack_exports__.CodeGenForCausalLM;\n      __webpack_exports__CodeGenModel = __webpack_exports__.CodeGenModel;\n      __webpack_exports__CodeGenPreTrainedModel = __webpack_exports__.CodeGenPreTrainedModel;\n      __webpack_exports__CodeGenTokenizer = __webpack_exports__.CodeGenTokenizer;\n      __webpack_exports__CodeLlamaTokenizer = __webpack_exports__.CodeLlamaTokenizer;\n      __webpack_exports__CohereForCausalLM = __webpack_exports__.CohereForCausalLM;\n      __webpack_exports__CohereModel = __webpack_exports__.CohereModel;\n      __webpack_exports__CoherePreTrainedModel = __webpack_exports__.CoherePreTrainedModel;\n      __webpack_exports__CohereTokenizer = __webpack_exports__.CohereTokenizer;\n      __webpack_exports__ConvBertForMaskedLM = __webpack_exports__.ConvBertForMaskedLM;\n      __webpack_exports__ConvBertForQuestionAnswering = __webpack_exports__.ConvBertForQuestionAnswering;\n      __webpack_exports__ConvBertForSequenceClassification = __webpack_exports__.ConvBertForSequenceClassification;\n      __webpack_exports__ConvBertForTokenClassification = __webpack_exports__.ConvBertForTokenClassification;\n      __webpack_exports__ConvBertModel = __webpack_exports__.ConvBertModel;\n      __webpack_exports__ConvBertPreTrainedModel = __webpack_exports__.ConvBertPreTrainedModel;\n      __webpack_exports__ConvBertTokenizer = __webpack_exports__.ConvBertTokenizer;\n      __webpack_exports__ConvNextFeatureExtractor = __webpack_exports__.ConvNextFeatureExtractor;\n      __webpack_exports__ConvNextForImageClassification = __webpack_exports__.ConvNextForImageClassification;\n      __webpack_exports__ConvNextImageProcessor = __webpack_exports__.ConvNextImageProcessor;\n      __webpack_exports__ConvNextModel = __webpack_exports__.ConvNextModel;\n      __webpack_exports__ConvNextPreTrainedModel = __webpack_exports__.ConvNextPreTrainedModel;\n      __webpack_exports__ConvNextV2ForImageClassification = __webpack_exports__.ConvNextV2ForImageClassification;\n      __webpack_exports__ConvNextV2Model = __webpack_exports__.ConvNextV2Model;\n      __webpack_exports__ConvNextV2PreTrainedModel = __webpack_exports__.ConvNextV2PreTrainedModel;\n      __webpack_exports__DPTFeatureExtractor = __webpack_exports__.DPTFeatureExtractor;\n      __webpack_exports__DPTForDepthEstimation = __webpack_exports__.DPTForDepthEstimation;\n      __webpack_exports__DPTImageProcessor = __webpack_exports__.DPTImageProcessor;\n      __webpack_exports__DPTModel = __webpack_exports__.DPTModel;\n      __webpack_exports__DPTPreTrainedModel = __webpack_exports__.DPTPreTrainedModel;\n      __webpack_exports__DacDecoderModel = __webpack_exports__.DacDecoderModel;\n      __webpack_exports__DacDecoderOutput = __webpack_exports__.DacDecoderOutput;\n      __webpack_exports__DacEncoderModel = __webpack_exports__.DacEncoderModel;\n      __webpack_exports__DacEncoderOutput = __webpack_exports__.DacEncoderOutput;\n      __webpack_exports__DacFeatureExtractor = __webpack_exports__.DacFeatureExtractor;\n      __webpack_exports__DacModel = __webpack_exports__.DacModel;\n      __webpack_exports__DacPreTrainedModel = __webpack_exports__.DacPreTrainedModel;\n      __webpack_exports__DataTypeMap = __webpack_exports__.DataTypeMap;\n      __webpack_exports__DebertaForMaskedLM = __webpack_exports__.DebertaForMaskedLM;\n      __webpack_exports__DebertaForQuestionAnswering = __webpack_exports__.DebertaForQuestionAnswering;\n      __webpack_exports__DebertaForSequenceClassification = __webpack_exports__.DebertaForSequenceClassification;\n      __webpack_exports__DebertaForTokenClassification = __webpack_exports__.DebertaForTokenClassification;\n      __webpack_exports__DebertaModel = __webpack_exports__.DebertaModel;\n      __webpack_exports__DebertaPreTrainedModel = __webpack_exports__.DebertaPreTrainedModel;\n      __webpack_exports__DebertaTokenizer = __webpack_exports__.DebertaTokenizer;\n      __webpack_exports__DebertaV2ForMaskedLM = __webpack_exports__.DebertaV2ForMaskedLM;\n      __webpack_exports__DebertaV2ForQuestionAnswering = __webpack_exports__.DebertaV2ForQuestionAnswering;\n      __webpack_exports__DebertaV2ForSequenceClassification = __webpack_exports__.DebertaV2ForSequenceClassification;\n      __webpack_exports__DebertaV2ForTokenClassification = __webpack_exports__.DebertaV2ForTokenClassification;\n      __webpack_exports__DebertaV2Model = __webpack_exports__.DebertaV2Model;\n      __webpack_exports__DebertaV2PreTrainedModel = __webpack_exports__.DebertaV2PreTrainedModel;\n      __webpack_exports__DebertaV2Tokenizer = __webpack_exports__.DebertaV2Tokenizer;\n      __webpack_exports__DecisionTransformerModel = __webpack_exports__.DecisionTransformerModel;\n      __webpack_exports__DecisionTransformerPreTrainedModel = __webpack_exports__.DecisionTransformerPreTrainedModel;\n      __webpack_exports__DeiTFeatureExtractor = __webpack_exports__.DeiTFeatureExtractor;\n      __webpack_exports__DeiTForImageClassification = __webpack_exports__.DeiTForImageClassification;\n      __webpack_exports__DeiTImageProcessor = __webpack_exports__.DeiTImageProcessor;\n      __webpack_exports__DeiTModel = __webpack_exports__.DeiTModel;\n      __webpack_exports__DeiTPreTrainedModel = __webpack_exports__.DeiTPreTrainedModel;\n      __webpack_exports__DepthAnythingForDepthEstimation = __webpack_exports__.DepthAnythingForDepthEstimation;\n      __webpack_exports__DepthAnythingPreTrainedModel = __webpack_exports__.DepthAnythingPreTrainedModel;\n      __webpack_exports__DepthEstimationPipeline = __webpack_exports__.DepthEstimationPipeline;\n      __webpack_exports__DepthProForDepthEstimation = __webpack_exports__.DepthProForDepthEstimation;\n      __webpack_exports__DepthProPreTrainedModel = __webpack_exports__.DepthProPreTrainedModel;\n      __webpack_exports__DetrFeatureExtractor = __webpack_exports__.DetrFeatureExtractor;\n      __webpack_exports__DetrForObjectDetection = __webpack_exports__.DetrForObjectDetection;\n      __webpack_exports__DetrForSegmentation = __webpack_exports__.DetrForSegmentation;\n      __webpack_exports__DetrImageProcessor = __webpack_exports__.DetrImageProcessor;\n      __webpack_exports__DetrModel = __webpack_exports__.DetrModel;\n      __webpack_exports__DetrObjectDetectionOutput = __webpack_exports__.DetrObjectDetectionOutput;\n      __webpack_exports__DetrPreTrainedModel = __webpack_exports__.DetrPreTrainedModel;\n      __webpack_exports__DetrSegmentationOutput = __webpack_exports__.DetrSegmentationOutput;\n      __webpack_exports__Dinov2ForImageClassification = __webpack_exports__.Dinov2ForImageClassification;\n      __webpack_exports__Dinov2Model = __webpack_exports__.Dinov2Model;\n      __webpack_exports__Dinov2PreTrainedModel = __webpack_exports__.Dinov2PreTrainedModel;\n      __webpack_exports__Dinov2WithRegistersForImageClassification = __webpack_exports__.Dinov2WithRegistersForImageClassification;\n      __webpack_exports__Dinov2WithRegistersModel = __webpack_exports__.Dinov2WithRegistersModel;\n      __webpack_exports__Dinov2WithRegistersPreTrainedModel = __webpack_exports__.Dinov2WithRegistersPreTrainedModel;\n      __webpack_exports__DistilBertForMaskedLM = __webpack_exports__.DistilBertForMaskedLM;\n      __webpack_exports__DistilBertForQuestionAnswering = __webpack_exports__.DistilBertForQuestionAnswering;\n      __webpack_exports__DistilBertForSequenceClassification = __webpack_exports__.DistilBertForSequenceClassification;\n      __webpack_exports__DistilBertForTokenClassification = __webpack_exports__.DistilBertForTokenClassification;\n      __webpack_exports__DistilBertModel = __webpack_exports__.DistilBertModel;\n      __webpack_exports__DistilBertPreTrainedModel = __webpack_exports__.DistilBertPreTrainedModel;\n      __webpack_exports__DistilBertTokenizer = __webpack_exports__.DistilBertTokenizer;\n      __webpack_exports__DocumentQuestionAnsweringPipeline = __webpack_exports__.DocumentQuestionAnsweringPipeline;\n      __webpack_exports__DonutFeatureExtractor = __webpack_exports__.DonutFeatureExtractor;\n      __webpack_exports__DonutImageProcessor = __webpack_exports__.DonutImageProcessor;\n      __webpack_exports__DonutSwinModel = __webpack_exports__.DonutSwinModel;\n      __webpack_exports__DonutSwinPreTrainedModel = __webpack_exports__.DonutSwinPreTrainedModel;\n      __webpack_exports__EfficientNetForImageClassification = __webpack_exports__.EfficientNetForImageClassification;\n      __webpack_exports__EfficientNetImageProcessor = __webpack_exports__.EfficientNetImageProcessor;\n      __webpack_exports__EfficientNetModel = __webpack_exports__.EfficientNetModel;\n      __webpack_exports__EfficientNetPreTrainedModel = __webpack_exports__.EfficientNetPreTrainedModel;\n      __webpack_exports__ElectraForMaskedLM = __webpack_exports__.ElectraForMaskedLM;\n      __webpack_exports__ElectraForQuestionAnswering = __webpack_exports__.ElectraForQuestionAnswering;\n      __webpack_exports__ElectraForSequenceClassification = __webpack_exports__.ElectraForSequenceClassification;\n      __webpack_exports__ElectraForTokenClassification = __webpack_exports__.ElectraForTokenClassification;\n      __webpack_exports__ElectraModel = __webpack_exports__.ElectraModel;\n      __webpack_exports__ElectraPreTrainedModel = __webpack_exports__.ElectraPreTrainedModel;\n      __webpack_exports__ElectraTokenizer = __webpack_exports__.ElectraTokenizer;\n      __webpack_exports__EncodecFeatureExtractor = __webpack_exports__.EncodecFeatureExtractor;\n      __webpack_exports__EosTokenCriteria = __webpack_exports__.EosTokenCriteria;\n      __webpack_exports__EsmForMaskedLM = __webpack_exports__.EsmForMaskedLM;\n      __webpack_exports__EsmForSequenceClassification = __webpack_exports__.EsmForSequenceClassification;\n      __webpack_exports__EsmForTokenClassification = __webpack_exports__.EsmForTokenClassification;\n      __webpack_exports__EsmModel = __webpack_exports__.EsmModel;\n      __webpack_exports__EsmPreTrainedModel = __webpack_exports__.EsmPreTrainedModel;\n      __webpack_exports__EsmTokenizer = __webpack_exports__.EsmTokenizer;\n      __webpack_exports__ExaoneForCausalLM = __webpack_exports__.ExaoneForCausalLM;\n      __webpack_exports__ExaoneModel = __webpack_exports__.ExaoneModel;\n      __webpack_exports__ExaonePreTrainedModel = __webpack_exports__.ExaonePreTrainedModel;\n      __webpack_exports__FFT = __webpack_exports__.FFT;\n      __webpack_exports__FalconForCausalLM = __webpack_exports__.FalconForCausalLM;\n      __webpack_exports__FalconModel = __webpack_exports__.FalconModel;\n      __webpack_exports__FalconPreTrainedModel = __webpack_exports__.FalconPreTrainedModel;\n      __webpack_exports__FalconTokenizer = __webpack_exports__.FalconTokenizer;\n      __webpack_exports__FastViTForImageClassification = __webpack_exports__.FastViTForImageClassification;\n      __webpack_exports__FastViTModel = __webpack_exports__.FastViTModel;\n      __webpack_exports__FastViTPreTrainedModel = __webpack_exports__.FastViTPreTrainedModel;\n      __webpack_exports__FeatureExtractionPipeline = __webpack_exports__.FeatureExtractionPipeline;\n      __webpack_exports__FeatureExtractor = __webpack_exports__.FeatureExtractor;\n      __webpack_exports__FillMaskPipeline = __webpack_exports__.FillMaskPipeline;\n      __webpack_exports__Florence2ForConditionalGeneration = __webpack_exports__.Florence2ForConditionalGeneration;\n      __webpack_exports__Florence2PreTrainedModel = __webpack_exports__.Florence2PreTrainedModel;\n      __webpack_exports__Florence2Processor = __webpack_exports__.Florence2Processor;\n      __webpack_exports__ForcedBOSTokenLogitsProcessor = __webpack_exports__.ForcedBOSTokenLogitsProcessor;\n      __webpack_exports__ForcedEOSTokenLogitsProcessor = __webpack_exports__.ForcedEOSTokenLogitsProcessor;\n      __webpack_exports__GLPNFeatureExtractor = __webpack_exports__.GLPNFeatureExtractor;\n      __webpack_exports__GLPNForDepthEstimation = __webpack_exports__.GLPNForDepthEstimation;\n      __webpack_exports__GLPNModel = __webpack_exports__.GLPNModel;\n      __webpack_exports__GLPNPreTrainedModel = __webpack_exports__.GLPNPreTrainedModel;\n      __webpack_exports__GPT2LMHeadModel = __webpack_exports__.GPT2LMHeadModel;\n      __webpack_exports__GPT2Model = __webpack_exports__.GPT2Model;\n      __webpack_exports__GPT2PreTrainedModel = __webpack_exports__.GPT2PreTrainedModel;\n      __webpack_exports__GPT2Tokenizer = __webpack_exports__.GPT2Tokenizer;\n      __webpack_exports__GPTBigCodeForCausalLM = __webpack_exports__.GPTBigCodeForCausalLM;\n      __webpack_exports__GPTBigCodeModel = __webpack_exports__.GPTBigCodeModel;\n      __webpack_exports__GPTBigCodePreTrainedModel = __webpack_exports__.GPTBigCodePreTrainedModel;\n      __webpack_exports__GPTJForCausalLM = __webpack_exports__.GPTJForCausalLM;\n      __webpack_exports__GPTJModel = __webpack_exports__.GPTJModel;\n      __webpack_exports__GPTJPreTrainedModel = __webpack_exports__.GPTJPreTrainedModel;\n      __webpack_exports__GPTNeoForCausalLM = __webpack_exports__.GPTNeoForCausalLM;\n      __webpack_exports__GPTNeoModel = __webpack_exports__.GPTNeoModel;\n      __webpack_exports__GPTNeoPreTrainedModel = __webpack_exports__.GPTNeoPreTrainedModel;\n      __webpack_exports__GPTNeoXForCausalLM = __webpack_exports__.GPTNeoXForCausalLM;\n      __webpack_exports__GPTNeoXModel = __webpack_exports__.GPTNeoXModel;\n      __webpack_exports__GPTNeoXPreTrainedModel = __webpack_exports__.GPTNeoXPreTrainedModel;\n      __webpack_exports__GPTNeoXTokenizer = __webpack_exports__.GPTNeoXTokenizer;\n      __webpack_exports__Gemma2ForCausalLM = __webpack_exports__.Gemma2ForCausalLM;\n      __webpack_exports__Gemma2Model = __webpack_exports__.Gemma2Model;\n      __webpack_exports__Gemma2PreTrainedModel = __webpack_exports__.Gemma2PreTrainedModel;\n      __webpack_exports__Gemma3ForCausalLM = __webpack_exports__.Gemma3ForCausalLM;\n      __webpack_exports__Gemma3Model = __webpack_exports__.Gemma3Model;\n      __webpack_exports__Gemma3PreTrainedModel = __webpack_exports__.Gemma3PreTrainedModel;\n      __webpack_exports__GemmaForCausalLM = __webpack_exports__.GemmaForCausalLM;\n      __webpack_exports__GemmaModel = __webpack_exports__.GemmaModel;\n      __webpack_exports__GemmaPreTrainedModel = __webpack_exports__.GemmaPreTrainedModel;\n      __webpack_exports__GemmaTokenizer = __webpack_exports__.GemmaTokenizer;\n      __webpack_exports__GlmForCausalLM = __webpack_exports__.GlmForCausalLM;\n      __webpack_exports__GlmModel = __webpack_exports__.GlmModel;\n      __webpack_exports__GlmPreTrainedModel = __webpack_exports__.GlmPreTrainedModel;\n      __webpack_exports__GraniteForCausalLM = __webpack_exports__.GraniteForCausalLM;\n      __webpack_exports__GraniteModel = __webpack_exports__.GraniteModel;\n      __webpack_exports__GranitePreTrainedModel = __webpack_exports__.GranitePreTrainedModel;\n      __webpack_exports__Grok1Tokenizer = __webpack_exports__.Grok1Tokenizer;\n      __webpack_exports__GroundingDinoForObjectDetection = __webpack_exports__.GroundingDinoForObjectDetection;\n      __webpack_exports__GroundingDinoImageProcessor = __webpack_exports__.GroundingDinoImageProcessor;\n      __webpack_exports__GroundingDinoPreTrainedModel = __webpack_exports__.GroundingDinoPreTrainedModel;\n      __webpack_exports__GroundingDinoProcessor = __webpack_exports__.GroundingDinoProcessor;\n      __webpack_exports__GroupViTModel = __webpack_exports__.GroupViTModel;\n      __webpack_exports__GroupViTPreTrainedModel = __webpack_exports__.GroupViTPreTrainedModel;\n      __webpack_exports__HeliumForCausalLM = __webpack_exports__.HeliumForCausalLM;\n      __webpack_exports__HeliumModel = __webpack_exports__.HeliumModel;\n      __webpack_exports__HeliumPreTrainedModel = __webpack_exports__.HeliumPreTrainedModel;\n      __webpack_exports__HerbertTokenizer = __webpack_exports__.HerbertTokenizer;\n      __webpack_exports__HieraForImageClassification = __webpack_exports__.HieraForImageClassification;\n      __webpack_exports__HieraModel = __webpack_exports__.HieraModel;\n      __webpack_exports__HieraPreTrainedModel = __webpack_exports__.HieraPreTrainedModel;\n      __webpack_exports__HubertForCTC = __webpack_exports__.HubertForCTC;\n      __webpack_exports__HubertForSequenceClassification = __webpack_exports__.HubertForSequenceClassification;\n      __webpack_exports__HubertModel = __webpack_exports__.HubertModel;\n      __webpack_exports__HubertPreTrainedModel = __webpack_exports__.HubertPreTrainedModel;\n      __webpack_exports__IJepaForImageClassification = __webpack_exports__.IJepaForImageClassification;\n      __webpack_exports__IJepaModel = __webpack_exports__.IJepaModel;\n      __webpack_exports__IJepaPreTrainedModel = __webpack_exports__.IJepaPreTrainedModel;\n      __webpack_exports__Idefics3ForConditionalGeneration = __webpack_exports__.Idefics3ForConditionalGeneration;\n      __webpack_exports__Idefics3ImageProcessor = __webpack_exports__.Idefics3ImageProcessor;\n      __webpack_exports__Idefics3PreTrainedModel = __webpack_exports__.Idefics3PreTrainedModel;\n      __webpack_exports__Idefics3Processor = __webpack_exports__.Idefics3Processor;\n      __webpack_exports__ImageClassificationPipeline = __webpack_exports__.ImageClassificationPipeline;\n      __webpack_exports__ImageFeatureExtractionPipeline = __webpack_exports__.ImageFeatureExtractionPipeline;\n      __webpack_exports__ImageFeatureExtractor = __webpack_exports__.ImageFeatureExtractor;\n      __webpack_exports__ImageMattingOutput = __webpack_exports__.ImageMattingOutput;\n      __webpack_exports__ImageProcessor = __webpack_exports__.ImageProcessor;\n      __webpack_exports__ImageSegmentationPipeline = __webpack_exports__.ImageSegmentationPipeline;\n      __webpack_exports__ImageToImagePipeline = __webpack_exports__.ImageToImagePipeline;\n      __webpack_exports__ImageToTextPipeline = __webpack_exports__.ImageToTextPipeline;\n      __webpack_exports__InterruptableStoppingCriteria = __webpack_exports__.InterruptableStoppingCriteria;\n      __webpack_exports__JAISLMHeadModel = __webpack_exports__.JAISLMHeadModel;\n      __webpack_exports__JAISModel = __webpack_exports__.JAISModel;\n      __webpack_exports__JAISPreTrainedModel = __webpack_exports__.JAISPreTrainedModel;\n      __webpack_exports__JinaCLIPImageProcessor = __webpack_exports__.JinaCLIPImageProcessor;\n      __webpack_exports__JinaCLIPModel = __webpack_exports__.JinaCLIPModel;\n      __webpack_exports__JinaCLIPPreTrainedModel = __webpack_exports__.JinaCLIPPreTrainedModel;\n      __webpack_exports__JinaCLIPProcessor = __webpack_exports__.JinaCLIPProcessor;\n      __webpack_exports__JinaCLIPTextModel = __webpack_exports__.JinaCLIPTextModel;\n      __webpack_exports__JinaCLIPVisionModel = __webpack_exports__.JinaCLIPVisionModel;\n      __webpack_exports__LiteWhisperForConditionalGeneration = __webpack_exports__.LiteWhisperForConditionalGeneration;\n      __webpack_exports__LlamaForCausalLM = __webpack_exports__.LlamaForCausalLM;\n      __webpack_exports__LlamaModel = __webpack_exports__.LlamaModel;\n      __webpack_exports__LlamaPreTrainedModel = __webpack_exports__.LlamaPreTrainedModel;\n      __webpack_exports__LlamaTokenizer = __webpack_exports__.LlamaTokenizer;\n      __webpack_exports__LlavaForConditionalGeneration = __webpack_exports__.LlavaForConditionalGeneration;\n      __webpack_exports__LlavaOnevisionForConditionalGeneration = __webpack_exports__.LlavaOnevisionForConditionalGeneration;\n      __webpack_exports__LlavaOnevisionImageProcessor = __webpack_exports__.LlavaOnevisionImageProcessor;\n      __webpack_exports__LlavaPreTrainedModel = __webpack_exports__.LlavaPreTrainedModel;\n      __webpack_exports__LogitsProcessor = __webpack_exports__.LogitsProcessor;\n      __webpack_exports__LogitsProcessorList = __webpack_exports__.LogitsProcessorList;\n      __webpack_exports__LogitsWarper = __webpack_exports__.LogitsWarper;\n      __webpack_exports__LongT5ForConditionalGeneration = __webpack_exports__.LongT5ForConditionalGeneration;\n      __webpack_exports__LongT5Model = __webpack_exports__.LongT5Model;\n      __webpack_exports__LongT5PreTrainedModel = __webpack_exports__.LongT5PreTrainedModel;\n      __webpack_exports__M2M100ForConditionalGeneration = __webpack_exports__.M2M100ForConditionalGeneration;\n      __webpack_exports__M2M100Model = __webpack_exports__.M2M100Model;\n      __webpack_exports__M2M100PreTrainedModel = __webpack_exports__.M2M100PreTrainedModel;\n      __webpack_exports__M2M100Tokenizer = __webpack_exports__.M2M100Tokenizer;\n      __webpack_exports__MBart50Tokenizer = __webpack_exports__.MBart50Tokenizer;\n      __webpack_exports__MBartForCausalLM = __webpack_exports__.MBartForCausalLM;\n      __webpack_exports__MBartForConditionalGeneration = __webpack_exports__.MBartForConditionalGeneration;\n      __webpack_exports__MBartForSequenceClassification = __webpack_exports__.MBartForSequenceClassification;\n      __webpack_exports__MBartModel = __webpack_exports__.MBartModel;\n      __webpack_exports__MBartPreTrainedModel = __webpack_exports__.MBartPreTrainedModel;\n      __webpack_exports__MBartTokenizer = __webpack_exports__.MBartTokenizer;\n      __webpack_exports__MPNetForMaskedLM = __webpack_exports__.MPNetForMaskedLM;\n      __webpack_exports__MPNetForQuestionAnswering = __webpack_exports__.MPNetForQuestionAnswering;\n      __webpack_exports__MPNetForSequenceClassification = __webpack_exports__.MPNetForSequenceClassification;\n      __webpack_exports__MPNetForTokenClassification = __webpack_exports__.MPNetForTokenClassification;\n      __webpack_exports__MPNetModel = __webpack_exports__.MPNetModel;\n      __webpack_exports__MPNetPreTrainedModel = __webpack_exports__.MPNetPreTrainedModel;\n      __webpack_exports__MPNetTokenizer = __webpack_exports__.MPNetTokenizer;\n      __webpack_exports__MT5ForConditionalGeneration = __webpack_exports__.MT5ForConditionalGeneration;\n      __webpack_exports__MT5Model = __webpack_exports__.MT5Model;\n      __webpack_exports__MT5PreTrainedModel = __webpack_exports__.MT5PreTrainedModel;\n      __webpack_exports__MarianMTModel = __webpack_exports__.MarianMTModel;\n      __webpack_exports__MarianModel = __webpack_exports__.MarianModel;\n      __webpack_exports__MarianPreTrainedModel = __webpack_exports__.MarianPreTrainedModel;\n      __webpack_exports__MarianTokenizer = __webpack_exports__.MarianTokenizer;\n      __webpack_exports__Mask2FormerImageProcessor = __webpack_exports__.Mask2FormerImageProcessor;\n      __webpack_exports__MaskFormerFeatureExtractor = __webpack_exports__.MaskFormerFeatureExtractor;\n      __webpack_exports__MaskFormerForInstanceSegmentation = __webpack_exports__.MaskFormerForInstanceSegmentation;\n      __webpack_exports__MaskFormerImageProcessor = __webpack_exports__.MaskFormerImageProcessor;\n      __webpack_exports__MaskFormerModel = __webpack_exports__.MaskFormerModel;\n      __webpack_exports__MaskFormerPreTrainedModel = __webpack_exports__.MaskFormerPreTrainedModel;\n      __webpack_exports__MaskedLMOutput = __webpack_exports__.MaskedLMOutput;\n      __webpack_exports__MaxLengthCriteria = __webpack_exports__.MaxLengthCriteria;\n      __webpack_exports__Metric3DForDepthEstimation = __webpack_exports__.Metric3DForDepthEstimation;\n      __webpack_exports__Metric3DPreTrainedModel = __webpack_exports__.Metric3DPreTrainedModel;\n      __webpack_exports__Metric3Dv2ForDepthEstimation = __webpack_exports__.Metric3Dv2ForDepthEstimation;\n      __webpack_exports__Metric3Dv2PreTrainedModel = __webpack_exports__.Metric3Dv2PreTrainedModel;\n      __webpack_exports__MgpstrForSceneTextRecognition = __webpack_exports__.MgpstrForSceneTextRecognition;\n      __webpack_exports__MgpstrModelOutput = __webpack_exports__.MgpstrModelOutput;\n      __webpack_exports__MgpstrPreTrainedModel = __webpack_exports__.MgpstrPreTrainedModel;\n      __webpack_exports__MgpstrProcessor = __webpack_exports__.MgpstrProcessor;\n      __webpack_exports__MgpstrTokenizer = __webpack_exports__.MgpstrTokenizer;\n      __webpack_exports__MimiDecoderModel = __webpack_exports__.MimiDecoderModel;\n      __webpack_exports__MimiDecoderOutput = __webpack_exports__.MimiDecoderOutput;\n      __webpack_exports__MimiEncoderModel = __webpack_exports__.MimiEncoderModel;\n      __webpack_exports__MimiEncoderOutput = __webpack_exports__.MimiEncoderOutput;\n      __webpack_exports__MimiModel = __webpack_exports__.MimiModel;\n      __webpack_exports__MimiPreTrainedModel = __webpack_exports__.MimiPreTrainedModel;\n      __webpack_exports__MinLengthLogitsProcessor = __webpack_exports__.MinLengthLogitsProcessor;\n      __webpack_exports__MinNewTokensLengthLogitsProcessor = __webpack_exports__.MinNewTokensLengthLogitsProcessor;\n      __webpack_exports__MistralForCausalLM = __webpack_exports__.MistralForCausalLM;\n      __webpack_exports__MistralModel = __webpack_exports__.MistralModel;\n      __webpack_exports__MistralPreTrainedModel = __webpack_exports__.MistralPreTrainedModel;\n      __webpack_exports__MobileBertForMaskedLM = __webpack_exports__.MobileBertForMaskedLM;\n      __webpack_exports__MobileBertForQuestionAnswering = __webpack_exports__.MobileBertForQuestionAnswering;\n      __webpack_exports__MobileBertForSequenceClassification = __webpack_exports__.MobileBertForSequenceClassification;\n      __webpack_exports__MobileBertModel = __webpack_exports__.MobileBertModel;\n      __webpack_exports__MobileBertPreTrainedModel = __webpack_exports__.MobileBertPreTrainedModel;\n      __webpack_exports__MobileBertTokenizer = __webpack_exports__.MobileBertTokenizer;\n      __webpack_exports__MobileLLMForCausalLM = __webpack_exports__.MobileLLMForCausalLM;\n      __webpack_exports__MobileLLMModel = __webpack_exports__.MobileLLMModel;\n      __webpack_exports__MobileLLMPreTrainedModel = __webpack_exports__.MobileLLMPreTrainedModel;\n      __webpack_exports__MobileNetV1FeatureExtractor = __webpack_exports__.MobileNetV1FeatureExtractor;\n      __webpack_exports__MobileNetV1ForImageClassification = __webpack_exports__.MobileNetV1ForImageClassification;\n      __webpack_exports__MobileNetV1ForSemanticSegmentation = __webpack_exports__.MobileNetV1ForSemanticSegmentation;\n      __webpack_exports__MobileNetV1ImageProcessor = __webpack_exports__.MobileNetV1ImageProcessor;\n      __webpack_exports__MobileNetV1Model = __webpack_exports__.MobileNetV1Model;\n      __webpack_exports__MobileNetV1PreTrainedModel = __webpack_exports__.MobileNetV1PreTrainedModel;\n      __webpack_exports__MobileNetV2FeatureExtractor = __webpack_exports__.MobileNetV2FeatureExtractor;\n      __webpack_exports__MobileNetV2ForImageClassification = __webpack_exports__.MobileNetV2ForImageClassification;\n      __webpack_exports__MobileNetV2ForSemanticSegmentation = __webpack_exports__.MobileNetV2ForSemanticSegmentation;\n      __webpack_exports__MobileNetV2ImageProcessor = __webpack_exports__.MobileNetV2ImageProcessor;\n      __webpack_exports__MobileNetV2Model = __webpack_exports__.MobileNetV2Model;\n      __webpack_exports__MobileNetV2PreTrainedModel = __webpack_exports__.MobileNetV2PreTrainedModel;\n      __webpack_exports__MobileNetV3FeatureExtractor = __webpack_exports__.MobileNetV3FeatureExtractor;\n      __webpack_exports__MobileNetV3ForImageClassification = __webpack_exports__.MobileNetV3ForImageClassification;\n      __webpack_exports__MobileNetV3ForSemanticSegmentation = __webpack_exports__.MobileNetV3ForSemanticSegmentation;\n      __webpack_exports__MobileNetV3ImageProcessor = __webpack_exports__.MobileNetV3ImageProcessor;\n      __webpack_exports__MobileNetV3Model = __webpack_exports__.MobileNetV3Model;\n      __webpack_exports__MobileNetV3PreTrainedModel = __webpack_exports__.MobileNetV3PreTrainedModel;\n      __webpack_exports__MobileNetV4FeatureExtractor = __webpack_exports__.MobileNetV4FeatureExtractor;\n      __webpack_exports__MobileNetV4ForImageClassification = __webpack_exports__.MobileNetV4ForImageClassification;\n      __webpack_exports__MobileNetV4ForSemanticSegmentation = __webpack_exports__.MobileNetV4ForSemanticSegmentation;\n      __webpack_exports__MobileNetV4ImageProcessor = __webpack_exports__.MobileNetV4ImageProcessor;\n      __webpack_exports__MobileNetV4Model = __webpack_exports__.MobileNetV4Model;\n      __webpack_exports__MobileNetV4PreTrainedModel = __webpack_exports__.MobileNetV4PreTrainedModel;\n      __webpack_exports__MobileViTFeatureExtractor = __webpack_exports__.MobileViTFeatureExtractor;\n      __webpack_exports__MobileViTForImageClassification = __webpack_exports__.MobileViTForImageClassification;\n      __webpack_exports__MobileViTImageProcessor = __webpack_exports__.MobileViTImageProcessor;\n      __webpack_exports__MobileViTModel = __webpack_exports__.MobileViTModel;\n      __webpack_exports__MobileViTPreTrainedModel = __webpack_exports__.MobileViTPreTrainedModel;\n      __webpack_exports__MobileViTV2ForImageClassification = __webpack_exports__.MobileViTV2ForImageClassification;\n      __webpack_exports__MobileViTV2Model = __webpack_exports__.MobileViTV2Model;\n      __webpack_exports__MobileViTV2PreTrainedModel = __webpack_exports__.MobileViTV2PreTrainedModel;\n      __webpack_exports__ModelOutput = __webpack_exports__.ModelOutput;\n      __webpack_exports__ModernBertForMaskedLM = __webpack_exports__.ModernBertForMaskedLM;\n      __webpack_exports__ModernBertForSequenceClassification = __webpack_exports__.ModernBertForSequenceClassification;\n      __webpack_exports__ModernBertForTokenClassification = __webpack_exports__.ModernBertForTokenClassification;\n      __webpack_exports__ModernBertModel = __webpack_exports__.ModernBertModel;\n      __webpack_exports__ModernBertPreTrainedModel = __webpack_exports__.ModernBertPreTrainedModel;\n      __webpack_exports__Moondream1ForConditionalGeneration = __webpack_exports__.Moondream1ForConditionalGeneration;\n      __webpack_exports__MoonshineFeatureExtractor = __webpack_exports__.MoonshineFeatureExtractor;\n      __webpack_exports__MoonshineForConditionalGeneration = __webpack_exports__.MoonshineForConditionalGeneration;\n      __webpack_exports__MoonshineModel = __webpack_exports__.MoonshineModel;\n      __webpack_exports__MoonshinePreTrainedModel = __webpack_exports__.MoonshinePreTrainedModel;\n      __webpack_exports__MoonshineProcessor = __webpack_exports__.MoonshineProcessor;\n      __webpack_exports__MptForCausalLM = __webpack_exports__.MptForCausalLM;\n      __webpack_exports__MptModel = __webpack_exports__.MptModel;\n      __webpack_exports__MptPreTrainedModel = __webpack_exports__.MptPreTrainedModel;\n      __webpack_exports__MultiModalityCausalLM = __webpack_exports__.MultiModalityCausalLM;\n      __webpack_exports__MultiModalityPreTrainedModel = __webpack_exports__.MultiModalityPreTrainedModel;\n      __webpack_exports__MusicgenForCausalLM = __webpack_exports__.MusicgenForCausalLM;\n      __webpack_exports__MusicgenForConditionalGeneration = __webpack_exports__.MusicgenForConditionalGeneration;\n      __webpack_exports__MusicgenModel = __webpack_exports__.MusicgenModel;\n      __webpack_exports__MusicgenPreTrainedModel = __webpack_exports__.MusicgenPreTrainedModel;\n      __webpack_exports__NllbTokenizer = __webpack_exports__.NllbTokenizer;\n      __webpack_exports__NoBadWordsLogitsProcessor = __webpack_exports__.NoBadWordsLogitsProcessor;\n      __webpack_exports__NoRepeatNGramLogitsProcessor = __webpack_exports__.NoRepeatNGramLogitsProcessor;\n      __webpack_exports__NomicBertModel = __webpack_exports__.NomicBertModel;\n      __webpack_exports__NomicBertPreTrainedModel = __webpack_exports__.NomicBertPreTrainedModel;\n      __webpack_exports__NougatImageProcessor = __webpack_exports__.NougatImageProcessor;\n      __webpack_exports__NougatTokenizer = __webpack_exports__.NougatTokenizer;\n      __webpack_exports__OPTForCausalLM = __webpack_exports__.OPTForCausalLM;\n      __webpack_exports__OPTModel = __webpack_exports__.OPTModel;\n      __webpack_exports__OPTPreTrainedModel = __webpack_exports__.OPTPreTrainedModel;\n      __webpack_exports__ObjectDetectionPipeline = __webpack_exports__.ObjectDetectionPipeline;\n      __webpack_exports__Olmo2ForCausalLM = __webpack_exports__.Olmo2ForCausalLM;\n      __webpack_exports__Olmo2Model = __webpack_exports__.Olmo2Model;\n      __webpack_exports__Olmo2PreTrainedModel = __webpack_exports__.Olmo2PreTrainedModel;\n      __webpack_exports__OlmoForCausalLM = __webpack_exports__.OlmoForCausalLM;\n      __webpack_exports__OlmoModel = __webpack_exports__.OlmoModel;\n      __webpack_exports__OlmoPreTrainedModel = __webpack_exports__.OlmoPreTrainedModel;\n      __webpack_exports__OpenELMForCausalLM = __webpack_exports__.OpenELMForCausalLM;\n      __webpack_exports__OpenELMModel = __webpack_exports__.OpenELMModel;\n      __webpack_exports__OpenELMPreTrainedModel = __webpack_exports__.OpenELMPreTrainedModel;\n      __webpack_exports__OwlViTFeatureExtractor = __webpack_exports__.OwlViTFeatureExtractor;\n      __webpack_exports__OwlViTForObjectDetection = __webpack_exports__.OwlViTForObjectDetection;\n      __webpack_exports__OwlViTImageProcessor = __webpack_exports__.OwlViTImageProcessor;\n      __webpack_exports__OwlViTModel = __webpack_exports__.OwlViTModel;\n      __webpack_exports__OwlViTPreTrainedModel = __webpack_exports__.OwlViTPreTrainedModel;\n      __webpack_exports__OwlViTProcessor = __webpack_exports__.OwlViTProcessor;\n      __webpack_exports__Owlv2ForObjectDetection = __webpack_exports__.Owlv2ForObjectDetection;\n      __webpack_exports__Owlv2ImageProcessor = __webpack_exports__.Owlv2ImageProcessor;\n      __webpack_exports__Owlv2Model = __webpack_exports__.Owlv2Model;\n      __webpack_exports__Owlv2PreTrainedModel = __webpack_exports__.Owlv2PreTrainedModel;\n      __webpack_exports__PaliGemmaForConditionalGeneration = __webpack_exports__.PaliGemmaForConditionalGeneration;\n      __webpack_exports__PaliGemmaPreTrainedModel = __webpack_exports__.PaliGemmaPreTrainedModel;\n      __webpack_exports__PaliGemmaProcessor = __webpack_exports__.PaliGemmaProcessor;\n      __webpack_exports__PatchTSMixerForPrediction = __webpack_exports__.PatchTSMixerForPrediction;\n      __webpack_exports__PatchTSMixerModel = __webpack_exports__.PatchTSMixerModel;\n      __webpack_exports__PatchTSMixerPreTrainedModel = __webpack_exports__.PatchTSMixerPreTrainedModel;\n      __webpack_exports__PatchTSTForPrediction = __webpack_exports__.PatchTSTForPrediction;\n      __webpack_exports__PatchTSTModel = __webpack_exports__.PatchTSTModel;\n      __webpack_exports__PatchTSTPreTrainedModel = __webpack_exports__.PatchTSTPreTrainedModel;\n      __webpack_exports__Phi3ForCausalLM = __webpack_exports__.Phi3ForCausalLM;\n      __webpack_exports__Phi3Model = __webpack_exports__.Phi3Model;\n      __webpack_exports__Phi3PreTrainedModel = __webpack_exports__.Phi3PreTrainedModel;\n      __webpack_exports__Phi3VForCausalLM = __webpack_exports__.Phi3VForCausalLM;\n      __webpack_exports__Phi3VImageProcessor = __webpack_exports__.Phi3VImageProcessor;\n      __webpack_exports__Phi3VPreTrainedModel = __webpack_exports__.Phi3VPreTrainedModel;\n      __webpack_exports__Phi3VProcessor = __webpack_exports__.Phi3VProcessor;\n      __webpack_exports__PhiForCausalLM = __webpack_exports__.PhiForCausalLM;\n      __webpack_exports__PhiModel = __webpack_exports__.PhiModel;\n      __webpack_exports__PhiPreTrainedModel = __webpack_exports__.PhiPreTrainedModel;\n      __webpack_exports__Pipeline = __webpack_exports__.Pipeline;\n      __webpack_exports__PreTrainedModel = __webpack_exports__.PreTrainedModel;\n      __webpack_exports__PreTrainedTokenizer = __webpack_exports__.PreTrainedTokenizer;\n      __webpack_exports__PretrainedConfig = __webpack_exports__.PretrainedConfig;\n      __webpack_exports__PretrainedMixin = __webpack_exports__.PretrainedMixin;\n      __webpack_exports__Processor = __webpack_exports__.Processor;\n      __webpack_exports__PvtForImageClassification = __webpack_exports__.PvtForImageClassification;\n      __webpack_exports__PvtImageProcessor = __webpack_exports__.PvtImageProcessor;\n      __webpack_exports__PvtModel = __webpack_exports__.PvtModel;\n      __webpack_exports__PvtPreTrainedModel = __webpack_exports__.PvtPreTrainedModel;\n      __webpack_exports__PyAnnoteFeatureExtractor = __webpack_exports__.PyAnnoteFeatureExtractor;\n      __webpack_exports__PyAnnoteForAudioFrameClassification = __webpack_exports__.PyAnnoteForAudioFrameClassification;\n      __webpack_exports__PyAnnoteModel = __webpack_exports__.PyAnnoteModel;\n      __webpack_exports__PyAnnotePreTrainedModel = __webpack_exports__.PyAnnotePreTrainedModel;\n      __webpack_exports__PyAnnoteProcessor = __webpack_exports__.PyAnnoteProcessor;\n      __webpack_exports__QuestionAnsweringModelOutput = __webpack_exports__.QuestionAnsweringModelOutput;\n      __webpack_exports__QuestionAnsweringPipeline = __webpack_exports__.QuestionAnsweringPipeline;\n      __webpack_exports__Qwen2ForCausalLM = __webpack_exports__.Qwen2ForCausalLM;\n      __webpack_exports__Qwen2Model = __webpack_exports__.Qwen2Model;\n      __webpack_exports__Qwen2PreTrainedModel = __webpack_exports__.Qwen2PreTrainedModel;\n      __webpack_exports__Qwen2Tokenizer = __webpack_exports__.Qwen2Tokenizer;\n      __webpack_exports__Qwen2VLForConditionalGeneration = __webpack_exports__.Qwen2VLForConditionalGeneration;\n      __webpack_exports__Qwen2VLImageProcessor = __webpack_exports__.Qwen2VLImageProcessor;\n      __webpack_exports__Qwen2VLPreTrainedModel = __webpack_exports__.Qwen2VLPreTrainedModel;\n      __webpack_exports__Qwen2VLProcessor = __webpack_exports__.Qwen2VLProcessor;\n      __webpack_exports__RFDetrForObjectDetection = __webpack_exports__.RFDetrForObjectDetection;\n      __webpack_exports__RFDetrModel = __webpack_exports__.RFDetrModel;\n      __webpack_exports__RFDetrObjectDetectionOutput = __webpack_exports__.RFDetrObjectDetectionOutput;\n      __webpack_exports__RFDetrPreTrainedModel = __webpack_exports__.RFDetrPreTrainedModel;\n      __webpack_exports__RTDetrForObjectDetection = __webpack_exports__.RTDetrForObjectDetection;\n      __webpack_exports__RTDetrImageProcessor = __webpack_exports__.RTDetrImageProcessor;\n      __webpack_exports__RTDetrModel = __webpack_exports__.RTDetrModel;\n      __webpack_exports__RTDetrObjectDetectionOutput = __webpack_exports__.RTDetrObjectDetectionOutput;\n      __webpack_exports__RTDetrPreTrainedModel = __webpack_exports__.RTDetrPreTrainedModel;\n      __webpack_exports__RTDetrV2ForObjectDetection = __webpack_exports__.RTDetrV2ForObjectDetection;\n      __webpack_exports__RTDetrV2Model = __webpack_exports__.RTDetrV2Model;\n      __webpack_exports__RTDetrV2ObjectDetectionOutput = __webpack_exports__.RTDetrV2ObjectDetectionOutput;\n      __webpack_exports__RTDetrV2PreTrainedModel = __webpack_exports__.RTDetrV2PreTrainedModel;\n      __webpack_exports__RawAudio = __webpack_exports__.RawAudio;\n      __webpack_exports__RawImage = __webpack_exports__.RawImage;\n      __webpack_exports__RawVideo = __webpack_exports__.RawVideo;\n      __webpack_exports__RawVideoFrame = __webpack_exports__.RawVideoFrame;\n      __webpack_exports__RepetitionPenaltyLogitsProcessor = __webpack_exports__.RepetitionPenaltyLogitsProcessor;\n      __webpack_exports__ResNetForImageClassification = __webpack_exports__.ResNetForImageClassification;\n      __webpack_exports__ResNetModel = __webpack_exports__.ResNetModel;\n      __webpack_exports__ResNetPreTrainedModel = __webpack_exports__.ResNetPreTrainedModel;\n      __webpack_exports__RoFormerForMaskedLM = __webpack_exports__.RoFormerForMaskedLM;\n      __webpack_exports__RoFormerForQuestionAnswering = __webpack_exports__.RoFormerForQuestionAnswering;\n      __webpack_exports__RoFormerForSequenceClassification = __webpack_exports__.RoFormerForSequenceClassification;\n      __webpack_exports__RoFormerForTokenClassification = __webpack_exports__.RoFormerForTokenClassification;\n      __webpack_exports__RoFormerModel = __webpack_exports__.RoFormerModel;\n      __webpack_exports__RoFormerPreTrainedModel = __webpack_exports__.RoFormerPreTrainedModel;\n      __webpack_exports__RoFormerTokenizer = __webpack_exports__.RoFormerTokenizer;\n      __webpack_exports__RobertaForMaskedLM = __webpack_exports__.RobertaForMaskedLM;\n      __webpack_exports__RobertaForQuestionAnswering = __webpack_exports__.RobertaForQuestionAnswering;\n      __webpack_exports__RobertaForSequenceClassification = __webpack_exports__.RobertaForSequenceClassification;\n      __webpack_exports__RobertaForTokenClassification = __webpack_exports__.RobertaForTokenClassification;\n      __webpack_exports__RobertaModel = __webpack_exports__.RobertaModel;\n      __webpack_exports__RobertaPreTrainedModel = __webpack_exports__.RobertaPreTrainedModel;\n      __webpack_exports__RobertaTokenizer = __webpack_exports__.RobertaTokenizer;\n      __webpack_exports__SamImageProcessor = __webpack_exports__.SamImageProcessor;\n      __webpack_exports__SamImageSegmentationOutput = __webpack_exports__.SamImageSegmentationOutput;\n      __webpack_exports__SamModel = __webpack_exports__.SamModel;\n      __webpack_exports__SamPreTrainedModel = __webpack_exports__.SamPreTrainedModel;\n      __webpack_exports__SamProcessor = __webpack_exports__.SamProcessor;\n      __webpack_exports__SapiensForDepthEstimation = __webpack_exports__.SapiensForDepthEstimation;\n      __webpack_exports__SapiensForNormalEstimation = __webpack_exports__.SapiensForNormalEstimation;\n      __webpack_exports__SapiensForSemanticSegmentation = __webpack_exports__.SapiensForSemanticSegmentation;\n      __webpack_exports__SapiensPreTrainedModel = __webpack_exports__.SapiensPreTrainedModel;\n      __webpack_exports__SeamlessM4TFeatureExtractor = __webpack_exports__.SeamlessM4TFeatureExtractor;\n      __webpack_exports__SegformerFeatureExtractor = __webpack_exports__.SegformerFeatureExtractor;\n      __webpack_exports__SegformerForImageClassification = __webpack_exports__.SegformerForImageClassification;\n      __webpack_exports__SegformerForSemanticSegmentation = __webpack_exports__.SegformerForSemanticSegmentation;\n      __webpack_exports__SegformerImageProcessor = __webpack_exports__.SegformerImageProcessor;\n      __webpack_exports__SegformerModel = __webpack_exports__.SegformerModel;\n      __webpack_exports__SegformerPreTrainedModel = __webpack_exports__.SegformerPreTrainedModel;\n      __webpack_exports__Seq2SeqLMOutput = __webpack_exports__.Seq2SeqLMOutput;\n      __webpack_exports__SequenceClassifierOutput = __webpack_exports__.SequenceClassifierOutput;\n      __webpack_exports__SiglipImageProcessor = __webpack_exports__.SiglipImageProcessor;\n      __webpack_exports__SiglipModel = __webpack_exports__.SiglipModel;\n      __webpack_exports__SiglipPreTrainedModel = __webpack_exports__.SiglipPreTrainedModel;\n      __webpack_exports__SiglipTextModel = __webpack_exports__.SiglipTextModel;\n      __webpack_exports__SiglipTokenizer = __webpack_exports__.SiglipTokenizer;\n      __webpack_exports__SiglipVisionModel = __webpack_exports__.SiglipVisionModel;\n      __webpack_exports__SmolVLMForConditionalGeneration = __webpack_exports__.SmolVLMForConditionalGeneration;\n      __webpack_exports__SmolVLMImageProcessor = __webpack_exports__.SmolVLMImageProcessor;\n      __webpack_exports__SmolVLMProcessor = __webpack_exports__.SmolVLMProcessor;\n      __webpack_exports__SnacDecoderModel = __webpack_exports__.SnacDecoderModel;\n      __webpack_exports__SnacEncoderModel = __webpack_exports__.SnacEncoderModel;\n      __webpack_exports__SnacFeatureExtractor = __webpack_exports__.SnacFeatureExtractor;\n      __webpack_exports__SnacModel = __webpack_exports__.SnacModel;\n      __webpack_exports__SnacPreTrainedModel = __webpack_exports__.SnacPreTrainedModel;\n      __webpack_exports__SpeechT5FeatureExtractor = __webpack_exports__.SpeechT5FeatureExtractor;\n      __webpack_exports__SpeechT5ForSpeechToText = __webpack_exports__.SpeechT5ForSpeechToText;\n      __webpack_exports__SpeechT5ForTextToSpeech = __webpack_exports__.SpeechT5ForTextToSpeech;\n      __webpack_exports__SpeechT5HifiGan = __webpack_exports__.SpeechT5HifiGan;\n      __webpack_exports__SpeechT5Model = __webpack_exports__.SpeechT5Model;\n      __webpack_exports__SpeechT5PreTrainedModel = __webpack_exports__.SpeechT5PreTrainedModel;\n      __webpack_exports__SpeechT5Processor = __webpack_exports__.SpeechT5Processor;\n      __webpack_exports__SpeechT5Tokenizer = __webpack_exports__.SpeechT5Tokenizer;\n      __webpack_exports__SqueezeBertForMaskedLM = __webpack_exports__.SqueezeBertForMaskedLM;\n      __webpack_exports__SqueezeBertForQuestionAnswering = __webpack_exports__.SqueezeBertForQuestionAnswering;\n      __webpack_exports__SqueezeBertForSequenceClassification = __webpack_exports__.SqueezeBertForSequenceClassification;\n      __webpack_exports__SqueezeBertModel = __webpack_exports__.SqueezeBertModel;\n      __webpack_exports__SqueezeBertPreTrainedModel = __webpack_exports__.SqueezeBertPreTrainedModel;\n      __webpack_exports__SqueezeBertTokenizer = __webpack_exports__.SqueezeBertTokenizer;\n      __webpack_exports__StableLmForCausalLM = __webpack_exports__.StableLmForCausalLM;\n      __webpack_exports__StableLmModel = __webpack_exports__.StableLmModel;\n      __webpack_exports__StableLmPreTrainedModel = __webpack_exports__.StableLmPreTrainedModel;\n      __webpack_exports__Starcoder2ForCausalLM = __webpack_exports__.Starcoder2ForCausalLM;\n      __webpack_exports__Starcoder2Model = __webpack_exports__.Starcoder2Model;\n      __webpack_exports__Starcoder2PreTrainedModel = __webpack_exports__.Starcoder2PreTrainedModel;\n      __webpack_exports__StoppingCriteria = __webpack_exports__.StoppingCriteria;\n      __webpack_exports__StoppingCriteriaList = __webpack_exports__.StoppingCriteriaList;\n      __webpack_exports__StyleTextToSpeech2Model = __webpack_exports__.StyleTextToSpeech2Model;\n      __webpack_exports__StyleTextToSpeech2PreTrainedModel = __webpack_exports__.StyleTextToSpeech2PreTrainedModel;\n      __webpack_exports__SummarizationPipeline = __webpack_exports__.SummarizationPipeline;\n      __webpack_exports__SuppressTokensAtBeginLogitsProcessor = __webpack_exports__.SuppressTokensAtBeginLogitsProcessor;\n      __webpack_exports__Swin2SRForImageSuperResolution = __webpack_exports__.Swin2SRForImageSuperResolution;\n      __webpack_exports__Swin2SRImageProcessor = __webpack_exports__.Swin2SRImageProcessor;\n      __webpack_exports__Swin2SRModel = __webpack_exports__.Swin2SRModel;\n      __webpack_exports__Swin2SRPreTrainedModel = __webpack_exports__.Swin2SRPreTrainedModel;\n      __webpack_exports__SwinForImageClassification = __webpack_exports__.SwinForImageClassification;\n      __webpack_exports__SwinForSemanticSegmentation = __webpack_exports__.SwinForSemanticSegmentation;\n      __webpack_exports__SwinModel = __webpack_exports__.SwinModel;\n      __webpack_exports__SwinPreTrainedModel = __webpack_exports__.SwinPreTrainedModel;\n      __webpack_exports__T5ForConditionalGeneration = __webpack_exports__.T5ForConditionalGeneration;\n      __webpack_exports__T5Model = __webpack_exports__.T5Model;\n      __webpack_exports__T5PreTrainedModel = __webpack_exports__.T5PreTrainedModel;\n      __webpack_exports__T5Tokenizer = __webpack_exports__.T5Tokenizer;\n      __webpack_exports__TableTransformerForObjectDetection = __webpack_exports__.TableTransformerForObjectDetection;\n      __webpack_exports__TableTransformerModel = __webpack_exports__.TableTransformerModel;\n      __webpack_exports__TableTransformerObjectDetectionOutput = __webpack_exports__.TableTransformerObjectDetectionOutput;\n      __webpack_exports__TableTransformerPreTrainedModel = __webpack_exports__.TableTransformerPreTrainedModel;\n      __webpack_exports__TemperatureLogitsWarper = __webpack_exports__.TemperatureLogitsWarper;\n      __webpack_exports__Tensor = __webpack_exports__.Tensor;\n      __webpack_exports__Text2TextGenerationPipeline = __webpack_exports__.Text2TextGenerationPipeline;\n      __webpack_exports__TextClassificationPipeline = __webpack_exports__.TextClassificationPipeline;\n      __webpack_exports__TextGenerationPipeline = __webpack_exports__.TextGenerationPipeline;\n      __webpack_exports__TextStreamer = __webpack_exports__.TextStreamer;\n      __webpack_exports__TextToAudioPipeline = __webpack_exports__.TextToAudioPipeline;\n      __webpack_exports__TokenClassificationPipeline = __webpack_exports__.TokenClassificationPipeline;\n      __webpack_exports__TokenClassifierOutput = __webpack_exports__.TokenClassifierOutput;\n      __webpack_exports__TokenizerModel = __webpack_exports__.TokenizerModel;\n      __webpack_exports__TopKLogitsWarper = __webpack_exports__.TopKLogitsWarper;\n      __webpack_exports__TopPLogitsWarper = __webpack_exports__.TopPLogitsWarper;\n      __webpack_exports__TrOCRForCausalLM = __webpack_exports__.TrOCRForCausalLM;\n      __webpack_exports__TrOCRPreTrainedModel = __webpack_exports__.TrOCRPreTrainedModel;\n      __webpack_exports__TranslationPipeline = __webpack_exports__.TranslationPipeline;\n      __webpack_exports__UltravoxModel = __webpack_exports__.UltravoxModel;\n      __webpack_exports__UltravoxPreTrainedModel = __webpack_exports__.UltravoxPreTrainedModel;\n      __webpack_exports__UltravoxProcessor = __webpack_exports__.UltravoxProcessor;\n      __webpack_exports__UniSpeechForCTC = __webpack_exports__.UniSpeechForCTC;\n      __webpack_exports__UniSpeechForSequenceClassification = __webpack_exports__.UniSpeechForSequenceClassification;\n      __webpack_exports__UniSpeechModel = __webpack_exports__.UniSpeechModel;\n      __webpack_exports__UniSpeechPreTrainedModel = __webpack_exports__.UniSpeechPreTrainedModel;\n      __webpack_exports__UniSpeechSatForAudioFrameClassification = __webpack_exports__.UniSpeechSatForAudioFrameClassification;\n      __webpack_exports__UniSpeechSatForCTC = __webpack_exports__.UniSpeechSatForCTC;\n      __webpack_exports__UniSpeechSatForSequenceClassification = __webpack_exports__.UniSpeechSatForSequenceClassification;\n      __webpack_exports__UniSpeechSatModel = __webpack_exports__.UniSpeechSatModel;\n      __webpack_exports__UniSpeechSatPreTrainedModel = __webpack_exports__.UniSpeechSatPreTrainedModel;\n      __webpack_exports__VLChatProcessor = __webpack_exports__.VLChatProcessor;\n      __webpack_exports__VLMImageProcessor = __webpack_exports__.VLMImageProcessor;\n      __webpack_exports__ViTFeatureExtractor = __webpack_exports__.ViTFeatureExtractor;\n      __webpack_exports__ViTForImageClassification = __webpack_exports__.ViTForImageClassification;\n      __webpack_exports__ViTImageProcessor = __webpack_exports__.ViTImageProcessor;\n      __webpack_exports__ViTMAEModel = __webpack_exports__.ViTMAEModel;\n      __webpack_exports__ViTMAEPreTrainedModel = __webpack_exports__.ViTMAEPreTrainedModel;\n      __webpack_exports__ViTMSNForImageClassification = __webpack_exports__.ViTMSNForImageClassification;\n      __webpack_exports__ViTMSNModel = __webpack_exports__.ViTMSNModel;\n      __webpack_exports__ViTMSNPreTrainedModel = __webpack_exports__.ViTMSNPreTrainedModel;\n      __webpack_exports__ViTModel = __webpack_exports__.ViTModel;\n      __webpack_exports__ViTPreTrainedModel = __webpack_exports__.ViTPreTrainedModel;\n      __webpack_exports__VisionEncoderDecoderModel = __webpack_exports__.VisionEncoderDecoderModel;\n      __webpack_exports__VitMatteForImageMatting = __webpack_exports__.VitMatteForImageMatting;\n      __webpack_exports__VitMatteImageProcessor = __webpack_exports__.VitMatteImageProcessor;\n      __webpack_exports__VitMattePreTrainedModel = __webpack_exports__.VitMattePreTrainedModel;\n      __webpack_exports__VitPoseForPoseEstimation = __webpack_exports__.VitPoseForPoseEstimation;\n      __webpack_exports__VitPoseImageProcessor = __webpack_exports__.VitPoseImageProcessor;\n      __webpack_exports__VitPosePreTrainedModel = __webpack_exports__.VitPosePreTrainedModel;\n      __webpack_exports__VitsModel = __webpack_exports__.VitsModel;\n      __webpack_exports__VitsModelOutput = __webpack_exports__.VitsModelOutput;\n      __webpack_exports__VitsPreTrainedModel = __webpack_exports__.VitsPreTrainedModel;\n      __webpack_exports__VitsTokenizer = __webpack_exports__.VitsTokenizer;\n      __webpack_exports__Wav2Vec2BertForCTC = __webpack_exports__.Wav2Vec2BertForCTC;\n      __webpack_exports__Wav2Vec2BertForSequenceClassification = __webpack_exports__.Wav2Vec2BertForSequenceClassification;\n      __webpack_exports__Wav2Vec2BertModel = __webpack_exports__.Wav2Vec2BertModel;\n      __webpack_exports__Wav2Vec2BertPreTrainedModel = __webpack_exports__.Wav2Vec2BertPreTrainedModel;\n      __webpack_exports__Wav2Vec2CTCTokenizer = __webpack_exports__.Wav2Vec2CTCTokenizer;\n      __webpack_exports__Wav2Vec2FeatureExtractor = __webpack_exports__.Wav2Vec2FeatureExtractor;\n      __webpack_exports__Wav2Vec2ForAudioFrameClassification = __webpack_exports__.Wav2Vec2ForAudioFrameClassification;\n      __webpack_exports__Wav2Vec2ForCTC = __webpack_exports__.Wav2Vec2ForCTC;\n      __webpack_exports__Wav2Vec2ForSequenceClassification = __webpack_exports__.Wav2Vec2ForSequenceClassification;\n      __webpack_exports__Wav2Vec2Model = __webpack_exports__.Wav2Vec2Model;\n      __webpack_exports__Wav2Vec2PreTrainedModel = __webpack_exports__.Wav2Vec2PreTrainedModel;\n      __webpack_exports__Wav2Vec2Processor = __webpack_exports__.Wav2Vec2Processor;\n      __webpack_exports__Wav2Vec2ProcessorWithLM = __webpack_exports__.Wav2Vec2ProcessorWithLM;\n      __webpack_exports__WavLMForAudioFrameClassification = __webpack_exports__.WavLMForAudioFrameClassification;\n      __webpack_exports__WavLMForCTC = __webpack_exports__.WavLMForCTC;\n      __webpack_exports__WavLMForSequenceClassification = __webpack_exports__.WavLMForSequenceClassification;\n      __webpack_exports__WavLMForXVector = __webpack_exports__.WavLMForXVector;\n      __webpack_exports__WavLMModel = __webpack_exports__.WavLMModel;\n      __webpack_exports__WavLMPreTrainedModel = __webpack_exports__.WavLMPreTrainedModel;\n      __webpack_exports__WeSpeakerFeatureExtractor = __webpack_exports__.WeSpeakerFeatureExtractor;\n      __webpack_exports__WeSpeakerResNetModel = __webpack_exports__.WeSpeakerResNetModel;\n      __webpack_exports__WeSpeakerResNetPreTrainedModel = __webpack_exports__.WeSpeakerResNetPreTrainedModel;\n      __webpack_exports__WhisperFeatureExtractor = __webpack_exports__.WhisperFeatureExtractor;\n      __webpack_exports__WhisperForConditionalGeneration = __webpack_exports__.WhisperForConditionalGeneration;\n      __webpack_exports__WhisperModel = __webpack_exports__.WhisperModel;\n      __webpack_exports__WhisperPreTrainedModel = __webpack_exports__.WhisperPreTrainedModel;\n      __webpack_exports__WhisperProcessor = __webpack_exports__.WhisperProcessor;\n      __webpack_exports__WhisperTextStreamer = __webpack_exports__.WhisperTextStreamer;\n      __webpack_exports__WhisperTimeStampLogitsProcessor = __webpack_exports__.WhisperTimeStampLogitsProcessor;\n      __webpack_exports__WhisperTokenizer = __webpack_exports__.WhisperTokenizer;\n      __webpack_exports__XLMForQuestionAnswering = __webpack_exports__.XLMForQuestionAnswering;\n      __webpack_exports__XLMForSequenceClassification = __webpack_exports__.XLMForSequenceClassification;\n      __webpack_exports__XLMForTokenClassification = __webpack_exports__.XLMForTokenClassification;\n      __webpack_exports__XLMModel = __webpack_exports__.XLMModel;\n      __webpack_exports__XLMPreTrainedModel = __webpack_exports__.XLMPreTrainedModel;\n      __webpack_exports__XLMRobertaForMaskedLM = __webpack_exports__.XLMRobertaForMaskedLM;\n      __webpack_exports__XLMRobertaForQuestionAnswering = __webpack_exports__.XLMRobertaForQuestionAnswering;\n      __webpack_exports__XLMRobertaForSequenceClassification = __webpack_exports__.XLMRobertaForSequenceClassification;\n      __webpack_exports__XLMRobertaForTokenClassification = __webpack_exports__.XLMRobertaForTokenClassification;\n      __webpack_exports__XLMRobertaModel = __webpack_exports__.XLMRobertaModel;\n      __webpack_exports__XLMRobertaPreTrainedModel = __webpack_exports__.XLMRobertaPreTrainedModel;\n      __webpack_exports__XLMRobertaTokenizer = __webpack_exports__.XLMRobertaTokenizer;\n      __webpack_exports__XLMTokenizer = __webpack_exports__.XLMTokenizer;\n      __webpack_exports__XLMWithLMHeadModel = __webpack_exports__.XLMWithLMHeadModel;\n      __webpack_exports__XVectorOutput = __webpack_exports__.XVectorOutput;\n      __webpack_exports__YolosFeatureExtractor = __webpack_exports__.YolosFeatureExtractor;\n      __webpack_exports__YolosForObjectDetection = __webpack_exports__.YolosForObjectDetection;\n      __webpack_exports__YolosImageProcessor = __webpack_exports__.YolosImageProcessor;\n      __webpack_exports__YolosModel = __webpack_exports__.YolosModel;\n      __webpack_exports__YolosObjectDetectionOutput = __webpack_exports__.YolosObjectDetectionOutput;\n      __webpack_exports__YolosPreTrainedModel = __webpack_exports__.YolosPreTrainedModel;\n      __webpack_exports__ZeroShotAudioClassificationPipeline = __webpack_exports__.ZeroShotAudioClassificationPipeline;\n      __webpack_exports__ZeroShotClassificationPipeline = __webpack_exports__.ZeroShotClassificationPipeline;\n      __webpack_exports__ZeroShotImageClassificationPipeline = __webpack_exports__.ZeroShotImageClassificationPipeline;\n      __webpack_exports__ZeroShotObjectDetectionPipeline = __webpack_exports__.ZeroShotObjectDetectionPipeline;\n      __webpack_exports__bankers_round = __webpack_exports__.bankers_round;\n      __webpack_exports__cat = __webpack_exports__.cat;\n      __webpack_exports__cos_sim = __webpack_exports__.cos_sim;\n      __webpack_exports__dot = __webpack_exports__.dot;\n      __webpack_exports__dynamic_time_warping = __webpack_exports__.dynamic_time_warping;\n      __webpack_exports__env = __webpack_exports__.env;\n      __webpack_exports__full = __webpack_exports__.full;\n      __webpack_exports__full_like = __webpack_exports__.full_like;\n      __webpack_exports__getKeyValueShapes = __webpack_exports__.getKeyValueShapes;\n      __webpack_exports__hamming = __webpack_exports__.hamming;\n      __webpack_exports__hanning = __webpack_exports__.hanning;\n      __webpack_exports__interpolate = __webpack_exports__.interpolate;\n      __webpack_exports__interpolate_4d = __webpack_exports__.interpolate_4d;\n      __webpack_exports__interpolate_data = __webpack_exports__.interpolate_data;\n      __webpack_exports__is_chinese_char = __webpack_exports__.is_chinese_char;\n      __webpack_exports__layer_norm = __webpack_exports__.layer_norm;\n      __webpack_exports__load_image = __webpack_exports__.load_image;\n      __webpack_exports__load_video = __webpack_exports__.load_video;\n      __webpack_exports__log_softmax = __webpack_exports__.log_softmax;\n      __webpack_exports__magnitude = __webpack_exports__.magnitude;\n      __webpack_exports__matmul = __webpack_exports__.matmul;\n      __webpack_exports__max = __webpack_exports__.max;\n      __webpack_exports__mean = __webpack_exports__.mean;\n      __webpack_exports__mean_pooling = __webpack_exports__.mean_pooling;\n      __webpack_exports__medianFilter = __webpack_exports__.medianFilter;\n      __webpack_exports__mel_filter_bank = __webpack_exports__.mel_filter_bank;\n      __webpack_exports__min = __webpack_exports__.min;\n      __webpack_exports__ones = __webpack_exports__.ones;\n      __webpack_exports__ones_like = __webpack_exports__.ones_like;\n      __webpack_exports__permute = __webpack_exports__.permute;\n      __webpack_exports__permute_data = __webpack_exports__.permute_data;\n      __webpack_exports__pipeline = __webpack_exports__.pipeline;\n      __webpack_exports__quantize_embeddings = __webpack_exports__.quantize_embeddings;\n      __webpack_exports__rand = __webpack_exports__.rand;\n      __webpack_exports__read_audio = __webpack_exports__.read_audio;\n      __webpack_exports__rfft = __webpack_exports__.rfft;\n      __webpack_exports__round = __webpack_exports__.round;\n      __webpack_exports__slice = __webpack_exports__.slice;\n      __webpack_exports__softmax = __webpack_exports__.softmax;\n      __webpack_exports__spectrogram = __webpack_exports__.spectrogram;\n      __webpack_exports__stack = __webpack_exports__.stack;\n      __webpack_exports__std_mean = __webpack_exports__.std_mean;\n      __webpack_exports__topk = __webpack_exports__.topk;\n      __webpack_exports__window_function = __webpack_exports__.window_function;\n      __webpack_exports__zeros = __webpack_exports__.zeros;\n      __webpack_exports__zeros_like = __webpack_exports__.zeros_like;\n    }\n  });\n\n  // node_modules/wavefile/lib/parsers/base64-arraybuffer.js\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  function encode(bytes) {\n    let base64 = \"\";\n    for (let i = 0; i < bytes.length; i += 3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n      base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n    if (bytes.length % 3 === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (bytes.length % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n    return base64;\n  }\n  function decode(base64) {\n    let lookup = new Uint8Array(256);\n    for (let i = 0; i < chars.length; i++) {\n      lookup[chars.charCodeAt(i)] = i;\n    }\n    let bufferLength = base64.length * 0.75;\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n    let bytes = new Uint8Array(bufferLength);\n    for (let i = 0, j = 0; i < base64.length; i += 4) {\n      let encoded1 = lookup[base64.charCodeAt(i)];\n      let encoded2 = lookup[base64.charCodeAt(i + 1)];\n      let encoded3 = lookup[base64.charCodeAt(i + 2)];\n      let encoded4 = lookup[base64.charCodeAt(i + 3)];\n      bytes[j++] = encoded1 << 2 | encoded2 >> 4;\n      bytes[j++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n      bytes[j++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return bytes;\n  }\n\n  // node_modules/wavefile/lib/codecs/bitdepth.js\n  function changeBitDepth(samples, bithDepth, newSamples, targetBitDepth) {\n    if ([\"32f\", \"64\"].indexOf(bithDepth) > -1 && [\"32f\", \"64\"].indexOf(targetBitDepth) > -1) {\n      newSamples.set(samples);\n      return;\n    }\n    validateBitDepth_(bithDepth);\n    validateBitDepth_(targetBitDepth);\n    let toFunction = getBitDepthFunction_(bithDepth, targetBitDepth);\n    let options = {\n      oldMin: Math.pow(2, parseInt(bithDepth, 10)) / 2,\n      newMin: Math.pow(2, parseInt(targetBitDepth, 10)) / 2,\n      oldMax: Math.pow(2, parseInt(bithDepth, 10)) / 2 - 1,\n      newMax: Math.pow(2, parseInt(targetBitDepth, 10)) / 2 - 1\n    };\n    sign8Bit_(bithDepth, samples, true);\n    for (let i = 0, len = samples.length; i < len; i++) {\n      newSamples[i] = toFunction(samples[i], options);\n    }\n    sign8Bit_(targetBitDepth, newSamples, false);\n  }\n  function intToInt_(sample, args) {\n    if (sample > 0) {\n      sample = parseInt(sample / args.oldMax * args.newMax, 10);\n    } else {\n      sample = parseInt(sample / args.oldMin * args.newMin, 10);\n    }\n    return sample;\n  }\n  function floatToInt_(sample, args) {\n    return parseInt(\n      sample > 0 ? sample * args.newMax : sample * args.newMin,\n      10\n    );\n  }\n  function intToFloat_(sample, args) {\n    return sample > 0 ? sample / args.oldMax : sample / args.oldMin;\n  }\n  function getBitDepthFunction_(original, target) {\n    let func = function(x) {\n      return x;\n    };\n    if (original != target) {\n      if ([\"32f\", \"64\"].includes(original)) {\n        func = floatToInt_;\n      } else {\n        if ([\"32f\", \"64\"].includes(target)) {\n          func = intToFloat_;\n        } else {\n          func = intToInt_;\n        }\n      }\n    }\n    return func;\n  }\n  function validateBitDepth_(bitDepth) {\n    if (bitDepth != \"32f\" && bitDepth != \"64\" && (parseInt(bitDepth, 10) < \"8\" || parseInt(bitDepth, 10) > \"53\")) {\n      throw new Error(\"Invalid bit depth.\");\n    }\n  }\n  function sign8Bit_(bitDepth, samples, sign) {\n    if (bitDepth == \"8\") {\n      let factor = sign ? -128 : 128;\n      for (let i = 0, len = samples.length; i < len; i++) {\n        samples[i] = samples[i] += factor;\n      }\n    }\n  }\n\n  // node_modules/wavefile/lib/codecs/imaadpcm.js\n  var INDEX_TABLE = [\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    4,\n    6,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    4,\n    6,\n    8\n  ];\n  var STEP_TABLE = [\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    16,\n    17,\n    19,\n    21,\n    23,\n    25,\n    28,\n    31,\n    34,\n    37,\n    41,\n    45,\n    50,\n    55,\n    60,\n    66,\n    73,\n    80,\n    88,\n    97,\n    107,\n    118,\n    130,\n    143,\n    157,\n    173,\n    190,\n    209,\n    230,\n    253,\n    279,\n    307,\n    337,\n    371,\n    408,\n    449,\n    494,\n    544,\n    598,\n    658,\n    724,\n    796,\n    876,\n    963,\n    1060,\n    1166,\n    1282,\n    1411,\n    1552,\n    1707,\n    1878,\n    2066,\n    2272,\n    2499,\n    2749,\n    3024,\n    3327,\n    3660,\n    4026,\n    4428,\n    4871,\n    5358,\n    5894,\n    6484,\n    7132,\n    7845,\n    8630,\n    9493,\n    10442,\n    11487,\n    12635,\n    13899,\n    15289,\n    16818,\n    18500,\n    20350,\n    22385,\n    24623,\n    27086,\n    29794,\n    32767\n  ];\n  function encode2(samples) {\n    let state = {\n      index: 0,\n      predicted: 0,\n      step: 7\n    };\n    let adpcmSamples = new Uint8Array(samples.length);\n    let block = [];\n    let fileIndex = 0;\n    let blockCount = 0;\n    for (let i = 0, len = samples.length; i < len; i++) {\n      if (i % 505 == 0 && i != 0) {\n        adpcmSamples.set(encodeBlock(block, state), fileIndex);\n        fileIndex += 256;\n        block = [];\n        blockCount++;\n      }\n      block.push(samples[i]);\n    }\n    let samplesLength = samples.length / 2;\n    if (samplesLength % 2) {\n      samplesLength++;\n    }\n    return adpcmSamples.slice(0, samplesLength + 512 + blockCount * 4);\n  }\n  function decode2(adpcmSamples, blockAlign = 256) {\n    let state = {\n      index: 0,\n      predicted: 0,\n      step: 7\n    };\n    let samples = new Int16Array(adpcmSamples.length * 2);\n    let block = [];\n    let fileIndex = 0;\n    for (let i = 0, len = adpcmSamples.length; i < len; i++) {\n      if (i % blockAlign == 0 && i != 0) {\n        let decoded = decodeBlock(block, state);\n        samples.set(decoded, fileIndex);\n        fileIndex += decoded.length;\n        block = [];\n      }\n      block.push(adpcmSamples[i]);\n    }\n    return samples;\n  }\n  function encodeBlock(block, state) {\n    let adpcmSamples = blockHead_(block[0], state);\n    for (let i = 3, len = block.length; i < len; i += 2) {\n      let sample2 = encodeSample_(block[i], state);\n      let sample = encodeSample_(block[i + 1], state);\n      adpcmSamples.push(sample << 4 | sample2);\n    }\n    return adpcmSamples;\n  }\n  function decodeBlock(block, state) {\n    state.predicted = sign_(block[1] << 8 | block[0]);\n    state.index = block[2];\n    state.step = STEP_TABLE[state.index];\n    let result = [\n      state.predicted,\n      state.predicted\n    ];\n    for (let i = 4, len = block.length; i < len; i++) {\n      let original_sample = block[i];\n      let second_sample = original_sample >> 4;\n      let first_sample = second_sample << 4 ^ original_sample;\n      result.push(decodeSample_(first_sample, state));\n      result.push(decodeSample_(second_sample, state));\n    }\n    return result;\n  }\n  function sign_(num) {\n    return num > 32768 ? num - 65536 : num;\n  }\n  function encodeSample_(sample, state) {\n    let delta = sample - state.predicted;\n    let value = 0;\n    if (delta >= 0) {\n      value = 0;\n    } else {\n      value = 8;\n      delta = -delta;\n    }\n    let step = STEP_TABLE[state.index];\n    let diff = step >> 3;\n    if (delta > step) {\n      value |= 4;\n      delta -= step;\n      diff += step;\n    }\n    step >>= 1;\n    if (delta > step) {\n      value |= 2;\n      delta -= step;\n      diff += step;\n    }\n    step >>= 1;\n    if (delta > step) {\n      value |= 1;\n      diff += step;\n    }\n    updateEncoder_(value, diff, state);\n    return value;\n  }\n  function updateEncoder_(value, diff, state) {\n    if (value & 8) {\n      state.predicted -= diff;\n    } else {\n      state.predicted += diff;\n    }\n    if (state.predicted < -32768) {\n      state.predicted = -32768;\n    } else if (state.predicted > 32767) {\n      state.predicted = 32767;\n    }\n    state.index += INDEX_TABLE[value & 7];\n    if (state.index < 0) {\n      state.index = 0;\n    } else if (state.index > 88) {\n      state.index = 88;\n    }\n  }\n  function decodeSample_(nibble, state) {\n    let difference = 0;\n    if (nibble & 4) {\n      difference += state.step;\n    }\n    if (nibble & 2) {\n      difference += state.step >> 1;\n    }\n    if (nibble & 1) {\n      difference += state.step >> 2;\n    }\n    difference += state.step >> 3;\n    if (nibble & 8) {\n      difference = -difference;\n    }\n    state.predicted += difference;\n    if (state.predicted > 32767) {\n      state.predicted = 32767;\n    } else if (state.predicted < -32767) {\n      state.predicted = -32767;\n    }\n    updateDecoder_(nibble, state);\n    return state.predicted;\n  }\n  function updateDecoder_(nibble, state) {\n    state.index += INDEX_TABLE[nibble];\n    if (state.index < 0) {\n      state.index = 0;\n    } else if (state.index > 88) {\n      state.index = 88;\n    }\n    state.step = STEP_TABLE[state.index];\n  }\n  function blockHead_(sample, state) {\n    encodeSample_(sample, state);\n    let adpcmSamples = [];\n    adpcmSamples.push(sample & 255);\n    adpcmSamples.push(sample >> 8 & 255);\n    adpcmSamples.push(state.index);\n    adpcmSamples.push(0);\n    return adpcmSamples;\n  }\n\n  // node_modules/wavefile/lib/codecs/alaw.js\n  var LOG_TABLE = [\n    1,\n    1,\n    2,\n    2,\n    3,\n    3,\n    3,\n    3,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7\n  ];\n  function encodeSample(sample) {\n    let compandedValue;\n    sample = sample == -32768 ? -32767 : sample;\n    let sign = ~sample >> 8 & 128;\n    if (!sign) {\n      sample = sample * -1;\n    }\n    if (sample > 32635) {\n      sample = 32635;\n    }\n    if (sample >= 256) {\n      let exponent = LOG_TABLE[sample >> 8 & 127];\n      let mantissa = sample >> exponent + 3 & 15;\n      compandedValue = exponent << 4 | mantissa;\n    } else {\n      compandedValue = sample >> 4;\n    }\n    return compandedValue ^ (sign ^ 85);\n  }\n  function decodeSample(aLawSample) {\n    let sign = 0;\n    aLawSample ^= 85;\n    if ((aLawSample & 128) !== 0) {\n      aLawSample &= ~(1 << 7);\n      sign = -1;\n    }\n    let position = ((aLawSample & 240) >> 4) + 4;\n    let decoded = 0;\n    if (position != 4) {\n      decoded = 1 << position | (aLawSample & 15) << position - 4 | 1 << position - 5;\n    } else {\n      decoded = aLawSample << 1 | 1;\n    }\n    decoded = sign === 0 ? decoded : -decoded;\n    return decoded * 8 * -1;\n  }\n  function encode3(samples) {\n    let aLawSamples = new Uint8Array(samples.length);\n    for (let i = 0, len = samples.length; i < len; i++) {\n      aLawSamples[i] = encodeSample(samples[i]);\n    }\n    return aLawSamples;\n  }\n  function decode3(samples) {\n    let pcmSamples = new Int16Array(samples.length);\n    for (let i = 0, len = samples.length; i < len; i++) {\n      pcmSamples[i] = decodeSample(samples[i]);\n    }\n    return pcmSamples;\n  }\n\n  // node_modules/wavefile/lib/codecs/mulaw.js\n  var BIAS = 132;\n  var CLIP = 32635;\n  var encodeTable = [\n    0,\n    0,\n    1,\n    1,\n    2,\n    2,\n    2,\n    2,\n    3,\n    3,\n    3,\n    3,\n    3,\n    3,\n    3,\n    3,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    5,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    6,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7,\n    7\n  ];\n  var decodeTable = [0, 132, 396, 924, 1980, 4092, 8316, 16764];\n  function encodeSample2(sample) {\n    let sign;\n    let exponent;\n    let mantissa;\n    let muLawSample;\n    sign = sample >> 8 & 128;\n    if (sign != 0) sample = -sample;\n    sample = sample + BIAS;\n    if (sample > CLIP) sample = CLIP;\n    exponent = encodeTable[sample >> 7 & 255];\n    mantissa = sample >> exponent + 3 & 15;\n    muLawSample = ~(sign | exponent << 4 | mantissa);\n    return muLawSample;\n  }\n  function decodeSample2(muLawSample) {\n    let sign;\n    let exponent;\n    let mantissa;\n    let sample;\n    muLawSample = ~muLawSample;\n    sign = muLawSample & 128;\n    exponent = muLawSample >> 4 & 7;\n    mantissa = muLawSample & 15;\n    sample = decodeTable[exponent] + (mantissa << exponent + 3);\n    if (sign != 0) sample = -sample;\n    return sample;\n  }\n  function encode4(samples) {\n    let muLawSamples = new Uint8Array(samples.length);\n    for (let i = 0, len = samples.length; i < len; i++) {\n      muLawSamples[i] = encodeSample2(samples[i]);\n    }\n    return muLawSamples;\n  }\n  function decode4(samples) {\n    let pcmSamples = new Int16Array(samples.length);\n    for (let i = 0, len = samples.length; i < len; i++) {\n      pcmSamples[i] = decodeSample2(samples[i]);\n    }\n    return pcmSamples;\n  }\n\n  // node_modules/wavefile/lib/parsers/binary/lib/endianness.js\n  function endianness(bytes, offset, start = 0, end = bytes.length) {\n    for (let index = start; index < end; index += offset) {\n      swap_(bytes, offset, index);\n    }\n  }\n  function swap_(bytes, offset, index) {\n    offset--;\n    for (let x = 0; x < offset; x++) {\n      let theByte = bytes[index + x];\n      bytes[index + x] = bytes[index + offset];\n      bytes[index + offset] = theByte;\n      offset--;\n    }\n  }\n\n  // node_modules/wavefile/lib/parsers/binary/lib/utf8-parser.js\n  function unpack(buffer, start = 0, end = buffer.length) {\n    let str = \"\";\n    for (let index = start; index < end; ) {\n      let lowerBoundary = 128;\n      let upperBoundary = 191;\n      let replace = false;\n      let charCode = buffer[index++];\n      if (charCode >= 0 && charCode <= 127) {\n        str += String.fromCharCode(charCode);\n      } else {\n        let count = 0;\n        if (charCode >= 194 && charCode <= 223) {\n          count = 1;\n        } else if (charCode >= 224 && charCode <= 239) {\n          count = 2;\n          if (buffer[index] === 224) {\n            lowerBoundary = 160;\n          }\n          if (buffer[index] === 237) {\n            upperBoundary = 159;\n          }\n        } else if (charCode >= 240 && charCode <= 244) {\n          count = 3;\n          if (buffer[index] === 240) {\n            lowerBoundary = 144;\n          }\n          if (buffer[index] === 244) {\n            upperBoundary = 143;\n          }\n        } else {\n          replace = true;\n        }\n        charCode = charCode & (1 << 8 - count - 1) - 1;\n        for (let i = 0; i < count; i++) {\n          if (buffer[index] < lowerBoundary || buffer[index] > upperBoundary) {\n            replace = true;\n          }\n          charCode = charCode << 6 | buffer[index] & 63;\n          index++;\n        }\n        if (replace) {\n          str += String.fromCharCode(65533);\n        } else if (charCode <= 65535) {\n          str += String.fromCharCode(charCode);\n        } else {\n          charCode -= 65536;\n          str += String.fromCharCode(\n            (charCode >> 10 & 1023) + 55296,\n            (charCode & 1023) + 56320\n          );\n        }\n      }\n    }\n    return str;\n  }\n  function pack(str, buffer, index = 0) {\n    let i = 0;\n    let len = str.length;\n    while (i < len) {\n      let codePoint = str.codePointAt(i);\n      if (codePoint < 128) {\n        buffer[index] = codePoint;\n        index++;\n      } else {\n        let count = 0;\n        let offset = 0;\n        if (codePoint <= 2047) {\n          count = 1;\n          offset = 192;\n        } else if (codePoint <= 65535) {\n          count = 2;\n          offset = 224;\n        } else if (codePoint <= 1114111) {\n          count = 3;\n          offset = 240;\n          i++;\n        }\n        buffer[index] = (codePoint >> 6 * count) + offset;\n        index++;\n        while (count > 0) {\n          buffer[index] = 128 | codePoint >> 6 * (count - 1) & 63;\n          index++;\n          count--;\n        }\n      }\n      i++;\n    }\n    return index;\n  }\n\n  // node_modules/wavefile/lib/parsers/binary/lib/int-parser.js\n  var IntParser = class {\n    /**\n     * @param {number} bits The number of bits used by the integer.\n     * @param {boolean} [signed=false] True for signed, false otherwise.\n     */\n    constructor(bits, signed = false) {\n      this.bits = bits;\n      this.offset = Math.ceil(bits / 8);\n      this.max = Math.pow(2, bits) - 1;\n      this.min = 0;\n      this.unpack = this.unpack_;\n      if (signed) {\n        this.max = Math.pow(2, bits) / 2 - 1;\n        this.min = -this.max - 1;\n        this.unpack = this.unpackSigned_;\n      }\n    }\n    /**\n     * Write one unsigned integer to a byte buffer.\n     * @param {!(Uint8Array|Array<number>)} buffer An array of bytes.\n     * @param {number} num The number. Overflows are truncated.\n     * @param {number} [index=0] The index being written in the byte buffer.\n     * @return {number} The next index to write on the byte buffer.\n     */\n    pack(buffer, num, index = 0) {\n      num = this.clamp_(Math.round(num));\n      for (let i = 0, len = this.offset; i < len; i++) {\n        buffer[index] = Math.floor(num / Math.pow(2, i * 8)) & 255;\n        index++;\n      }\n      return index;\n    }\n    /**\n     * Read one unsigned integer from a byte buffer.\n     * Does not check for overflows.\n     * @param {!(Uint8Array|Array<number>)} buffer An array of bytes.\n     * @param {number} [index=0] The index to read.\n     * @return {number}\n     * @private\n     */\n    unpack_(buffer, index = 0) {\n      let num = 0;\n      for (let x = 0; x < this.offset; x++) {\n        num += buffer[index + x] * Math.pow(256, x);\n      }\n      return num;\n    }\n    /**\n     * Read one two's complement signed integer from a byte buffer.\n     * @param {!(Uint8Array|Array<number>)} buffer An array of bytes.\n     * @param {number} [index=0] The index to read.\n     * @return {number}\n     * @private\n     */\n    unpackSigned_(buffer, index = 0) {\n      return this.sign_(this.unpack_(buffer, index));\n    }\n    /**\n     * Clamp values on overflow.\n     * @param {number} num The number.\n     * @private\n     */\n    clamp_(num) {\n      if (num > this.max) {\n        return this.max;\n      } else if (num < this.min) {\n        return this.min;\n      }\n      return num;\n    }\n    /**\n     * Sign a number.\n     * @param {number} num The number.\n     * @return {number}\n     * @private\n     */\n    sign_(num) {\n      if (num > this.max) {\n        num -= this.max * 2 + 2;\n      }\n      return num;\n    }\n  };\n\n  // node_modules/wavefile/lib/parsers/binary/lib/float-parser.js\n  var FloatParser = class {\n    /**\n     * Pack a IEEE 754 floating point number.\n     * @param {number} ebits The exponent bits.\n     * @param {number} fbits The fraction bits.\n     */\n    constructor(ebits, fbits) {\n      this.offset = Math.ceil((ebits + fbits) / 8);\n      this.ebits = ebits;\n      this.fbits = fbits;\n      this.bias = (1 << ebits - 1) - 1;\n      this.biasP2 = Math.pow(2, this.bias + 1);\n      this.ebitsFbits = ebits + fbits;\n      this.fbias = Math.pow(2, -(8 * this.offset - 1 - ebits));\n    }\n    /**\n     * Pack a IEEE 754 floating point number.\n     * @param {!Uint8Array|!Array<number>} buffer The buffer.\n     * @param {number} num The number.\n     * @param {number} index The index to write on the buffer.\n     * @return {number} The next index to write on the buffer.\n     */\n    pack(buffer, num, index) {\n      if (Math.abs(num) > this.biasP2 - this.ebitsFbits * 2) {\n        num = num < 0 ? -Infinity : Infinity;\n      }\n      let sign = ((num = +num) || 1 / num) < 0 ? 1 : num < 0 ? 1 : 0;\n      num = Math.abs(num);\n      let exp = Math.min(Math.floor(Math.log(num) / Math.LN2), 1023);\n      let fraction = roundToEven(num / Math.pow(2, exp) * Math.pow(2, this.fbits));\n      if (num !== num) {\n        fraction = Math.pow(2, this.fbits - 1);\n        exp = (1 << this.ebits) - 1;\n      } else if (num !== 0) {\n        if (num >= Math.pow(2, 1 - this.bias)) {\n          if (fraction / Math.pow(2, this.fbits) >= 2) {\n            exp = exp + 1;\n            fraction = 1;\n          }\n          if (exp > this.bias) {\n            exp = (1 << this.ebits) - 1;\n            fraction = 0;\n          } else {\n            exp = exp + this.bias;\n            fraction = roundToEven(fraction) - Math.pow(2, this.fbits);\n          }\n        } else {\n          fraction = roundToEven(num / Math.pow(2, 1 - this.bias - this.fbits));\n          exp = 0;\n        }\n      }\n      return this.packFloatBits_(buffer, index, sign, exp, fraction);\n    }\n    /**\n     * Unpack a IEEE 754 floating point number.\n     * Derived from IEEE754 by DeNA Co., Ltd., MIT License. \n     * Adapted to handle NaN. Should port the solution to the original repo.\n     * @param {!Uint8Array|!Array<number>} buffer The buffer.\n     * @param {number} index The index to read from the buffer.\n     * @return {number} The floating point number.\n     */\n    unpack(buffer, index) {\n      let eMax = (1 << this.ebits) - 1;\n      let significand;\n      let leftBits = \"\";\n      for (let i = this.offset - 1; i >= 0; i--) {\n        let t = buffer[i + index].toString(2);\n        leftBits += \"00000000\".substring(t.length) + t;\n      }\n      let sign = leftBits.charAt(0) == \"1\" ? -1 : 1;\n      leftBits = leftBits.substring(1);\n      let exponent = parseInt(leftBits.substring(0, this.ebits), 2);\n      leftBits = leftBits.substring(this.ebits);\n      if (exponent == eMax) {\n        if (parseInt(leftBits, 2) !== 0) {\n          return NaN;\n        }\n        return sign * Infinity;\n      } else if (exponent === 0) {\n        exponent += 1;\n        significand = parseInt(leftBits, 2);\n      } else {\n        significand = parseInt(\"1\" + leftBits, 2);\n      }\n      return sign * significand * this.fbias * Math.pow(2, exponent - this.bias);\n    }\n    /**\n     * Pack a IEEE754 from its sign, exponent and fraction bits\n     * and place it in a byte buffer.\n     * @param {!Uint8Array|!Array<number>} buffer The byte buffer to write to.\n     * @param {number} index The buffer index to write.\n     * @param {number} sign The sign.\n     * @param {number} exp the exponent.\n     * @param {number} fraction The fraction.\n     * @return {number}\n     * @private\n     */\n    packFloatBits_(buffer, index, sign, exp, fraction) {\n      let bits = [];\n      bits.push(sign);\n      for (let i = this.ebits; i > 0; i -= 1) {\n        bits[i] = exp % 2 ? 1 : 0;\n        exp = Math.floor(exp / 2);\n      }\n      let len = bits.length;\n      for (let i = this.fbits; i > 0; i -= 1) {\n        bits[len + i] = fraction % 2 ? 1 : 0;\n        fraction = Math.floor(fraction / 2);\n      }\n      let str = bits.join(\"\");\n      let offset = this.offset + index - 1;\n      let k2 = index;\n      while (offset >= index) {\n        buffer[offset] = parseInt(str.substring(0, 8), 2);\n        str = str.substring(8);\n        offset--;\n        k2++;\n      }\n      return k2;\n    }\n  };\n  function roundToEven(n) {\n    let w = Math.floor(n);\n    let f = n - w;\n    if (f < 0.5) {\n      return w;\n    }\n    if (f > 0.5) {\n      return w + 1;\n    }\n    return w % 2 ? w + 1 : w;\n  }\n\n  // node_modules/wavefile/lib/parsers/binary/index.js\n  function unpackString(buffer, index = 0, end = buffer.length) {\n    return unpack(buffer, index, end);\n  }\n  function packString(str) {\n    let buffer = [];\n    pack(str, buffer);\n    return buffer;\n  }\n  function packStringTo(str, buffer, index = 0) {\n    return pack(str, buffer, index);\n  }\n  function packArrayTo(values, theType, buffer, index = 0) {\n    theType = theType || {};\n    let packer = getParser_(theType.bits, theType.fp, theType.signed);\n    let offset = Math.ceil(theType.bits / 8);\n    let i = 0;\n    let start = index;\n    for (let valuesLen = values.length; i < valuesLen; i++) {\n      index = packer.pack(buffer, values[i], index);\n    }\n    if (theType.be) {\n      endianness(buffer, offset, start, index);\n    }\n    return index;\n  }\n  function unpackArrayTo(buffer, theType, output, start = 0, end = buffer.length) {\n    theType = theType || {};\n    let parser = getParser_(theType.bits, theType.fp, theType.signed);\n    end = getUnpackLen_(buffer, start, end, parser.offset);\n    if (theType.be) {\n      let readBuffer = copyBuffer_(buffer);\n      if (theType.be) {\n        endianness(readBuffer, parser.offset, start, end);\n      }\n      unpack_(readBuffer, output, start, end, parser);\n    } else {\n      unpack_(buffer, output, start, end, parser);\n    }\n  }\n  function packTo(value, theType, buffer, index = 0) {\n    return packArrayTo([value], theType, buffer, index);\n  }\n  function pack2(value, theType) {\n    let output = [];\n    packTo(value, theType, output, 0);\n    return output;\n  }\n  function unpack2(buffer, theType, index = 0) {\n    let output = [];\n    unpackArrayTo(\n      buffer,\n      theType,\n      output,\n      index,\n      index + Math.ceil(theType.bits / 8)\n    );\n    return output[0];\n  }\n  function unpack_(buffer, output, start, end, parser) {\n    let offset = parser.offset;\n    for (let index = 0, j = start; j < end; j += offset, index++) {\n      output[index] = parser.unpack(buffer, j);\n    }\n  }\n  function copyBuffer_(buffer) {\n    return new Uint8Array(buffer);\n  }\n  function getUnpackLen_(buffer, start, end, offset) {\n    let extra = (end - start) % offset;\n    return end - extra;\n  }\n  function getParser_(bits, fp, signed) {\n    if (fp && bits == 32) {\n      return new FloatParser(8, 23);\n    } else if (fp && bits == 64) {\n      return new FloatParser(11, 52);\n    }\n    return new IntParser(bits, signed);\n  }\n\n  // node_modules/wavefile/lib/riff-file.js\n  var RIFFFile = class {\n    constructor() {\n      this.container = \"\";\n      this.chunkSize = 0;\n      this.format = \"\";\n      this.signature = null;\n      this.head = 0;\n      this.uInt32 = { bits: 32, be: false };\n      this.supported_containers = [\"RIFF\", \"RIFX\"];\n    }\n    /**\n     * Read the signature of the chunks in a RIFF/RIFX file.\n     * @param {!Uint8Array} buffer The file bytes.\n     * @protected\n     */\n    setSignature(buffer) {\n      this.head = 0;\n      this.container = this.readString(buffer, 4);\n      if (this.supported_containers.indexOf(this.container) === -1) {\n        throw Error(\"Not a supported format.\");\n      }\n      this.uInt32.be = this.container === \"RIFX\";\n      this.chunkSize = this.readUInt32(buffer);\n      this.format = this.readString(buffer, 4);\n      this.signature = {\n        chunkId: this.container,\n        chunkSize: this.chunkSize,\n        format: this.format,\n        subChunks: this.getSubChunksIndex_(buffer)\n      };\n    }\n    /**\n      * Find a chunk by its fourCC_ in a array of RIFF chunks.\n      * @param {string} chunkId The chunk fourCC_.\n      * @param {boolean} [multiple=false] True if there may be multiple chunks\n      *    with the same chunkId.\n      * @return {Object}\n      * @protected\n      */\n    findChunk(chunkId, multiple = false) {\n      let chunks = this.signature.subChunks;\n      let chunk = [];\n      for (let i = 0; i < chunks.length; i++) {\n        if (chunks[i].chunkId == chunkId) {\n          if (multiple) {\n            chunk.push(chunks[i]);\n          } else {\n            return chunks[i];\n          }\n        }\n      }\n      if (chunkId == \"LIST\") {\n        return chunk.length ? chunk : null;\n      }\n      return null;\n    }\n    /**\n     * Read bytes as a string from a RIFF chunk.\n     * @param {!Uint8Array} bytes The bytes.\n     * @param {number} maxSize the max size of the string.\n     * @return {string} The string.\n     * @protected\n     */\n    readString(bytes, maxSize) {\n      let str = \"\";\n      str = unpackString(bytes, this.head, this.head + maxSize);\n      this.head += maxSize;\n      return str;\n    }\n    /**\n     * Read a number from a chunk.\n     * @param {!Uint8Array} bytes The chunk bytes.\n     * @return {number} The number.\n     * @protected\n     */\n    readUInt32(bytes) {\n      let value = unpack2(bytes, this.uInt32, this.head);\n      this.head += 4;\n      return value;\n    }\n    /**\n     * Return the sub chunks of a RIFF file.\n     * @param {!Uint8Array} buffer the RIFF file bytes.\n     * @return {!Array<Object>} The subchunks of a RIFF/RIFX or LIST chunk.\n     * @private\n     */\n    getSubChunksIndex_(buffer) {\n      let chunks = [];\n      let i = this.head;\n      while (i <= buffer.length - 8) {\n        chunks.push(this.getSubChunkIndex_(buffer, i));\n        i += 8 + chunks[chunks.length - 1].chunkSize;\n        i = i % 2 ? i + 1 : i;\n      }\n      return chunks;\n    }\n    /**\n     * Return a sub chunk from a RIFF file.\n     * @param {!Uint8Array} buffer the RIFF file bytes.\n     * @param {number} index The start index of the chunk.\n     * @return {!Object} A subchunk of a RIFF/RIFX or LIST chunk.\n     * @private\n     */\n    getSubChunkIndex_(buffer, index) {\n      let chunk = {\n        chunkId: this.getChunkId_(buffer, index),\n        chunkSize: this.getChunkSize_(buffer, index)\n      };\n      if (chunk.chunkId == \"LIST\") {\n        chunk.format = unpackString(buffer, index + 8, index + 12);\n        this.head += 4;\n        chunk.subChunks = this.getSubChunksIndex_(buffer);\n      } else {\n        let realChunkSize = chunk.chunkSize % 2 ? chunk.chunkSize + 1 : chunk.chunkSize;\n        this.head = index + 8 + realChunkSize;\n        chunk.chunkData = {\n          start: index + 8,\n          end: this.head\n        };\n      }\n      return chunk;\n    }\n    /**\n     * Return the fourCC_ of a chunk.\n     * @param {!Uint8Array} buffer the RIFF file bytes.\n     * @param {number} index The start index of the chunk.\n     * @return {string} The id of the chunk.\n     * @private\n     */\n    getChunkId_(buffer, index) {\n      this.head += 4;\n      return unpackString(buffer, index, index + 4);\n    }\n    /**\n     * Return the size of a chunk.\n     * @param {!Uint8Array} buffer the RIFF file bytes.\n     * @param {number} index The start index of the chunk.\n     * @return {number} The size of the chunk without the id and size fields.\n     * @private\n     */\n    getChunkSize_(buffer, index) {\n      this.head += 4;\n      return unpack2(buffer, this.uInt32, index + 4);\n    }\n  };\n\n  // node_modules/wavefile/lib/wavefile-reader.js\n  var WaveFileReader = class _WaveFileReader extends RIFFFile {\n    constructor() {\n      super();\n      this.supported_containers.push(\"RF64\");\n      this.fmt = {\n        /** @type {string} */\n        chunkId: \"\",\n        /** @type {number} */\n        chunkSize: 0,\n        /** @type {number} */\n        audioFormat: 0,\n        /** @type {number} */\n        numChannels: 0,\n        /** @type {number} */\n        sampleRate: 0,\n        /** @type {number} */\n        byteRate: 0,\n        /** @type {number} */\n        blockAlign: 0,\n        /** @type {number} */\n        bitsPerSample: 0,\n        /** @type {number} */\n        cbSize: 0,\n        /** @type {number} */\n        validBitsPerSample: 0,\n        /** @type {number} */\n        dwChannelMask: 0,\n        /**\n         * 4 32-bit values representing a 128-bit ID\n         * @type {!Array<number>}\n         */\n        subformat: []\n      };\n      this.fact = {\n        /** @type {string} */\n        chunkId: \"\",\n        /** @type {number} */\n        chunkSize: 0,\n        /** @type {number} */\n        dwSampleLength: 0\n      };\n      this.cue = {\n        /** @type {string} */\n        chunkId: \"\",\n        /** @type {number} */\n        chunkSize: 0,\n        /** @type {number} */\n        dwCuePoints: 0,\n        /** @type {!Array<!Object>} */\n        points: []\n      };\n      this.smpl = {\n        /** @type {string} */\n        chunkId: \"\",\n        /** @type {number} */\n        chunkSize: 0,\n        /** @type {number} */\n        dwManufacturer: 0,\n        /** @type {number} */\n        dwProduct: 0,\n        /** @type {number} */\n        dwSamplePeriod: 0,\n        /** @type {number} */\n        dwMIDIUnityNote: 0,\n        /** @type {number} */\n        dwMIDIPitchFraction: 0,\n        /** @type {number} */\n        dwSMPTEFormat: 0,\n        /** @type {number} */\n        dwSMPTEOffset: 0,\n        /** @type {number} */\n        dwNumSampleLoops: 0,\n        /** @type {number} */\n        dwSamplerData: 0,\n        /** @type {!Array<!Object>} */\n        loops: []\n      };\n      this.bext = {\n        /** @type {string} */\n        chunkId: \"\",\n        /** @type {number} */\n        chunkSize: 0,\n        /** @type {string} */\n        description: \"\",\n        //256\n        /** @type {string} */\n        originator: \"\",\n        //32\n        /** @type {string} */\n        originatorReference: \"\",\n        //32\n        /** @type {string} */\n        originationDate: \"\",\n        //10\n        /** @type {string} */\n        originationTime: \"\",\n        //8\n        /**\n         * 2 32-bit values, timeReference high and low\n         * @type {!Array<number>}\n         */\n        timeReference: [0, 0],\n        /** @type {number} */\n        version: 0,\n        //WORD\n        /** @type {string} */\n        UMID: \"\",\n        // 64 chars\n        /** @type {number} */\n        loudnessValue: 0,\n        //WORD\n        /** @type {number} */\n        loudnessRange: 0,\n        //WORD\n        /** @type {number} */\n        maxTruePeakLevel: 0,\n        //WORD\n        /** @type {number} */\n        maxMomentaryLoudness: 0,\n        //WORD\n        /** @type {number} */\n        maxShortTermLoudness: 0,\n        //WORD\n        /** @type {string} */\n        reserved: \"\",\n        //180\n        /** @type {string} */\n        codingHistory: \"\"\n        // string, unlimited\n      };\n      this.iXML = {\n        /** @type {string} */\n        chunkId: \"\",\n        /** @type {number} */\n        chunkSize: 0,\n        /** @type {string} */\n        value: \"\"\n      };\n      this.ds64 = {\n        /** @type {string} */\n        chunkId: \"\",\n        /** @type {number} */\n        chunkSize: 0,\n        /** @type {number} */\n        riffSizeHigh: 0,\n        // DWORD\n        /** @type {number} */\n        riffSizeLow: 0,\n        // DWORD\n        /** @type {number} */\n        dataSizeHigh: 0,\n        // DWORD\n        /** @type {number} */\n        dataSizeLow: 0,\n        // DWORD\n        /** @type {number} */\n        originationTime: 0,\n        // DWORD\n        /** @type {number} */\n        sampleCountHigh: 0,\n        // DWORD\n        /** @type {number} */\n        sampleCountLow: 0\n        // DWORD\n        /** @type {number} */\n        //'tableLength': 0, // DWORD\n        /** @type {!Array<number>} */\n        //'table': []\n      };\n      this.data = {\n        /** @type {string} */\n        chunkId: \"\",\n        /** @type {number} */\n        chunkSize: 0,\n        /** @type {!Uint8Array} */\n        samples: new Uint8Array(0)\n      };\n      this.LIST = [];\n      this.junk = {\n        /** @type {string} */\n        chunkId: \"\",\n        /** @type {number} */\n        chunkSize: 0,\n        /** @type {!Array<number>} */\n        chunkData: []\n      };\n      this._PMX = {\n        /** @type {string} */\n        chunkId: \"\",\n        /** @type {number} */\n        chunkSize: 0,\n        /** @type {string} */\n        value: \"\"\n      };\n      this.uInt16 = { bits: 16, be: false, signed: false, fp: false };\n    }\n    /**\n     * Set up the WaveFileReader object from a byte buffer.\n     * @param {!Uint8Array} wavBuffer The buffer.\n     * @param {boolean=} [samples=true] True if the samples should be loaded.\n     * @throws {Error} If container is not RIFF, RIFX or RF64.\n     * @throws {Error} If format is not WAVE.\n     * @throws {Error} If no 'fmt ' chunk is found.\n     * @throws {Error} If no 'data' chunk is found.\n     */\n    fromBuffer(wavBuffer, samples = true) {\n      this.clearHeaders();\n      this.setSignature(wavBuffer);\n      this.uInt16.be = this.uInt32.be;\n      if (this.format != \"WAVE\") {\n        throw Error('Could not find the \"WAVE\" format identifier');\n      }\n      this.readDs64Chunk_(wavBuffer);\n      this.readFmtChunk_(wavBuffer);\n      this.readFactChunk_(wavBuffer);\n      this.readBextChunk_(wavBuffer);\n      this.readiXMLChunk_(wavBuffer);\n      this.readCueChunk_(wavBuffer);\n      this.readSmplChunk_(wavBuffer);\n      this.readDataChunk_(wavBuffer, samples);\n      this.readJunkChunk_(wavBuffer);\n      this.readLISTChunk_(wavBuffer);\n      this.read_PMXChunk_(wavBuffer);\n    }\n    /**\n     * Reset the chunks of the WaveFileReader instance.\n     * @protected\n     * @ignore\n     */\n    clearHeaders() {\n      let tmpWav = new _WaveFileReader();\n      Object.assign(this.fmt, tmpWav.fmt);\n      Object.assign(this.fact, tmpWav.fact);\n      Object.assign(this.cue, tmpWav.cue);\n      Object.assign(this.smpl, tmpWav.smpl);\n      Object.assign(this.bext, tmpWav.bext);\n      Object.assign(this.iXML, tmpWav.iXML);\n      Object.assign(this.ds64, tmpWav.ds64);\n      Object.assign(this.data, tmpWav.data);\n      this.LIST = [];\n      Object.assign(this.junk, tmpWav.junk);\n      Object.assign(this._PMX, tmpWav._PMX);\n    }\n    /**\n     * Read the 'fmt ' chunk of a wave file.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @throws {Error} If no 'fmt ' chunk is found.\n     * @private\n     */\n    readFmtChunk_(buffer) {\n      let chunk = this.findChunk(\"fmt \");\n      if (chunk) {\n        this.head = chunk.chunkData.start;\n        this.fmt.chunkId = chunk.chunkId;\n        this.fmt.chunkSize = chunk.chunkSize;\n        this.fmt.audioFormat = this.readUInt16_(buffer);\n        this.fmt.numChannels = this.readUInt16_(buffer);\n        this.fmt.sampleRate = this.readUInt32(buffer);\n        this.fmt.byteRate = this.readUInt32(buffer);\n        this.fmt.blockAlign = this.readUInt16_(buffer);\n        this.fmt.bitsPerSample = this.readUInt16_(buffer);\n        this.readFmtExtension_(buffer);\n      } else {\n        throw Error('Could not find the \"fmt \" chunk');\n      }\n    }\n    /**\n     * Read the 'fmt ' chunk extension.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @private\n     */\n    readFmtExtension_(buffer) {\n      if (this.fmt.chunkSize > 16) {\n        this.fmt.cbSize = this.readUInt16_(buffer);\n        if (this.fmt.chunkSize > 18) {\n          this.fmt.validBitsPerSample = this.readUInt16_(buffer);\n          if (this.fmt.chunkSize > 20) {\n            this.fmt.dwChannelMask = this.readUInt32(buffer);\n            this.fmt.subformat = [\n              this.readUInt32(buffer),\n              this.readUInt32(buffer),\n              this.readUInt32(buffer),\n              this.readUInt32(buffer)\n            ];\n          }\n        }\n      }\n    }\n    /**\n     * Read the 'fact' chunk of a wav file.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @private\n     */\n    readFactChunk_(buffer) {\n      let chunk = this.findChunk(\"fact\");\n      if (chunk) {\n        this.head = chunk.chunkData.start;\n        this.fact.chunkId = chunk.chunkId;\n        this.fact.chunkSize = chunk.chunkSize;\n        this.fact.dwSampleLength = this.readUInt32(buffer);\n      }\n    }\n    /**\n     * Read the 'cue ' chunk of a wave file.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @private\n     */\n    readCueChunk_(buffer) {\n      let chunk = this.findChunk(\"cue \");\n      if (chunk) {\n        this.head = chunk.chunkData.start;\n        this.cue.chunkId = chunk.chunkId;\n        this.cue.chunkSize = chunk.chunkSize;\n        this.cue.dwCuePoints = this.readUInt32(buffer);\n        for (let i = 0; i < this.cue.dwCuePoints; i++) {\n          this.cue.points.push({\n            dwName: this.readUInt32(buffer),\n            dwPosition: this.readUInt32(buffer),\n            fccChunk: this.readString(buffer, 4),\n            dwChunkStart: this.readUInt32(buffer),\n            dwBlockStart: this.readUInt32(buffer),\n            dwSampleOffset: this.readUInt32(buffer)\n          });\n        }\n      }\n    }\n    /**\n     * Read the 'smpl' chunk of a wave file.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @private\n     */\n    readSmplChunk_(buffer) {\n      let chunk = this.findChunk(\"smpl\");\n      if (chunk) {\n        this.head = chunk.chunkData.start;\n        this.smpl.chunkId = chunk.chunkId;\n        this.smpl.chunkSize = chunk.chunkSize;\n        this.smpl.dwManufacturer = this.readUInt32(buffer);\n        this.smpl.dwProduct = this.readUInt32(buffer);\n        this.smpl.dwSamplePeriod = this.readUInt32(buffer);\n        this.smpl.dwMIDIUnityNote = this.readUInt32(buffer);\n        this.smpl.dwMIDIPitchFraction = this.readUInt32(buffer);\n        this.smpl.dwSMPTEFormat = this.readUInt32(buffer);\n        this.smpl.dwSMPTEOffset = this.readUInt32(buffer);\n        this.smpl.dwNumSampleLoops = this.readUInt32(buffer);\n        this.smpl.dwSamplerData = this.readUInt32(buffer);\n        for (let i = 0; i < this.smpl.dwNumSampleLoops; i++) {\n          this.smpl.loops.push({\n            dwName: this.readUInt32(buffer),\n            dwType: this.readUInt32(buffer),\n            dwStart: this.readUInt32(buffer),\n            dwEnd: this.readUInt32(buffer),\n            dwFraction: this.readUInt32(buffer),\n            dwPlayCount: this.readUInt32(buffer)\n          });\n        }\n      }\n    }\n    /**\n     * Read the 'data' chunk of a wave file.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @param {boolean} samples True if the samples should be loaded.\n     * @throws {Error} If no 'data' chunk is found.\n     * @private\n     */\n    readDataChunk_(buffer, samples) {\n      let chunk = this.findChunk(\"data\");\n      if (chunk) {\n        this.data.chunkId = \"data\";\n        this.data.chunkSize = chunk.chunkSize;\n        if (samples) {\n          this.data.samples = buffer.slice(\n            chunk.chunkData.start,\n            chunk.chunkData.end\n          );\n        }\n      } else {\n        throw Error('Could not find the \"data\" chunk');\n      }\n    }\n    /**\n     * Read the 'bext' chunk of a wav file.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @private\n     */\n    readBextChunk_(buffer) {\n      let chunk = this.findChunk(\"bext\");\n      if (chunk) {\n        this.head = chunk.chunkData.start;\n        this.bext.chunkId = chunk.chunkId;\n        this.bext.chunkSize = chunk.chunkSize;\n        this.bext.description = this.readString(buffer, 256);\n        this.bext.originator = this.readString(buffer, 32);\n        this.bext.originatorReference = this.readString(buffer, 32);\n        this.bext.originationDate = this.readString(buffer, 10);\n        this.bext.originationTime = this.readString(buffer, 8);\n        this.bext.timeReference = [\n          this.readUInt32(buffer),\n          this.readUInt32(buffer)\n        ];\n        this.bext.version = this.readUInt16_(buffer);\n        this.bext.UMID = this.readString(buffer, 64);\n        this.bext.loudnessValue = this.readUInt16_(buffer);\n        this.bext.loudnessRange = this.readUInt16_(buffer);\n        this.bext.maxTruePeakLevel = this.readUInt16_(buffer);\n        this.bext.maxMomentaryLoudness = this.readUInt16_(buffer);\n        this.bext.maxShortTermLoudness = this.readUInt16_(buffer);\n        this.bext.reserved = this.readString(buffer, 180);\n        this.bext.codingHistory = this.readString(\n          buffer,\n          this.bext.chunkSize - 602\n        );\n      }\n    }\n    /**\n     * Read the 'iXML' chunk of a wav file.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @private\n     */\n    readiXMLChunk_(buffer) {\n      let chunk = this.findChunk(\"iXML\");\n      if (chunk) {\n        this.head = chunk.chunkData.start;\n        this.iXML.chunkId = chunk.chunkId;\n        this.iXML.chunkSize = chunk.chunkSize;\n        this.iXML.value = unpackString(\n          buffer,\n          this.head,\n          this.head + this.iXML.chunkSize\n        );\n      }\n    }\n    /**\n     * Read the 'ds64' chunk of a wave file.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @throws {Error} If no 'ds64' chunk is found and the file is RF64.\n     * @private\n     */\n    readDs64Chunk_(buffer) {\n      let chunk = this.findChunk(\"ds64\");\n      if (chunk) {\n        this.head = chunk.chunkData.start;\n        this.ds64.chunkId = chunk.chunkId;\n        this.ds64.chunkSize = chunk.chunkSize;\n        this.ds64.riffSizeHigh = this.readUInt32(buffer);\n        this.ds64.riffSizeLow = this.readUInt32(buffer);\n        this.ds64.dataSizeHigh = this.readUInt32(buffer);\n        this.ds64.dataSizeLow = this.readUInt32(buffer);\n        this.ds64.originationTime = this.readUInt32(buffer);\n        this.ds64.sampleCountHigh = this.readUInt32(buffer);\n        this.ds64.sampleCountLow = this.readUInt32(buffer);\n      } else {\n        if (this.container == \"RF64\") {\n          throw Error('Could not find the \"ds64\" chunk');\n        }\n      }\n    }\n    /**\n     * Read the 'LIST' chunks of a wave file.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @private\n     */\n    readLISTChunk_(buffer) {\n      let listChunks = this.findChunk(\"LIST\", true);\n      if (listChunks !== null) {\n        for (let j = 0; j < listChunks.length; j++) {\n          let subChunk = listChunks[j];\n          this.LIST.push({\n            chunkId: subChunk.chunkId,\n            chunkSize: subChunk.chunkSize,\n            format: subChunk.format,\n            subChunks: []\n          });\n          for (let x = 0; x < subChunk.subChunks.length; x++) {\n            this.readLISTSubChunks_(\n              subChunk.subChunks[x],\n              subChunk.format,\n              buffer\n            );\n          }\n        }\n      }\n    }\n    /**\n     * Read the sub chunks of a 'LIST' chunk.\n     * @param {!Object} subChunk The 'LIST' subchunks.\n     * @param {string} format The 'LIST' format, 'adtl' or 'INFO'.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @private\n     */\n    readLISTSubChunks_(subChunk, format, buffer) {\n      if (format == \"adtl\") {\n        if ([\"labl\", \"note\", \"ltxt\"].indexOf(subChunk.chunkId) > -1) {\n          this.readLISTadtlSubChunks_(buffer, subChunk);\n        }\n      } else if (format == \"INFO\") {\n        this.readLISTINFOSubChunks_(buffer, subChunk);\n      }\n    }\n    /**\n     * Read the sub chunks of a 'LIST' chunk of type 'adtl'.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @param {!Object} subChunk The 'LIST' subchunks.\n     * @private\n     */\n    readLISTadtlSubChunks_(buffer, subChunk) {\n      this.head = subChunk.chunkData.start;\n      let item = {\n        chunkId: subChunk.chunkId,\n        chunkSize: subChunk.chunkSize,\n        dwName: this.readUInt32(buffer)\n      };\n      if (subChunk.chunkId == \"ltxt\") {\n        item.dwSampleLength = this.readUInt32(buffer);\n        item.dwPurposeID = this.readUInt32(buffer);\n        item.dwCountry = this.readUInt16_(buffer);\n        item.dwLanguage = this.readUInt16_(buffer);\n        item.dwDialect = this.readUInt16_(buffer);\n        item.dwCodePage = this.readUInt16_(buffer);\n        item.value = \"\";\n      } else {\n        item.value = this.readZSTR_(buffer, this.head);\n      }\n      this.LIST[this.LIST.length - 1].subChunks.push(item);\n    }\n    /**\n     * Read the sub chunks of a 'LIST' chunk of type 'INFO'.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @param {!Object} subChunk The 'LIST' subchunks.\n     * @private\n     */\n    readLISTINFOSubChunks_(buffer, subChunk) {\n      this.head = subChunk.chunkData.start;\n      this.LIST[this.LIST.length - 1].subChunks.push({\n        chunkId: subChunk.chunkId,\n        chunkSize: subChunk.chunkSize,\n        value: this.readZSTR_(buffer, this.head)\n      });\n    }\n    /**\n     * Read the 'junk' chunk of a wave file.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @private\n     */\n    readJunkChunk_(buffer) {\n      let chunk = this.findChunk(\"junk\");\n      if (chunk) {\n        this.junk = {\n          chunkId: chunk.chunkId,\n          chunkSize: chunk.chunkSize,\n          chunkData: [].slice.call(buffer.slice(\n            chunk.chunkData.start,\n            chunk.chunkData.end\n          ))\n        };\n      }\n    }\n    /**\n     * Read the '_PMX' chunk of a wav file.\n     * @param {!Uint8Array} buffer The wav file buffer.\n     * @private\n     */\n    read_PMXChunk_(buffer) {\n      let chunk = this.findChunk(\"_PMX\");\n      if (chunk) {\n        this.head = chunk.chunkData.start;\n        this._PMX.chunkId = chunk.chunkId;\n        this._PMX.chunkSize = chunk.chunkSize;\n        this._PMX.value = unpackString(\n          buffer,\n          this.head,\n          this.head + this._PMX.chunkSize\n        );\n      }\n    }\n    /**\n     * Read bytes as a ZSTR string.\n     * @param {!Uint8Array} bytes The bytes.\n     * @param {number=} [index=0] the index to start reading.\n     * @return {string} The string.\n     * @private\n     */\n    readZSTR_(bytes, index = 0) {\n      for (let i = index; i < bytes.length; i++) {\n        this.head++;\n        if (bytes[i] === 0) {\n          break;\n        }\n      }\n      return unpackString(bytes, index, this.head - 1);\n    }\n    /**\n     * Read a number from a chunk.\n     * @param {!Uint8Array} bytes The chunk bytes.\n     * @return {number} The number.\n     * @private\n     */\n    readUInt16_(bytes) {\n      let value = unpack2(bytes, this.uInt16, this.head);\n      this.head += 2;\n      return value;\n    }\n  };\n\n  // node_modules/wavefile/lib/parsers/write-string.js\n  function writeString(str, byteLength) {\n    let packedString = packString(str);\n    for (let i = packedString.length; i < byteLength; i++) {\n      packedString.push(0);\n    }\n    return packedString;\n  }\n\n  // node_modules/wavefile/lib/wavefile-parser.js\n  var WaveFileParser = class extends WaveFileReader {\n    /**\n     * Return a byte buffer representig the WaveFileParser object as a .wav file.\n     * The return value of this method can be written straight to disk.\n     * @return {!Uint8Array} A wav file.\n     */\n    toBuffer() {\n      this.uInt16.be = this.container === \"RIFX\";\n      this.uInt32.be = this.uInt16.be;\n      let fileBody = [\n        this.getJunkBytes_(),\n        this.getDs64Bytes_(),\n        this.getBextBytes_(),\n        this.getiXMLBytes_(),\n        this.getFmtBytes_(),\n        this.getFactBytes_(),\n        packString(this.data.chunkId),\n        pack2(this.data.samples.length, this.uInt32),\n        this.data.samples,\n        this.getCueBytes_(),\n        this.getSmplBytes_(),\n        this.getLISTBytes_(),\n        this.get_PMXBytes_()\n      ];\n      let fileBodyLength = 0;\n      for (let i = 0; i < fileBody.length; i++) {\n        fileBodyLength += fileBody[i].length;\n      }\n      let file = new Uint8Array(fileBodyLength + 12);\n      let index = 0;\n      index = packStringTo(this.container, file, index);\n      index = packTo(fileBodyLength + 4, this.uInt32, file, index);\n      index = packStringTo(this.format, file, index);\n      for (let i = 0; i < fileBody.length; i++) {\n        file.set(fileBody[i], index);\n        index += fileBody[i].length;\n      }\n      return file;\n    }\n    /**\n     * Return the bytes of the 'bext' chunk.\n     * @private\n     */\n    getBextBytes_() {\n      let bytes = [];\n      this.enforceBext_();\n      if (this.bext.chunkId) {\n        this.bext.chunkSize = 602 + this.bext.codingHistory.length;\n        bytes = bytes.concat(\n          packString(this.bext.chunkId),\n          pack2(602 + this.bext.codingHistory.length, this.uInt32),\n          writeString(this.bext.description, 256),\n          writeString(this.bext.originator, 32),\n          writeString(this.bext.originatorReference, 32),\n          writeString(this.bext.originationDate, 10),\n          writeString(this.bext.originationTime, 8),\n          pack2(this.bext.timeReference[0], this.uInt32),\n          pack2(this.bext.timeReference[1], this.uInt32),\n          pack2(this.bext.version, this.uInt16),\n          writeString(this.bext.UMID, 64),\n          pack2(this.bext.loudnessValue, this.uInt16),\n          pack2(this.bext.loudnessRange, this.uInt16),\n          pack2(this.bext.maxTruePeakLevel, this.uInt16),\n          pack2(this.bext.maxMomentaryLoudness, this.uInt16),\n          pack2(this.bext.maxShortTermLoudness, this.uInt16),\n          writeString(this.bext.reserved, 180),\n          writeString(\n            this.bext.codingHistory,\n            this.bext.codingHistory.length\n          )\n        );\n      }\n      this.enforceByteLen_(bytes);\n      return bytes;\n    }\n    /**\n     * Make sure a 'bext' chunk is created if BWF data was created in a file.\n     * @private\n     */\n    enforceBext_() {\n      for (let prop in this.bext) {\n        if (this.bext.hasOwnProperty(prop)) {\n          if (this.bext[prop] && prop != \"timeReference\") {\n            this.bext.chunkId = \"bext\";\n            break;\n          }\n        }\n      }\n      if (this.bext.timeReference[0] || this.bext.timeReference[1]) {\n        this.bext.chunkId = \"bext\";\n      }\n    }\n    /**\n     * Return the bytes of the 'iXML' chunk.\n     * @return {!Array<number>} The 'iXML' chunk bytes.\n     * @private\n     */\n    getiXMLBytes_() {\n      let bytes = [];\n      if (this.iXML.chunkId) {\n        let iXMLPackedValue = packString(this.iXML.value);\n        this.iXML.chunkSize = iXMLPackedValue.length;\n        bytes = bytes.concat(\n          packString(this.iXML.chunkId),\n          pack2(this.iXML.chunkSize, this.uInt32),\n          iXMLPackedValue\n        );\n      }\n      this.enforceByteLen_(bytes);\n      return bytes;\n    }\n    /**\n     * Return the bytes of the 'ds64' chunk.\n     * @return {!Array<number>} The 'ds64' chunk bytes.\n     * @private\n     */\n    getDs64Bytes_() {\n      let bytes = [];\n      if (this.ds64.chunkId) {\n        bytes = bytes.concat(\n          packString(this.ds64.chunkId),\n          pack2(this.ds64.chunkSize, this.uInt32),\n          pack2(this.ds64.riffSizeHigh, this.uInt32),\n          pack2(this.ds64.riffSizeLow, this.uInt32),\n          pack2(this.ds64.dataSizeHigh, this.uInt32),\n          pack2(this.ds64.dataSizeLow, this.uInt32),\n          pack2(this.ds64.originationTime, this.uInt32),\n          pack2(this.ds64.sampleCountHigh, this.uInt32),\n          pack2(this.ds64.sampleCountLow, this.uInt32)\n        );\n      }\n      this.enforceByteLen_(bytes);\n      return bytes;\n    }\n    /**\n     * Return the bytes of the 'cue ' chunk.\n     * @return {!Array<number>} The 'cue ' chunk bytes.\n     * @private\n     */\n    getCueBytes_() {\n      let bytes = [];\n      if (this.cue.chunkId) {\n        let cuePointsBytes = this.getCuePointsBytes_();\n        bytes = bytes.concat(\n          packString(this.cue.chunkId),\n          pack2(cuePointsBytes.length + 4, this.uInt32),\n          // chunkSize\n          pack2(this.cue.dwCuePoints, this.uInt32),\n          cuePointsBytes\n        );\n      }\n      this.enforceByteLen_(bytes);\n      return bytes;\n    }\n    /**\n     * Return the bytes of the 'cue ' points.\n     * @return {!Array<number>} The 'cue ' points as an array of bytes.\n     * @private\n     */\n    getCuePointsBytes_() {\n      let points = [];\n      for (let i = 0; i < this.cue.dwCuePoints; i++) {\n        points = points.concat(\n          pack2(this.cue.points[i].dwName, this.uInt32),\n          pack2(this.cue.points[i].dwPosition, this.uInt32),\n          packString(this.cue.points[i].fccChunk),\n          pack2(this.cue.points[i].dwChunkStart, this.uInt32),\n          pack2(this.cue.points[i].dwBlockStart, this.uInt32),\n          pack2(this.cue.points[i].dwSampleOffset, this.uInt32)\n        );\n      }\n      return points;\n    }\n    /**\n     * Return the bytes of the 'smpl' chunk.\n     * @return {!Array<number>} The 'smpl' chunk bytes.\n     * @private\n     */\n    getSmplBytes_() {\n      let bytes = [];\n      if (this.smpl.chunkId) {\n        let smplLoopsBytes = this.getSmplLoopsBytes_();\n        bytes = bytes.concat(\n          packString(this.smpl.chunkId),\n          pack2(smplLoopsBytes.length + 36, this.uInt32),\n          //chunkSize\n          pack2(this.smpl.dwManufacturer, this.uInt32),\n          pack2(this.smpl.dwProduct, this.uInt32),\n          pack2(this.smpl.dwSamplePeriod, this.uInt32),\n          pack2(this.smpl.dwMIDIUnityNote, this.uInt32),\n          pack2(this.smpl.dwMIDIPitchFraction, this.uInt32),\n          pack2(this.smpl.dwSMPTEFormat, this.uInt32),\n          pack2(this.smpl.dwSMPTEOffset, this.uInt32),\n          pack2(this.smpl.dwNumSampleLoops, this.uInt32),\n          pack2(this.smpl.dwSamplerData, this.uInt32),\n          smplLoopsBytes\n        );\n      }\n      this.enforceByteLen_(bytes);\n      return bytes;\n    }\n    /**\n     * Return the bytes of the 'smpl' loops.\n     * @return {!Array<number>} The 'smpl' loops as an array of bytes.\n     * @private\n     */\n    getSmplLoopsBytes_() {\n      let loops = [];\n      for (let i = 0; i < this.smpl.dwNumSampleLoops; i++) {\n        loops = loops.concat(\n          pack2(this.smpl.loops[i].dwName, this.uInt32),\n          pack2(this.smpl.loops[i].dwType, this.uInt32),\n          pack2(this.smpl.loops[i].dwStart, this.uInt32),\n          pack2(this.smpl.loops[i].dwEnd, this.uInt32),\n          pack2(this.smpl.loops[i].dwFraction, this.uInt32),\n          pack2(this.smpl.loops[i].dwPlayCount, this.uInt32)\n        );\n      }\n      return loops;\n    }\n    /**\n     * Return the bytes of the 'fact' chunk.\n     * @return {!Array<number>} The 'fact' chunk bytes.\n     * @private\n     */\n    getFactBytes_() {\n      let bytes = [];\n      if (this.fact.chunkId) {\n        bytes = bytes.concat(\n          packString(this.fact.chunkId),\n          pack2(this.fact.chunkSize, this.uInt32),\n          pack2(this.fact.dwSampleLength, this.uInt32)\n        );\n      }\n      this.enforceByteLen_(bytes);\n      return bytes;\n    }\n    /**\n     * Return the bytes of the 'fmt ' chunk.\n     * @return {!Array<number>} The 'fmt' chunk bytes.\n     * @throws {Error} if no 'fmt ' chunk is present.\n     * @private\n     */\n    getFmtBytes_() {\n      let fmtBytes = [];\n      if (this.fmt.chunkId) {\n        let bytes = fmtBytes.concat(\n          packString(this.fmt.chunkId),\n          pack2(this.fmt.chunkSize, this.uInt32),\n          pack2(this.fmt.audioFormat, this.uInt16),\n          pack2(this.fmt.numChannels, this.uInt16),\n          pack2(this.fmt.sampleRate, this.uInt32),\n          pack2(this.fmt.byteRate, this.uInt32),\n          pack2(this.fmt.blockAlign, this.uInt16),\n          pack2(this.fmt.bitsPerSample, this.uInt16),\n          this.getFmtExtensionBytes_()\n        );\n        this.enforceByteLen_(bytes);\n        return bytes;\n      }\n      throw Error('Could not find the \"fmt \" chunk');\n    }\n    /**\n     * Return the bytes of the fmt extension fields.\n     * @return {!Array<number>} The fmt extension bytes.\n     * @private\n     */\n    getFmtExtensionBytes_() {\n      let extension = [];\n      if (this.fmt.chunkSize > 16) {\n        extension = extension.concat(\n          pack2(this.fmt.cbSize, this.uInt16)\n        );\n      }\n      if (this.fmt.chunkSize > 18) {\n        extension = extension.concat(\n          pack2(this.fmt.validBitsPerSample, this.uInt16)\n        );\n      }\n      if (this.fmt.chunkSize > 20) {\n        extension = extension.concat(\n          pack2(this.fmt.dwChannelMask, this.uInt32)\n        );\n      }\n      if (this.fmt.chunkSize > 24) {\n        extension = extension.concat(\n          pack2(this.fmt.subformat[0], this.uInt32),\n          pack2(this.fmt.subformat[1], this.uInt32),\n          pack2(this.fmt.subformat[2], this.uInt32),\n          pack2(this.fmt.subformat[3], this.uInt32)\n        );\n      }\n      return extension;\n    }\n    /**\n     * Return the bytes of the 'LIST' chunk.\n     * @return {!Array<number>} The 'LIST' chunk bytes.\n     * @private\n     */\n    getLISTBytes_() {\n      let bytes = [];\n      for (let i = 0; i < this.LIST.length; i++) {\n        let subChunksBytes = this.getLISTSubChunksBytes_(\n          this.LIST[i].subChunks,\n          this.LIST[i].format\n        );\n        bytes = bytes.concat(\n          packString(this.LIST[i].chunkId),\n          pack2(subChunksBytes.length + 4, this.uInt32),\n          //chunkSize\n          packString(this.LIST[i].format),\n          subChunksBytes\n        );\n      }\n      this.enforceByteLen_(bytes);\n      return bytes;\n    }\n    /**\n     * Return the bytes of the sub chunks of a 'LIST' chunk.\n     * @param {!Array<!Object>} subChunks The 'LIST' sub chunks.\n     * @param {string} format The format of the 'LIST' chunk.\n     *    Currently supported values are 'adtl' or 'INFO'.\n     * @return {!Array<number>} The sub chunk bytes.\n     * @private\n     */\n    getLISTSubChunksBytes_(subChunks, format) {\n      let bytes = [];\n      for (let i = 0, len = subChunks.length; i < len; i++) {\n        if (format == \"INFO\") {\n          bytes = bytes.concat(this.getLISTINFOSubChunksBytes_(subChunks[i]));\n        } else if (format == \"adtl\") {\n          bytes = bytes.concat(this.getLISTadtlSubChunksBytes_(subChunks[i]));\n        }\n        this.enforceByteLen_(bytes);\n      }\n      return bytes;\n    }\n    /**\n     * Return the bytes of the sub chunks of a 'LIST' chunk of type 'INFO'.\n     * @param {!Object} subChunk The 'LIST' sub chunk.\n     * @return {!Array<number>}\n     * @private\n     */\n    getLISTINFOSubChunksBytes_(subChunk) {\n      let bytes = [];\n      let LISTsubChunkValue = writeString(\n        subChunk.value,\n        subChunk.value.length\n      );\n      bytes = bytes.concat(\n        packString(subChunk.chunkId),\n        pack2(LISTsubChunkValue.length + 1, this.uInt32),\n        //chunkSize\n        LISTsubChunkValue\n      );\n      bytes.push(0);\n      return bytes;\n    }\n    /**\n     * Return the bytes of the sub chunks of a 'LIST' chunk of type 'INFO'.\n     * @param {!Object} subChunk The 'LIST' sub chunk.\n     * @return {!Array<number>}\n     * @private\n     */\n    getLISTadtlSubChunksBytes_(subChunk) {\n      let bytes = [];\n      if ([\"labl\", \"note\"].indexOf(subChunk.chunkId) > -1) {\n        let LISTsubChunkValue = writeString(\n          subChunk.value,\n          subChunk.value.length\n        );\n        bytes = bytes.concat(\n          packString(subChunk.chunkId),\n          pack2(LISTsubChunkValue.length + 4 + 1, this.uInt32),\n          //chunkSize\n          pack2(subChunk.dwName, this.uInt32),\n          LISTsubChunkValue\n        );\n        bytes.push(0);\n      } else if (subChunk.chunkId == \"ltxt\") {\n        bytes = bytes.concat(\n          this.getLtxtChunkBytes_(subChunk)\n        );\n      }\n      return bytes;\n    }\n    /**\n     * Return the bytes of a 'ltxt' chunk.\n     * @param {!Object} ltxt the 'ltxt' chunk.\n     * @return {!Array<number>}\n     * @private\n     */\n    getLtxtChunkBytes_(ltxt) {\n      return [].concat(\n        packString(ltxt.chunkId),\n        pack2(ltxt.value.length + 20, this.uInt32),\n        pack2(ltxt.dwName, this.uInt32),\n        pack2(ltxt.dwSampleLength, this.uInt32),\n        pack2(ltxt.dwPurposeID, this.uInt32),\n        pack2(ltxt.dwCountry, this.uInt16),\n        pack2(ltxt.dwLanguage, this.uInt16),\n        pack2(ltxt.dwDialect, this.uInt16),\n        pack2(ltxt.dwCodePage, this.uInt16),\n        // should always be a empty string;\n        // kept for compatibility\n        writeString(ltxt.value, ltxt.value.length)\n      );\n    }\n    /**\n     * Return the bytes of the '_PMX' chunk.\n     * @return {!Array<number>} The '_PMX' chunk bytes.\n     * @private\n     */\n    get_PMXBytes_() {\n      let bytes = [];\n      if (this._PMX.chunkId) {\n        let _PMXPackedValue = packString(this._PMX.value);\n        this._PMX.chunkSize = _PMXPackedValue.length;\n        bytes = bytes.concat(\n          packString(this._PMX.chunkId),\n          pack2(this._PMX.chunkSize, this.uInt32),\n          _PMXPackedValue\n        );\n      }\n      this.enforceByteLen_(bytes);\n      return bytes;\n    }\n    /**\n     * Return the bytes of the 'junk' chunk.\n     * @private\n     */\n    getJunkBytes_() {\n      let bytes = [];\n      if (this.junk.chunkId) {\n        return bytes.concat(\n          packString(this.junk.chunkId),\n          pack2(this.junk.chunkData.length, this.uInt32),\n          //chunkSize\n          this.junk.chunkData\n        );\n      }\n      this.enforceByteLen_(bytes);\n      return bytes;\n    }\n    /**\n     * Push a null byte into a byte array if\n     * the byte count is odd.\n     * @param {!Array<number>} bytes The byte array.\n     * @private\n     */\n    enforceByteLen_(bytes) {\n      if (bytes.length % 2) {\n        bytes.push(0);\n      }\n    }\n  };\n\n  // node_modules/wavefile/lib/parsers/interleave.js\n  function interleave(samples) {\n    let finalSamples = [];\n    if (samples.length > 0) {\n      if (samples[0].constructor !== Number) {\n        finalSamples = new Float64Array(samples[0].length * samples.length);\n        for (let i = 0, len = samples[0].length, x = 0; i < len; i++) {\n          for (let j = 0, subLen = samples.length; j < subLen; j++, x++) {\n            finalSamples[x] = samples[j][i];\n          }\n        }\n      } else {\n        finalSamples = samples;\n      }\n    }\n    return finalSamples;\n  }\n  function deInterleave(samples, numChannels, OutputObject = Float64Array) {\n    let finalSamples = [];\n    for (let i = 0; i < numChannels; i++) {\n      finalSamples[i] = new OutputObject(samples.length / numChannels);\n    }\n    for (let i = 0; i < numChannels; i++) {\n      for (let j = i, s = 0; j < samples.length; j += numChannels, s++) {\n        finalSamples[i][s] = samples[j];\n      }\n    }\n    return finalSamples;\n  }\n\n  // node_modules/wavefile/lib/validators/validate-num-channels.js\n  function validateNumChannels(channels, bits) {\n    let blockAlign = channels * bits / 8;\n    if (channels < 1 || blockAlign > 65535) {\n      return false;\n    }\n    return true;\n  }\n\n  // node_modules/wavefile/lib/validators/validate-sample-rate.js\n  function validateSampleRate(channels, bits, sampleRate) {\n    let byteRate = channels * (bits / 8) * sampleRate;\n    if (sampleRate < 1 || byteRate > 4294967295) {\n      return false;\n    }\n    return true;\n  }\n\n  // node_modules/wavefile/lib/wavefile-creator.js\n  var WaveFileCreator = class extends WaveFileParser {\n    constructor() {\n      super();\n      this.bitDepth = \"0\";\n      this.dataType = { bits: 0, be: false };\n      this.WAV_AUDIO_FORMATS = {\n        \"4\": 17,\n        \"8\": 1,\n        \"8a\": 6,\n        \"8m\": 7,\n        \"16\": 1,\n        \"24\": 1,\n        \"32\": 1,\n        \"32f\": 3,\n        \"64\": 3\n      };\n    }\n    /**\n     * Set up the WaveFileCreator object based on the arguments passed.\n     * Existing chunks are reset.\n     * @param {number} numChannels The number of channels.\n     * @param {number} sampleRate The sample rate.\n     *    Integers like 8000, 44100, 48000, 96000, 192000.\n     * @param {string} bitDepthCode The audio bit depth code.\n     *    One of '4', '8', '8a', '8m', '16', '24', '32', '32f', '64'\n     *    or any value between '8' and '32' (like '12').\n     * @param {!(Array|TypedArray)} samples The samples.\n     * @param {Object=} options Optional. Used to force the container\n     *    as RIFX with {'container': 'RIFX'}\n     * @throws {Error} If any argument does not meet the criteria.\n     */\n    fromScratch(numChannels, sampleRate, bitDepthCode, samples, options) {\n      options = options || {};\n      this.clearHeaders();\n      this.newWavFile_(numChannels, sampleRate, bitDepthCode, samples, options);\n    }\n    /**\n     * Set up the WaveFileParser object from a byte buffer.\n     * @param {!Uint8Array} wavBuffer The buffer.\n     * @param {boolean=} [samples=true] True if the samples should be loaded.\n     * @throws {Error} If container is not RIFF, RIFX or RF64.\n     * @throws {Error} If format is not WAVE.\n     * @throws {Error} If no 'fmt ' chunk is found.\n     * @throws {Error} If no 'data' chunk is found.\n     */\n    fromBuffer(wavBuffer, samples = true) {\n      super.fromBuffer(wavBuffer, samples);\n      this.bitDepthFromFmt_();\n      this.updateDataType_();\n    }\n    /**\n     * Return a byte buffer representig the WaveFileParser object as a .wav file.\n     * The return value of this method can be written straight to disk.\n     * @return {!Uint8Array} A wav file.\n     * @throws {Error} If bit depth is invalid.\n     * @throws {Error} If the number of channels is invalid.\n     * @throws {Error} If the sample rate is invalid.\n     */\n    toBuffer() {\n      this.validateWavHeader_();\n      return super.toBuffer();\n    }\n    /**\n     * Return the samples packed in a Float64Array.\n     * @param {boolean=} [interleaved=false] True to return interleaved samples,\n     *   false to return the samples de-interleaved.\n     * @param {Function=} [OutputObject=Float64Array] The sample container.\n     * @return {!(Array|TypedArray)} the samples.\n     */\n    getSamples(interleaved = false, OutputObject = Float64Array) {\n      let samples = new OutputObject(\n        this.data.samples.length / (this.dataType.bits / 8)\n      );\n      unpackArrayTo(\n        this.data.samples,\n        this.dataType,\n        samples,\n        0,\n        this.data.samples.length\n      );\n      if (!interleaved && this.fmt.numChannels > 1) {\n        return deInterleave(samples, this.fmt.numChannels, OutputObject);\n      }\n      return samples;\n    }\n    /**\n     * Return the sample at a given index.\n     * @param {number} index The sample index.\n     * @return {number} The sample.\n     * @throws {Error} If the sample index is off range.\n     */\n    getSample(index) {\n      index = index * (this.dataType.bits / 8);\n      if (index + this.dataType.bits / 8 > this.data.samples.length) {\n        throw new Error(\"Range error\");\n      }\n      return unpack2(\n        this.data.samples.slice(index, index + this.dataType.bits / 8),\n        this.dataType\n      );\n    }\n    /**\n     * Set the sample at a given index.\n     * @param {number} index The sample index.\n     * @param {number} sample The sample.\n     * @throws {Error} If the sample index is off range.\n     */\n    setSample(index, sample) {\n      index = index * (this.dataType.bits / 8);\n      if (index + this.dataType.bits / 8 > this.data.samples.length) {\n        throw new Error(\"Range error\");\n      }\n      packTo(sample, this.dataType, this.data.samples, index, true);\n    }\n    /**\n     * Return the value of the iXML chunk.\n     * @return {string} The contents of the iXML chunk.\n     */\n    getiXML() {\n      return this.iXML.value;\n    }\n    /**\n     * Set the value of the iXML chunk.\n     * @param {string} iXMLValue The value for the iXML chunk.\n     * @throws {TypeError} If the value is not a string.\n     */\n    setiXML(iXMLValue) {\n      if (typeof iXMLValue !== \"string\") {\n        throw new TypeError(\"iXML value must be a string.\");\n      }\n      this.iXML.value = iXMLValue;\n      this.iXML.chunkId = \"iXML\";\n    }\n    /**\n     * Get the value of the _PMX chunk.\n     * @return {string} The contents of the _PMX chunk.\n     */\n    get_PMX() {\n      return this._PMX.value;\n    }\n    /**\n     * Set the value of the _PMX chunk.\n     * @param {string} _PMXValue The value for the _PMX chunk.\n     * @throws {TypeError} If the value is not a string.\n     */\n    set_PMX(_PMXValue) {\n      if (typeof _PMXValue !== \"string\") {\n        throw new TypeError(\"_PMX value must be a string.\");\n      }\n      this._PMX.value = _PMXValue;\n      this._PMX.chunkId = \"_PMX\";\n    }\n    /**\n     * Set up the WaveFileCreator object based on the arguments passed.\n     * @param {number} numChannels The number of channels.\n     * @param {number} sampleRate The sample rate.\n     *   Integers like 8000, 44100, 48000, 96000, 192000.\n     * @param {string} bitDepthCode The audio bit depth code.\n     *   One of '4', '8', '8a', '8m', '16', '24', '32', '32f', '64'\n     *   or any value between '8' and '32' (like '12').\n     * @param {!(Array|TypedArray)} samples The samples.\n     * @param {Object} options Used to define the container.\n     * @throws {Error} If any argument does not meet the criteria.\n     * @private\n     */\n    newWavFile_(numChannels, sampleRate, bitDepthCode, samples, options) {\n      if (!options.container) {\n        options.container = \"RIFF\";\n      }\n      this.container = options.container;\n      this.bitDepth = bitDepthCode;\n      samples = interleave(samples);\n      this.updateDataType_();\n      let numBytes = this.dataType.bits / 8;\n      this.data.samples = new Uint8Array(samples.length * numBytes);\n      packArrayTo(samples, this.dataType, this.data.samples, 0, true);\n      this.makeWavHeader_(\n        bitDepthCode,\n        numChannels,\n        sampleRate,\n        numBytes,\n        this.data.samples.length,\n        options\n      );\n      this.data.chunkId = \"data\";\n      this.data.chunkSize = this.data.samples.length;\n      this.validateWavHeader_();\n    }\n    /**\n     * Define the header of a wav file.\n     * @param {string} bitDepthCode The audio bit depth\n     * @param {number} numChannels The number of channels\n     * @param {number} sampleRate The sample rate.\n     * @param {number} numBytes The number of bytes each sample use.\n     * @param {number} samplesLength The length of the samples in bytes.\n     * @param {!Object} options The extra options, like container defintion.\n     * @private\n     */\n    makeWavHeader_(bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options) {\n      if (bitDepthCode == \"4\") {\n        this.createADPCMHeader_(\n          bitDepthCode,\n          numChannels,\n          sampleRate,\n          numBytes,\n          samplesLength,\n          options\n        );\n      } else if (bitDepthCode == \"8a\" || bitDepthCode == \"8m\") {\n        this.createALawMulawHeader_(\n          bitDepthCode,\n          numChannels,\n          sampleRate,\n          numBytes,\n          samplesLength,\n          options\n        );\n      } else if (Object.keys(this.WAV_AUDIO_FORMATS).indexOf(bitDepthCode) == -1 || numChannels > 2) {\n        this.createExtensibleHeader_(\n          bitDepthCode,\n          numChannels,\n          sampleRate,\n          numBytes,\n          samplesLength,\n          options\n        );\n      } else {\n        this.createPCMHeader_(\n          bitDepthCode,\n          numChannels,\n          sampleRate,\n          numBytes,\n          samplesLength,\n          options\n        );\n      }\n    }\n    /**\n     * Create the header of a linear PCM wave file.\n     * @param {string} bitDepthCode The audio bit depth\n     * @param {number} numChannels The number of channels\n     * @param {number} sampleRate The sample rate.\n     * @param {number} numBytes The number of bytes each sample use.\n     * @param {number} samplesLength The length of the samples in bytes.\n     * @param {!Object} options The extra options, like container defintion.\n     * @private\n     */\n    createPCMHeader_(bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options) {\n      this.container = options.container;\n      this.chunkSize = 36 + samplesLength;\n      this.format = \"WAVE\";\n      this.bitDepth = bitDepthCode;\n      this.fmt = {\n        chunkId: \"fmt \",\n        chunkSize: 16,\n        audioFormat: this.WAV_AUDIO_FORMATS[bitDepthCode] || 65534,\n        numChannels,\n        sampleRate,\n        byteRate: numChannels * numBytes * sampleRate,\n        blockAlign: numChannels * numBytes,\n        bitsPerSample: parseInt(bitDepthCode, 10),\n        cbSize: 0,\n        validBitsPerSample: 0,\n        dwChannelMask: 0,\n        subformat: []\n      };\n    }\n    /**\n     * Create the header of a ADPCM wave file.\n     * @param {string} bitDepthCode The audio bit depth\n     * @param {number} numChannels The number of channels\n     * @param {number} sampleRate The sample rate.\n     * @param {number} numBytes The number of bytes each sample use.\n     * @param {number} samplesLength The length of the samples in bytes.\n     * @param {!Object} options The extra options, like container defintion.\n     * @private\n     */\n    createADPCMHeader_(bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options) {\n      this.createPCMHeader_(\n        bitDepthCode,\n        numChannels,\n        sampleRate,\n        numBytes,\n        samplesLength,\n        options\n      );\n      this.chunkSize = 40 + samplesLength;\n      this.fmt.chunkSize = 20;\n      this.fmt.byteRate = 4055;\n      this.fmt.blockAlign = 256;\n      this.fmt.bitsPerSample = 4;\n      this.fmt.cbSize = 2;\n      this.fmt.validBitsPerSample = 505;\n      this.fact = {\n        chunkId: \"fact\",\n        chunkSize: 4,\n        dwSampleLength: samplesLength * 2\n      };\n    }\n    /**\n     * Create the header of WAVE_FORMAT_EXTENSIBLE file.\n     * @param {string} bitDepthCode The audio bit depth\n     * @param {number} numChannels The number of channels\n     * @param {number} sampleRate The sample rate.\n     * @param {number} numBytes The number of bytes each sample use.\n     * @param {number} samplesLength The length of the samples in bytes.\n     * @param {!Object} options The extra options, like container defintion.\n     * @private\n     */\n    createExtensibleHeader_(bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options) {\n      this.createPCMHeader_(\n        bitDepthCode,\n        numChannels,\n        sampleRate,\n        numBytes,\n        samplesLength,\n        options\n      );\n      this.chunkSize = 36 + 24 + samplesLength;\n      this.fmt.chunkSize = 40;\n      this.fmt.bitsPerSample = (parseInt(bitDepthCode, 10) - 1 | 7) + 1;\n      this.fmt.cbSize = 22;\n      this.fmt.validBitsPerSample = parseInt(bitDepthCode, 10);\n      this.fmt.dwChannelMask = dwChannelMask_(numChannels);\n      this.fmt.subformat = [1, 1048576, 2852126848, 1905997824];\n    }\n    /**\n     * Create the header of mu-Law and A-Law wave files.\n     * @param {string} bitDepthCode The audio bit depth\n     * @param {number} numChannels The number of channels\n     * @param {number} sampleRate The sample rate.\n     * @param {number} numBytes The number of bytes each sample use.\n     * @param {number} samplesLength The length of the samples in bytes.\n     * @param {!Object} options The extra options, like container defintion.\n     * @private\n     */\n    createALawMulawHeader_(bitDepthCode, numChannels, sampleRate, numBytes, samplesLength, options) {\n      this.createPCMHeader_(\n        bitDepthCode,\n        numChannels,\n        sampleRate,\n        numBytes,\n        samplesLength,\n        options\n      );\n      this.chunkSize = 40 + samplesLength;\n      this.fmt.chunkSize = 20;\n      this.fmt.cbSize = 2;\n      this.fmt.validBitsPerSample = 8;\n      this.fact = {\n        chunkId: \"fact\",\n        chunkSize: 4,\n        dwSampleLength: samplesLength\n      };\n    }\n    /**\n     * Set the string code of the bit depth based on the 'fmt ' chunk.\n     * @private\n     */\n    bitDepthFromFmt_() {\n      if (this.fmt.audioFormat === 3 && this.fmt.bitsPerSample === 32) {\n        this.bitDepth = \"32f\";\n      } else if (this.fmt.audioFormat === 6) {\n        this.bitDepth = \"8a\";\n      } else if (this.fmt.audioFormat === 7) {\n        this.bitDepth = \"8m\";\n      } else {\n        this.bitDepth = this.fmt.bitsPerSample.toString();\n      }\n    }\n    /**\n     * Validate the bit depth.\n     * @return {boolean} True is the bit depth is valid.\n     * @throws {Error} If bit depth is invalid.\n     * @private\n     */\n    validateBitDepth_() {\n      if (!this.WAV_AUDIO_FORMATS[this.bitDepth]) {\n        if (parseInt(this.bitDepth, 10) > 8 && parseInt(this.bitDepth, 10) < 54) {\n          return true;\n        }\n        throw new Error(\"Invalid bit depth.\");\n      }\n      return true;\n    }\n    /**\n     * Update the type definition used to read and write the samples.\n     * @private\n     */\n    updateDataType_() {\n      this.dataType = {\n        bits: (parseInt(this.bitDepth, 10) - 1 | 7) + 1,\n        fp: this.bitDepth == \"32f\" || this.bitDepth == \"64\",\n        signed: this.bitDepth != \"8\",\n        be: this.container == \"RIFX\"\n      };\n      if ([\"4\", \"8a\", \"8m\"].indexOf(this.bitDepth) > -1) {\n        this.dataType.bits = 8;\n        this.dataType.signed = false;\n      }\n    }\n    /**\n     * Validate the header of the file.\n     * @throws {Error} If bit depth is invalid.\n     * @throws {Error} If the number of channels is invalid.\n     * @throws {Error} If the sample rate is invalid.\n     * @ignore\n     * @private\n     */\n    validateWavHeader_() {\n      this.validateBitDepth_();\n      if (!validateNumChannels(this.fmt.numChannels, this.fmt.bitsPerSample)) {\n        throw new Error(\"Invalid number of channels.\");\n      }\n      if (!validateSampleRate(\n        this.fmt.numChannels,\n        this.fmt.bitsPerSample,\n        this.fmt.sampleRate\n      )) {\n        throw new Error(\"Invalid sample rate.\");\n      }\n    }\n  };\n  function dwChannelMask_(numChannels) {\n    let mask = 0;\n    if (numChannels === 1) {\n      mask = 4;\n    } else if (numChannels === 2) {\n      mask = 3;\n    } else if (numChannels === 4) {\n      mask = 51;\n    } else if (numChannels === 6) {\n      mask = 63;\n    } else if (numChannels === 8) {\n      mask = 1599;\n    }\n    return mask;\n  }\n\n  // node_modules/wavefile/lib/wavefile-tag-editor.js\n  var WaveFileTagEditor = class extends WaveFileCreator {\n    /**\n     * Return the value of a RIFF tag in the INFO chunk.\n     * @param {string} tag The tag name.\n     * @return {?string} The value if the tag is found, null otherwise.\n     */\n    getTag(tag) {\n      let index = this.getTagIndex_(tag);\n      if (index.TAG !== null) {\n        return this.LIST[index.LIST].subChunks[index.TAG].value;\n      }\n      return null;\n    }\n    /**\n     * Write a RIFF tag in the INFO chunk. If the tag do not exist,\n     * then it is created. It if exists, it is overwritten.\n     * @param {string} tag The tag name.\n     * @param {string} value The tag value.\n     * @throws {Error} If the tag name is not valid.\n     */\n    setTag(tag, value) {\n      tag = fixRIFFTag_(tag);\n      let index = this.getTagIndex_(tag);\n      if (index.TAG !== null) {\n        this.LIST[index.LIST].subChunks[index.TAG].chunkSize = value.length + 1;\n        this.LIST[index.LIST].subChunks[index.TAG].value = value;\n      } else if (index.LIST !== null) {\n        this.LIST[index.LIST].subChunks.push({\n          chunkId: tag,\n          chunkSize: value.length + 1,\n          value\n        });\n      } else {\n        this.LIST.push({\n          chunkId: \"LIST\",\n          chunkSize: 8 + value.length + 1,\n          format: \"INFO\",\n          subChunks: []\n        });\n        this.LIST[this.LIST.length - 1].subChunks.push({\n          chunkId: tag,\n          chunkSize: value.length + 1,\n          value\n        });\n      }\n    }\n    /**\n     * Remove a RIFF tag from the INFO chunk.\n     * @param {string} tag The tag name.\n     * @return {boolean} True if a tag was deleted.\n     */\n    deleteTag(tag) {\n      let index = this.getTagIndex_(tag);\n      if (index.TAG !== null) {\n        this.LIST[index.LIST].subChunks.splice(index.TAG, 1);\n        return true;\n      }\n      return false;\n    }\n    /**\n     * Return a Object<tag, value> with the RIFF tags in the file.\n     * @return {!Object<string, string>} The file tags.\n     */\n    listTags() {\n      let index = this.getLISTIndex(\"INFO\");\n      let tags = {};\n      if (index !== null) {\n        for (let i = 0, len = this.LIST[index].subChunks.length; i < len; i++) {\n          tags[this.LIST[index].subChunks[i].chunkId] = this.LIST[index].subChunks[i].value;\n        }\n      }\n      return tags;\n    }\n    /**\n     * Return the index of a list by its type.\n     * @param {string} listType The list type ('adtl', 'INFO')\n     * @return {?number}\n     * @protected\n     */\n    getLISTIndex(listType) {\n      for (let i = 0, len = this.LIST.length; i < len; i++) {\n        if (this.LIST[i].format == listType) {\n          return i;\n        }\n      }\n      return null;\n    }\n    /**\n     * Return the index of a tag in a FILE chunk.\n     * @param {string} tag The tag name.\n     * @return {!Object<string, ?number>}\n     *    Object.LIST is the INFO index in LIST\n     *    Object.TAG is the tag index in the INFO\n     * @private\n     */\n    getTagIndex_(tag) {\n      let index = { LIST: null, TAG: null };\n      for (let i = 0, len = this.LIST.length; i < len; i++) {\n        if (this.LIST[i].format == \"INFO\") {\n          index.LIST = i;\n          for (let j = 0, subLen = this.LIST[i].subChunks.length; j < subLen; j++) {\n            if (this.LIST[i].subChunks[j].chunkId == tag) {\n              index.TAG = j;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      return index;\n    }\n  };\n  function fixRIFFTag_(tag) {\n    if (tag.constructor !== String) {\n      throw new Error(\"Invalid tag name.\");\n    } else if (tag.length < 4) {\n      for (let i = 0, len = 4 - tag.length; i < len; i++) {\n        tag += \" \";\n      }\n    }\n    return tag;\n  }\n\n  // node_modules/wavefile/lib/wavefile-cue-editor.js\n  var WaveFileCueEditor = class extends WaveFileTagEditor {\n    /**\n     * Return an array with all cue points in the file, in the order they appear\n     * in the file.\n     * Objects representing cue points/regions look like this:\n     *   {\n     *     position: 500, // the position in milliseconds\n     *     label: 'cue marker 1',\n     *     end: 1500, // the end position in milliseconds\n     *     dwName: 1,\n     *     dwPosition: 0,\n     *     fccChunk: 'data',\n     *     dwChunkStart: 0,\n     *     dwBlockStart: 0,\n     *     dwSampleOffset: 22050, // the position as a sample offset\n     *     dwSampleLength: 3646827, // length as a sample count, 0 if not a region\n     *     dwPurposeID: 544106354,\n     *     dwCountry: 0,\n     *     dwLanguage: 0,\n     *     dwDialect: 0,\n     *     dwCodePage: 0,\n     *   }\n     * @return {!Array<Object>}\n     */\n    listCuePoints() {\n      let points = this.getCuePoints_();\n      for (let i = 0, len = points.length; i < len; i++) {\n        points[i].position = points[i].dwSampleOffset / this.fmt.sampleRate * 1e3;\n        if (points[i].dwSampleLength) {\n          points[i].end = points[i].dwSampleLength / this.fmt.sampleRate * 1e3;\n          points[i].end += points[i].position;\n        } else {\n          points[i].end = null;\n        }\n        delete points[i].value;\n      }\n      return points;\n    }\n    /**\n     * Create a cue point in the wave file.\n     * @param {!{\n     *   position: number,\n     *   label: ?string,\n     *   end: ?number,\n     *   dwPurposeID: ?number,\n     *   dwCountry: ?number,\n     *   dwLanguage: ?number,\n     *   dwDialect: ?number,\n     *   dwCodePage: ?number\n     * }} pointData A object with the data of the cue point.\n     *\n     * # Only required attribute to create a cue point:\n     * pointData.position: The position of the point in milliseconds\n     *\n     * # Optional attribute for cue points:\n     * pointData.label: A string label for the cue point\n     *\n     * # Extra data used for regions\n     * pointData.end: A number representing the end of the region,\n     *   in milliseconds, counting from the start of the file. If\n     *   no end attr is specified then no region is created.\n     *\n     * # You may also specify the following attrs for regions, all optional:\n     * pointData.dwPurposeID\n     * pointData.dwCountry\n     * pointData.dwLanguage\n     * pointData.dwDialect\n     * pointData.dwCodePage\n     */\n    setCuePoint(pointData) {\n      this.cue.chunkId = \"cue \";\n      if (!pointData.label) {\n        pointData.label = \"\";\n      }\n      let existingPoints = this.getCuePoints_();\n      this.clearLISTadtl_();\n      this.cue.points = [];\n      pointData.dwSampleOffset = pointData.position * this.fmt.sampleRate / 1e3;\n      pointData.dwSampleLength = 0;\n      if (pointData.end) {\n        pointData.dwSampleLength = pointData.end * this.fmt.sampleRate / 1e3 - pointData.dwSampleOffset;\n      }\n      if (existingPoints.length === 0) {\n        this.setCuePoint_(pointData, 1);\n      } else {\n        this.setCuePointInOrder_(existingPoints, pointData);\n      }\n      this.cue.dwCuePoints = this.cue.points.length;\n    }\n    /**\n     * Remove a cue point from a wave file.\n     * @param {number} index the index of the point. First is 1,\n     *    second is 2, and so on.\n     */\n    deleteCuePoint(index) {\n      this.cue.chunkId = \"cue \";\n      let existingPoints = this.getCuePoints_();\n      this.clearLISTadtl_();\n      let len = this.cue.points.length;\n      this.cue.points = [];\n      for (let i = 0; i < len; i++) {\n        if (i + 1 !== index) {\n          this.setCuePoint_(existingPoints[i], i + 1);\n        }\n      }\n      this.cue.dwCuePoints = this.cue.points.length;\n      if (this.cue.dwCuePoints) {\n        this.cue.chunkId = \"cue \";\n      } else {\n        this.cue.chunkId = \"\";\n        this.clearLISTadtl_();\n      }\n    }\n    /**\n     * Update the label of a cue point.\n     * @param {number} pointIndex The ID of the cue point.\n     * @param {string} label The new text for the label.\n     */\n    updateLabel(pointIndex, label) {\n      let cIndex = this.getLISTIndex(\"adtl\");\n      if (cIndex !== null) {\n        for (let i = 0, len = this.LIST[cIndex].subChunks.length; i < len; i++) {\n          if (this.LIST[cIndex].subChunks[i].dwName == pointIndex) {\n            this.LIST[cIndex].subChunks[i].value = label;\n          }\n        }\n      }\n    }\n    /**\n     * Return an array with all cue points in the file, in the order they appear\n     * in the file.\n     * @return {!Array<!Object>}\n     * @private\n     */\n    getCuePoints_() {\n      let points = [];\n      for (let i = 0; i < this.cue.points.length; i++) {\n        let chunk = this.cue.points[i];\n        let pointData = this.getDataForCuePoint_(chunk.dwName);\n        pointData.label = pointData.value ? pointData.value : \"\";\n        pointData.dwPosition = chunk.dwPosition;\n        pointData.fccChunk = chunk.fccChunk;\n        pointData.dwChunkStart = chunk.dwChunkStart;\n        pointData.dwBlockStart = chunk.dwBlockStart;\n        pointData.dwSampleOffset = chunk.dwSampleOffset;\n        points.push(pointData);\n      }\n      return points;\n    }\n    /**\n     * Return the associated data of a cue point.\n     * @param {number} pointDwName The ID of the cue point.\n     * @return {!Object}\n     * @private\n     */\n    getDataForCuePoint_(pointDwName) {\n      let LISTindex = this.getLISTIndex(\"adtl\");\n      let pointData = {};\n      if (LISTindex !== null) {\n        this.getCueDataFromLIST_(pointData, LISTindex, pointDwName);\n      }\n      return pointData;\n    }\n    /**\n     * Get all data associated to a cue point in a LIST chunk.\n     * @param {!Object} pointData A object to hold the point data.\n     * @param {number} index The index of the adtl LIST chunk.\n     * @param {number} pointDwName The ID of the cue point.\n     * @private\n     */\n    getCueDataFromLIST_(pointData, index, pointDwName) {\n      for (let i = 0, len = this.LIST[index].subChunks.length; i < len; i++) {\n        if (this.LIST[index].subChunks[i].dwName == pointDwName) {\n          let chunk = this.LIST[index].subChunks[i];\n          pointData.value = chunk.value || pointData.value;\n          pointData.dwName = chunk.dwName || 0;\n          pointData.dwSampleLength = chunk.dwSampleLength || 0;\n          pointData.dwPurposeID = chunk.dwPurposeID || 0;\n          pointData.dwCountry = chunk.dwCountry || 0;\n          pointData.dwLanguage = chunk.dwLanguage || 0;\n          pointData.dwDialect = chunk.dwDialect || 0;\n          pointData.dwCodePage = chunk.dwCodePage || 0;\n        }\n      }\n    }\n    /**\n     * Push a new cue point in this.cue.points.\n     * @param {!Object} pointData A object with data of the cue point.\n     * @param {number} dwName the dwName of the cue point\n     * @private\n     */\n    setCuePoint_(pointData, dwName) {\n      this.cue.points.push({\n        dwName,\n        dwPosition: pointData.dwPosition ? pointData.dwPosition : 0,\n        fccChunk: pointData.fccChunk ? pointData.fccChunk : \"data\",\n        dwChunkStart: pointData.dwChunkStart ? pointData.dwChunkStart : 0,\n        dwBlockStart: pointData.dwBlockStart ? pointData.dwBlockStart : 0,\n        dwSampleOffset: pointData.dwSampleOffset\n      });\n      this.setLabl_(pointData, dwName);\n    }\n    /**\n     * Push a new cue point in this.cue.points according to existing cue points.\n     * @param {!Array} existingPoints Array with the existing points.\n     * @param {!Object} pointData A object with data of the cue point.\n     * @private\n     */\n    setCuePointInOrder_(existingPoints, pointData) {\n      let hasSet = false;\n      for (let i = 0; i < existingPoints.length; i++) {\n        if (existingPoints[i].dwSampleOffset > pointData.dwSampleOffset && !hasSet) {\n          this.setCuePoint_(pointData, i + 1);\n          this.setCuePoint_(existingPoints[i], i + 2);\n          hasSet = true;\n        } else {\n          this.setCuePoint_(existingPoints[i], hasSet ? i + 2 : i + 1);\n        }\n      }\n      if (!hasSet) {\n        this.setCuePoint_(pointData, this.cue.points.length + 1);\n      }\n    }\n    /**\n     * Clear any LIST chunk labeled as 'adtl'.\n     * @private\n     */\n    clearLISTadtl_() {\n      for (let i = 0, len = this.LIST.length; i < len; i++) {\n        if (this.LIST[i].format == \"adtl\") {\n          this.LIST.splice(i);\n        }\n      }\n    }\n    /**\n     * Create a new 'labl' subchunk in a 'LIST' chunk of type 'adtl'.\n     * This method creates a LIST adtl chunk in the file if one\n     * is not present.\n     * @param {!Object} pointData A object with data of the cue point.\n     * @param {number} dwName The ID of the cue point.\n     * @private\n     */\n    setLabl_(pointData, dwName) {\n      let adtlIndex = this.getLISTIndex(\"adtl\");\n      if (adtlIndex === null) {\n        this.LIST.push({\n          chunkId: \"LIST\",\n          chunkSize: 4,\n          format: \"adtl\",\n          subChunks: []\n        });\n        adtlIndex = this.LIST.length - 1;\n      }\n      this.setLabelText_(adtlIndex, pointData, dwName);\n      if (pointData.dwSampleLength) {\n        this.setLtxtChunk_(adtlIndex, pointData, dwName);\n      }\n    }\n    /**\n     * Create a new 'labl' subchunk in a 'LIST' chunk of type 'adtl'.\n     * @param {number} adtlIndex The index of the 'adtl' LIST in this.LIST.\n     * @param {!Object} pointData A object with data of the cue point.\n     * @param {number} dwName The ID of the cue point.\n     * @private\n     */\n    setLabelText_(adtlIndex, pointData, dwName) {\n      this.LIST[adtlIndex].subChunks.push({\n        chunkId: \"labl\",\n        chunkSize: 4,\n        // should be 4 + label length in bytes\n        dwName,\n        value: pointData.label\n      });\n      this.LIST[adtlIndex].chunkSize += 12;\n    }\n    /**\n     * Create a new 'ltxt' subchunk in a 'LIST' chunk of type 'adtl'.\n     * @param {number} adtlIndex The index of the 'adtl' LIST in this.LIST.\n     * @param {!Object} pointData A object with data of the cue point.\n     * @param {number} dwName The ID of the cue point.\n     * @private\n     */\n    setLtxtChunk_(adtlIndex, pointData, dwName) {\n      this.LIST[adtlIndex].subChunks.push({\n        chunkId: \"ltxt\",\n        chunkSize: 20,\n        // should be 12 + label byte length\n        dwName,\n        dwSampleLength: pointData.dwSampleLength,\n        dwPurposeID: pointData.dwPurposeID || 0,\n        dwCountry: pointData.dwCountry || 0,\n        dwLanguage: pointData.dwLanguage || 0,\n        dwDialect: pointData.dwDialect || 0,\n        dwCodePage: pointData.dwCodePage || 0,\n        value: pointData.label\n        // kept for compatibility\n      });\n      this.LIST[adtlIndex].chunkSize += 28;\n    }\n  };\n\n  // node_modules/wavefile/lib/resampler/interpolator.js\n  var Interpolator = class {\n    /**\n     * @param {number} scaleFrom the length of the original array.\n     * @param {number} scaleTo The length of the new array.\n     * @param {!Object} details The extra configuration, if needed.\n     */\n    constructor(scaleFrom, scaleTo, details) {\n      this.length_ = scaleFrom;\n      this.scaleFactor_ = (scaleFrom - 1) / scaleTo;\n      this.interpolate = this.sinc;\n      if (details.method === \"point\") {\n        this.interpolate = this.point;\n      } else if (details.method === \"linear\") {\n        this.interpolate = this.linear;\n      } else if (details.method === \"cubic\") {\n        this.interpolate = this.cubic;\n      }\n      this.tangentFactor_ = 1 - Math.max(0, Math.min(1, details.tension || 0));\n      this.sincFilterSize_ = details.sincFilterSize || 1;\n      this.kernel_ = sincKernel_(details.sincWindow || window_);\n    }\n    /**\n     * @param {number} t The index to interpolate.\n     * @param {Array<number>|TypedArray} samples the original array.\n     * @return {number} The interpolated value.\n     */\n    point(t, samples) {\n      return this.getClippedInput_(Math.round(this.scaleFactor_ * t), samples);\n    }\n    /**\n     * @param {number} t The index to interpolate.\n     * @param {Array<number>|TypedArray} samples the original array.\n     * @return {number} The interpolated value.\n     */\n    linear(t, samples) {\n      t = this.scaleFactor_ * t;\n      let k2 = Math.floor(t);\n      t -= k2;\n      return (1 - t) * this.getClippedInput_(k2, samples) + t * this.getClippedInput_(k2 + 1, samples);\n    }\n    /**\n     * @param {number} t The index to interpolate.\n     * @param {Array<number>|TypedArray} samples the original array.\n     * @return {number} The interpolated value.\n     */\n    cubic(t, samples) {\n      t = this.scaleFactor_ * t;\n      let k2 = Math.floor(t);\n      let m = [this.getTangent_(k2, samples), this.getTangent_(k2 + 1, samples)];\n      let p = [\n        this.getClippedInput_(k2, samples),\n        this.getClippedInput_(k2 + 1, samples)\n      ];\n      t -= k2;\n      let t2 = t * t;\n      let t3 = t * t2;\n      return (2 * t3 - 3 * t2 + 1) * p[0] + (t3 - 2 * t2 + t) * m[0] + (-2 * t3 + 3 * t2) * p[1] + (t3 - t2) * m[1];\n    }\n    /**\n     * @param {number} t The index to interpolate.\n     * @param {Array<number>|TypedArray} samples the original array.\n     * @return {number} The interpolated value.\n     */\n    sinc(t, samples) {\n      t = this.scaleFactor_ * t;\n      let k2 = Math.floor(t);\n      let ref = k2 - this.sincFilterSize_ + 1;\n      let ref1 = k2 + this.sincFilterSize_;\n      let sum = 0;\n      for (let n = ref; n <= ref1; n++) {\n        sum += this.kernel_(t - n) * this.getClippedInput_(n, samples);\n      }\n      return sum;\n    }\n    /**\n     * @param {number} k The scaled index to interpolate.\n     * @param {Array<number>|TypedArray} samples the original array.\n     * @return {number} The tangent.\n     * @private\n     */\n    getTangent_(k2, samples) {\n      return this.tangentFactor_ * (this.getClippedInput_(k2 + 1, samples) - this.getClippedInput_(k2 - 1, samples)) / 2;\n    }\n    /**\n     * @param {number} t The scaled index to interpolate.\n     * @param {Array<number>|TypedArray} samples the original array.\n     * @return {number} The interpolated value.\n     * @private\n     */\n    getClippedInput_(t, samples) {\n      if (0 <= t && t < this.length_) {\n        return samples[t];\n      }\n      return 0;\n    }\n  };\n  function window_(x) {\n    return Math.exp(-x / 2 * x / 2);\n  }\n  function sincKernel_(window2) {\n    return function(x) {\n      return sinc_(x) * window2(x);\n    };\n  }\n  function sinc_(x) {\n    if (x === 0) {\n      return 1;\n    }\n    return Math.sin(Math.PI * x) / (Math.PI * x);\n  }\n\n  // node_modules/wavefile/lib/resampler/fir-lpf.js\n  var FIRLPF = class {\n    /**\n     * @param {number} order The order of the filter.\n     * @param {number} sampleRate The sample rate.\n     * @param {number} cutOff The cut off frequency.\n     */\n    constructor(order, sampleRate, cutOff) {\n      let omega = 2 * Math.PI * cutOff / sampleRate;\n      let dc2 = 0;\n      this.filters = [];\n      for (let i = 0; i <= order; i++) {\n        if (i - order / 2 === 0) {\n          this.filters[i] = omega;\n        } else {\n          this.filters[i] = Math.sin(omega * (i - order / 2)) / (i - order / 2);\n          this.filters[i] *= 0.54 - 0.46 * Math.cos(2 * Math.PI * i / order);\n        }\n        dc2 = dc2 + this.filters[i];\n      }\n      for (let i = 0; i <= order; i++) {\n        this.filters[i] /= dc2;\n      }\n      this.z = this.initZ_();\n    }\n    /**\n     * @param {number} sample A sample of a sequence.\n     * @return {number}\n     */\n    filter(sample) {\n      this.z.buf[this.z.pointer] = sample;\n      let out = 0;\n      for (let i = 0, len = this.z.buf.length; i < len; i++) {\n        out += this.filters[i] * this.z.buf[(this.z.pointer + i) % this.z.buf.length];\n      }\n      this.z.pointer = (this.z.pointer + 1) % this.z.buf.length;\n      return out;\n    }\n    /**\n     * Reset the filter.\n     */\n    reset() {\n      this.z = this.initZ_();\n    }\n    /**\n     * Return the default value for z.\n     * @private\n     */\n    initZ_() {\n      let r = [];\n      for (let i = 0; i < this.filters.length - 1; i++) {\n        r.push(0);\n      }\n      return {\n        buf: r,\n        pointer: 0\n      };\n    }\n  };\n\n  // node_modules/wavefile/lib/resampler/butterworth-lpf.js\n  var ButterworthLPF = class {\n    /**\n     * @param {number} order The order of the filter.\n     * @param {number} sampleRate The sample rate.\n     * @param {number} cutOff The cut off frequency.\n     */\n    constructor(order, sampleRate, cutOff) {\n      let filters = [];\n      for (let i = 0; i < order; i++) {\n        filters.push(this.getCoeffs_({\n          Fs: sampleRate,\n          Fc: cutOff,\n          Q: 0.5 / Math.sin(Math.PI / (order * 2) * (i + 0.5))\n        }));\n      }\n      this.stages = [];\n      for (let i = 0; i < filters.length; i++) {\n        this.stages[i] = {\n          b0: filters[i].b[0],\n          b1: filters[i].b[1],\n          b2: filters[i].b[2],\n          a1: filters[i].a[0],\n          a2: filters[i].a[1],\n          k: filters[i].k,\n          z: [0, 0]\n        };\n      }\n    }\n    /**\n     * @param {number} sample A sample of a sequence.\n     * @return {number}\n     */\n    filter(sample) {\n      let out = sample;\n      for (let i = 0, len = this.stages.length; i < len; i++) {\n        out = this.runStage_(i, out);\n      }\n      return out;\n    }\n    /**\n     * @param {!Object} params The filter params.\n     * @return {!Object}\n     */\n    getCoeffs_(params) {\n      let coeffs = {};\n      coeffs.a = [];\n      coeffs.b = [];\n      let p = this.preCalc_(params, coeffs);\n      coeffs.k = 1;\n      coeffs.b.push((1 - p.cw) / (2 * p.a0));\n      coeffs.b.push(2 * coeffs.b[0]);\n      coeffs.b.push(coeffs.b[0]);\n      return coeffs;\n    }\n    /**\n     * @param {!Object} params The filter params.\n     * @param {!Object} coeffs The coefficients template.\n     * @return {!Object}\n     */\n    preCalc_(params, coeffs) {\n      let pre = {};\n      let w = 2 * Math.PI * params.Fc / params.Fs;\n      pre.alpha = Math.sin(w) / (2 * params.Q);\n      pre.cw = Math.cos(w);\n      pre.a0 = 1 + pre.alpha;\n      coeffs.a0 = pre.a0;\n      coeffs.a.push(-2 * pre.cw / pre.a0);\n      coeffs.k = 1;\n      coeffs.a.push((1 - pre.alpha) / pre.a0);\n      return pre;\n    }\n    /**\n     * @param {number} i The stage index.\n     * @param {number} sample The sample.\n     * @return {number}\n     */\n    runStage_(i, sample) {\n      let temp = sample * this.stages[i].k - this.stages[i].a1 * this.stages[i].z[0] - this.stages[i].a2 * this.stages[i].z[1];\n      let out = this.stages[i].b0 * temp + this.stages[i].b1 * this.stages[i].z[0] + this.stages[i].b2 * this.stages[i].z[1];\n      this.stages[i].z[1] = this.stages[i].z[0];\n      this.stages[i].z[0] = temp;\n      return out;\n    }\n    /**\n     * Reset the filter.\n     */\n    reset() {\n      for (let i = 0; i < this.stages.length; i++) {\n        this.stages[i].z = [0, 0];\n      }\n    }\n  };\n\n  // node_modules/wavefile/lib/resampler/index.js\n  var DEFAULT_LPF_USE = {\n    \"point\": false,\n    \"linear\": false,\n    \"cubic\": true,\n    \"sinc\": true\n  };\n  var DEFAULT_LPF_ORDER = {\n    \"IIR\": 16,\n    \"FIR\": 71\n  };\n  var DEFAULT_LPF = {\n    \"IIR\": ButterworthLPF,\n    \"FIR\": FIRLPF\n  };\n  function resample(samples, oldSampleRate, sampleRate, options = null) {\n    options = options || {};\n    let rate = (sampleRate - oldSampleRate) / oldSampleRate + 1;\n    let newSamples = new Float64Array(samples.length * rate);\n    options.method = options.method || \"cubic\";\n    let interpolator = new Interpolator(\n      samples.length,\n      newSamples.length,\n      {\n        method: options.method,\n        tension: options.tension || 0,\n        sincFilterSize: options.sincFilterSize || 6,\n        sincWindow: options.sincWindow || void 0,\n        clip: options.clip || \"mirror\"\n      }\n    );\n    if (options.LPF === void 0) {\n      options.LPF = DEFAULT_LPF_USE[options.method];\n    }\n    if (options.LPF) {\n      options.LPFType = options.LPFType || \"IIR\";\n      const LPF = DEFAULT_LPF[options.LPFType];\n      if (sampleRate > oldSampleRate) {\n        let filter = new LPF(\n          options.LPForder || DEFAULT_LPF_ORDER[options.LPFType],\n          sampleRate,\n          oldSampleRate / 2\n        );\n        upsample_(\n          samples,\n          newSamples,\n          interpolator,\n          filter\n        );\n      } else {\n        let filter = new LPF(\n          options.LPForder || DEFAULT_LPF_ORDER[options.LPFType],\n          oldSampleRate,\n          sampleRate / 2\n        );\n        downsample_(\n          samples,\n          newSamples,\n          interpolator,\n          filter\n        );\n      }\n    } else {\n      resample_(samples, newSamples, interpolator);\n    }\n    return newSamples;\n  }\n  function resample_(samples, newSamples, interpolator) {\n    for (let i = 0, len = newSamples.length; i < len; i++) {\n      newSamples[i] = interpolator.interpolate(i, samples);\n    }\n  }\n  function upsample_(samples, newSamples, interpolator, filter) {\n    for (let i = 0, len = newSamples.length; i < len; i++) {\n      newSamples[i] = filter.filter(interpolator.interpolate(i, samples));\n    }\n    filter.reset();\n    for (let i = newSamples.length - 1; i >= 0; i--) {\n      newSamples[i] = filter.filter(newSamples[i]);\n    }\n  }\n  function downsample_(samples, newSamples, interpolator, filter) {\n    for (let i = 0, len = samples.length; i < len; i++) {\n      samples[i] = filter.filter(samples[i]);\n    }\n    filter.reset();\n    for (let i = samples.length - 1; i >= 0; i--) {\n      samples[i] = filter.filter(samples[i]);\n    }\n    resample_(samples, newSamples, interpolator);\n  }\n\n  // node_modules/wavefile/lib/wavefile-converter.js\n  var WaveFileConverter = class extends WaveFileCueEditor {\n    /**\n     * Force a file as RIFF.\n     */\n    toRIFF() {\n      let output = new Float64Array(\n        outputSize_(this.data.samples.length, this.dataType.bits / 8)\n      );\n      unpackArrayTo(\n        this.data.samples,\n        this.dataType,\n        output,\n        0,\n        this.data.samples.length\n      );\n      this.fromExisting_(\n        this.fmt.numChannels,\n        this.fmt.sampleRate,\n        this.bitDepth,\n        output,\n        { container: \"RIFF\" }\n      );\n    }\n    /**\n     * Force a file as RIFX.\n     */\n    toRIFX() {\n      let output = new Float64Array(\n        outputSize_(this.data.samples.length, this.dataType.bits / 8)\n      );\n      unpackArrayTo(\n        this.data.samples,\n        this.dataType,\n        output,\n        0,\n        this.data.samples.length\n      );\n      this.fromExisting_(\n        this.fmt.numChannels,\n        this.fmt.sampleRate,\n        this.bitDepth,\n        output,\n        { container: \"RIFX\" }\n      );\n    }\n    /**\n     * Encode a 16-bit wave file as 4-bit IMA ADPCM.\n     * @throws {Error} If sample rate is not 8000.\n     * @throws {Error} If number of channels is not 1.\n     */\n    toIMAADPCM() {\n      if (this.fmt.sampleRate !== 8e3) {\n        throw new Error(\n          \"Only 8000 Hz files can be compressed as IMA-ADPCM.\"\n        );\n      } else if (this.fmt.numChannels !== 1) {\n        throw new Error(\n          \"Only mono files can be compressed as IMA-ADPCM.\"\n        );\n      } else {\n        this.assure16Bit_();\n        let output = new Int16Array(\n          outputSize_(this.data.samples.length, 2)\n        );\n        unpackArrayTo(\n          this.data.samples,\n          this.dataType,\n          output,\n          0,\n          this.data.samples.length\n        );\n        this.fromExisting_(\n          this.fmt.numChannels,\n          this.fmt.sampleRate,\n          \"4\",\n          encode2(output),\n          { container: this.correctContainer_() }\n        );\n      }\n    }\n    /**\n     * Decode a 4-bit IMA ADPCM wave file as a 16-bit wave file.\n     * @param {string=} [bitDepthCode='16'] The new bit depth of the samples.\n     *    One of '8' ... '32' (integers), '32f' or '64' (floats).\n     */\n    fromIMAADPCM(bitDepthCode = \"16\") {\n      this.fromExisting_(\n        this.fmt.numChannels,\n        this.fmt.sampleRate,\n        \"16\",\n        decode2(this.data.samples, this.fmt.blockAlign),\n        { container: this.correctContainer_() }\n      );\n      if (bitDepthCode != \"16\") {\n        this.toBitDepth(bitDepthCode);\n      }\n    }\n    /**\n     * Encode a 16-bit wave file as 8-bit A-Law.\n     */\n    toALaw() {\n      this.assure16Bit_();\n      let output = new Int16Array(\n        outputSize_(this.data.samples.length, 2)\n      );\n      unpackArrayTo(\n        this.data.samples,\n        this.dataType,\n        output,\n        0,\n        this.data.samples.length\n      );\n      this.fromExisting_(\n        this.fmt.numChannels,\n        this.fmt.sampleRate,\n        \"8a\",\n        encode3(output),\n        { container: this.correctContainer_() }\n      );\n    }\n    /**\n     * Decode a 8-bit A-Law wave file into a 16-bit wave file.\n     * @param {string=} [bitDepthCode='16'] The new bit depth of the samples.\n     *    One of '8' ... '32' (integers), '32f' or '64' (floats).\n     */\n    fromALaw(bitDepthCode = \"16\") {\n      this.fromExisting_(\n        this.fmt.numChannels,\n        this.fmt.sampleRate,\n        \"16\",\n        decode3(this.data.samples),\n        { container: this.correctContainer_() }\n      );\n      if (bitDepthCode != \"16\") {\n        this.toBitDepth(bitDepthCode);\n      }\n    }\n    /**\n     * Encode 16-bit wave file as 8-bit mu-Law.\n     */\n    toMuLaw() {\n      this.assure16Bit_();\n      let output = new Int16Array(\n        outputSize_(this.data.samples.length, 2)\n      );\n      unpackArrayTo(\n        this.data.samples,\n        this.dataType,\n        output,\n        0,\n        this.data.samples.length\n      );\n      this.fromExisting_(\n        this.fmt.numChannels,\n        this.fmt.sampleRate,\n        \"8m\",\n        encode4(output),\n        { container: this.correctContainer_() }\n      );\n    }\n    /**\n     * Decode a 8-bit mu-Law wave file into a 16-bit wave file.\n     * @param {string=} [bitDepthCode='16'] The new bit depth of the samples.\n     *    One of '8' ... '32' (integers), '32f' or '64' (floats).\n     */\n    fromMuLaw(bitDepthCode = \"16\") {\n      this.fromExisting_(\n        this.fmt.numChannels,\n        this.fmt.sampleRate,\n        \"16\",\n        decode4(this.data.samples),\n        { container: this.correctContainer_() }\n      );\n      if (bitDepthCode != \"16\") {\n        this.toBitDepth(bitDepthCode);\n      }\n    }\n    /**\n     * Change the bit depth of the samples.\n     * @param {string} newBitDepth The new bit depth of the samples.\n     *    One of '8' ... '32' (integers), '32f' or '64' (floats)\n     * @param {boolean=} [changeResolution=true] A boolean indicating if the\n     *    resolution of samples should be actually changed or not.\n     * @throws {Error} If the bit depth is not valid.\n     */\n    toBitDepth(newBitDepth, changeResolution = true) {\n      let toBitDepth = newBitDepth;\n      let thisBitDepth = this.bitDepth;\n      if (!changeResolution) {\n        if (newBitDepth != \"32f\") {\n          toBitDepth = this.dataType.bits.toString();\n        }\n        thisBitDepth = \"\" + this.dataType.bits;\n      }\n      this.assureUncompressed_();\n      let samples = this.getSamples(true);\n      let newSamples = new Float64Array(samples.length);\n      changeBitDepth(samples, thisBitDepth, newSamples, toBitDepth);\n      this.fromExisting_(\n        this.fmt.numChannels,\n        this.fmt.sampleRate,\n        newBitDepth,\n        newSamples,\n        { container: this.correctContainer_() }\n      );\n    }\n    /**\n     * Convert the sample rate of the file.\n     * @param {number} sampleRate The target sample rate.\n     * @param {Object=} options The extra configuration, if needed.\n     */\n    toSampleRate(sampleRate, options) {\n      this.validateResample_(sampleRate);\n      let samples = this.getSamples();\n      let newSamples = [];\n      if (samples.constructor === Float64Array) {\n        newSamples = resample(samples, this.fmt.sampleRate, sampleRate, options);\n      } else {\n        for (let i = 0; i < samples.length; i++) {\n          newSamples.push(resample(\n            samples[i],\n            this.fmt.sampleRate,\n            sampleRate,\n            options\n          ));\n        }\n      }\n      this.fromExisting_(\n        this.fmt.numChannels,\n        sampleRate,\n        this.bitDepth,\n        newSamples,\n        { \"container\": this.correctContainer_() }\n      );\n    }\n    /**\n     * Validate the conditions for resampling.\n     * @param {number} sampleRate The target sample rate.\n     * @throws {Error} If the file cant be resampled.\n     * @private\n     */\n    validateResample_(sampleRate) {\n      if (!validateSampleRate(\n        this.fmt.numChannels,\n        this.fmt.bitsPerSample,\n        sampleRate\n      )) {\n        throw new Error(\"Invalid sample rate.\");\n      } else if ([\"4\", \"8a\", \"8m\"].indexOf(this.bitDepth) > -1) {\n        throw new Error(\n          \"wavefile can't change the sample rate of compressed files.\"\n        );\n      }\n    }\n    /**\n     * Make the file 16-bit if it is not.\n     * @private\n     */\n    assure16Bit_() {\n      this.assureUncompressed_();\n      if (this.bitDepth != \"16\") {\n        this.toBitDepth(\"16\");\n      }\n    }\n    /**\n     * Uncompress the samples in case of a compressed file.\n     * @private\n     */\n    assureUncompressed_() {\n      if (this.bitDepth == \"8a\") {\n        this.fromALaw();\n      } else if (this.bitDepth == \"8m\") {\n        this.fromMuLaw();\n      } else if (this.bitDepth == \"4\") {\n        this.fromIMAADPCM();\n      }\n    }\n    /**\n     * Return 'RIFF' if the container is 'RF64', the current container name\n     * otherwise. Used to enforce 'RIFF' when RF64 is not allowed.\n     * @return {string}\n     * @private\n     */\n    correctContainer_() {\n      return this.container == \"RF64\" ? \"RIFF\" : this.container;\n    }\n    /**\n     * Set up the WaveFileCreator object based on the arguments passed.\n     * This method only reset the fmt , fact, ds64 and data chunks.\n     * @param {number} numChannels The number of channels\n     *    (Integer numbers: 1 for mono, 2 stereo and so on).\n     * @param {number} sampleRate The sample rate.\n     *    Integer numbers like 8000, 44100, 48000, 96000, 192000.\n     * @param {string} bitDepthCode The audio bit depth code.\n     *    One of '4', '8', '8a', '8m', '16', '24', '32', '32f', '64'\n     *    or any value between '8' and '32' (like '12').\n     * @param {!(Array|TypedArray)} samples\n     *    The samples. Must be in the correct range according to the bit depth.\n     * @param {Object} options Used to define the container. Uses RIFF by default.\n     * @throws {Error} If any argument does not meet the criteria.\n     * @private\n     */\n    fromExisting_(numChannels, sampleRate, bitDepthCode, samples, options) {\n      let tmpWav = new WaveFileCueEditor();\n      Object.assign(this.fmt, tmpWav.fmt);\n      Object.assign(this.fact, tmpWav.fact);\n      Object.assign(this.ds64, tmpWav.ds64);\n      Object.assign(this.data, tmpWav.data);\n      this.newWavFile_(numChannels, sampleRate, bitDepthCode, samples, options);\n    }\n  };\n  function outputSize_(byteLen, byteOffset) {\n    let outputSize = byteLen / byteOffset;\n    if (outputSize % 2) {\n      outputSize++;\n    }\n    return outputSize;\n  }\n\n  // node_modules/wavefile/index.js\n  var WaveFile = class extends WaveFileConverter {\n    /**\n     * @param {Uint8Array=} wav A wave file buffer.\n     * @throws {Error} If container is not RIFF, RIFX or RF64.\n     * @throws {Error} If format is not WAVE.\n     * @throws {Error} If no 'fmt ' chunk is found.\n     * @throws {Error} If no 'data' chunk is found.\n     */\n    constructor(wav) {\n      super();\n      if (wav) {\n        this.fromBuffer(wav);\n      }\n    }\n    /**\n     * Use a .wav file encoded as a base64 string to load the WaveFile object.\n     * @param {string} base64String A .wav file as a base64 string.\n     * @throws {Error} If any property of the object appears invalid.\n     */\n    fromBase64(base64String) {\n      this.fromBuffer(decode(base64String));\n    }\n    /**\n     * Return a base64 string representig the WaveFile object as a .wav file.\n     * @return {string} A .wav file as a base64 string.\n     * @throws {Error} If any property of the object appears invalid.\n     */\n    toBase64() {\n      return encode(this.toBuffer());\n    }\n    /**\n     * Return a DataURI string representig the WaveFile object as a .wav file.\n     * The return of this method can be used to load the audio in browsers.\n     * @return {string} A .wav file as a DataURI.\n     * @throws {Error} If any property of the object appears invalid.\n     */\n    toDataURI() {\n      return \"data:audio/wav;base64,\" + this.toBase64();\n    }\n    /**\n     * Use a .wav file encoded as a DataURI to load the WaveFile object.\n     * @param {string} dataURI A .wav file as DataURI.\n     * @throws {Error} If any property of the object appears invalid.\n     */\n    fromDataURI(dataURI) {\n      this.fromBase64(dataURI.replace(\"data:audio/wav;base64,\", \"\"));\n    }\n  };\n\n  // src/utils/media/media.ts\n  function processAudio(data) {\n    let wav = new WaveFile();\n    wav.fromBase64(data);\n    wav.toBitDepth(\"32f\");\n    wav.toSampleRate(16e3);\n    let samples = wav.getSamples();\n    if (Array.isArray(samples) && samples.length > 1) {\n      const SCALING_FACTOR = Math.sqrt(2);\n      for (let i = 0; i < samples[0].length; ++i) {\n        samples[0][i] = SCALING_FACTOR * (samples[0][i] + samples[1][i]) / 2;\n      }\n      samples = samples[0];\n    }\n    return samples;\n  }\n\n  // src/providers/transformers-js/worker.ts\n  var process2 = async ({ data }) => {\n    const {\n      input,\n      task,\n      dtype,\n      model,\n      ...rest\n    } = data;\n    try {\n      let pipeInput;\n      if (task === \"automatic-speech-recognition\") {\n        pipeInput = processAudio(input);\n      }\n      if (pipeInput === void 0) {\n        throw new Error(\"invalid task\");\n      }\n      for (const key in rest) {\n        if (rest[key] === \"true\") {\n          rest[key] = true;\n        }\n        if (rest[key] === \"false\") {\n          rest[key] = false;\n        }\n      }\n      const { pipeline } = await Promise.resolve().then(() => (init_transformers_web(), transformers_web_exports));\n      const pipe = await pipeline(task, model, {\n        dtype,\n        device: \"webgpu\"\n      });\n      const result = await pipe(pipeInput, rest);\n      await pipe.dispose();\n      self.postMessage(result);\n    } catch (e) {\n      console.error(\"Erro no worker:\", e);\n      self.postMessage({ error: e instanceof Error ? e.message : String(e) });\n    }\n  };\n  self.onmessage = (event) => {\n    process2(event);\n  };\n})();\n/*! Bundled license information:\n\nonnxruntime-web/dist/ort.bundle.min.mjs:\n  (*!\n   * ONNX Runtime Web v1.22.0-dev.20250409-89f8206ba4\n   * Copyright (c) Microsoft Corporation. All rights reserved.\n   * Licensed under the MIT License.\n   *)\n  (**\n   * @license\n   * Copyright 2021 Google LLC. All Rights Reserved.\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   * =============================================================================\n   *)\n  (**\n   * @license\n   * Copyright 2020 Google LLC. All Rights Reserved.\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   * =============================================================================\n   *)\n  (**\n   * @license\n   * Copyright 2019 Google LLC. All Rights Reserved.\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   * http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   * =============================================================================\n   *)\n\n@huggingface/transformers/dist/transformers.web.js:\n  (*!*****************************!*\\\n    !*** ./src/transformers.js ***!\n    \\*****************************)\n*/\n";
export default workerCode;
